/**
 * 哈希函数模块 - 定义了加密哈希函数的基本接口
 * 
 * 哈希函数是密码学中非常重要的基础工具，它可以将任意长度的输入数据转换为固定长度的输出（称为哈希值或摘要）。
 * 哈希函数具有以下特性：
 * 1. 运算速度快 - 计算哈希值的速度相对较快
 * 2. 单向性 - 从哈希值无法反推出原始数据
 * 3. 抗碰撞性 - 很难找到两个不同的输入产生相同的哈希值
 * 4. 雪崩效应 - 输入的微小变化会导致输出的显著不同
 * 
 * 哈希函数广泛应用于：
 * - 数据完整性校验
 * - 密码存储（结合加盐技术）
 * - 数字签名
 * - 消息认证码（如HMAC）
 */

/**
 * Hash接口 - 定义了哈希函数实例的通用方法和属性
 * 
 * 这个接口是所有哈希算法实现的基础，无论是SHA-1、SHA-2还是SHA-3系列，
 * 它们都需要实现这个接口来保证统一的使用方式。
 */
export interface Hash {
	/**
	 * 哈希算法的块大小（以字节为单位）
	 * 
	 * 块大小是哈希算法在内部处理数据时使用的基本单位。
	 * 例如：SHA-256的块大小是64字节，SHA-512的块大小是128字节。
	 * 这个参数在实现HMAC等基于哈希的算法时很重要。
	 */
	blockSize: number;
	
	/**
	 * 哈希输出的大小（以字节为单位）
	 * 
	 * 这是哈希函数生成的摘要长度。
	 * 例如：SHA-256生成32字节（256位）的哈希值，SHA-512生成64字节（512位）的哈希值。
	 * 哈希值的长度越长，通常抗碰撞性越强。
	 */
	size: number;
	
	/**
	 * 更新哈希计算的方法，用于输入新的数据块
	 * 
	 * 这个方法允许逐块处理数据，非常适合处理大型数据或流式数据。
	 * 你可以多次调用update方法，最终结果与一次性处理全部数据相同。
	 * 
	 * 举例：
	 * hash.update(chunk1);
	 * hash.update(chunk2);
	 * 等同于：
	 * 将chunk1和chunk2合并后一次性处理
	 * 
	 * @param data 要计算哈希值的数据块（二进制格式）
	 */
	update: (data: Uint8Array) => void;
	
	/**
	 * 完成哈希计算并返回最终的哈希值
	 * 
	 * 调用此方法后，哈希计算完成，返回最终的哈希值（摘要）。
	 * 在某些哈希实现中，调用digest后哈希对象会重置，而在其他实现中可能不再可用。
	 * 
	 * @returns 计算得到的哈希值（二进制格式）
	 */
	digest: () => Uint8Array;
}

/**
 * HashAlgorithm接口 - 哈希算法的构造函数类型
 * 
 * 这个接口定义了创建哈希函数实例的工厂模式。
 * 每种哈希算法（如SHA-256、SHA-512等）都会提供一个实现了这个接口的构造函数。
 * 
 * 使用示例：
 * const SHA256: HashAlgorithm = ...; // SHA-256算法的构造函数
 * const hash = new SHA256();         // 创建一个新的SHA-256哈希实例
 * hash.update(data);                 // 处理数据
 * const digest = hash.digest();      // 获取哈希结果
 */
export interface HashAlgorithm {
	new (): Hash;
}
