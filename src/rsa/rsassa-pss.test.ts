// Tests based on NIST FIPS-2 RSASSA-PSS signature verification test vectors
// https://csrc.nist.gov/Projects/Cryptographic-Algorithm-Validation-Program/Digital-Signatures

import { expect, test } from "vitest";
import { RSAPublicKey, verifyRSASSAPSSSignature } from "./index.js";
import { SHA1 } from "../sha1/index.js";
import { SHA224, SHA256, SHA384, SHA512 } from "../sha2/index.js";

test("verify", () => {
	let n: bigint;
	let e: bigint;
	let message: Uint8Array;
	let signature: Uint8Array;
	let saltLength: number;
	n =
		0xec996bc93e81094436fd5fc2eef511782eb40fe60cc6f27f24bc8728d686537f1caa82cfcfa5c323604b6918d7cd0318d98395c855c7c7ada6fc447f192283cdc81e7291e232336019d4dac12356b93a349883cd2c0a7d2eae9715f1cc6dd657cea5cb2c46ce6468794b326b33f1bff61a00fa72931345ca6768365e1eb906ddn;
	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090c6d3n;
	message = new Uint8Array([
		0xf0, 0xb8, 0x3b, 0x8f, 0xac, 0xf6, 0x69, 0x8d, 0x56, 0x4b, 0xad, 0x33, 0x4f, 0xe4, 0x94, 0xab,
		0xa3, 0xee, 0xa4, 0x2f, 0x3c, 0xfc, 0x37, 0x84, 0x55, 0xa9, 0x89, 0xc4, 0x31, 0x7e, 0x0f, 0x61,
		0x0c, 0x16, 0x0a, 0x67, 0x52, 0x7f, 0x5d, 0x01, 0x0f, 0xe4, 0x9b, 0x3f, 0xa6, 0x69, 0x65, 0x16,
		0xc7, 0x57, 0xf3, 0xa9, 0x9b, 0x79, 0xf0, 0xc6, 0x41, 0xc6, 0x8b, 0xb4, 0x7e, 0x3f, 0xcb, 0x2c,
		0xb0, 0x1b, 0x22, 0xa5, 0x04, 0x22, 0x46, 0xd5, 0xe9, 0x57, 0x3c, 0x74, 0xc5, 0xd9, 0xb5, 0x43,
		0xe6, 0x0b, 0x9e, 0x4d, 0xbb, 0xf3, 0xf3, 0x6c, 0x44, 0xe0, 0xd4, 0x10, 0xc7, 0x50, 0xda, 0x3c,
		0xc5, 0x10, 0xab, 0xd1, 0x2c, 0xa5, 0xcc, 0x0f, 0xce, 0xeb, 0xb7, 0x59, 0x12, 0xfc, 0x2e, 0x38,
		0xe9, 0x53, 0xce, 0xa3, 0x04, 0x32, 0xe7, 0x7e, 0x45, 0x40, 0x8b, 0x60, 0x73, 0x77, 0xe5, 0x99
	]);
	signature = new Uint8Array([
		0x79, 0x73, 0x35, 0x99, 0x08, 0xf1, 0xcb, 0x2f, 0x7e, 0xb3, 0x1e, 0x19, 0xf7, 0x65, 0x5e, 0x81,
		0x17, 0x26, 0x1e, 0x17, 0xc4, 0x3c, 0x8c, 0xe5, 0xb1, 0x2b, 0xb8, 0x61, 0xb5, 0x41, 0xfe, 0xa1,
		0x68, 0xe0, 0x77, 0xb4, 0x1c, 0xf1, 0x1a, 0x95, 0xef, 0x7a, 0x80, 0xed, 0xf5, 0xf5, 0x90, 0x39,
		0x87, 0xe5, 0x9d, 0x4b, 0x9f, 0x11, 0x5c, 0xdb, 0x3b, 0x63, 0x94, 0xeb, 0x0d, 0xcb, 0x6f, 0x58,
		0x69, 0xbe, 0x0f, 0x89, 0x60, 0x87, 0xbe, 0xc6, 0x12, 0x09, 0x39, 0x65, 0xba, 0x02, 0x04, 0x49,
		0xec, 0xa3, 0x6e, 0xa7, 0x4a, 0xcf, 0xfe, 0x1e, 0xb9, 0xf4, 0x2e, 0x4e, 0xf0, 0x32, 0x47, 0xcc,
		0xcb, 0xf9, 0x95, 0x57, 0x07, 0x3a, 0xd9, 0x9a, 0x14, 0x41, 0x72, 0x66, 0x9e, 0x49, 0x29, 0x69,
		0x80, 0xc9, 0xae, 0xb5, 0xfc, 0x7f, 0xa6, 0x46, 0x60, 0xa6, 0x80, 0xc3, 0x20, 0xed, 0xb2, 0x0d
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090c6d3n;
	message = new Uint8Array([
		0xa4, 0xce, 0xb8, 0x1c, 0x34, 0x12, 0x37, 0xfa, 0xcd, 0xf5, 0xc8, 0xda, 0xb1, 0xf5, 0xfd, 0xd7,
		0x25, 0x98, 0x59, 0x39, 0xdf, 0x0b, 0x62, 0x3c, 0xbb, 0x08, 0xf7, 0x14, 0xaf, 0xfc, 0xe4, 0x2d,
		0x01, 0x6a, 0xb4, 0xb7, 0xb7, 0x8a, 0xc7, 0x62, 0x50, 0x37, 0xa4, 0x66, 0xb1, 0x08, 0x8f, 0xc7,
		0x62, 0xbc, 0x5f, 0xd7, 0xfa, 0xdb, 0x8a, 0xfc, 0xd8, 0x9a, 0x82, 0xb3, 0x14, 0xff, 0x44, 0xd5,
		0xb5, 0x47, 0x2d, 0x1a, 0x25, 0x85, 0x10, 0xdb, 0xe2, 0x8b, 0x87, 0x1c, 0x75, 0x0d, 0x86, 0xc9,
		0xa8, 0x04, 0x36, 0x40, 0xf4, 0x51, 0x00, 0x10, 0x39, 0xa3, 0xe7, 0x00, 0xb2, 0x9a, 0x1c, 0x54,
		0x27, 0x2d, 0xcc, 0x4b, 0x64, 0x49, 0x3d, 0xec, 0xeb, 0xba, 0x19, 0x02, 0xe6, 0x4f, 0x0a, 0x66,
		0x5f, 0x39, 0x86, 0x7c, 0xb3, 0xb5, 0xed, 0x00, 0x44, 0xeb, 0xd1, 0x03, 0x6f, 0x15, 0x94, 0x30
	]);
	signature = new Uint8Array([
		0xc1, 0x2a, 0xd0, 0xa8, 0x0b, 0x11, 0x6c, 0xd6, 0x5a, 0x8c, 0x81, 0xaa, 0xdd, 0x81, 0xf0, 0x5b,
		0xde, 0x5d, 0x6a, 0xdc, 0x60, 0xe4, 0xde, 0xff, 0xa3, 0xd7, 0xc6, 0x8e, 0xd8, 0xdf, 0x53, 0x14,
		0xc9, 0x8b, 0x70, 0x97, 0x9c, 0x4c, 0xe5, 0xf9, 0xe1, 0xc3, 0xf0, 0xe5, 0x2f, 0xab, 0x15, 0x72,
		0x5c, 0x4f, 0x22, 0xdc, 0x0c, 0x4b, 0x18, 0x2a, 0x1d, 0x7c, 0xd8, 0x1d, 0xc2, 0x4f, 0x54, 0xe7,
		0x68, 0xdd, 0x25, 0x18, 0xa6, 0xce, 0xe3, 0x95, 0x29, 0x22, 0xe6, 0x53, 0xb8, 0xfe, 0xaa, 0x32,
		0x74, 0x5f, 0x92, 0xea, 0x01, 0x90, 0x7a, 0xa4, 0xff, 0x2c, 0x5f, 0x64, 0xed, 0x9b, 0xad, 0x46,
		0x1e, 0x28, 0x25, 0xea, 0xfd, 0xc3, 0x11, 0x58, 0xfa, 0xfd, 0x38, 0xaf, 0xb3, 0x9f, 0xa1, 0x0f,
		0x5f, 0x83, 0x3f, 0xac, 0xa0, 0x76, 0xc8, 0x77, 0x1c, 0xab, 0xe4, 0x06, 0xbe, 0x6d, 0xf6, 0x48
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090c6d3n;
	message = new Uint8Array([
		0xad, 0xa7, 0xd6, 0xe4, 0x17, 0xda, 0x2c, 0x55, 0xab, 0xa7, 0x68, 0xf6, 0x0d, 0xf4, 0x6b, 0x73,
		0x49, 0x6c, 0xc0, 0x78, 0x66, 0xc7, 0xd2, 0x19, 0x3f, 0x4c, 0x5c, 0x72, 0x8e, 0x94, 0x22, 0x8a,
		0x4a, 0x90, 0xdf, 0x7e, 0x33, 0xce, 0x7e, 0xdb, 0xab, 0xf7, 0x8c, 0x4b, 0xc7, 0x9d, 0xee, 0x74,
		0xa6, 0x33, 0xcf, 0x1d, 0x01, 0x5d, 0xdd, 0x92, 0x04, 0x6b, 0xb5, 0x4a, 0x5c, 0x1f, 0x9b, 0xc8,
		0x92, 0xb7, 0x6f, 0xbf, 0x97, 0x27, 0xdc, 0x79, 0xa0, 0xa7, 0xd3, 0x79, 0x33, 0x6d, 0x38, 0x60,
		0x82, 0xbc, 0xdb, 0x0d, 0xf9, 0x1d, 0xa9, 0x08, 0x13, 0xed, 0x24, 0x21, 0x71, 0x17, 0x10, 0x54,
		0x2d, 0x23, 0x6f, 0xf0, 0x6c, 0x70, 0xb0, 0xf9, 0x32, 0xbd, 0x24, 0xca, 0x7b, 0xee, 0xb1, 0xfe,
		0x87, 0x0d, 0xca, 0x91, 0x75, 0x90, 0x9e, 0x43, 0x13, 0xda, 0x90, 0x3d, 0xf5, 0x04, 0xe8, 0xf7
	]);
	signature = new Uint8Array([
		0xdd, 0x45, 0xac, 0x85, 0xaa, 0x56, 0x01, 0x59, 0xb2, 0xb9, 0x89, 0x0c, 0xd6, 0x1b, 0x8c, 0x08,
		0x2b, 0xb0, 0x2b, 0x55, 0x52, 0x9a, 0xfe, 0xc0, 0x5e, 0x7f, 0x3f, 0xc1, 0xd7, 0x3e, 0x30, 0xa0,
		0x9e, 0x0a, 0x7a, 0x42, 0x2c, 0x20, 0xc0, 0x74, 0xbd, 0x25, 0xc1, 0x27, 0x19, 0x24, 0xa9, 0x4d,
		0x75, 0x76, 0xd9, 0x91, 0x25, 0xd9, 0x20, 0x0e, 0x01, 0x90, 0x97, 0x9d, 0xd4, 0x23, 0x8d, 0xb8,
		0xbd, 0xd2, 0x86, 0xeb, 0xa5, 0xd3, 0xe4, 0x6a, 0x48, 0xfa, 0x2b, 0x18, 0xe4, 0x3d, 0x79, 0x26,
		0xac, 0xa3, 0x31, 0x2e, 0xaa, 0x93, 0x97, 0x07, 0x97, 0xc2, 0x0c, 0x7e, 0x12, 0xa6, 0x4c, 0x47,
		0x85, 0x8d, 0x1d, 0xea, 0xbe, 0x52, 0x60, 0x62, 0x0f, 0x01, 0xee, 0x52, 0x8d, 0x63, 0xe0, 0x73,
		0xf9, 0x0f, 0x50, 0x44, 0xea, 0x92, 0x80, 0x4f, 0x3c, 0x15, 0x00, 0xcc, 0x2b, 0x95, 0x82, 0x89
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c35377n;
	message = new Uint8Array([
		0x68, 0xa5, 0x31, 0x31, 0xf6, 0x49, 0x9d, 0x29, 0x98, 0x01, 0xd8, 0x8d, 0x6d, 0xc3, 0x11, 0xa1,
		0x38, 0x93, 0x4f, 0x1f, 0x58, 0xa5, 0x05, 0x7e, 0xfa, 0xc2, 0xe6, 0x73, 0x8d, 0xec, 0xfa, 0xb9,
		0x76, 0x45, 0xf2, 0x0e, 0x05, 0x2d, 0xb9, 0x7e, 0xa8, 0xab, 0x4b, 0xe3, 0x5f, 0x0e, 0xca, 0xad,
		0x70, 0xd4, 0xcf, 0xdf, 0x5c, 0xca, 0xfe, 0x5a, 0x11, 0x75, 0xdd, 0x5e, 0x61, 0xb1, 0xe6, 0x4e,
		0xb3, 0x98, 0xda, 0xb3, 0xf9, 0xa5, 0x59, 0x84, 0xe2, 0x19, 0xb0, 0xa5, 0x50, 0x9e, 0xf2, 0xad,
		0x0c, 0x2b, 0x4a, 0xec, 0xb9, 0x27, 0x8f, 0xad, 0x06, 0xd1, 0x19, 0xb8, 0x28, 0xdf, 0xd3, 0x1b,
		0x88, 0x65, 0x92, 0x2a, 0xb8, 0xf9, 0xa5, 0xc5, 0xac, 0x15, 0xae, 0xd9, 0x27, 0xbd, 0xb0, 0x29,
		0x73, 0x61, 0x68, 0x4f, 0x55, 0x04, 0xe1, 0xfd, 0x40, 0x9e, 0x43, 0x89, 0xc9, 0xbf, 0xeb, 0xa9
	]);
	signature = new Uint8Array([
		0xe9, 0x55, 0x26, 0x4d, 0x64, 0x40, 0x03, 0xb6, 0x9f, 0x39, 0xf9, 0x55, 0x15, 0x0a, 0x7f, 0x42,
		0xb6, 0x29, 0x08, 0x1b, 0x5c, 0x13, 0x78, 0x7c, 0x7a, 0x9e, 0x2c, 0x98, 0x80, 0x89, 0xb5, 0xe5,
		0x50, 0xad, 0x4b, 0xc1, 0x4e, 0x7e, 0x71, 0xc4, 0x41, 0xdd, 0xb6, 0x9a, 0xfa, 0xd3, 0x9c, 0x56,
		0xf8, 0x11, 0x32, 0x7e, 0x25, 0x27, 0x04, 0x43, 0xcc, 0x09, 0x76, 0xad, 0xc9, 0xff, 0x39, 0x2a,
		0x9e, 0x1d, 0xbf, 0xf4, 0x8f, 0xd9, 0xad, 0xbf, 0x62, 0x63, 0xbe, 0x6e, 0x78, 0xd7, 0xb9, 0x5f,
		0xef, 0xfb, 0xaa, 0x28, 0x79, 0xba, 0x8b, 0x75, 0xe6, 0x7a, 0x97, 0xaa, 0xad, 0x39, 0xd9, 0x21,
		0x1e, 0x56, 0x10, 0xee, 0x36, 0x97, 0x77, 0xd3, 0xf8, 0xff, 0xe3, 0x73, 0xf9, 0xd7, 0xd2, 0x98,
		0x4d, 0x20, 0x9a, 0x93, 0x99, 0xcc, 0x1e, 0x10, 0x5f, 0xff, 0xf0, 0xba, 0xaa, 0xdb, 0xdd, 0x25
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090c6d3n;
	message = new Uint8Array([
		0xa4, 0xda, 0xf4, 0x62, 0x16, 0x76, 0x91, 0x7e, 0x28, 0x49, 0x3a, 0x58, 0x5d, 0x9b, 0xaf, 0xfc,
		0xa3, 0x75, 0x5e, 0x77, 0xe1, 0xf1, 0x8e, 0x3c, 0xcf, 0xb3, 0xde, 0xc6, 0x0a, 0xb8, 0xee, 0x7e,
		0x68, 0x4f, 0x5c, 0xde, 0x88, 0x64, 0xf2, 0xd7, 0xae, 0x04, 0x1d, 0x70, 0xce, 0x1e, 0xa1, 0xb1,
		0xe7, 0x87, 0x8c, 0xbf, 0x93, 0x41, 0x68, 0x48, 0xdb, 0xfd, 0xb5, 0x21, 0x4f, 0xde, 0x97, 0x2e,
		0x57, 0x80, 0xcb, 0x83, 0xc4, 0x39, 0xdf, 0xc8, 0xaa, 0x9f, 0xa3, 0xe2, 0x72, 0x4a, 0xdb, 0xd0,
		0x2b, 0xdb, 0x36, 0xd2, 0x21, 0x3c, 0x84, 0xd1, 0xb1, 0x2a, 0x23, 0xfb, 0x5b, 0xf1, 0xba, 0xae,
		0x19, 0x77, 0x2a, 0x97, 0xef, 0x7c, 0xc2, 0x1b, 0xc4, 0x20, 0xb3, 0xf5, 0x70, 0xa6, 0xc3, 0x21,
		0x16, 0x77, 0x45, 0xf9, 0xb4, 0x6a, 0x48, 0x9f, 0xf8, 0x42, 0x0f, 0x9a, 0x56, 0x79, 0xc1, 0xc4
	]);
	signature = new Uint8Array([
		0x31, 0x9c, 0x62, 0x98, 0x4a, 0xcd, 0x52, 0x42, 0x3e, 0x59, 0xa1, 0x7d, 0x27, 0xd4, 0xec, 0xa7,
		0x72, 0x27, 0x03, 0xb0, 0x54, 0xa7, 0x1a, 0x1e, 0xe5, 0xf7, 0xa2, 0x18, 0xb6, 0xf4, 0xa2, 0x74,
		0x63, 0x2e, 0xaf, 0x8e, 0xf2, 0xa5, 0x77, 0xa7, 0xe8, 0xa7, 0xf6, 0x54, 0xb8, 0xde, 0xb1, 0xec,
		0x9b, 0x1e, 0x52, 0x9c, 0xf9, 0x34, 0x59, 0xcc, 0x8a, 0xf4, 0xc6, 0xdf, 0x6f, 0xff, 0xab, 0xc3,
		0xed, 0xde, 0xd0, 0xc4, 0x21, 0x60, 0x4e, 0xa2, 0xaa, 0xe3, 0x58, 0x36, 0xb0, 0x5f, 0xd9, 0xde,
		0x7a, 0xbd, 0x78, 0x54, 0x0d, 0x45, 0xfd, 0x6d, 0x0e, 0xa7, 0x14, 0x73, 0x3a, 0x34, 0x27, 0xb0,
		0x0d, 0x9d, 0x64, 0x04, 0xdb, 0x8e, 0xde, 0x4a, 0x27, 0x93, 0x2b, 0x47, 0xd8, 0x82, 0x43, 0xee,
		0xfc, 0xbf, 0xfe, 0x1e, 0x55, 0x84, 0x18, 0x23, 0xde, 0xf3, 0x0c, 0x57, 0xde, 0x75, 0x62, 0xcf
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(true);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090c6d3n;
	message = new Uint8Array([
		0x34, 0x0e, 0xff, 0x60, 0x92, 0x2f, 0x2d, 0x65, 0x15, 0x2c, 0xde, 0x96, 0xf5, 0x72, 0x9f, 0xdd,
		0xc5, 0x54, 0x43, 0x4d, 0x9a, 0xa3, 0x2b, 0x59, 0x6f, 0x7f, 0xc5, 0x43, 0xc8, 0x6c, 0x53, 0xd7,
		0x96, 0xa9, 0xee, 0x58, 0x5b, 0xbd, 0xca, 0xbb, 0x8e, 0x52, 0xbb, 0x13, 0x41, 0x46, 0xf8, 0x4d,
		0x01, 0x00, 0x20, 0x1d, 0xfe, 0x00, 0x7a, 0x38, 0x6c, 0xba, 0x81, 0xc4, 0x28, 0xa5, 0xa0, 0x0c,
		0x9f, 0x8f, 0x3a, 0x79, 0xec, 0x33, 0xed, 0xbe, 0x40, 0x0d, 0x18, 0x52, 0x87, 0x6d, 0x9a, 0x23,
		0x48, 0xcb, 0xdd, 0x89, 0xcd, 0x5a, 0x14, 0x78, 0x85, 0xdf, 0xc0, 0xfb, 0xa6, 0xc4, 0x79, 0xdd,
		0x16, 0x68, 0xeb, 0xa9, 0x8c, 0xba, 0x1f, 0xd6, 0xf3, 0x06, 0xfc, 0x3b, 0x0f, 0x0f, 0x0d, 0xc9,
		0x62, 0x5d, 0x84, 0x78, 0x51, 0xd8, 0x7f, 0x82, 0x83, 0x96, 0x8b, 0xd0, 0x8a, 0xf2, 0x66, 0xb1
	]);
	signature = new Uint8Array([
		0x4d, 0x74, 0x4a, 0x1a, 0xad, 0x0c, 0x4d, 0x76, 0x51, 0x29, 0x02, 0xee, 0xf6, 0x37, 0x53, 0xec,
		0x58, 0xec, 0x3f, 0x5e, 0x23, 0xf9, 0x18, 0x89, 0xfd, 0x67, 0x05, 0xbb, 0x11, 0x1d, 0xb9, 0xc6,
		0x88, 0x58, 0x7c, 0x32, 0x0b, 0x52, 0xe6, 0x59, 0x39, 0xc6, 0x9f, 0x22, 0x96, 0xd9, 0xa4, 0xc0,
		0x1b, 0xc4, 0x50, 0x51, 0x34, 0x86, 0xf8, 0x6a, 0x86, 0x1e, 0x70, 0x6a, 0xbe, 0x25, 0xb4, 0x0a,
		0x8e, 0x3f, 0x51, 0x7a, 0xb5, 0x8e, 0x99, 0xff, 0xaf, 0x6b, 0x8c, 0x4e, 0xfb, 0xf4, 0x4d, 0xdf,
		0xa9, 0x15, 0x03, 0x49, 0xba, 0xf5, 0xda, 0xf0, 0xaf, 0x17, 0xce, 0xcb, 0xbd, 0x99, 0xd0, 0xf5,
		0xaf, 0x87, 0x1e, 0xd8, 0xb1, 0x00, 0x95, 0xb4, 0xa0, 0xd1, 0x4d, 0x3c, 0x8c, 0x4e, 0xcd, 0xf9,
		0xe5, 0x2d, 0x36, 0x1d, 0x21, 0x69, 0x4d, 0xbd, 0x9b, 0xae, 0x7f, 0xa3, 0x95, 0x71, 0x4d, 0x9a
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	n =
		0xf650d9f361cf9cf7c1e99b028f392d545b5dc5999a09d22913a106412adca99b3686b3f8ef5178d1bb9b1504503a5f866b563a58c7dc42d8c8537503be0c181d6d050d47a869bf7830f3c85f0e5fcc910deffe1d914ae2f8d77e66e444c579e99770043af2c7f7d89458730e716f80ed5800f8f9751f6f59bde63b6515c96fa3n;
	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a3db1n;
	message = new Uint8Array([
		0xf0, 0xb8, 0x3b, 0x8f, 0xac, 0xf6, 0x69, 0x8d, 0x56, 0x4b, 0xad, 0x33, 0x4f, 0xe4, 0x94, 0xab,
		0xa3, 0xee, 0xa4, 0x2f, 0x3c, 0xfc, 0x37, 0x84, 0x55, 0xa9, 0x89, 0xc4, 0x31, 0x7e, 0x0f, 0x61,
		0x0c, 0x16, 0x0a, 0x67, 0x52, 0x7f, 0x5d, 0x01, 0x0f, 0xe4, 0x9b, 0x3f, 0xa6, 0x69, 0x65, 0x16,
		0xc7, 0x57, 0xf3, 0xa9, 0x9b, 0x79, 0xf0, 0xc6, 0x41, 0xc6, 0x8b, 0xb4, 0x7e, 0x3f, 0xcb, 0x2c,
		0xb0, 0x1b, 0x22, 0xa5, 0x04, 0x22, 0x46, 0xd5, 0xe9, 0x57, 0x3c, 0x74, 0xc5, 0xd9, 0xb5, 0x43,
		0xe6, 0x0b, 0x9e, 0x4d, 0xbb, 0xf3, 0xf3, 0x6c, 0x44, 0xe0, 0xd4, 0x10, 0xc7, 0x50, 0xda, 0x3c,
		0xc5, 0x10, 0xab, 0xd1, 0x2c, 0xa5, 0xcc, 0x0f, 0xce, 0xeb, 0xb7, 0x59, 0x12, 0xfc, 0x2e, 0x38,
		0xe9, 0x53, 0xce, 0xa3, 0x04, 0x32, 0xe7, 0x7e, 0x45, 0x40, 0x8b, 0x60, 0x73, 0x77, 0xe5, 0x99
	]);
	signature = new Uint8Array([
		0x6b, 0x5a, 0x09, 0x4e, 0x74, 0xc5, 0xc3, 0x4c, 0xef, 0xfa, 0xa5, 0x1d, 0xbb, 0x15, 0xf0, 0x26,
		0x89, 0xe1, 0xc4, 0x5b, 0x62, 0x0e, 0x92, 0x6f, 0x85, 0x88, 0x28, 0x00, 0xdd, 0x46, 0x62, 0xc9,
		0x41, 0x2f, 0x1e, 0x6a, 0x54, 0x38, 0x8b, 0x51, 0xa5, 0x8a, 0x7d, 0x37, 0x91, 0xc6, 0xca, 0x6a,
		0xcd, 0xf0, 0x3e, 0xce, 0xce, 0x74, 0x6e, 0x5e, 0x31, 0x89, 0xeb, 0xdf, 0x5c, 0x95, 0x8e, 0xc0,
		0x23, 0x37, 0x58, 0xf1, 0x26, 0xe4, 0x45, 0x59, 0x57, 0xb7, 0xf6, 0x45, 0x0f, 0x65, 0xf6, 0x1f,
		0x12, 0x02, 0xf5, 0x69, 0xe1, 0xc9, 0x5e, 0x36, 0x20, 0x79, 0x16, 0xb7, 0xbd, 0x22, 0xf5, 0x30,
		0xde, 0xbc, 0x96, 0x5d, 0xd5, 0xee, 0x54, 0x3d, 0x80, 0xe1, 0x4b, 0x19, 0x34, 0x12, 0x21, 0xb2,
		0x94, 0xd2, 0xf4, 0xac, 0xf8, 0x46, 0xa6, 0x37, 0x05, 0xa9, 0x47, 0x9b, 0x49, 0xfd, 0xe4, 0x60
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a3db1n;
	message = new Uint8Array([
		0xa4, 0xce, 0xb8, 0x1c, 0x34, 0x12, 0x37, 0xfa, 0xcd, 0xf5, 0xc8, 0xda, 0xb1, 0xf5, 0xfd, 0xd7,
		0x25, 0x98, 0x59, 0x39, 0xdf, 0x0b, 0x62, 0x3c, 0xbb, 0x08, 0xf7, 0x14, 0xaf, 0xfc, 0xe4, 0x2d,
		0x01, 0x6a, 0xb4, 0xb7, 0xb7, 0x8a, 0xc7, 0x62, 0x50, 0x37, 0xa4, 0x66, 0xb1, 0x08, 0x8f, 0xc7,
		0x62, 0xbc, 0x5f, 0xd7, 0xfa, 0xdb, 0x8a, 0xfc, 0xd8, 0x9a, 0x82, 0xb3, 0x14, 0xff, 0x44, 0xd5,
		0xb5, 0x47, 0x2d, 0x1a, 0x25, 0x85, 0x10, 0xdb, 0xe2, 0x8b, 0x87, 0x1c, 0x75, 0x0d, 0x86, 0xc9,
		0xa8, 0x04, 0x36, 0x40, 0xf4, 0x51, 0x00, 0x10, 0x39, 0xa3, 0xe7, 0x00, 0xb2, 0x9a, 0x1c, 0x54,
		0x27, 0x2d, 0xcc, 0x4b, 0x64, 0x49, 0x3d, 0xec, 0xeb, 0xba, 0x19, 0x02, 0xe6, 0x4f, 0x0a, 0x66,
		0x5f, 0x39, 0x86, 0x7c, 0xb3, 0xb5, 0xed, 0x00, 0x44, 0xeb, 0xd1, 0x03, 0x6f, 0x15, 0x94, 0x30
	]);
	signature = new Uint8Array([
		0x1d, 0xb2, 0x47, 0xc2, 0x71, 0xa1, 0x1b, 0x2d, 0x41, 0x20, 0x5d, 0x1a, 0xba, 0xfd, 0x43, 0x3b,
		0xe2, 0x6e, 0x27, 0x35, 0x63, 0xf6, 0x36, 0xa3, 0xa4, 0x61, 0x91, 0xfe, 0xfe, 0x2a, 0xce, 0xac,
		0x65, 0x6a, 0x9e, 0x91, 0xcd, 0x58, 0xdf, 0x24, 0x7a, 0x4f, 0xed, 0xa1, 0x4b, 0x00, 0x6e, 0x68,
		0x71, 0x89, 0x6f, 0x1f, 0x3f, 0xd8, 0x4a, 0x4c, 0x91, 0xe8, 0x5a, 0x82, 0xd8, 0x83, 0x14, 0x01,
		0x1b, 0x85, 0xb3, 0xe0, 0x43, 0x2c, 0x07, 0xfc, 0x5f, 0x16, 0xb0, 0xd1, 0x0f, 0xc5, 0x6e, 0x28,
		0x23, 0xbe, 0xe8, 0x74, 0x6f, 0x1a, 0xd6, 0xcf, 0x4c, 0xc4, 0x60, 0x3b, 0xf1, 0x04, 0x6c, 0x98,
		0xe3, 0x6c, 0xd3, 0x73, 0xd7, 0x95, 0x5e, 0xc3, 0x7d, 0x86, 0x91, 0x6b, 0xb4, 0xcb, 0x5e, 0xd4,
		0xd4, 0x3a, 0x5a, 0x12, 0x72, 0x0a, 0xb9, 0xab, 0x7f, 0x18, 0xa1, 0x7c, 0xe9, 0x27, 0xa2, 0x86
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a3db1n;
	message = new Uint8Array([
		0xad, 0xa7, 0xd6, 0xe4, 0x17, 0xda, 0x2c, 0x55, 0xab, 0xa7, 0x68, 0xf6, 0x0d, 0xf4, 0x6b, 0x73,
		0x49, 0x6c, 0xc0, 0x78, 0x66, 0xc7, 0xd2, 0x19, 0x3f, 0x4c, 0x5c, 0x72, 0x8e, 0x94, 0x22, 0x8a,
		0x4a, 0x90, 0xdf, 0x7e, 0x33, 0xce, 0x7e, 0xdb, 0xab, 0xf7, 0x8c, 0x4b, 0xc7, 0x9d, 0xee, 0x74,
		0xa6, 0x33, 0xcf, 0x1d, 0x01, 0x5d, 0xdd, 0x92, 0x04, 0x6b, 0xb5, 0x4a, 0x5c, 0x1f, 0x9b, 0xc8,
		0x92, 0xb7, 0x6f, 0xbf, 0x97, 0x27, 0xdc, 0x79, 0xa0, 0xa7, 0xd3, 0x79, 0x33, 0x6d, 0x38, 0x60,
		0x82, 0xbc, 0xdb, 0x0d, 0xf9, 0x1d, 0xa9, 0x08, 0x13, 0xed, 0x24, 0x21, 0x71, 0x17, 0x10, 0x54,
		0x2d, 0x23, 0x6f, 0xf0, 0x6c, 0x70, 0xb0, 0xf9, 0x32, 0xbd, 0x24, 0xca, 0x7b, 0xee, 0xb1, 0xfe,
		0x87, 0x0d, 0xca, 0x91, 0x75, 0x90, 0x9e, 0x43, 0x13, 0xda, 0x90, 0x3d, 0xf5, 0x04, 0xe8, 0xf7
	]);
	signature = new Uint8Array([
		0x46, 0x8a, 0x0a, 0x4d, 0x98, 0x87, 0xdc, 0x8d, 0xe8, 0x66, 0x72, 0xbf, 0x58, 0x88, 0xab, 0x47,
		0x3f, 0xc5, 0x8c, 0xd6, 0x81, 0xde, 0x1d, 0xd4, 0xb9, 0xfc, 0x46, 0xee, 0xb3, 0x2b, 0x18, 0x4c,
		0xf2, 0x58, 0x77, 0xbe, 0x73, 0x66, 0x96, 0xaa, 0xa8, 0x6e, 0x97, 0x07, 0xe6, 0xaf, 0xe5, 0x7e,
		0xa1, 0xf9, 0xea, 0x49, 0x3e, 0x5f, 0x72, 0x47, 0x3d, 0x7c, 0x5e, 0x77, 0x71, 0x0e, 0x15, 0xe3,
		0x25, 0xee, 0xac, 0x1a, 0x1c, 0x0a, 0x82, 0x19, 0x9f, 0xb1, 0x4f, 0x3f, 0x09, 0x07, 0x03, 0xe9,
		0xf1, 0x4d, 0x0b, 0x0a, 0xcd, 0x55, 0x6b, 0xb4, 0xc2, 0x42, 0xec, 0xcb, 0xec, 0x20, 0x36, 0x64,
		0xd8, 0xc9, 0x03, 0xbb, 0x90, 0x21, 0x0a, 0xab, 0x8f, 0x61, 0xc1, 0xde, 0x23, 0x91, 0xcb, 0x77,
		0xf9, 0x3c, 0x8c, 0xf6, 0xf5, 0xe3, 0xd1, 0xfb, 0x62, 0x1c, 0x41, 0x09, 0xd5, 0xd0, 0x89, 0xd4
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e887c5n;
	message = new Uint8Array([
		0x68, 0xa5, 0x31, 0x31, 0xf6, 0x49, 0x9d, 0x29, 0x98, 0x01, 0xd8, 0x8d, 0x6d, 0xc3, 0x11, 0xa1,
		0x38, 0x93, 0x4f, 0x1f, 0x58, 0xa5, 0x05, 0x7e, 0xfa, 0xc2, 0xe6, 0x73, 0x8d, 0xec, 0xfa, 0xb9,
		0x76, 0x45, 0xf2, 0x0e, 0x05, 0x2d, 0xb9, 0x7e, 0xa8, 0xab, 0x4b, 0xe3, 0x5f, 0x0e, 0xca, 0xad,
		0x70, 0xd4, 0xcf, 0xdf, 0x5c, 0xca, 0xfe, 0x5a, 0x11, 0x75, 0xdd, 0x5e, 0x61, 0xb1, 0xe6, 0x4e,
		0xb3, 0x98, 0xda, 0xb3, 0xf9, 0xa5, 0x59, 0x84, 0xe2, 0x19, 0xb0, 0xa5, 0x50, 0x9e, 0xf2, 0xad,
		0x0c, 0x2b, 0x4a, 0xec, 0xb9, 0x27, 0x8f, 0xad, 0x06, 0xd1, 0x19, 0xb8, 0x28, 0xdf, 0xd3, 0x1b,
		0x88, 0x65, 0x92, 0x2a, 0xb8, 0xf9, 0xa5, 0xc5, 0xac, 0x15, 0xae, 0xd9, 0x27, 0xbd, 0xb0, 0x29,
		0x73, 0x61, 0x68, 0x4f, 0x55, 0x04, 0xe1, 0xfd, 0x40, 0x9e, 0x43, 0x89, 0xc9, 0xbf, 0xeb, 0xa9
	]);
	signature = new Uint8Array([
		0x03, 0x99, 0x94, 0x76, 0x73, 0x09, 0x32, 0xd4, 0x6e, 0xaa, 0x52, 0x05, 0xf4, 0x22, 0xde, 0x58,
		0xc5, 0xd5, 0x17, 0xa2, 0xd1, 0x5f, 0xd4, 0x49, 0x40, 0x4c, 0x52, 0xce, 0x7f, 0x0a, 0x36, 0x36,
		0xa3, 0x23, 0xaa, 0x68, 0x1d, 0x79, 0xbf, 0xfa, 0xc6, 0x0e, 0x8d, 0x9f, 0xbd, 0x6e, 0x62, 0xe2,
		0x99, 0x36, 0x8c, 0xf8, 0xde, 0xdc, 0x3c, 0x16, 0x31, 0xd3, 0x47, 0xcd, 0xd5, 0x18, 0xe0, 0xa1,
		0x8b, 0x7e, 0x14, 0x6f, 0xf9, 0x13, 0xf1, 0x91, 0xc0, 0xe7, 0x72, 0xfc, 0x3e, 0x50, 0xa4, 0x42,
		0x48, 0x45, 0xd2, 0x3d, 0x7e, 0x10, 0xe0, 0x38, 0xf9, 0xfc, 0xee, 0x9e, 0x9a, 0x2f, 0xe4, 0x90,
		0x7e, 0xe5, 0x97, 0xe3, 0xc5, 0x89, 0x00, 0x06, 0x44, 0xd6, 0x5c, 0xfe, 0xe6, 0x01, 0x15, 0xdb,
		0xaf, 0xd9, 0xa8, 0x34, 0x8d, 0xf0, 0x34, 0x35, 0x22, 0x4e, 0x1f, 0x99, 0xd0, 0x4c, 0xea, 0xfb
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a3db1n;
	message = new Uint8Array([
		0xc7, 0x28, 0x84, 0x69, 0x80, 0xd2, 0x46, 0x1d, 0xb2, 0x93, 0x43, 0xac, 0xba, 0xa0, 0xe6, 0x9e,
		0x8a, 0x7a, 0xc1, 0x14, 0x56, 0xce, 0xdc, 0xc1, 0x90, 0x99, 0x4d, 0x37, 0x17, 0x8f, 0x09, 0x64,
		0xac, 0xbe, 0xfa, 0x5c, 0xa5, 0x6f, 0x52, 0x59, 0xe5, 0x4d, 0x1e, 0xff, 0x0b, 0xc9, 0x1e, 0xe5,
		0xea, 0xbc, 0xd4, 0x52, 0x3a, 0x4e, 0xdb, 0x44, 0x8c, 0x18, 0x7a, 0xb7, 0x84, 0x85, 0x79, 0x23,
		0x42, 0x7e, 0x33, 0x47, 0x21, 0x46, 0xed, 0x25, 0xa4, 0xa2, 0x66, 0x4e, 0xad, 0x3e, 0xaf, 0x5f,
		0xf0, 0x4c, 0x3d, 0xcc, 0xa8, 0x6e, 0x3d, 0xdc, 0x88, 0xd6, 0x27, 0xf5, 0xf5, 0xab, 0x96, 0x1a,
		0x72, 0xaf, 0x57, 0xb2, 0x5c, 0x20, 0xc0, 0x8b, 0xd7, 0xdc, 0x43, 0x1e, 0x08, 0xc8, 0x43, 0x15,
		0x85, 0x71, 0x25, 0x0a, 0x09, 0xf4, 0xab, 0x92, 0x6d, 0x1c, 0x7d, 0x7a, 0xd3, 0xcb, 0x09, 0x50
	]);
	signature = new Uint8Array([
		0x46, 0xac, 0xca, 0x57, 0x82, 0xd2, 0x16, 0xe2, 0xf3, 0xd6, 0xf8, 0x74, 0xa3, 0x8b, 0x49, 0xb3,
		0x5c, 0x1e, 0x7a, 0x26, 0x62, 0x6c, 0x9a, 0xd8, 0xaf, 0x2c, 0x88, 0xa0, 0xe1, 0xd8, 0x94, 0x95,
		0xc0, 0x2e, 0x1c, 0x47, 0x6b, 0x3c, 0x8c, 0x86, 0xb0, 0xc6, 0x26, 0x76, 0x83, 0xa1, 0x6b, 0x35,
		0x13, 0xd6, 0xae, 0x50, 0x61, 0xa8, 0xc0, 0x55, 0x7b, 0xd3, 0xcf, 0x01, 0x55, 0xdf, 0x16, 0x36,
		0x93, 0x64, 0xda, 0x81, 0xbb, 0xf9, 0xf6, 0xd8, 0x56, 0xb6, 0x5a, 0xdd, 0x32, 0x90, 0xf5, 0xa7,
		0xdc, 0x6e, 0x97, 0x58, 0x12, 0xd1, 0xe6, 0x80, 0xf7, 0xf2, 0x46, 0x50, 0xd5, 0xc3, 0xf1, 0x5c,
		0xe9, 0x08, 0x36, 0xb4, 0x7d, 0xb0, 0x64, 0xb6, 0x49, 0x4a, 0x68, 0xb9, 0x55, 0x39, 0xeb, 0x2d,
		0x59, 0x09, 0xbb, 0x03, 0x39, 0x99, 0xc4, 0x23, 0xab, 0x14, 0x96, 0x4a, 0x64, 0xc4, 0x2e, 0xfb
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(true);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a3db1n;
	message = new Uint8Array([
		0xb3, 0xe5, 0x12, 0xb4, 0xff, 0x75, 0x3f, 0xcf, 0x01, 0xb6, 0xe6, 0xd8, 0x30, 0x91, 0x5f, 0x93,
		0xcb, 0x99, 0xfb, 0xdf, 0xca, 0x36, 0x97, 0xf3, 0x14, 0x03, 0x71, 0xe8, 0xf2, 0x74, 0x3a, 0x78,
		0xc4, 0xbc, 0x6c, 0x05, 0xf3, 0xee, 0xdd, 0xdc, 0x26, 0x62, 0x95, 0xbc, 0xb9, 0x5a, 0xdc, 0x92,
		0x6b, 0xe5, 0x98, 0x87, 0x56, 0x04, 0xd6, 0x3c, 0x25, 0x0c, 0xa7, 0x54, 0x81, 0x4b, 0x2d, 0x34,
		0xcc, 0xee, 0xf5, 0x06, 0x12, 0x22, 0x87, 0x04, 0x3c, 0x7a, 0x3c, 0xf3, 0x87, 0x91, 0x50, 0xed,
		0x35, 0xf0, 0x38, 0x64, 0x83, 0x32, 0x36, 0x64, 0xda, 0x66, 0x2a, 0x18, 0x49, 0xb4, 0xab, 0x90,
		0x33, 0x44, 0x56, 0xc1, 0x45, 0x5b, 0x66, 0xce, 0xab, 0xc7, 0x86, 0x86, 0x84, 0x7e, 0xe3, 0x2d,
		0x93, 0x82, 0x84, 0x7f, 0x37, 0x07, 0xde, 0xf2, 0x9d, 0xd8, 0xa3, 0x3c, 0x34, 0xf7, 0xdc, 0x15
	]);
	signature = new Uint8Array([
		0x54, 0x32, 0x92, 0x3b, 0x53, 0xdc, 0x8a, 0xd5, 0xdf, 0x6a, 0x5d, 0xb2, 0xb0, 0x45, 0x06, 0xb4,
		0x2a, 0xfb, 0xf2, 0x9e, 0x31, 0x08, 0x6f, 0xb3, 0xaa, 0x7b, 0x7b, 0x7a, 0x04, 0x19, 0x40, 0x46,
		0x6a, 0x65, 0x35, 0xda, 0x54, 0x32, 0x9c, 0x1a, 0xa5, 0xcf, 0xd3, 0x28, 0xd4, 0xcb, 0x62, 0x23,
		0x98, 0xbb, 0x57, 0x23, 0x54, 0xea, 0xbb, 0x3c, 0x1a, 0x59, 0x95, 0x3c, 0x78, 0x81, 0xd1, 0xb1,
		0x60, 0x3a, 0x3f, 0x0c, 0x5c, 0xe8, 0x45, 0xdd, 0xa3, 0xbc, 0xf5, 0x09, 0xc9, 0xc7, 0xb7, 0xf6,
		0x1f, 0xb3, 0x10, 0xae, 0x50, 0x10, 0x1d, 0x08, 0x06, 0x2e, 0xb2, 0xb8, 0x94, 0xd1, 0x26, 0x02,
		0xec, 0x28, 0xe7, 0x53, 0x32, 0x51, 0xc0, 0x98, 0x7e, 0x4a, 0x29, 0x0e, 0x5a, 0xff, 0xd0, 0x08,
		0x3b, 0x22, 0x16, 0xf2, 0x6a, 0x55, 0xa7, 0x32, 0x43, 0x22, 0x68, 0xbc, 0xd1, 0x98, 0x2e, 0xf6
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	n =
		0xbf15c7a344db52c3da4c73bbe1aa9e43a24cc3ccdfa6dcb994e29846401f3d5ec9138756487def58d4bc5082baa8e93c840405d36ef37f59594d01f0665edb27cee3b6b647437405652cf809200597b0de806ea9ae20799400fe24bb3496d92e65ab5718c61ea24e302b2414f4a6ac1c99a4177de0f83882d638c46c95e2412bn;
	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000183a77n;
	message = new Uint8Array([
		0x14, 0xcc, 0xac, 0xa3, 0xe4, 0xe3, 0x13, 0xa9, 0x60, 0x02, 0x3c, 0xe1, 0xea, 0x13, 0x35, 0xa9,
		0xb2, 0x9b, 0x47, 0xbd, 0xd7, 0x46, 0x34, 0x66, 0xcf, 0xc7, 0xbd, 0xef, 0x08, 0xde, 0x67, 0x59,
		0xcf, 0xba, 0x7f, 0x50, 0x72, 0x82, 0x5c, 0x5d, 0xa1, 0x2f, 0xe4, 0x5c, 0x1a, 0x9c, 0x52, 0x31,
		0x86, 0xe0, 0x36, 0xb7, 0x9d, 0xdb, 0xbc, 0xf9, 0x91, 0x0f, 0x32, 0xa5, 0xaa, 0xb1, 0xc5, 0xbd,
		0x2d, 0x00, 0x8b, 0x90, 0x83, 0xd6, 0xc7, 0xe9, 0x97, 0x7d, 0x68, 0x86, 0x80, 0xc3, 0xd2, 0xcb,
		0x60, 0x51, 0xe1, 0xb8, 0x8c, 0x38, 0x2b, 0x19, 0xed, 0xcd, 0x86, 0xfc, 0xa6, 0xb7, 0xcb, 0x68,
		0xf6, 0x46, 0xd9, 0x4c, 0x60, 0x07, 0xdc, 0xb6, 0x0a, 0x95, 0xcf, 0x45, 0x64, 0xb1, 0x3f, 0xe1,
		0x09, 0x95, 0x52, 0xa9, 0xea, 0x86, 0x09, 0x2d, 0xa9, 0xa9, 0xc2, 0xde, 0x43, 0x17, 0x01, 0xc3
	]);
	signature = new Uint8Array([
		0x93, 0xe0, 0xea, 0xb6, 0xad, 0x77, 0x4d, 0x35, 0xfb, 0xf9, 0x4f, 0x22, 0x26, 0x07, 0x2c, 0x7b,
		0x6d, 0xd9, 0xed, 0xb5, 0x43, 0x77, 0xab, 0x7d, 0x8c, 0x8f, 0x8c, 0x1f, 0x12, 0x5b, 0x62, 0x53,
		0x63, 0x34, 0xd9, 0x53, 0xd3, 0xc6, 0x10, 0xff, 0x9a, 0xaf, 0x04, 0xb1, 0x96, 0x2c, 0xf3, 0x0e,
		0xc2, 0x13, 0xa6, 0x02, 0x2d, 0xdb, 0xdb, 0xda, 0xd6, 0x70, 0x84, 0xdb, 0x95, 0x78, 0x53, 0xa4,
		0xd3, 0x5e, 0xb6, 0x44, 0xe1, 0xdc, 0xf8, 0xff, 0x82, 0xb2, 0x6a, 0x74, 0x73, 0x82, 0x71, 0xb2,
		0x39, 0x4b, 0x5a, 0x06, 0x3d, 0xe4, 0x53, 0xae, 0x5c, 0x09, 0x68, 0x03, 0x4d, 0xc7, 0xca, 0x12,
		0xf9, 0xd1, 0xc1, 0x1a, 0xc2, 0x13, 0xe8, 0x01, 0x79, 0x4a, 0x00, 0xee, 0xc5, 0xd3, 0xca, 0x94,
		0x69, 0xa4, 0x7b, 0xa7, 0xb9, 0x32, 0x25, 0x9b, 0xe0, 0xaa, 0xf1, 0x3d, 0x41, 0x30, 0x2c, 0x05
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000183a77n;
	message = new Uint8Array([
		0x0b, 0x95, 0x96, 0x27, 0x64, 0xca, 0x74, 0x54, 0xc8, 0x21, 0x2a, 0x44, 0x07, 0x78, 0x2e, 0x61,
		0x74, 0x24, 0x8c, 0x58, 0x98, 0xdb, 0x39, 0x1d, 0x28, 0xd2, 0xa4, 0x2f, 0x35, 0x22, 0x8f, 0x1d,
		0xa3, 0x70, 0x1d, 0x49, 0xdc, 0xcd, 0x2c, 0xec, 0xc5, 0xdb, 0xe4, 0x5a, 0xf2, 0x31, 0x90, 0x88,
		0x16, 0x01, 0xad, 0xcb, 0xbd, 0xf8, 0x41, 0xe2, 0x3d, 0x66, 0x6f, 0x37, 0xe9, 0x9f, 0x47, 0x62,
		0x89, 0xa1, 0xe3, 0xef, 0x07, 0xf7, 0xaf, 0x61, 0x6b, 0xdd, 0x08, 0x76, 0x09, 0xa4, 0x09, 0xad,
		0xf9, 0x58, 0xa1, 0x06, 0xc8, 0xa1, 0xe9, 0x09, 0x6d, 0xe7, 0xb5, 0x09, 0x7f, 0xb9, 0x6a, 0xaa,
		0xa5, 0x70, 0x0f, 0xa1, 0x4d, 0x0f, 0xa6, 0xbb, 0xa1, 0x6e, 0xbc, 0x21, 0xb6, 0x98, 0x3f, 0xda,
		0x07, 0x71, 0x90, 0x91, 0x23, 0x9c, 0xd9, 0x99, 0xa2, 0x9b, 0xa1, 0x2e, 0x5d, 0x38, 0x9d, 0xfe
	]);
	signature = new Uint8Array([
		0x72, 0x87, 0xa0, 0xb4, 0xdb, 0x04, 0xc8, 0xc7, 0x95, 0x01, 0x8c, 0xf8, 0x18, 0xa1, 0x70, 0xb1,
		0x52, 0x30, 0x9e, 0xe1, 0x95, 0xcb, 0x23, 0x9d, 0x22, 0xc7, 0x0e, 0xb2, 0x48, 0xe1, 0xdb, 0x54,
		0xdc, 0xf0, 0xc0, 0xf6, 0xc8, 0xa3, 0x11, 0xbd, 0x07, 0xc7, 0x05, 0x12, 0x18, 0xe5, 0x3c, 0x41,
		0xe9, 0x4d, 0x0c, 0x67, 0x70, 0x7d, 0x0a, 0x69, 0xf5, 0xbd, 0x9c, 0xd1, 0xab, 0xc5, 0xe0, 0x1c,
		0xdb, 0xe7, 0x0d, 0x4a, 0xbc, 0x75, 0xa8, 0x53, 0x6b, 0xad, 0x42, 0x4d, 0x94, 0xce, 0x16, 0x0d,
		0x71, 0x10, 0x4b, 0x89, 0xd9, 0x20, 0xfb, 0xdd, 0xdf, 0x8d, 0xa7, 0x41, 0x17, 0x8b, 0xbb, 0xf3,
		0x15, 0xc3, 0xe9, 0xfa, 0x9c, 0xfd, 0xaa, 0xcd, 0x41, 0xa5, 0x5a, 0x86, 0xeb, 0x14, 0x3c, 0x1f,
		0xce, 0x55, 0xf0, 0xba, 0xc0, 0xb5, 0xe0, 0x8c, 0x9d, 0xff, 0xda, 0xd0, 0x54, 0x85, 0x03, 0x1d
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(true);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067109fn;
	message = new Uint8Array([
		0xe5, 0x49, 0x4b, 0xe7, 0x9a, 0xa1, 0x19, 0x36, 0xc2, 0x26, 0xd2, 0x6f, 0x26, 0x0c, 0x2a, 0x8b,
		0xaa, 0x36, 0xc7, 0xa4, 0xd2, 0xa9, 0xeb, 0x06, 0x86, 0x40, 0x52, 0x88, 0x12, 0xa1, 0x5e, 0x1d,
		0x71, 0x6f, 0x71, 0xa6, 0xcb, 0xc2, 0x9a, 0x0a, 0x3c, 0xd4, 0x75, 0x89, 0xd7, 0xfd, 0x4c, 0x4d,
		0xeb, 0xe1, 0x82, 0x42, 0x84, 0xe8, 0x32, 0x28, 0x35, 0xee, 0x13, 0xe7, 0x15, 0x3c, 0x9f, 0x22,
		0x08, 0xb7, 0x74, 0x0e, 0x40, 0x58, 0xfa, 0x85, 0x03, 0xdc, 0x46, 0x56, 0xae, 0xbd, 0x3e, 0xe0,
		0xfa, 0x60, 0xfe, 0xdf, 0x7e, 0x90, 0x7b, 0x85, 0x75, 0x2b, 0x66, 0xcd, 0xc2, 0x1b, 0x54, 0x0c,
		0x31, 0x88, 0x1b, 0xc8, 0x00, 0x4c, 0x7f, 0xce, 0x9e, 0xa8, 0x0e, 0x7f, 0xb2, 0x35, 0x48, 0x6b,
		0x5f, 0x1d, 0x03, 0x21, 0xc6, 0x8a, 0x0e, 0x44, 0xcd, 0x5f, 0x15, 0xe2, 0x1f, 0x27, 0xc4, 0x02
	]);
	signature = new Uint8Array([
		0x98, 0x3e, 0x58, 0xdd, 0x64, 0xd1, 0xdc, 0x36, 0x9a, 0x71, 0x48, 0x5a, 0x49, 0x7f, 0x92, 0x42,
		0xa5, 0x27, 0xbb, 0x28, 0x5e, 0x50, 0x39, 0xe8, 0x8f, 0x99, 0x7a, 0x30, 0xfb, 0xdd, 0x32, 0xf3,
		0x02, 0x2c, 0x45, 0x32, 0x18, 0xe2, 0x2f, 0x01, 0x80, 0xc3, 0xf7, 0x53, 0xbc, 0x0d, 0x6e, 0x3d,
		0x69, 0x5e, 0xbd, 0xe8, 0x8e, 0x89, 0x63, 0x57, 0x1a, 0xdb, 0x68, 0x51, 0x0c, 0x1e, 0x40, 0xd8,
		0x4a, 0xc8, 0x37, 0x85, 0xce, 0xa9, 0xef, 0x84, 0xbd, 0xd3, 0x95, 0x7e, 0x98, 0xd7, 0x18, 0xc7,
		0xa9, 0x7b, 0x22, 0xf6, 0x92, 0xdf, 0xa9, 0xd1, 0x27, 0x3a, 0x97, 0xce, 0x94, 0x46, 0x79, 0x4f,
		0xd1, 0x93, 0xec, 0x3d, 0x93, 0x54, 0xca, 0xad, 0x1b, 0x7b, 0xfc, 0xdd, 0xf8, 0x25, 0x05, 0xf8,
		0xa9, 0x63, 0xf7, 0x75, 0x9d, 0x10, 0x8b, 0x7a, 0x67, 0xa5, 0x7a, 0xa7, 0xcc, 0xe3, 0xc8, 0x4b
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000183a77n;
	message = new Uint8Array([
		0x36, 0x20, 0x22, 0x0d, 0xeb, 0x21, 0x01, 0x07, 0x75, 0x55, 0x29, 0x82, 0x67, 0x99, 0x53, 0x66,
		0xd8, 0x34, 0xf8, 0x56, 0xac, 0x0c, 0xb6, 0x87, 0x15, 0x1a, 0xf5, 0xd3, 0x58, 0x1b, 0xca, 0x09,
		0xd5, 0x88, 0x1c, 0x88, 0x42, 0xc9, 0x05, 0x0c, 0x37, 0xa6, 0x7a, 0xc7, 0xef, 0xfe, 0x2f, 0xb4,
		0x4d, 0xbb, 0xb5, 0x28, 0x1d, 0x05, 0xe5, 0xaa, 0x9d, 0xb6, 0x82, 0x04, 0x3b, 0x0e, 0x1a, 0x9a,
		0xa1, 0xa9, 0x2d, 0xfb, 0xef, 0xad, 0x92, 0xb6, 0x47, 0x48, 0x15, 0x6f, 0x8f, 0x5a, 0x65, 0x31,
		0x72, 0x6e, 0x2e, 0x06, 0xa8, 0xef, 0x82, 0xc5, 0x78, 0x99, 0x7d, 0x2c, 0x7b, 0x2d, 0x29, 0x2e,
		0xa2, 0x69, 0x9f, 0x8e, 0x7a, 0x37, 0x6f, 0xad, 0xaf, 0x25, 0x42, 0xa1, 0xd0, 0x15, 0xbe, 0x86,
		0x51, 0x35, 0xaa, 0x19, 0xd6, 0x32, 0x53, 0x83, 0xaf, 0xa9, 0x2e, 0x72, 0x9e, 0xdf, 0xbe, 0x6e
	]);
	signature = new Uint8Array([
		0x3e, 0x9d, 0x52, 0x8a, 0x7b, 0xdb, 0xb9, 0xd1, 0x08, 0x33, 0x84, 0xe6, 0x74, 0x41, 0x71, 0x26,
		0x45, 0xc2, 0xaa, 0xde, 0x8c, 0xa3, 0x2c, 0x8c, 0x56, 0x32, 0xec, 0x27, 0x08, 0xb6, 0xb9, 0x87,
		0x7d, 0xc4, 0xcf, 0x48, 0x03, 0xb6, 0xcb, 0xe5, 0x33, 0xfc, 0x58, 0xdb, 0x7a, 0xb0, 0x10, 0x19,
		0xae, 0x87, 0x9c, 0xf7, 0x46, 0xdb, 0xca, 0x08, 0xef, 0x39, 0xaf, 0xfb, 0xd6, 0x00, 0x56, 0x2a,
		0xe9, 0x96, 0x13, 0xd7, 0x61, 0x83, 0x55, 0x4e, 0x71, 0x2e, 0x90, 0xfd, 0xd4, 0xb3, 0x7a, 0x00,
		0x92, 0xa3, 0xdd, 0xb3, 0xbf, 0x28, 0x35, 0xe6, 0xfc, 0x6e, 0xe1, 0x2e, 0x7b, 0x35, 0x5a, 0xc0,
		0x06, 0xe8, 0xe5, 0x72, 0x5d, 0x87, 0x73, 0xd8, 0x56, 0x36, 0x0b, 0xbe, 0xf7, 0xa8, 0x96, 0xfc,
		0x66, 0x59, 0x4b, 0x1a, 0x4f, 0x7e, 0xcb, 0xd1, 0x3e, 0xd2, 0xc0, 0x2b, 0x76, 0x51, 0x1f, 0xeb
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000183a77n;
	message = new Uint8Array([
		0x75, 0xd4, 0x62, 0x56, 0x8e, 0xdb, 0x86, 0x7e, 0x99, 0x6e, 0xf0, 0x19, 0x7d, 0xe4, 0x68, 0x5f,
		0xe3, 0x52, 0x82, 0x25, 0x98, 0x5d, 0x20, 0x53, 0x36, 0x4c, 0x38, 0x97, 0x01, 0x62, 0xd8, 0x5b,
		0x0f, 0x6a, 0x67, 0xf5, 0xac, 0x93, 0x2d, 0x1e, 0xfc, 0x7e, 0x16, 0xa6, 0xe2, 0x96, 0xb2, 0x66,
		0x21, 0xa0, 0x81, 0x75, 0xc1, 0x92, 0x6e, 0x9f, 0xb5, 0xa9, 0x99, 0x12, 0xba, 0xb6, 0x59, 0x5b,
		0x82, 0xb9, 0x82, 0x91, 0x12, 0xb0, 0xe3, 0xd0, 0x69, 0xb1, 0x13, 0xe9, 0x62, 0x37, 0x6e, 0x58,
		0xdb, 0xba, 0x5a, 0x77, 0x17, 0x82, 0xcf, 0xf1, 0x61, 0xbc, 0x16, 0x78, 0xf2, 0xce, 0xd0, 0xbb,
		0x15, 0xe8, 0x3b, 0x92, 0x89, 0xdb, 0xb1, 0x7c, 0x27, 0x2f, 0x71, 0x4c, 0xc4, 0x6f, 0xa2, 0x1f,
		0x59, 0xc8, 0x95, 0x91, 0x62, 0xd3, 0x4b, 0x31, 0x83, 0xae, 0x37, 0x32, 0x71, 0x51, 0x44, 0x63
	]);
	signature = new Uint8Array([
		0x97, 0x82, 0x8f, 0x3a, 0x8b, 0x86, 0x4a, 0x95, 0xc1, 0x9b, 0x61, 0x7a, 0xaa, 0x57, 0x44, 0xcb,
		0x09, 0xc3, 0xc3, 0x77, 0x58, 0x34, 0x9e, 0x39, 0x81, 0x69, 0xe2, 0xe8, 0x34, 0x4e, 0xba, 0x66,
		0x3f, 0x9d, 0xc8, 0x71, 0xf7, 0x44, 0xb5, 0x2b, 0x3f, 0x15, 0xd0, 0x78, 0x75, 0xae, 0x87, 0x06,
		0xe7, 0xbb, 0x84, 0x9e, 0x08, 0x28, 0xe6, 0xc9, 0x22, 0x8c, 0xf4, 0x3e, 0x74, 0x2f, 0xd2, 0xc2,
		0x33, 0xf2, 0xb3, 0x1a, 0x67, 0x36, 0x5a, 0x12, 0xf0, 0xeb, 0xc2, 0xd9, 0xd3, 0x36, 0x92, 0x32,
		0xc6, 0x93, 0x9c, 0xb9, 0xe6, 0xe8, 0x0b, 0x18, 0x44, 0x38, 0x20, 0x77, 0x3f, 0xf7, 0x96, 0xd2,
		0xd7, 0x7d, 0x63, 0x3f, 0x1e, 0x24, 0x0a, 0x2e, 0x62, 0x62, 0x5c, 0xa6, 0xe8, 0x5e, 0x85, 0x10,
		0x5a, 0x9b, 0x9b, 0xef, 0xf0, 0xc6, 0xd8, 0x6a, 0x11, 0x2f, 0x1e, 0x9a, 0xaa, 0x55, 0x1c, 0x88
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000183a77n;
	message = new Uint8Array([
		0x37, 0x2c, 0x9d, 0x4b, 0x73, 0xd3, 0xd7, 0x52, 0x7d, 0x99, 0x18, 0x17, 0xda, 0xc2, 0x27, 0x92,
		0xb1, 0xa2, 0x92, 0x68, 0x24, 0xa8, 0xa3, 0x0f, 0xe0, 0x9b, 0x90, 0x33, 0xf3, 0x24, 0xf2, 0x59,
		0xdf, 0x8d, 0x78, 0xc3, 0xec, 0xc8, 0xdd, 0x93, 0xc2, 0xb3, 0x17, 0x33, 0x36, 0x9a, 0xd2, 0xf3,
		0x65, 0xfd, 0x1c, 0xf4, 0xff, 0x94, 0x62, 0x46, 0xe6, 0x91, 0x9b, 0x4d, 0xf8, 0x25, 0xc3, 0x69,
		0x28, 0x45, 0x8b, 0xd5, 0xd4, 0xae, 0x4f, 0xd0, 0x53, 0x27, 0x48, 0xfb, 0xcd, 0x06, 0x03, 0x03,
		0x4f, 0xf5, 0x11, 0x7f, 0x1e, 0xf6, 0x01, 0x1c, 0x4c, 0xa5, 0x8b, 0xf7, 0x8a, 0xbd, 0x0e, 0x4a,
		0x3d, 0xde, 0x3d, 0x4b, 0xd4, 0x8e, 0x14, 0x51, 0x58, 0x7d, 0x12, 0x39, 0x44, 0x0d, 0xa2, 0x08,
		0x98, 0x11, 0xda, 0xd1, 0x29, 0xd5, 0x67, 0xda, 0x3b, 0x60, 0xc8, 0xfa, 0x51, 0xf5, 0xbb, 0x45
	]);
	signature = new Uint8Array([
		0x7e, 0xa2, 0x7b, 0xfe, 0x42, 0x25, 0x07, 0xd9, 0xf4, 0x0f, 0x52, 0x00, 0xba, 0x8b, 0x68, 0xd9,
		0x21, 0x47, 0x61, 0x1c, 0x63, 0x82, 0x5a, 0xa1, 0xae, 0xcb, 0x32, 0x68, 0x89, 0x33, 0x88, 0xbe,
		0x45, 0x2d, 0xe5, 0xc3, 0xf9, 0xc6, 0xd2, 0x24, 0xd5, 0x63, 0x39, 0x13, 0xd5, 0xf2, 0x7a, 0x33,
		0xb6, 0x69, 0x55, 0x0c, 0x56, 0x53, 0x31, 0x5f, 0xde, 0xfb, 0x60, 0x32, 0xca, 0x50, 0xf7, 0x81,
		0xe7, 0x89, 0xf1, 0x48, 0xf2, 0x64, 0x2a, 0xa4, 0x79, 0xaa, 0xc4, 0xf8, 0x54, 0x54, 0x42, 0x5e,
		0x57, 0x0c, 0xb0, 0xcb, 0xa2, 0xa1, 0xa8, 0x58, 0x61, 0x78, 0xa4, 0x81, 0x27, 0x89, 0x70, 0x03,
		0xbe, 0x42, 0x4e, 0xb8, 0x6d, 0x87, 0xa2, 0xc5, 0xc9, 0x56, 0x27, 0xdc, 0x44, 0x07, 0xf4, 0x80,
		0x05, 0x36, 0x56, 0x73, 0x37, 0xd8, 0x8d, 0x1d, 0xf3, 0xb3, 0x69, 0xb1, 0x76, 0xa2, 0x1c, 0x6e
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	n =
		0x8b71c2bcb324a3fc23d292fb4f18cab5140d521013361a07071bc788859cbba33fc226b2cef9c1b3663d307acd3e4d8eb7acff63d048495a2d61fbeb617a42c4f424a347673173902cd1cb11780003e715662d195996fbff55f6b9feb54a18197e6848aa8baa15fa020cc54e72ec976d766ed63ee4e00071a11e29d7baf30e3fn;
	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035c661n;
	message = new Uint8Array([
		0x78, 0xb8, 0xe3, 0x4e, 0x3d, 0x10, 0x26, 0xe8, 0x81, 0x48, 0xaf, 0xf5, 0xa0, 0x5d, 0x5b, 0x6f,
		0xf7, 0x47, 0x11, 0x31, 0x48, 0xcf, 0x47, 0x66, 0x5f, 0xa1, 0xc8, 0x42, 0xf6, 0xa2, 0xb4, 0xf0,
		0xd7, 0x83, 0xc8, 0xcb, 0x40, 0x97, 0xdf, 0xd0, 0x8b, 0xe1, 0xb9, 0x53, 0x0e, 0x72, 0xfc, 0xf2,
		0x41, 0xf2, 0x78, 0xc8, 0x1e, 0x7c, 0xaf, 0xe3, 0xce, 0xaf, 0x95, 0xf7, 0x81, 0x01, 0x94, 0x53,
		0x9e, 0x57, 0xd3, 0x15, 0x1c, 0xd3, 0xb8, 0x9a, 0x2f, 0xed, 0xac, 0x39, 0x28, 0xc6, 0x1e, 0x31,
		0x96, 0xb8, 0xca, 0xdf, 0xb2, 0x32, 0x3b, 0x35, 0xfa, 0xc3, 0x8e, 0x67, 0x1b, 0x74, 0x7a, 0xe7,
		0x14, 0x5b, 0x8d, 0x94, 0x99, 0x6d, 0xb8, 0x2f, 0xb5, 0x94, 0x0e, 0x0e, 0xb4, 0x02, 0xc9, 0x14,
		0x40, 0xc4, 0x8e, 0xe0, 0xca, 0x9a, 0xf2, 0x45, 0x2c, 0x06, 0x3c, 0xfa, 0x8c, 0xa3, 0x6c, 0x93
	]);
	signature = new Uint8Array([
		0x69, 0x7f, 0x74, 0x22, 0xaa, 0x7b, 0xb4, 0x53, 0xc6, 0xb7, 0xe5, 0xc3, 0xc1, 0xf5, 0xa4, 0x4d,
		0x46, 0x31, 0xce, 0xb0, 0xb9, 0xa9, 0xe7, 0x7a, 0x0f, 0xff, 0xfd, 0xad, 0xcb, 0xd5, 0x0d, 0x8f,
		0x69, 0xa2, 0xfe, 0x23, 0xef, 0x49, 0x51, 0x91, 0xdb, 0xc4, 0xdf, 0x75, 0x60, 0x51, 0x98, 0xaf,
		0x42, 0x98, 0x07, 0x39, 0x3e, 0xfc, 0xe5, 0xd0, 0x74, 0x2c, 0x6c, 0xd6, 0x5e, 0xa4, 0xf6, 0xe6,
		0x0f, 0xb9, 0xde, 0x39, 0xfa, 0xf1, 0x41, 0xf6, 0xb9, 0xf2, 0x33, 0x9b, 0xfd, 0xd9, 0x56, 0x77,
		0xde, 0x6a, 0xc7, 0x85, 0x6b, 0x18, 0x3c, 0xa7, 0xc2, 0xe1, 0x9f, 0xcf, 0xef, 0xa9, 0x16, 0x85,
		0x8e, 0x7e, 0x41, 0xde, 0x93, 0x25, 0x7e, 0x87, 0x71, 0xe3, 0x61, 0xd0, 0x56, 0xd5, 0xc9, 0x65,
		0x57, 0xc6, 0x55, 0xe1, 0xda, 0x2d, 0x49, 0x06, 0x79, 0x8c, 0xc4, 0xb9, 0x35, 0x09, 0xb0, 0xaf
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035c661n;
	message = new Uint8Array([
		0x8a, 0xe6, 0x8a, 0xd4, 0x06, 0x31, 0x98, 0x1d, 0x0c, 0xb6, 0x84, 0x28, 0xc6, 0x42, 0xfa, 0xbc,
		0x65, 0x8d, 0xdf, 0xfc, 0x17, 0x61, 0xe4, 0xa4, 0x36, 0xfe, 0x5c, 0x90, 0xbf, 0xbe, 0x4b, 0x7e,
		0x07, 0xf5, 0xbf, 0x14, 0xa9, 0x1b, 0x63, 0x25, 0xc3, 0x2d, 0x51, 0x30, 0x62, 0x50, 0x28, 0x29,
		0x3a, 0xb8, 0x5e, 0x7c, 0x9b, 0xc8, 0xd8, 0x50, 0xa0, 0x7a, 0xb8, 0x08, 0xaa, 0x02, 0x77, 0x10,
		0x0c, 0xae, 0x33, 0xd6, 0x08, 0x11, 0x4a, 0x16, 0xfb, 0x60, 0x27, 0x5b, 0xd4, 0x1c, 0x5c, 0xc3,
		0xca, 0xf1, 0xf1, 0x02, 0x4f, 0xdf, 0xfc, 0xa9, 0x3f, 0x97, 0x72, 0xa9, 0x5e, 0x28, 0x3d, 0x12,
		0x01, 0xda, 0x8f, 0x21, 0x0b, 0x5a, 0x75, 0x7a, 0x1b, 0x18, 0xaf, 0xb2, 0x04, 0xee, 0xbf, 0x10,
		0x7e, 0x02, 0x40, 0x95, 0x1b, 0xed, 0x79, 0x39, 0x7c, 0x1d, 0x32, 0x78, 0xc4, 0x77, 0xc6, 0x0d
	]);
	signature = new Uint8Array([
		0x7c, 0x17, 0xbf, 0x8a, 0xae, 0xaf, 0xb9, 0xc9, 0x79, 0x66, 0xd9, 0x05, 0x20, 0x5b, 0x1f, 0x00,
		0x7a, 0x13, 0x79, 0xe5, 0xfe, 0xa9, 0x41, 0x8b, 0xd6, 0xde, 0xca, 0xb8, 0x46, 0xbc, 0x4d, 0x43,
		0x0d, 0xe0, 0x31, 0x5c, 0x5b, 0x21, 0x95, 0xea, 0x62, 0x90, 0x0b, 0x34, 0xb7, 0xd3, 0x7c, 0xd6,
		0xdd, 0xe7, 0xe3, 0x7d, 0x93, 0x61, 0x07, 0x39, 0x42, 0x97, 0x62, 0x15, 0xe7, 0x18, 0x3e, 0x4d,
		0xc8, 0x76, 0xd6, 0x9e, 0x1e, 0xca, 0x9c, 0xc3, 0x78, 0x6d, 0x2e, 0x99, 0x22, 0xb7, 0x13, 0x33,
		0xae, 0x3f, 0x0c, 0xac, 0xbe, 0x17, 0x3a, 0x63, 0x46, 0xc1, 0x52, 0x27, 0x35, 0x56, 0xb6, 0xbd,
		0xd1, 0xaf, 0xb7, 0xfe, 0x01, 0xfc, 0xda, 0x77, 0x23, 0x62, 0xfe, 0x20, 0xbe, 0x34, 0xbd, 0x4c,
		0x8e, 0xd9, 0xb1, 0x6c, 0xbc, 0xd3, 0xdb, 0x91, 0x0a, 0x0d, 0x89, 0xa1, 0x85, 0x9a, 0x25, 0x39
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035c661n;
	message = new Uint8Array([
		0xaa, 0xb8, 0x8f, 0xf7, 0x28, 0xc8, 0xf8, 0x29, 0x84, 0x1a, 0x14, 0xe5, 0x61, 0x94, 0xbb, 0xf2,
		0x78, 0xd6, 0x9f, 0x88, 0x31, 0x7a, 0x81, 0xb4, 0x74, 0x9a, 0xa5, 0xfd, 0xbc, 0x93, 0x83, 0x48,
		0x6e, 0x09, 0xbf, 0xf9, 0x6a, 0x2c, 0x5b, 0x5b, 0xdf, 0x39, 0x2c, 0x42, 0x63, 0x43, 0x8a, 0xef,
		0x43, 0x33, 0x4c, 0x33, 0x17, 0x0e, 0xf4, 0xd8, 0x9a, 0x76, 0x26, 0x3c, 0xb9, 0x74, 0x5f, 0x3f,
		0xea, 0x74, 0xe3, 0x5f, 0xbf, 0x91, 0xf7, 0x22, 0xbb, 0x13, 0x51, 0xb5, 0x64, 0x36, 0xcd, 0xd2,
		0x99, 0x2e, 0x61, 0xe6, 0x26, 0x67, 0x53, 0x74, 0x96, 0x11, 0xa9, 0xb4, 0x49, 0xdc, 0xe2, 0x81,
		0xc6, 0x00, 0xe3, 0x72, 0x51, 0x81, 0x34, 0x46, 0xc1, 0xb1, 0x6c, 0x85, 0x8c, 0xf6, 0xea, 0x64,
		0x24, 0xcd, 0xc6, 0xe9, 0x86, 0x0f, 0x07, 0x51, 0x0f, 0x74, 0x17, 0xaf, 0x92, 0x55, 0x74, 0xd5
	]);
	signature = new Uint8Array([
		0x65, 0x72, 0x96, 0xe9, 0x02, 0x33, 0x1b, 0x80, 0x30, 0xa7, 0x29, 0x20, 0xc6, 0xc1, 0x6b, 0x22,
		0xea, 0x65, 0xfe, 0x18, 0xe7, 0xe1, 0x0b, 0x7c, 0xdb, 0xb8, 0xa4, 0x4e, 0xf0, 0xf4, 0xc6, 0x6f,
		0x3e, 0x9c, 0x22, 0xf8, 0xf3, 0x5e, 0x41, 0x84, 0xb4, 0x20, 0xad, 0x3f, 0x1b, 0xdb, 0xc1, 0xd6,
		0xa6, 0x5e, 0x62, 0x30, 0xab, 0xca, 0x8a, 0x9b, 0xee, 0x10, 0x88, 0x78, 0x33, 0xda, 0xe1, 0x5a,
		0x84, 0xbf, 0x09, 0xa4, 0x54, 0x23, 0x89, 0xc6, 0x85, 0xfd, 0x33, 0xe7, 0x38, 0x5c, 0x60, 0x01,
		0xb4, 0x9a, 0xa1, 0x08, 0xf2, 0x27, 0x2a, 0x46, 0xa8, 0x32, 0xbb, 0xad, 0xc0, 0x67, 0xff, 0x06,
		0xb0, 0x9b, 0x2f, 0x5f, 0x40, 0xc8, 0x1c, 0xc2, 0xac, 0xac, 0x03, 0x31, 0x1a, 0x39, 0x45, 0xf7,
		0xa9, 0xf2, 0xea, 0x81, 0x21, 0x3b, 0xa9, 0xba, 0x62, 0x6d, 0x6a, 0x7e, 0xd4, 0x9f, 0x17, 0xdd
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(true);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035c661n;
	message = new Uint8Array([
		0x5e, 0xc0, 0x47, 0x9f, 0x00, 0x10, 0xf6, 0xf1, 0x2a, 0x70, 0x7a, 0xb5, 0x2b, 0xc4, 0xba, 0x88,
		0x3f, 0x29, 0xea, 0x19, 0x61, 0x7d, 0x02, 0xd6, 0x60, 0x21, 0x6f, 0xc5, 0x35, 0xfd, 0x08, 0xaf,
		0x94, 0xc5, 0x43, 0x84, 0xc1, 0x7b, 0xa9, 0xfb, 0xa5, 0x36, 0x87, 0x79, 0x21, 0x21, 0xe7, 0x34,
		0xa2, 0xc6, 0xbe, 0x98, 0xf6, 0x8d, 0x67, 0xea, 0x5e, 0x7f, 0x50, 0x2b, 0xe4, 0x50, 0xf4, 0x3f,
		0xee, 0x9d, 0x09, 0x4e, 0x14, 0x72, 0xfa, 0x6b, 0x2f, 0x0f, 0x97, 0x73, 0xb2, 0xec, 0x0c, 0x38,
		0x3e, 0xfa, 0x0f, 0xdf, 0x70, 0x2c, 0x5e, 0x87, 0xfe, 0x36, 0x69, 0x2c, 0x02, 0x95, 0x4b, 0xca,
		0x95, 0xcf, 0xff, 0xc5, 0xa0, 0xfc, 0xd1, 0x88, 0xef, 0x85, 0x12, 0x6c, 0x87, 0x2c, 0x10, 0xdc,
		0x3a, 0x4c, 0x46, 0xb8, 0x78, 0x62, 0xcf, 0xf6, 0x68, 0xcd, 0x21, 0x8f, 0x37, 0xd2, 0xf7, 0x99
	]);
	signature = new Uint8Array([
		0x72, 0x02, 0xf1, 0xed, 0x02, 0xd8, 0x5d, 0x82, 0xb5, 0x74, 0xb0, 0x6f, 0xa3, 0xde, 0x38, 0xa0,
		0xd1, 0x9b, 0x80, 0xa6, 0x12, 0xf4, 0x70, 0xf2, 0x2b, 0x4e, 0xb8, 0xa0, 0x32, 0xc1, 0x5b, 0xe5,
		0x65, 0xbc, 0xfc, 0x7e, 0x97, 0x80, 0xd3, 0x5f, 0x1a, 0xa1, 0x1a, 0x31, 0x23, 0x39, 0x55, 0x4e,
		0xc5, 0x1e, 0x69, 0x02, 0x87, 0xad, 0x57, 0xac, 0xff, 0x35, 0x9f, 0xdb, 0xe7, 0xcd, 0xfa, 0xbf,
		0x97, 0x70, 0xe9, 0xb3, 0x33, 0x43, 0xcd, 0x8a, 0xeb, 0x8b, 0x2d, 0xda, 0xaf, 0xfd, 0x1d, 0x23,
		0x08, 0xec, 0x9f, 0xa2, 0x8e, 0x5d, 0xc2, 0x6a, 0xbf, 0xee, 0x5c, 0x5e, 0x84, 0x70, 0xad, 0xf1,
		0x33, 0x80, 0xe7, 0xae, 0xfe, 0xf7, 0x27, 0xa7, 0x8d, 0xff, 0xaf, 0x32, 0xbe, 0xe2, 0x51, 0xca,
		0x8b, 0xab, 0x4d, 0xd3, 0x75, 0xd2, 0xa9, 0xe6, 0xc4, 0x70, 0x94, 0x3b, 0xdb, 0x58, 0x02, 0x8e
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035c661n;
	message = new Uint8Array([
		0x3d, 0xe8, 0x62, 0xf4, 0xef, 0xd8, 0xbd, 0xa0, 0xf2, 0xf8, 0x25, 0x4f, 0x73, 0x0e, 0x5a, 0x8d,
		0x5b, 0xae, 0xab, 0x43, 0x82, 0xa6, 0xc5, 0x37, 0x1f, 0x99, 0xc9, 0xd6, 0x84, 0xe9, 0xa1, 0x32,
		0x08, 0xda, 0x93, 0x47, 0x44, 0xf5, 0x16, 0x82, 0x82, 0xab, 0xe5, 0x84, 0x72, 0x3b, 0x53, 0x23,
		0x1f, 0xd6, 0xde, 0xb1, 0x22, 0x00, 0x06, 0x81, 0x15, 0x39, 0x60, 0xa8, 0x4b, 0xdd, 0xe6, 0x01,
		0xbe, 0x49, 0x91, 0x74, 0x49, 0x3f, 0x2a, 0x77, 0x18, 0x8c, 0x5d, 0xd4, 0x5c, 0xe7, 0x0f, 0xad,
		0x43, 0x1d, 0xf1, 0xbe, 0x27, 0x6b, 0x55, 0xe3, 0x06, 0x2b, 0x41, 0xda, 0x32, 0xb4, 0xc2, 0x49,
		0x49, 0x7b, 0x83, 0x03, 0x68, 0x7e, 0x9e, 0x87, 0x9c, 0xe2, 0xb2, 0xca, 0x99, 0xda, 0x36, 0x36,
		0xaf, 0xcc, 0x0d, 0xf2, 0xf9, 0xaf, 0x5a, 0x64, 0xd8, 0xb8, 0x95, 0xf4, 0x9f, 0x35, 0xdf, 0x13
	]);
	signature = new Uint8Array([
		0x26, 0x06, 0x8d, 0x35, 0xb7, 0x7e, 0xd4, 0x68, 0x48, 0xc6, 0x00, 0x6f, 0xa7, 0x18, 0xc9, 0x2e,
		0xa0, 0x35, 0x46, 0x40, 0x18, 0x40, 0x30, 0x19, 0x92, 0x9d, 0xaa, 0x2f, 0xb8, 0xaf, 0x50, 0x5e,
		0xa8, 0x1e, 0x7b, 0x0c, 0x1f, 0xfe, 0xeb, 0xd6, 0x14, 0xd0, 0x06, 0xfc, 0x6c, 0x44, 0x5f, 0xeb,
		0xc2, 0x7a, 0x56, 0x2a, 0xc6, 0xba, 0xe8, 0x07, 0xa5, 0x2d, 0x22, 0x68, 0x69, 0x0d, 0x26, 0xb1,
		0x51, 0x0c, 0x9c, 0x1b, 0xca, 0xfb, 0x16, 0x62, 0x62, 0x12, 0x83, 0x2b, 0x1c, 0x5f, 0x8a, 0x24,
		0x63, 0x0c, 0x16, 0x84, 0x9e, 0x6c, 0x5d, 0xae, 0x23, 0xd2, 0xaf, 0x78, 0x0f, 0x34, 0x09, 0x5e,
		0xbc, 0x29, 0x8a, 0x0c, 0xdf, 0xc3, 0xda, 0xb0, 0xa8, 0x53, 0x14, 0x8b, 0x74, 0xb6, 0x76, 0xba,
		0xa2, 0xb2, 0x3b, 0xba, 0xc4, 0xc6, 0x4b, 0x73, 0x54, 0xc3, 0xf0, 0xe5, 0xc9, 0x01, 0xfc, 0x09
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c78d0bn;
	message = new Uint8Array([
		0xbf, 0x08, 0x7c, 0xe3, 0x58, 0x2a, 0x94, 0x62, 0xc3, 0x70, 0x6a, 0x2e, 0xb7, 0xca, 0xfa, 0xe1,
		0xb9, 0xb7, 0x9c, 0x01, 0x85, 0x13, 0x89, 0x77, 0xaf, 0x30, 0x9b, 0x42, 0x8a, 0x29, 0x54, 0x6c,
		0x49, 0x73, 0x22, 0x3d, 0x64, 0xb5, 0xe1, 0xb0, 0x3e, 0xda, 0xa2, 0x23, 0x04, 0x64, 0xab, 0x52,
		0xd8, 0x03, 0xbf, 0x86, 0x2f, 0x66, 0x9f, 0x0a, 0x77, 0x51, 0xd0, 0xdf, 0xfe, 0xf0, 0x9f, 0xb0,
		0x0f, 0x6b, 0x63, 0x08, 0x5e, 0xba, 0x02, 0xc3, 0xa5, 0xbb, 0xb6, 0xc3, 0x90, 0x81, 0x11, 0xe4,
		0xd7, 0xef, 0x3f, 0x31, 0xa9, 0x86, 0x8c, 0x58, 0x51, 0x7c, 0x25, 0x5b, 0x14, 0x0e, 0x23, 0x89,
		0x58, 0x17, 0xc5, 0xad, 0x0c, 0xe0, 0xfd, 0x85, 0x43, 0x3a, 0x2f, 0x75, 0x22, 0xca, 0x35, 0x7d,
		0xfd, 0xa5, 0xa6, 0x69, 0xbd, 0x1d, 0x58, 0x47, 0x85, 0xda, 0x23, 0x1e, 0x95, 0x2c, 0xe8, 0xdd
	]);
	signature = new Uint8Array([
		0x17, 0xcb, 0xca, 0xab, 0x77, 0x9f, 0xdd, 0x6a, 0xea, 0xc8, 0xf0, 0xb9, 0x0f, 0xbf, 0xe9, 0x6b,
		0x6d, 0x72, 0x31, 0xfd, 0xb5, 0x50, 0xf2, 0xca, 0xea, 0x85, 0xeb, 0x99, 0x11, 0x12, 0x1d, 0x7a,
		0x0e, 0x95, 0x6c, 0xf1, 0x14, 0x14, 0xbb, 0x11, 0x1d, 0x1d, 0x0b, 0x05, 0xb1, 0x40, 0x4d, 0x48,
		0x0d, 0x6e, 0xcc, 0xc6, 0x5c, 0x0d, 0x30, 0x12, 0x07, 0xeb, 0xc1, 0xb1, 0x50, 0x24, 0x78, 0x09,
		0xf4, 0xcb, 0xa9, 0xee, 0x3b, 0x5f, 0x75, 0x9c, 0x59, 0x60, 0x2b, 0x1e, 0x63, 0x59, 0x4c, 0xcd,
		0x37, 0x4d, 0x50, 0x9a, 0x7c, 0x13, 0x5a, 0x68, 0xc6, 0x01, 0x3e, 0xd7, 0x3d, 0xdf, 0x68, 0xcb,
		0xa5, 0xea, 0x31, 0x08, 0x7a, 0xf4, 0x51, 0x83, 0x24, 0x11, 0xdc, 0xa9, 0x10, 0xfb, 0xc2, 0xaa,
		0xab, 0x28, 0x6b, 0x3a, 0x9c, 0x95, 0xb1, 0x65, 0x5a, 0xb8, 0x72, 0xe8, 0xc2, 0x76, 0x6d, 0x0a
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	n =
		0xdab9c7d28a2b1e4995c12bcae3c9f580a2dd5372441888dc83aae5b515ebce3b95786c43b5811ebaee6ad90bff9e55ae1edccfc0fcafb4cfc43743749307ec0c36886c88a174d0156a2f88a25a5c594c558bf1a947335b1ab02e77bfeee5ab0cc25455819397f74d30ca31074d4612d9d928b66477ddf7b83c0cf4ee279c9071n;
	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b8267n;
	message = new Uint8Array([
		0xb8, 0x02, 0x71, 0xb3, 0xef, 0x26, 0xef, 0xb5, 0xb0, 0xca, 0x8e, 0x80, 0x9b, 0x61, 0xfd, 0xd2,
		0x09, 0x33, 0x7a, 0xc2, 0x3f, 0xba, 0xa3, 0x49, 0xe8, 0x4c, 0x89, 0x00, 0xc2, 0xfb, 0x07, 0x2b,
		0x97, 0xba, 0x52, 0xf7, 0x6f, 0xc1, 0xd0, 0x00, 0x04, 0x32, 0x2e, 0x16, 0x76, 0xfc, 0xad, 0x41,
		0x40, 0xff, 0xbc, 0x02, 0x6b, 0x72, 0xcc, 0xdc, 0x01, 0x82, 0x60, 0x13, 0xc5, 0x3c, 0x63, 0xb4,
		0x21, 0xad, 0xbf, 0xd5, 0x60, 0x48, 0x2b, 0x1e, 0x1d, 0x88, 0x44, 0x89, 0xfb, 0xd6, 0xe0, 0x65,
		0x97, 0xac, 0x9f, 0xa1, 0xbb, 0xfb, 0xc3, 0x47, 0xd5, 0xca, 0x41, 0x47, 0xa7, 0x20, 0x17, 0x76,
		0x3f, 0x25, 0xe1, 0xd6, 0x2a, 0x84, 0xa7, 0x18, 0xe5, 0x13, 0xfa, 0x5f, 0x94, 0xb6, 0x3f, 0x47,
		0xf6, 0x81, 0x4a, 0x26, 0x99, 0x1c, 0x2f, 0x92, 0x4a, 0x6c, 0x54, 0x23, 0xd0, 0x6f, 0xcb, 0x79
	]);
	signature = new Uint8Array([
		0x2d, 0xb6, 0x1e, 0xba, 0xca, 0x89, 0xec, 0xde, 0x29, 0xa2, 0x89, 0x5f, 0x21, 0xd6, 0x12, 0x20,
		0x30, 0x0f, 0x01, 0xd1, 0x17, 0x33, 0x7b, 0xa9, 0x92, 0xe0, 0xe5, 0xa6, 0x5d, 0x6c, 0x4a, 0x6b,
		0xd5, 0x37, 0xf6, 0xf7, 0x4e, 0x64, 0xdb, 0x2e, 0xa4, 0x5c, 0x88, 0x92, 0x11, 0x4d, 0x2d, 0x54,
		0x50, 0xd9, 0xb9, 0xeb, 0x38, 0xde, 0xce, 0x3d, 0xad, 0xcb, 0xe9, 0x11, 0x23, 0xa9, 0xef, 0x82,
		0x88, 0xe0, 0x00, 0xbd, 0x3f, 0xc1, 0xe1, 0x40, 0xd2, 0x49, 0x9a, 0x7f, 0xdf, 0x44, 0xf3, 0x38,
		0x2e, 0x71, 0xd4, 0xde, 0xf1, 0xba, 0xa6, 0xe4, 0x0d, 0x8b, 0x70, 0x33, 0x49, 0x06, 0xf8, 0x95,
		0x05, 0x52, 0x95, 0xb8, 0xf3, 0x7c, 0x77, 0x99, 0x69, 0x97, 0x5c, 0x11, 0xb7, 0x9e, 0x21, 0x84,
		0x32, 0x1a, 0x88, 0x3e, 0x1a, 0xbc, 0xbc, 0x10, 0x02, 0x73, 0x18, 0x7e, 0xd1, 0x48, 0x0a, 0x70
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(true);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b8267n;
	message = new Uint8Array([
		0xca, 0x69, 0xf7, 0x3a, 0x1e, 0x17, 0x31, 0x07, 0x89, 0xa6, 0x55, 0x61, 0x63, 0x9b, 0x2b, 0x05,
		0x4a, 0xae, 0xd6, 0x96, 0x22, 0xc4, 0xfb, 0x34, 0x5b, 0x1d, 0x25, 0x51, 0x72, 0xcf, 0x68, 0xc0,
		0xbb, 0x73, 0x45, 0x0f, 0x5d, 0x1e, 0xce, 0x17, 0x9e, 0x93, 0x0a, 0xd1, 0x61, 0xb6, 0x9b, 0x6c,
		0xec, 0x44, 0x9e, 0x9c, 0xef, 0xc2, 0xd3, 0x34, 0xc2, 0xb3, 0xfe, 0xf7, 0xef, 0x0e, 0x8d, 0xab,
		0xf0, 0xef, 0x7a, 0x70, 0x3a, 0x8d, 0x73, 0x50, 0x7a, 0x6c, 0x39, 0x17, 0x1e, 0xd4, 0x46, 0x65,
		0x17, 0x81, 0xb2, 0x01, 0xdd, 0x9c, 0x57, 0x70, 0xb4, 0xea, 0x34, 0xc7, 0x2f, 0x44, 0x0f, 0xbd,
		0xf2, 0x47, 0x5e, 0x04, 0xbb, 0x4c, 0x68, 0xda, 0xa4, 0x9a, 0xa8, 0xdb, 0xa2, 0xdb, 0x72, 0x19,
		0x52, 0xcd, 0xd9, 0x6e, 0xf5, 0x3a, 0xcf, 0x11, 0xb8, 0x2a, 0x8e, 0x68, 0x3a, 0x57, 0x37, 0x1d
	]);
	signature = new Uint8Array([
		0xb8, 0x45, 0x9c, 0x62, 0xf5, 0xdc, 0x84, 0x8a, 0x47, 0xe7, 0x38, 0x37, 0xc3, 0xfb, 0x1b, 0x5b,
		0x96, 0xc6, 0xce, 0xdc, 0x1c, 0xd0, 0xe0, 0x8d, 0x5b, 0xcc, 0xb8, 0xa0, 0xfe, 0x4e, 0x43, 0xee,
		0x03, 0x18, 0x0a, 0x94, 0x57, 0xa8, 0xdb, 0x53, 0xc1, 0x6a, 0xb9, 0x94, 0xe9, 0x59, 0xbc, 0x59,
		0xd2, 0x9d, 0x3b, 0x15, 0x74, 0x9a, 0x8e, 0x9c, 0xf4, 0x3c, 0xbe, 0x81, 0xd1, 0x3c, 0x3b, 0x2e,
		0x0d, 0x55, 0x19, 0x8e, 0x07, 0x76, 0xdd, 0xd2, 0x91, 0x5e, 0x25, 0xf5, 0x9b, 0x17, 0xe9, 0x14,
		0x88, 0x8e, 0x10, 0x80, 0x90, 0x16, 0xaf, 0xa9, 0x0f, 0xe2, 0x4d, 0x6b, 0xf9, 0xae, 0xf6, 0x35,
		0xf2, 0x91, 0xf6, 0xdf, 0x2a, 0x80, 0xb7, 0x77, 0xdb, 0x31, 0x78, 0x3f, 0xfd, 0x71, 0x48, 0xd0,
		0x78, 0xee, 0x82, 0xff, 0x15, 0xb4, 0xb8, 0x32, 0x98, 0xc7, 0x28, 0xfc, 0xfe, 0x80, 0xf5, 0x8b
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b8267n;
	message = new Uint8Array([
		0xaa, 0xa2, 0x80, 0xf5, 0x1d, 0xfd, 0x88, 0xd1, 0xe7, 0xc7, 0xf0, 0x88, 0x34, 0xca, 0x69, 0xd7,
		0x5e, 0x47, 0x43, 0x99, 0x62, 0x95, 0x85, 0x8e, 0x95, 0x0b, 0x3c, 0x5c, 0x92, 0x20, 0x13, 0xd3,
		0x77, 0xd1, 0x24, 0x75, 0x51, 0x43, 0x0e, 0x36, 0xd4, 0xaa, 0x48, 0x80, 0x50, 0x69, 0xb5, 0x7a,
		0xe0, 0x7b, 0x78, 0x8a, 0xe5, 0x11, 0x09, 0x19, 0xb2, 0x7c, 0x88, 0x96, 0x89, 0x4e, 0x52, 0xbd,
		0xc7, 0xbc, 0xd3, 0x19, 0x5b, 0x47, 0x9b, 0xc7, 0x7c, 0x9c, 0xb3, 0x7e, 0x9c, 0xb8, 0x31, 0xcc,
		0x97, 0x4f, 0x0a, 0xa2, 0x31, 0x6f, 0x28, 0x13, 0xbf, 0x61, 0xbc, 0x59, 0x24, 0xd0, 0xd6, 0x19,
		0xff, 0x2c, 0x33, 0xe8, 0x23, 0x51, 0x55, 0x0d, 0x48, 0x64, 0xd9, 0x88, 0x00, 0xfe, 0x06, 0x54,
		0xec, 0x8d, 0xa2, 0xea, 0x2f, 0xf7, 0x09, 0x06, 0x23, 0x80, 0x80, 0xad, 0x4b, 0xed, 0xc6, 0x6f
	]);
	signature = new Uint8Array([
		0x57, 0x0c, 0x0e, 0xec, 0xf6, 0x11, 0xc3, 0x44, 0x33, 0xdf, 0x2f, 0x79, 0xb6, 0x02, 0xab, 0x96,
		0x45, 0x9b, 0xfd, 0x22, 0xa2, 0x7b, 0x4a, 0xcd, 0x07, 0x58, 0x4d, 0xad, 0x49, 0x57, 0xaf, 0x8c,
		0x32, 0x2a, 0xe9, 0x8c, 0x37, 0x63, 0x12, 0xc6, 0xb9, 0x33, 0x0e, 0x50, 0x54, 0x6a, 0x14, 0x87,
		0x34, 0x21, 0x96, 0x36, 0xdd, 0x44, 0xde, 0x74, 0x10, 0x66, 0x63, 0xe5, 0x76, 0xea, 0x85, 0xf8,
		0xe0, 0x2d, 0x9d, 0x03, 0x81, 0x8f, 0x42, 0x13, 0x4f, 0xc9, 0x0c, 0x78, 0xfe, 0x94, 0xf0, 0x6c,
		0x43, 0x67, 0xe5, 0xa6, 0xc1, 0x13, 0x57, 0xbc, 0x3a, 0xbf, 0xd3, 0x13, 0xc4, 0x0a, 0x25, 0x98,
		0x6c, 0x08, 0x32, 0x10, 0xa0, 0x66, 0x98, 0x5d, 0xa3, 0x65, 0x3e, 0xaf, 0x45, 0x81, 0x91, 0x2f,
		0x53, 0x96, 0xe5, 0xbd, 0x15, 0xee, 0xdc, 0x2d, 0x7f, 0xb9, 0xbb, 0x07, 0x6e, 0xf8, 0x5c, 0x14
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b8267n;
	message = new Uint8Array([
		0x51, 0x2d, 0xcd, 0xc3, 0x0e, 0x9a, 0xe2, 0xb6, 0xe4, 0x4a, 0x77, 0x3e, 0xaf, 0xfe, 0x62, 0xb1,
		0x00, 0x50, 0xdd, 0x2a, 0x12, 0xde, 0x22, 0xd1, 0x00, 0xaa, 0x38, 0x5d, 0x36, 0xc1, 0x0c, 0xd7,
		0x25, 0x1b, 0xc3, 0xa0, 0x3c, 0xc3, 0x4f, 0xb5, 0x13, 0x37, 0x40, 0x32, 0xe9, 0x12, 0xdd, 0x15,
		0x50, 0xe8, 0x74, 0x45, 0x27, 0x72, 0xee, 0xd3, 0xc9, 0xeb, 0xa6, 0x7f, 0x84, 0xb9, 0x7c, 0x7e,
		0x4d, 0x50, 0x25, 0x7a, 0xb1, 0x54, 0xc5, 0xdb, 0x0f, 0xfd, 0xbf, 0x45, 0x05, 0xc0, 0xcb, 0x61,
		0x28, 0x2c, 0x4a, 0xe1, 0xf8, 0x12, 0xd7, 0xbe, 0x13, 0xe8, 0x1f, 0xc4, 0xa8, 0x6f, 0xf2, 0x51,
		0x2f, 0x94, 0x9a, 0x5a, 0x57, 0x94, 0x6b, 0xae, 0x40, 0x64, 0x9b, 0x7f, 0xeb, 0x50, 0x54, 0x1e,
		0xef, 0xe2, 0x08, 0x06, 0x6d, 0x05, 0x05, 0x1c, 0x45, 0x6a, 0x49, 0x35, 0x8a, 0x2b, 0x97, 0xd9
	]);
	signature = new Uint8Array([
		0xb1, 0x9f, 0x58, 0xf4, 0x37, 0x4c, 0xc0, 0x21, 0x35, 0xeb, 0x3a, 0xae, 0x53, 0x03, 0xdf, 0xd5,
		0xe5, 0x4b, 0x68, 0xca, 0x90, 0xda, 0xf4, 0x4e, 0x2f, 0xfb, 0x4d, 0xcb, 0x65, 0xad, 0x49, 0xeb,
		0xa6, 0x24, 0x68, 0x8b, 0x7c, 0x18, 0x98, 0x71, 0x77, 0x57, 0x3a, 0xd4, 0x29, 0x9c, 0x8c, 0xae,
		0x53, 0xfd, 0x2c, 0xe2, 0xaa, 0xe3, 0x51, 0x5d, 0x03, 0x36, 0x73, 0x15, 0x5f, 0x1e, 0x58, 0x49,
		0xb8, 0x74, 0xf6, 0xbb, 0x28, 0xf6, 0x91, 0xa0, 0xb9, 0x20, 0xaa, 0xdc, 0x7c, 0xfd, 0x52, 0x18,
		0xfa, 0x2b, 0xbe, 0x60, 0x51, 0x3d, 0xf3, 0x5f, 0x50, 0xbf, 0x8a, 0xfa, 0x96, 0x8c, 0x7f, 0x3a,
		0x82, 0x1e, 0xd9, 0xf1, 0x85, 0xf2, 0x3d, 0x02, 0x05, 0x98, 0xd7, 0x45, 0xbe, 0x5d, 0xfa, 0x74,
		0xb4, 0xab, 0x25, 0x02, 0x9b, 0xd4, 0x70, 0x00, 0x63, 0x7a, 0x28, 0x68, 0x43, 0x8a, 0x6c, 0xb6
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007b8267n;
	message = new Uint8Array([
		0xaa, 0xe7, 0xe0, 0x1a, 0x6e, 0x1a, 0x10, 0x70, 0xfb, 0x04, 0xdb, 0xaf, 0x97, 0x68, 0x4b, 0xd0,
		0x25, 0x2a, 0xff, 0x01, 0xeb, 0x07, 0x15, 0xf8, 0x99, 0x84, 0x4d, 0x88, 0x87, 0x24, 0x6a, 0x72,
		0x3f, 0xde, 0xdc, 0x7d, 0x3b, 0xce, 0x9d, 0xc9, 0xf0, 0x2b, 0x59, 0x60, 0x0b, 0x79, 0xd1, 0x0e,
		0xfa, 0x00, 0x81, 0x73, 0xae, 0x7c, 0x80, 0x56, 0x9f, 0x16, 0xa9, 0x3c, 0x11, 0x93, 0xf8, 0x39,
		0x96, 0xcc, 0x36, 0x07, 0xd5, 0x5e, 0xd9, 0x55, 0x89, 0xa2, 0x26, 0x61, 0xcd, 0xe0, 0x98, 0xc9,
		0x96, 0xbf, 0x85, 0x9f, 0x81, 0x00, 0xff, 0xbb, 0xcf, 0x6c, 0xf9, 0x55, 0xad, 0x0b, 0xaa, 0xd3,
		0xb9, 0x97, 0x37, 0xdf, 0xc3, 0x30, 0x8c, 0xbd, 0xd0, 0x51, 0x8a, 0xdb, 0x65, 0x03, 0x68, 0xaa,
		0x02, 0x51, 0x53, 0xad, 0xec, 0xfb, 0x58, 0xd0, 0x2f, 0x6f, 0x84, 0xfa, 0xe4, 0xf4, 0x4a, 0xe5
	]);
	signature = new Uint8Array([
		0x29, 0x35, 0xb1, 0x5f, 0xc9, 0xd8, 0xf8, 0xda, 0xcf, 0x91, 0x2f, 0x82, 0x8c, 0xad, 0x15, 0xc5,
		0x0e, 0x66, 0x74, 0x5e, 0x08, 0x10, 0x7b, 0xb2, 0x3c, 0x41, 0x9d, 0x7b, 0x17, 0x79, 0x40, 0x71,
		0x6c, 0x04, 0x77, 0x48, 0x98, 0xbe, 0x1d, 0xb3, 0xb1, 0x75, 0xda, 0xa1, 0xcd, 0x10, 0x14, 0x90,
		0x0e, 0x7e, 0xc6, 0x47, 0x05, 0xa1, 0xa1, 0x45, 0x78, 0x9b, 0xc3, 0xa7, 0xa5, 0xd2, 0xbb, 0x5a,
		0x59, 0x56, 0xcf, 0x66, 0xa5, 0x5b, 0x25, 0x89, 0x13, 0x19, 0x3a, 0xa4, 0x4d, 0x29, 0xa7, 0x31,
		0xc3, 0x3f, 0x1b, 0x7f, 0x04, 0xcb, 0x9d, 0xbc, 0x55, 0xf3, 0x51, 0xa1, 0x2a, 0xd7, 0x77, 0x96,
		0x50, 0x28, 0x76, 0xfd, 0xfe, 0x47, 0x33, 0x0d, 0x50, 0x1c, 0x52, 0xfc, 0x87, 0xc5, 0xfc, 0x9d,
		0x11, 0x47, 0x56, 0xba, 0x49, 0x6a, 0x37, 0x42, 0xd5, 0xeb, 0x38, 0xf8, 0x83, 0x53, 0x67, 0xc9
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054128dn;
	message = new Uint8Array([
		0x0c, 0x5f, 0x5f, 0xa2, 0x83, 0x97, 0x25, 0x4f, 0xc6, 0x2d, 0x7e, 0x2c, 0xb1, 0x24, 0xb7, 0x69,
		0x87, 0x3c, 0xdf, 0xe3, 0x7f, 0x66, 0x71, 0x3d, 0x7f, 0x7a, 0x34, 0x32, 0x27, 0x2c, 0x60, 0x29,
		0x11, 0x3d, 0x02, 0x0a, 0x57, 0xee, 0xa1, 0x51, 0x56, 0xba, 0x22, 0x61, 0xb2, 0x44, 0xe9, 0x1a,
		0x9b, 0x8f, 0x41, 0xad, 0x4e, 0x6d, 0xfe, 0xaf, 0xde, 0x3a, 0x61, 0x6d, 0x34, 0xc9, 0x3b, 0x80,
		0x54, 0x9f, 0x55, 0xa1, 0xe3, 0x5f, 0x10, 0xbe, 0xe6, 0x86, 0x49, 0x4d, 0xcd, 0x58, 0x7f, 0xe0,
		0xb0, 0x1b, 0x38, 0xf9, 0xd8, 0x82, 0xa0, 0x20, 0x81, 0x6c, 0x74, 0x34, 0xde, 0xcf, 0x1e, 0xff,
		0x5e, 0xee, 0x22, 0x0c, 0x2e, 0xd3, 0xb8, 0xbd, 0xff, 0xf9, 0xba, 0x98, 0x09, 0x49, 0xc1, 0xe2,
		0x50, 0x47, 0x8c, 0x6f, 0x26, 0x8e, 0xa1, 0xb8, 0xf1, 0x7a, 0x36, 0x2e, 0x2e, 0x24, 0x51, 0xce
	]);
	signature = new Uint8Array([
		0x25, 0x96, 0xaa, 0xbc, 0x29, 0x78, 0xbd, 0x62, 0xda, 0x57, 0xc4, 0x86, 0x17, 0x2a, 0x2c, 0xf4,
		0x33, 0xeb, 0x14, 0x58, 0x35, 0x05, 0x9f, 0xc0, 0x35, 0xbd, 0x42, 0x88, 0x65, 0x00, 0x15, 0x6e,
		0xca, 0x00, 0x55, 0x4a, 0x98, 0x9d, 0x19, 0xb6, 0xbc, 0xc4, 0xf6, 0x40, 0xeb, 0x7c, 0xb5, 0xcb,
		0x63, 0x4d, 0xae, 0x38, 0xf5, 0x9b, 0x01, 0x5a, 0x01, 0xff, 0xea, 0x05, 0x04, 0x84, 0x7c, 0x64,
		0x3d, 0x52, 0x5b, 0x91, 0x0f, 0x61, 0xc2, 0x71, 0x8f, 0x4c, 0xbb, 0x07, 0x6e, 0x8a, 0xf8, 0x21,
		0x83, 0x66, 0x1d, 0x6c, 0x7e, 0x06, 0xdd, 0xdf, 0xe1, 0x57, 0x9c, 0xa2, 0xd6, 0xdc, 0x7e, 0x3e,
		0x05, 0x6b, 0x0f, 0xf6, 0xe6, 0x80, 0x6f, 0xdf, 0x41, 0x9e, 0x98, 0x40, 0x18, 0xe2, 0xa1, 0x12,
		0x68, 0x20, 0xfb, 0xe9, 0x66, 0xc5, 0x2f, 0x9d, 0x82, 0x95, 0xa2, 0xa9, 0xcc, 0x9d, 0x0e, 0x0e
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	n =
		0xcef7d8f114854a2a681fe6ef600351b20a9d992010319590ea20f4152565098aed46b75330cac1da85652398402dd9bfa04f4e6c63f3cb6a30ee169b243a5ea0757646a47dc51db6af86adaf9b700044978da876d49863601d0c4ce7629decdb7485df787c68e250fdfae9d77251a315f127a93dfb024c040e274ec658e2c19dn;
	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4822dn;
	message = new Uint8Array([
		0xa4, 0xdd, 0x2d, 0x68, 0xa6, 0xcc, 0xaa, 0x4d, 0x22, 0x18, 0xc3, 0x4c, 0x89, 0xfa, 0x1b, 0x8b,
		0x37, 0xea, 0x9a, 0x61, 0xfa, 0x12, 0x12, 0x69, 0xd1, 0x02, 0x22, 0xd5, 0xf3, 0xa5, 0x5b, 0x05,
		0x13, 0x74, 0xa2, 0x59, 0xe3, 0xe9, 0xd5, 0x43, 0xd7, 0x37, 0xb2, 0xa0, 0x2b, 0x38, 0xf4, 0x48,
		0x27, 0xa7, 0xbe, 0xe3, 0xa2, 0x8f, 0x3d, 0xff, 0xc5, 0x03, 0x8a, 0x60, 0x11, 0x10, 0xcd, 0x97,
		0xa3, 0xf0, 0xa8, 0xd7, 0xb7, 0x80, 0xd3, 0x03, 0x6c, 0xf5, 0x03, 0x0b, 0xc7, 0xca, 0x11, 0x79,
		0xf9, 0xfc, 0x58, 0x47, 0xe5, 0x7a, 0x5f, 0xf4, 0xdd, 0xd7, 0xb8, 0xd7, 0xac, 0x43, 0x27, 0xb2,
		0xda, 0xb9, 0x07, 0x8a, 0x2b, 0x7a, 0xea, 0xb6, 0x69, 0xb9, 0x80, 0x37, 0x63, 0x98, 0xba, 0x47,
		0x36, 0x53, 0x2e, 0x34, 0xcb, 0xbb, 0xbe, 0x6f, 0xa1, 0xe7, 0x74, 0xe0, 0xcd, 0x26, 0xb1, 0x7d
	]);
	signature = new Uint8Array([
		0x97, 0xa9, 0xb9, 0x07, 0x73, 0x1d, 0x60, 0x5e, 0x40, 0xd7, 0xdf, 0x6a, 0x8c, 0x81, 0x3e, 0x3f,
		0xf3, 0x19, 0xa0, 0x20, 0x74, 0xa9, 0x66, 0x78, 0x2f, 0xc2, 0xef, 0x79, 0x37, 0xd0, 0xe9, 0x71,
		0x0e, 0x44, 0x73, 0xcf, 0x07, 0x03, 0xc2, 0x3d, 0xe5, 0xa1, 0xd2, 0x38, 0xaa, 0xf3, 0x8f, 0x6c,
		0x58, 0x82, 0x72, 0x5f, 0xa3, 0x86, 0xa9, 0x2f, 0x50, 0xc2, 0x13, 0xb2, 0x53, 0x85, 0xbd, 0x1d,
		0x6b, 0x48, 0x17, 0x08, 0x95, 0x96, 0x77, 0xf7, 0x26, 0x3b, 0xb8, 0x76, 0x60, 0x49, 0xc3, 0xa2,
		0x40, 0x22, 0x18, 0x0a, 0xc7, 0xdb, 0x04, 0x9e, 0xdc, 0x37, 0xf1, 0x9c, 0x1c, 0xf1, 0xe6, 0x13,
		0xa6, 0xd2, 0x95, 0x19, 0x0f, 0xa8, 0x6b, 0x8f, 0x52, 0xb5, 0x2e, 0x98, 0x95, 0x07, 0xea, 0x13,
		0x68, 0x63, 0x7c, 0xf6, 0x14, 0x7d, 0xe8, 0x9e, 0xb9, 0xd8, 0x40, 0xd5, 0xa2, 0xfc, 0x23, 0xe4
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4822dn;
	message = new Uint8Array([
		0x65, 0x09, 0x04, 0x8d, 0xf9, 0x4c, 0x80, 0x8f, 0xcd, 0x84, 0xfc, 0xf1, 0x6a, 0xa7, 0xe6, 0x73,
		0x5f, 0x95, 0xf1, 0x11, 0x88, 0x4c, 0x72, 0xd8, 0x90, 0x5c, 0x0a, 0xf9, 0xb5, 0x9c, 0x86, 0x1c,
		0xcb, 0x1a, 0x03, 0xf6, 0x84, 0x58, 0x56, 0x1e, 0xee, 0xb5, 0xab, 0x1c, 0x3d, 0x29, 0x6b, 0xc3,
		0xcb, 0x35, 0x64, 0xc2, 0x5d, 0x1a, 0x24, 0x75, 0xa8, 0x4a, 0xa5, 0x01, 0x14, 0x1c, 0x30, 0x9f,
		0xbf, 0xc3, 0x7b, 0x38, 0xc5, 0x81, 0x15, 0x33, 0xbf, 0x18, 0x03, 0x8b, 0x89, 0x82, 0xac, 0x24,
		0x49, 0xe1, 0xf2, 0x5f, 0xac, 0xb9, 0xa2, 0xec, 0x73, 0x5d, 0x0e, 0xdf, 0x2f, 0xa7, 0xf8, 0x06,
		0x48, 0xec, 0xb2, 0x7a, 0x44, 0x2f, 0x84, 0x75, 0x46, 0x95, 0x4e, 0x63, 0xd5, 0x19, 0x6e, 0x3c,
		0xdf, 0x81, 0xe4, 0x10, 0xfe, 0x91, 0xb4, 0xe4, 0xf9, 0x7e, 0x8c, 0xbc, 0x8e, 0xa6, 0xa7, 0xf9
	]);
	signature = new Uint8Array([
		0x76, 0x32, 0xab, 0x71, 0x9f, 0x25, 0xcf, 0x1d, 0x3b, 0xaa, 0xaa, 0xac, 0xaa, 0x3f, 0xd1, 0x02,
		0xe5, 0x19, 0xe0, 0xe2, 0xb6, 0xb1, 0x53, 0xaa, 0xd7, 0x15, 0xa7, 0x15, 0x82, 0xa5, 0xd3, 0x69,
		0x90, 0xdb, 0xbf, 0x80, 0x7f, 0x9a, 0x71, 0xfe, 0x03, 0x90, 0xdd, 0xbf, 0xf7, 0x57, 0xde, 0x05,
		0x53, 0x99, 0x67, 0x3a, 0x1f, 0xc0, 0xca, 0x3e, 0x1e, 0x57, 0x7a, 0xb3, 0x80, 0x06, 0x18, 0x75,
		0xd5, 0xa3, 0xa6, 0x0d, 0xa9, 0x0c, 0xa7, 0x4e, 0xb4, 0x37, 0xaa, 0x73, 0x91, 0x0f, 0x12, 0x8f,
		0xb0, 0x14, 0xa2, 0xb2, 0xcd, 0x01, 0x94, 0xe6, 0xa4, 0x0f, 0x6a, 0x2f, 0x26, 0x97, 0xe2, 0x68,
		0x8f, 0x89, 0x9e, 0x68, 0x5f, 0x28, 0xb4, 0x3f, 0x52, 0x3d, 0x59, 0xf5, 0x5b, 0x90, 0x50, 0xf8,
		0xb7, 0xf1, 0x1e, 0xa5, 0x96, 0x0d, 0x9a, 0xa0, 0x3f, 0xc5, 0xc9, 0x43, 0x21, 0xc5, 0xa7, 0x32
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(true);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4822dn;
	message = new Uint8Array([
		0x8e, 0x14, 0x51, 0x58, 0x7d, 0x12, 0x39, 0x44, 0x0d, 0xa2, 0x08, 0x98, 0x11, 0xda, 0xd1, 0x29,
		0xd5, 0x67, 0xda, 0x3b, 0x60, 0xc8, 0xfa, 0x51, 0xf5, 0xbb, 0x45, 0x44, 0xe0, 0xf5, 0xec, 0x93,
		0x6f, 0x16, 0x5e, 0xfa, 0x3e, 0xdc, 0xb3, 0x46, 0xb7, 0x97, 0x4b, 0x67, 0xda, 0xdd, 0xb2, 0xc7,
		0x3a, 0x7e, 0xc7, 0xda, 0x48, 0xba, 0x1e, 0xf7, 0xd4, 0xb2, 0xa2, 0x66, 0xd1, 0x1d, 0x7f, 0xba,
		0x59, 0x3c, 0x3f, 0x60, 0xf1, 0x10, 0x32, 0x79, 0x0d, 0xca, 0x14, 0xe5, 0xd7, 0x83, 0xea, 0xa0,
		0x2c, 0x2d, 0x2d, 0x52, 0xe7, 0xca, 0x2a, 0x21, 0x63, 0xdc, 0xa9, 0xca, 0x3b, 0x1c, 0xcd, 0xf0,
		0x54, 0x6e, 0x3b, 0xb4, 0x1e, 0x15, 0x7e, 0x85, 0x16, 0x23, 0xab, 0x39, 0x90, 0x34, 0x40, 0x5d,
		0xb3, 0x5c, 0x52, 0xca, 0xc5, 0x5e, 0xe8, 0x79, 0xa9, 0x1f, 0xa2, 0x99, 0xa5, 0x5a, 0x9e, 0xde
	]);
	signature = new Uint8Array([
		0x90, 0x03, 0xfc, 0x80, 0x3f, 0xab, 0xb1, 0x6e, 0xa2, 0x31, 0x8a, 0x36, 0xe3, 0xe0, 0x0b, 0x8a,
		0x0d, 0x91, 0xc8, 0x82, 0xb3, 0xcf, 0x11, 0xac, 0x77, 0x8e, 0x44, 0x5c, 0xb5, 0x18, 0x9b, 0x92,
		0x0e, 0x76, 0x89, 0xb8, 0x65, 0xf1, 0xa3, 0x23, 0xfb, 0x28, 0xbd, 0xec, 0xa4, 0xef, 0xfd, 0x08,
		0x5d, 0xe9, 0x61, 0x10, 0x21, 0xae, 0x95, 0x55, 0x8d, 0xb3, 0x7b, 0xde, 0x3c, 0xe4, 0x32, 0x6a,
		0x1c, 0x93, 0x1a, 0x60, 0xaf, 0xdf, 0x03, 0xc3, 0xcb, 0x5a, 0x43, 0x46, 0x52, 0x42, 0xf8, 0x2a,
		0x6b, 0x27, 0x35, 0x2e, 0x1f, 0xa7, 0x5a, 0xf4, 0xe7, 0xbc, 0x1a, 0x93, 0xe8, 0x1b, 0x2f, 0x3f,
		0xc0, 0x7a, 0x43, 0x12, 0x17, 0x4b, 0x88, 0x88, 0xe4, 0xfb, 0xaa, 0xfb, 0xb2, 0x04, 0x88, 0x0f,
		0x31, 0x88, 0xe3, 0xe7, 0x39, 0x22, 0x3a, 0x57, 0xbc, 0x95, 0x83, 0xe6, 0xf1, 0x25, 0xf5, 0x97
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4822dn;
	message = new Uint8Array([
		0x6b, 0xc3, 0xcf, 0x22, 0xb2, 0x9b, 0x88, 0x75, 0x7a, 0x39, 0x07, 0x2d, 0xf8, 0x15, 0xb5, 0x9e,
		0x7a, 0x4f, 0x01, 0x07, 0x93, 0x44, 0xa7, 0xc8, 0x78, 0x60, 0x32, 0xcf, 0xaa, 0x33, 0xbf, 0x54,
		0xd5, 0xc6, 0x05, 0xc6, 0xf8, 0x2f, 0x92, 0x05, 0xc7, 0x63, 0x57, 0xd1, 0x4e, 0x4c, 0x67, 0x83,
		0xd6, 0x1b, 0xfc, 0xfa, 0x0c, 0xe0, 0xbb, 0xd9, 0x60, 0x57, 0x39, 0xf0, 0xac, 0x05, 0xbd, 0xf7,
		0x16, 0x84, 0x48, 0x82, 0x37, 0x1c, 0xd2, 0x31, 0x7d, 0x93, 0xd7, 0x27, 0xcd, 0x45, 0x12, 0xbe,
		0x6d, 0x77, 0x89, 0x79, 0x22, 0xe8, 0xc9, 0x3b, 0x95, 0xa9, 0x73, 0xb6, 0xfb, 0x2f, 0xf7, 0x25,
		0xf5, 0xa7, 0xa0, 0x3e, 0xb5, 0x89, 0xd1, 0x62, 0x63, 0x70, 0x8e, 0x18, 0xbf, 0x29, 0x3d, 0xb9,
		0x07, 0x09, 0xae, 0x6d, 0x1b, 0x84, 0x5a, 0x55, 0xdf, 0xfc, 0xe8, 0x0a, 0xe1, 0xd7, 0xf6, 0x47
	]);
	signature = new Uint8Array([
		0x1a, 0x73, 0xd7, 0xd3, 0xcd, 0x4d, 0xff, 0x2d, 0xe0, 0x10, 0xd2, 0xab, 0x17, 0x6e, 0xe6, 0x4d,
		0xb3, 0xad, 0xf4, 0xb1, 0xfd, 0x07, 0xcf, 0x37, 0xca, 0xf1, 0x9b, 0xd2, 0x23, 0xd6, 0xc3, 0x43,
		0xe7, 0xef, 0x75, 0xb1, 0x46, 0x03, 0xad, 0x9e, 0x0a, 0x52, 0xb8, 0x53, 0x51, 0x6c, 0xb4, 0x3f,
		0x26, 0x25, 0x52, 0xd2, 0xe2, 0x5f, 0x72, 0xc2, 0xc3, 0x11, 0x9f, 0x0f, 0xf5, 0xb5, 0x16, 0xdc,
		0x8d, 0xab, 0x84, 0x17, 0xf4, 0xaa, 0x2a, 0x85, 0xb8, 0x12, 0xe8, 0x60, 0x0b, 0x7c, 0xfb, 0xdd,
		0x21, 0x7d, 0xb9, 0x5e, 0x9f, 0x88, 0x9c, 0xb6, 0x48, 0xe8, 0x65, 0x21, 0x52, 0x89, 0xd8, 0x88,
		0x13, 0xaf, 0x6c, 0x56, 0x2b, 0x48, 0xab, 0x0a, 0x2a, 0x12, 0xc1, 0x8c, 0x7f, 0xf9, 0x27, 0xd0,
		0x20, 0x32, 0x9c, 0xd5, 0x36, 0x35, 0xac, 0x5e, 0x7c, 0x1c, 0x7f, 0xb6, 0xa9, 0x13, 0x95, 0x66
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4822dn;
	message = new Uint8Array([
		0x63, 0x21, 0x57, 0x55, 0xa5, 0x4b, 0x4a, 0x68, 0xef, 0x26, 0xd1, 0xcc, 0x12, 0x0c, 0x6b, 0x5a,
		0x96, 0x3c, 0xeb, 0xe7, 0x06, 0xdd, 0x6e, 0x6c, 0x8f, 0x40, 0x90, 0x65, 0xca, 0x66, 0xe0, 0x76,
		0xd5, 0xc2, 0x91, 0x54, 0xa8, 0x3f, 0x72, 0xe3, 0xa6, 0x85, 0x20, 0x9c, 0x73, 0x78, 0x79, 0x32,
		0x06, 0x02, 0x55, 0x75, 0xff, 0x13, 0x71, 0x76, 0x3a, 0xe6, 0xac, 0xec, 0xa4, 0x85, 0x76, 0xd6,
		0x4d, 0x8f, 0x85, 0x62, 0xbf, 0x39, 0xc9, 0x0e, 0x8f, 0x93, 0xa3, 0x0d, 0x31, 0x0d, 0x52, 0xec,
		0x10, 0x39, 0xae, 0x75, 0xde, 0xd2, 0x18, 0xd4, 0x29, 0xfe, 0xb1, 0xf8, 0x30, 0xd0, 0xca, 0x3c,
		0xf4, 0x11, 0x9c, 0x47, 0x92, 0x40, 0x39, 0x30, 0xcf, 0xd7, 0xc3, 0xe6, 0xf5, 0xd0, 0xdc, 0xd0,
		0xde, 0x68, 0x5d, 0xb0, 0x4e, 0x23, 0x4b, 0xcd, 0x86, 0x10, 0x07, 0x51, 0x15, 0x4e, 0xc4, 0xf0
	]);
	signature = new Uint8Array([
		0x3c, 0xde, 0xfb, 0xd5, 0x1d, 0x9d, 0x74, 0xdc, 0xb3, 0x4c, 0xdd, 0x5d, 0xcb, 0x6a, 0xa2, 0x32,
		0x9c, 0x38, 0xb7, 0x2b, 0xef, 0x3f, 0xc3, 0x0c, 0x55, 0x59, 0xe5, 0x64, 0xfe, 0xa7, 0xdf, 0x8e,
		0xdd, 0xe6, 0x91, 0xf7, 0x79, 0x3f, 0xb3, 0x7e, 0x4e, 0xe8, 0xe3, 0x63, 0x88, 0x44, 0x93, 0xe2,
		0x10, 0x10, 0xe6, 0x7c, 0x2b, 0x13, 0x10, 0x29, 0x7a, 0x96, 0x7d, 0xc8, 0x52, 0xf9, 0x4f, 0x11,
		0x21, 0x45, 0x6c, 0x6d, 0x83, 0xaf, 0xc9, 0x35, 0x58, 0x69, 0x27, 0xcf, 0x1b, 0x5a, 0x1a, 0x92,
		0x7a, 0x22, 0x1a, 0x05, 0xb1, 0x33, 0xdb, 0xf7, 0x75, 0x79, 0x7c, 0x11, 0x2d, 0xce, 0xce, 0x11,
		0x23, 0x25, 0x66, 0xb6, 0x4e, 0x27, 0xbb, 0xaa, 0xdd, 0xef, 0x31, 0xad, 0x70, 0x4f, 0x8b, 0x12,
		0xd0, 0xe4, 0x15, 0x71, 0x67, 0x1d, 0xe1, 0xe0, 0xfd, 0xea, 0x87, 0x3a, 0x02, 0xca, 0xe1, 0x56
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cb82f3n;
	message = new Uint8Array([
		0x36, 0x1f, 0x28, 0xf3, 0x4d, 0xbe, 0xe2, 0x40, 0x34, 0xe0, 0x33, 0x67, 0xb6, 0xb8, 0xd3, 0x4d,
		0xf3, 0x73, 0x8c, 0xa3, 0xa8, 0x6b, 0x9e, 0xbc, 0xb0, 0x9e, 0x63, 0x9b, 0xcb, 0x5e, 0x2f, 0x51,
		0x9f, 0x4a, 0x7a, 0x86, 0xfc, 0x7c, 0x41, 0x55, 0x64, 0x04, 0xa9, 0x5d, 0xcb, 0x95, 0xe6, 0x14,
		0x9b, 0x7f, 0x5b, 0x5f, 0xfb, 0xdd, 0x02, 0x60, 0x51, 0x10, 0x0f, 0x8f, 0x05, 0x6c, 0xd0, 0x0d,
		0x89, 0x30, 0xd8, 0x35, 0x96, 0xbc, 0x5c, 0x73, 0xb8, 0xfe, 0xdd, 0x59, 0x0c, 0x2e, 0x07, 0xef,
		0x48, 0xbb, 0xda, 0x4b, 0xfd, 0x85, 0x07, 0x62, 0x19, 0x4c, 0x9d, 0x1e, 0xb0, 0x68, 0xe4, 0xb1,
		0xfc, 0xbb, 0x89, 0x28, 0xa2, 0xe5, 0xfc, 0x43, 0x36, 0xb6, 0x17, 0x84, 0x02, 0xe9, 0x00, 0x86,
		0x03, 0x0f, 0x50, 0x90, 0x35, 0xc9, 0x75, 0x6a, 0x11, 0x3a, 0x55, 0x6f, 0x53, 0xbc, 0x33, 0xe4
	]);
	signature = new Uint8Array([
		0x5b, 0x59, 0x4a, 0xc8, 0xb9, 0x73, 0xc6, 0xfb, 0x48, 0x5d, 0x17, 0x26, 0x86, 0x19, 0xb2, 0x6c,
		0x99, 0x48, 0xff, 0x14, 0x22, 0x84, 0x48, 0x7a, 0x2b, 0xa1, 0xab, 0x3e, 0x65, 0xd1, 0x2a, 0xf9,
		0xe5, 0x89, 0xf8, 0xfc, 0x0f, 0x58, 0x3b, 0xc1, 0x13, 0x6a, 0x27, 0x44, 0xbe, 0x1f, 0x32, 0x5f,
		0x43, 0xe0, 0xb6, 0x04, 0xa2, 0x0c, 0x22, 0x99, 0x96, 0x47, 0x1a, 0xc2, 0xab, 0x69, 0x86, 0x04,
		0x39, 0xa5, 0x7a, 0xdf, 0x60, 0x25, 0x79, 0x45, 0xf4, 0x19, 0x7e, 0x57, 0xb7, 0xc6, 0x71, 0x10,
		0x57, 0xa6, 0x95, 0xf1, 0x3d, 0x4b, 0x44, 0xf0, 0x4d, 0x7c, 0x2b, 0xb8, 0x7b, 0xd4, 0x92, 0xfb,
		0x0c, 0x03, 0x00, 0x6c, 0x18, 0x46, 0x28, 0xba, 0xde, 0x5c, 0x16, 0x8f, 0xca, 0xab, 0xa9, 0x4f,
		0xcf, 0xbe, 0x09, 0x11, 0xcf, 0x7e, 0x0b, 0x51, 0x4a, 0xa9, 0x75, 0x92, 0x2e, 0x4a, 0x93, 0xa0
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	n =
		0xd7147d934176601d8dc64f372838bb46bceb7ed10e6dbd3100a46340d889b8e5ba3d69fbce0f4c9fa2b4df614a14fd0503dc04d6ee671cc6283d4d37410b6d0a74cc39b3d83728ca561c99d920e80f1d971e927456dab06cb9bb8600f540091f96d3605a8bde99e01cd977aaee7dcca20c328af04366bd5975c623785839a355n;
	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412b89n;
	message = new Uint8Array([
		0xbc, 0x8e, 0x2a, 0x0b, 0x7a, 0x69, 0x9a, 0xfd, 0x26, 0x23, 0x6f, 0xac, 0xc6, 0x78, 0x0b, 0x4c,
		0xcf, 0xde, 0x98, 0xa8, 0xf3, 0x0b, 0x86, 0xc2, 0x3b, 0xb7, 0x3a, 0xb9, 0x55, 0xa3, 0x04, 0xf0,
		0x2f, 0xda, 0x52, 0x6d, 0xc5, 0x37, 0x24, 0x7f, 0x37, 0x27, 0xc0, 0xa4, 0x1e, 0xb0, 0xa7, 0xa9,
		0x20, 0xb3, 0xc7, 0x13, 0xc2, 0x6e, 0xf2, 0xbe, 0x7e, 0x44, 0x8f, 0xc4, 0x16, 0xc1, 0x90, 0xa0,
		0x27, 0xd9, 0xa4, 0x94, 0x01, 0x70, 0xad, 0x48, 0xb6, 0x20, 0x74, 0xb3, 0x71, 0x36, 0x9b, 0x3e,
		0x09, 0xfd, 0xd4, 0x27, 0xd6, 0x40, 0x51, 0x24, 0xc4, 0x0a, 0x7c, 0x4a, 0xa5, 0xb0, 0xe7, 0x2c,
		0xcc, 0x11, 0x86, 0x47, 0xd7, 0x1d, 0x1c, 0x9e, 0xcc, 0x94, 0xf3, 0xa1, 0x68, 0x10, 0xd0, 0x53,
		0xb3, 0x46, 0x26, 0xac, 0xd8, 0x89, 0x8a, 0x3c, 0x34, 0x90, 0x67, 0x12, 0xad, 0x78, 0xf3, 0xdc
	]);
	signature = new Uint8Array([
		0x70, 0xc2, 0xb4, 0x7c, 0x69, 0xe6, 0x8d, 0xf4, 0xea, 0x95, 0xdc, 0xb4, 0x8b, 0xb3, 0x60, 0x9b,
		0x98, 0x80, 0x53, 0x40, 0xd4, 0x33, 0x6d, 0x54, 0x4f, 0xa5, 0xd6, 0x28, 0xaf, 0x72, 0x58, 0x3a,
		0xe8, 0x6a, 0x28, 0xc0, 0x43, 0xc5, 0xae, 0xab, 0x38, 0x9c, 0xd7, 0xc2, 0x3f, 0x2e, 0x16, 0x4e,
		0xa3, 0x2e, 0xa8, 0x3b, 0x55, 0x57, 0xcd, 0xf1, 0x42, 0x1e, 0x4e, 0xd7, 0x2d, 0x27, 0xeb, 0xc6,
		0xe6, 0x45, 0xe4, 0x74, 0x37, 0x71, 0xdc, 0xa2, 0x52, 0x72, 0x6c, 0xc6, 0x01, 0x5e, 0xd1, 0x65,
		0x18, 0x2c, 0x90, 0xe9, 0x72, 0xf6, 0xc6, 0xbe, 0x11, 0xc8, 0x1c, 0x1f, 0x68, 0x08, 0x3f, 0x58,
		0xea, 0x10, 0x0f, 0xfa, 0x61, 0xaa, 0x0d, 0x7a, 0xa8, 0x3f, 0xb4, 0xbc, 0x7d, 0xf2, 0x37, 0xdf,
		0xf2, 0x2d, 0xc0, 0x30, 0x93, 0xb6, 0x5d, 0x78, 0xeb, 0xa1, 0xe5, 0x7d, 0x43, 0x44, 0x79, 0x8d
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412b89n;
	message = new Uint8Array([
		0xb2, 0xca, 0x1c, 0x4b, 0x7d, 0x1a, 0x56, 0x59, 0x5f, 0x8f, 0xe9, 0x0c, 0x3e, 0x46, 0x0b, 0x15,
		0x1c, 0x08, 0xef, 0x26, 0xeb, 0xce, 0x3c, 0x9e, 0xa3, 0x84, 0xbf, 0x68, 0x93, 0x0e, 0x5c, 0x20,
		0xf4, 0x89, 0x4b, 0x78, 0xc4, 0xd3, 0x81, 0xdb, 0xd2, 0x4d, 0x6b, 0x50, 0x15, 0xdf, 0xe2, 0xa0,
		0x41, 0x3d, 0x5c, 0xbb, 0x9c, 0x69, 0x5f, 0x58, 0x0e, 0x7a, 0x3c, 0xdc, 0x78, 0x9b, 0xf9, 0x7d,
		0x47, 0x56, 0x8f, 0xa7, 0x49, 0x13, 0x56, 0x9e, 0xbf, 0xdb, 0xbd, 0x66, 0xb3, 0x62, 0x3e, 0xe0,
		0x8c, 0x45, 0x91, 0x35, 0xdf, 0x90, 0x20, 0x77, 0x88, 0x83, 0xbc, 0x86, 0xfa, 0x96, 0x8e, 0x31,
		0xd3, 0xba, 0x50, 0x9e, 0xb4, 0xe2, 0xbd, 0xec, 0x4f, 0xc2, 0x45, 0x16, 0xc1, 0xd6, 0x06, 0x1b,
		0x23, 0xa7, 0xf8, 0x5c, 0x5b, 0x4a, 0x67, 0x45, 0x38, 0x29, 0xa7, 0x2f, 0xbf, 0x06, 0x03, 0x85
	]);
	signature = new Uint8Array([
		0x43, 0x5a, 0xe8, 0x9e, 0xd7, 0xad, 0x41, 0x38, 0xaa, 0x8b, 0x19, 0x24, 0x5d, 0xff, 0x31, 0x53,
		0xb8, 0x29, 0x71, 0xb6, 0xad, 0x38, 0x23, 0x3d, 0x39, 0xd3, 0x4e, 0x9e, 0x38, 0x8d, 0xa6, 0x15,
		0x5e, 0x1c, 0x35, 0x35, 0x75, 0xf7, 0x4e, 0xec, 0xba, 0xbf, 0x1d, 0xb0, 0x38, 0x21, 0xdd, 0x38,
		0xfe, 0x60, 0x47, 0xbf, 0x50, 0x27, 0x36, 0x0f, 0x99, 0x1a, 0xbd, 0x89, 0x0d, 0xe2, 0x35, 0xa0,
		0xc1, 0xb5, 0x45, 0xb5, 0x48, 0x7d, 0x0d, 0xed, 0x6c, 0x45, 0x57, 0xc7, 0xef, 0x74, 0xe1, 0x25,
		0x24, 0x53, 0x4d, 0xd6, 0x66, 0x80, 0x4b, 0x86, 0x1d, 0x4a, 0x77, 0x8e, 0x42, 0x96, 0x9a, 0x32,
		0x29, 0x5b, 0x63, 0xd1, 0xd7, 0x0a, 0x10, 0x52, 0x87, 0xb0, 0xac, 0x75, 0x49, 0x4e, 0x2d, 0xff,
		0x10, 0x94, 0xa4, 0x21, 0x18, 0xec, 0x8d, 0x9b, 0x4a, 0xb2, 0x8e, 0xe5, 0xcf, 0x74, 0x6e, 0xaa
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(true);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c9c009n;
	message = new Uint8Array([
		0x37, 0x0b, 0xc7, 0x59, 0x02, 0xd8, 0x14, 0x96, 0x1b, 0x5d, 0x55, 0xa3, 0xca, 0x12, 0x33, 0x4f,
		0x31, 0xdf, 0x07, 0x64, 0x81, 0x82, 0xa8, 0x2c, 0x6d, 0x30, 0x80, 0x33, 0xdf, 0x7f, 0xe6, 0x4f,
		0xea, 0x83, 0xa8, 0xde, 0x01, 0x37, 0xe6, 0x4f, 0x66, 0x1f, 0x27, 0xe4, 0xe4, 0x2c, 0xa6, 0xb5,
		0xc1, 0xe0, 0xed, 0xf9, 0xef, 0xb2, 0xa5, 0x81, 0x82, 0xb4, 0xad, 0x85, 0x67, 0x73, 0x69, 0xa3,
		0x52, 0x1f, 0x5d, 0x25, 0xf8, 0xec, 0xfa, 0x83, 0x7f, 0xb7, 0xb7, 0x28, 0x32, 0xed, 0x64, 0x79,
		0x7a, 0xa9, 0xbb, 0x14, 0x09, 0x1c, 0x39, 0x55, 0x59, 0x32, 0x2c, 0x1f, 0x55, 0x72, 0x0c, 0xd9,
		0x56, 0x27, 0x0e, 0xb6, 0x50, 0xbd, 0xf7, 0x3a, 0x4e, 0x6d, 0x2e, 0xfa, 0x1b, 0x1d, 0x16, 0xa3,
		0x42, 0x81, 0x9a, 0x3d, 0x39, 0x87, 0x0a, 0xb1, 0xda, 0xf2, 0x25, 0x89, 0x12, 0x44, 0x77, 0xf8
	]);
	signature = new Uint8Array([
		0x3e, 0x18, 0x33, 0x3b, 0x80, 0x1b, 0xea, 0x10, 0x45, 0x45, 0x8e, 0x53, 0x81, 0x42, 0x88, 0x6d,
		0x33, 0x80, 0x17, 0xf2, 0xd8, 0xe3, 0x51, 0x47, 0x38, 0x26, 0x68, 0xc8, 0xa6, 0x85, 0x96, 0xbc,
		0x2a, 0xc5, 0xbd, 0x7f, 0x78, 0x1a, 0xc7, 0x56, 0xe5, 0xca, 0xd5, 0x11, 0x4b, 0x43, 0x73, 0xbe,
		0xe0, 0x75, 0x8f, 0xb1, 0xb3, 0xa9, 0xa5, 0xd5, 0x9d, 0x6e, 0x53, 0x45, 0x18, 0x77, 0x97, 0xb9,
		0xb0, 0x8a, 0x9c, 0xa8, 0x7c, 0xb0, 0x39, 0xb3, 0x69, 0x23, 0xe8, 0xbe, 0x48, 0xf6, 0x83, 0x9c,
		0x00, 0xa1, 0x65, 0x83, 0x6f, 0x76, 0x1c, 0x4a, 0xfa, 0xef, 0x61, 0xda, 0x4b, 0x4f, 0x64, 0xc4,
		0x26, 0xc7, 0x8c, 0xe2, 0x2b, 0xe5, 0x17, 0x74, 0xff, 0xe6, 0x7c, 0xc1, 0x60, 0x91, 0x60, 0xe0,
		0x36, 0x9c, 0xb8, 0x94, 0xf0, 0x36, 0x64, 0x2b, 0xe7, 0x89, 0x87, 0x5b, 0x8e, 0x8e, 0x33, 0xcb
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412b89n;
	message = new Uint8Array([
		0x5d, 0x85, 0xba, 0x30, 0xfe, 0xae, 0x44, 0xc6, 0xde, 0x67, 0x4c, 0x4e, 0xa2, 0x49, 0x5d, 0x3c,
		0xbe, 0x89, 0x23, 0x94, 0xf4, 0x6f, 0x18, 0xfe, 0x1a, 0x0a, 0x60, 0x1d, 0x1d, 0x23, 0xf0, 0x1d,
		0x46, 0x6f, 0xf6, 0x8b, 0xbc, 0x08, 0x75, 0x6a, 0x4b, 0x1e, 0x30, 0x83, 0x63, 0xea, 0xca, 0xfc,
		0x64, 0xe4, 0x2b, 0x2c, 0x18, 0x36, 0x26, 0xae, 0x81, 0x70, 0x58, 0xb4, 0xd6, 0x7d, 0x53, 0x9e,
		0xc8, 0xd6, 0xfc, 0xcc, 0x09, 0xf5, 0x31, 0xb0, 0x0f, 0x0d, 0xaf, 0x27, 0x16, 0xf8, 0x33, 0x09,
		0x64, 0x71, 0xe0, 0xfe, 0xd0, 0x83, 0xe1, 0x94, 0x85, 0x41, 0x4f, 0x8f, 0x04, 0xb8, 0x55, 0x81,
		0x68, 0x22, 0x92, 0x9a, 0xee, 0x5d, 0xbe, 0xc0, 0xb4, 0x9b, 0x91, 0xe2, 0xc1, 0x5a, 0xe0, 0x8a,
		0x46, 0x97, 0x0a, 0xb2, 0x23, 0x3e, 0x92, 0xd9, 0xad, 0xe6, 0x0d, 0x56, 0xaf, 0xbb, 0x3f, 0xeb
	]);
	signature = new Uint8Array([
		0x1b, 0x5f, 0x06, 0xf3, 0xc6, 0x96, 0x9f, 0xde, 0xc3, 0x90, 0x25, 0xd4, 0x09, 0xfa, 0xf8, 0xa8,
		0x00, 0xac, 0x77, 0x1d, 0x5b, 0xb8, 0x21, 0xcb, 0x8e, 0xbe, 0x53, 0x43, 0xdf, 0xeb, 0x93, 0xdd,
		0x74, 0x1e, 0xbd, 0x88, 0x1d, 0xbd, 0x02, 0xd0, 0x29, 0xcc, 0x5e, 0x76, 0x38, 0x1b, 0x45, 0x1a,
		0xa6, 0xe2, 0xef, 0xfd, 0x2a, 0x1e, 0xb0, 0x29, 0x1f, 0x00, 0x2e, 0x3c, 0xc4, 0x90, 0x9c, 0xd7,
		0x8e, 0xc5, 0x35, 0x6b, 0x11, 0x75, 0x6c, 0xdd, 0x06, 0xdb, 0x3f, 0x74, 0xea, 0xf1, 0x8b, 0xa4,
		0x9f, 0x93, 0xf7, 0xfb, 0xf5, 0x68, 0x80, 0x12, 0x3e, 0xab, 0xf4, 0x1b, 0xc1, 0xf9, 0x69, 0x56,
		0x75, 0xa4, 0x91, 0xb1, 0x40, 0x94, 0x4b, 0x73, 0x7d, 0xf5, 0x38, 0xbd, 0x7d, 0xa9, 0x04, 0xf7,
		0x2f, 0x46, 0x9c, 0x89, 0x0d, 0x05, 0xd8, 0x58, 0xd1, 0x45, 0xd5, 0x9b, 0xa1, 0x52, 0xaa, 0x19
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412b89n;
	message = new Uint8Array([
		0x70, 0xba, 0xb1, 0xb9, 0x86, 0x62, 0x37, 0xe8, 0xf5, 0x60, 0x9a, 0xeb, 0xad, 0x36, 0x62, 0xf5,
		0xa6, 0x46, 0x77, 0x22, 0x1a, 0x3a, 0xef, 0xff, 0xf2, 0xa3, 0x25, 0x4d, 0x7e, 0xe0, 0x0b, 0x02,
		0x68, 0x42, 0xc1, 0x91, 0xeb, 0x6e, 0x66, 0x6b, 0x40, 0x02, 0x2e, 0xc6, 0x59, 0x7b, 0xb4, 0x9d,
		0xd2, 0x56, 0x92, 0xf8, 0x25, 0x75, 0x30, 0x6d, 0x1d, 0xc5, 0xd9, 0xe7, 0x8d, 0x1e, 0x14, 0xa6,
		0x41, 0x6a, 0x31, 0x87, 0x35, 0x0a, 0x22, 0x86, 0x05, 0x75, 0x8c, 0x81, 0xa5, 0x22, 0x1e, 0x3f,
		0x52, 0xa9, 0x22, 0xb0, 0xc8, 0x25, 0x51, 0x76, 0xb6, 0xdc, 0xec, 0xa5, 0x6f, 0x22, 0x08, 0xc7,
		0xe2, 0x7a, 0x2a, 0x24, 0xcc, 0xff, 0x13, 0x40, 0x2c, 0x02, 0xdd, 0xa4, 0xf8, 0xf5, 0x47, 0xe1,
		0x0e, 0x87, 0x4e, 0xd3, 0x6d, 0x11, 0xfd, 0x23, 0xa5, 0x31, 0x85, 0x0f, 0x8c, 0xb4, 0x90, 0x6e
	]);
	signature = new Uint8Array([
		0x1e, 0x43, 0xdc, 0x1f, 0xbe, 0x03, 0x63, 0xe6, 0x26, 0xd5, 0x44, 0x8f, 0x36, 0x70, 0xa1, 0x00,
		0xba, 0x19, 0x90, 0x95, 0xd3, 0xd8, 0xa8, 0x19, 0x44, 0xec, 0x33, 0xc2, 0x69, 0xca, 0x5e, 0x2d,
		0xf4, 0x25, 0x6d, 0xc5, 0x74, 0x9b, 0x2a, 0xdd, 0x1a, 0xcc, 0xaa, 0xca, 0x0c, 0x3b, 0xef, 0x0a,
		0x90, 0x1f, 0xe8, 0x95, 0xba, 0xca, 0x9e, 0xaf, 0x1e, 0x52, 0x1e, 0xa0, 0x15, 0xdc, 0x4c, 0x2b,
		0xbd, 0x33, 0x4a, 0x0d, 0x86, 0xa5, 0xad, 0x65, 0x78, 0x9a, 0xde, 0xda, 0x37, 0x8a, 0x34, 0xd2,
		0x5b, 0x11, 0xd7, 0x31, 0xf3, 0x95, 0x05, 0x81, 0xf9, 0x9a, 0x9a, 0xa3, 0x85, 0xf2, 0xd6, 0x39,
		0x1c, 0xd7, 0x40, 0x24, 0x06, 0xae, 0x72, 0x96, 0x2f, 0xa4, 0x38, 0xcf, 0x12, 0xd9, 0xae, 0xec,
		0x55, 0x7c, 0xd8, 0xaa, 0x34, 0xef, 0x48, 0x3e, 0xe3, 0xae, 0xdc, 0x17, 0x37, 0xd7, 0x48, 0xa6
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412b89n;
	message = new Uint8Array([
		0x56, 0x23, 0xaf, 0x60, 0xbc, 0x0f, 0xd2, 0x88, 0xd8, 0x3d, 0xff, 0x1c, 0x0a, 0x21, 0x2b, 0x51,
		0x82, 0xb5, 0xb7, 0x13, 0x4a, 0x6e, 0x94, 0x9c, 0x87, 0x6f, 0xac, 0x46, 0xfc, 0xfe, 0x7d, 0x9d,
		0xcf, 0x34, 0x07, 0xb9, 0x90, 0xf8, 0xe9, 0xcb, 0x77, 0x2e, 0xc7, 0xf5, 0xed, 0x2b, 0xee, 0x5f,
		0x4e, 0x6c, 0x3b, 0x87, 0xee, 0x88, 0x39, 0xd8, 0x5a, 0x64, 0x89, 0x7f, 0xe0, 0xa6, 0x87, 0x7a,
		0x51, 0x6c, 0x2a, 0xf1, 0x05, 0x3d, 0x2c, 0xca, 0x20, 0x40, 0x6b, 0x78, 0x14, 0xab, 0x90, 0x13,
		0x67, 0x7f, 0xee, 0xae, 0xb7, 0x73, 0xad, 0xe5, 0xfb, 0x2d, 0x27, 0xb5, 0x0b, 0xb8, 0x92, 0x91,
		0x63, 0x33, 0xe0, 0xb1, 0x23, 0xc6, 0xe3, 0xae, 0x5b, 0xdb, 0xb5, 0x4c, 0x86, 0x8a, 0x57, 0x96,
		0x54, 0x54, 0x98, 0x31, 0xad, 0x15, 0x38, 0xea, 0xf2, 0x34, 0x4e, 0x91, 0x86, 0x1d, 0xe7, 0x0a
	]);
	signature = new Uint8Array([
		0xb1, 0x70, 0x5a, 0x41, 0x67, 0x81, 0x94, 0x3f, 0x62, 0x3d, 0x7e, 0x76, 0x6f, 0xe1, 0x82, 0x4b,
		0xba, 0xbf, 0x15, 0x76, 0x0f, 0x32, 0x88, 0x28, 0x0d, 0x36, 0x20, 0x8d, 0x6e, 0xea, 0x1f, 0xe8,
		0xd6, 0x38, 0xa9, 0xa5, 0xa7, 0x09, 0x58, 0x45, 0xcd, 0x18, 0x70, 0x45, 0x9a, 0x7f, 0x05, 0x02,
		0x39, 0x50, 0x75, 0x6d, 0x01, 0xb6, 0x30, 0xb1, 0xda, 0xe3, 0x81, 0x83, 0x83, 0xc5, 0xf5, 0xa7,
		0x8b, 0x26, 0x4f, 0x19, 0x1b, 0xdb, 0x28, 0x73, 0x5f, 0x35, 0x08, 0x39, 0xae, 0x58, 0x49, 0x0b,
		0x5f, 0xc1, 0x3b, 0xa6, 0x79, 0x4a, 0x95, 0x00, 0xb9, 0x56, 0x78, 0x2f, 0xb0, 0x13, 0xc2, 0x87,
		0x26, 0xbc, 0xcb, 0x0b, 0x19, 0x48, 0x9e, 0x72, 0x44, 0xee, 0xf8, 0x4b, 0x92, 0x62, 0xc6, 0x03,
		0x85, 0x1b, 0xe1, 0xb8, 0x85, 0xc6, 0x3c, 0x4d, 0x1b, 0x01, 0x2e, 0x1a, 0x87, 0xaa, 0x30, 0xcc
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	n =
		0xd40e4a247dddd8dc32a70a38d287f3fa23aa016b77c8e8e1a98c2f60967a2b7a38f8614066031fb6eba697c367e3430cd8d924bc9eec28529266f690d538ebb4b0381b8966e7224e3c526122afd181d6e3bb6145a5a28d46dd36c1f1da823e0ff38b439c7638b44a127b072543f18192efde9cb381b2e98f4f5fe854e3391275n;
	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004065a7n;
	message = new Uint8Array([
		0x92, 0x99, 0x31, 0x14, 0x56, 0xfe, 0x2d, 0xdf, 0xfb, 0x3d, 0x23, 0x1e, 0x14, 0xaf, 0xdb, 0x0e,
		0x3c, 0x90, 0x6f, 0xf1, 0xfc, 0x55, 0x4f, 0x04, 0xef, 0x3f, 0x87, 0xb0, 0x23, 0x31, 0x45, 0x04,
		0xc3, 0xbf, 0x95, 0x63, 0xf3, 0x87, 0x70, 0x7a, 0xfc, 0xc4, 0xf5, 0x75, 0xa9, 0x20, 0xf6, 0x73,
		0xf1, 0xca, 0xb6, 0x37, 0xd5, 0xc9, 0xf1, 0x20, 0x8c, 0x90, 0x1d, 0x5b, 0xde, 0xd2, 0xf0, 0x57,
		0xce, 0x97, 0x22, 0x79, 0x7b, 0x90, 0x74, 0x12, 0x48, 0xa7, 0xf1, 0x8e, 0x3b, 0xdb, 0x74, 0xee,
		0xa3, 0x4b, 0x6a, 0x78, 0xfe, 0x90, 0xd9, 0xac, 0x19, 0x50, 0xa2, 0x7b, 0x79, 0x10, 0x03, 0xb4,
		0xfa, 0x4a, 0x5f, 0xbf, 0xb6, 0xc0, 0x42, 0x8d, 0x28, 0x0f, 0xa0, 0xcf, 0x92, 0x87, 0x5d, 0x66,
		0x9b, 0x3a, 0x12, 0x1b, 0x3d, 0x53, 0x0f, 0x91, 0xde, 0xaa, 0x9c, 0x77, 0xbd, 0x95, 0x85, 0x02
	]);
	signature = new Uint8Array([
		0x70, 0xd2, 0xc3, 0x13, 0x8d, 0xd7, 0xa0, 0x7f, 0xe2, 0x2e, 0x8e, 0x3d, 0x23, 0x35, 0xe0, 0xa2,
		0xc0, 0xce, 0xf9, 0x49, 0x37, 0x3f, 0x53, 0xd4, 0xd2, 0x42, 0xe4, 0x02, 0x7c, 0x15, 0x45, 0x74,
		0xf6, 0xd1, 0x80, 0x14, 0x25, 0x2c, 0xc1, 0x0a, 0xb0, 0x2e, 0xc1, 0xcc, 0xdc, 0xd3, 0xdc, 0x6f,
		0x7c, 0x3d, 0x13, 0x13, 0x46, 0xe7, 0x6e, 0xdf, 0x38, 0xad, 0x66, 0xf3, 0x6f, 0xec, 0x73, 0xe9,
		0x3d, 0xf7, 0xf5, 0x48, 0xed, 0x7b, 0xa1, 0x75, 0x9f, 0xce, 0xd7, 0xb1, 0x5c, 0x8c, 0xef, 0x28,
		0x75, 0x82, 0x2a, 0x6e, 0xa5, 0xb2, 0x15, 0xa5, 0xcc, 0xa0, 0x00, 0x9f, 0xdb, 0x64, 0xf6, 0x22,
		0xeb, 0x1d, 0x9e, 0x27, 0xdf, 0x41, 0x1c, 0x3a, 0x1b, 0x91, 0x65, 0x11, 0xdf, 0xd5, 0x1d, 0xa8,
		0x73, 0xd1, 0x4a, 0x15, 0xb6, 0xd8, 0x75, 0x53, 0xa2, 0x54, 0x6e, 0xe1, 0x53, 0x27, 0xff, 0xe1
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd23bdn;
	message = new Uint8Array([
		0xca, 0x29, 0x32, 0xd6, 0x1c, 0x66, 0x29, 0x2b, 0xb0, 0x2e, 0x7e, 0x64, 0xa1, 0xc6, 0xb4, 0x04,
		0x38, 0xe4, 0xfb, 0x91, 0xaf, 0x64, 0x0c, 0xeb, 0x3a, 0x3c, 0x55, 0xdc, 0x48, 0xb2, 0x56, 0xef,
		0x05, 0xcd, 0x4b, 0x86, 0x24, 0x09, 0x0b, 0x27, 0xdd, 0x4e, 0x30, 0x17, 0x31, 0x23, 0x78, 0x2a,
		0x75, 0x20, 0x6b, 0xd9, 0x0e, 0xa1, 0x3e, 0x95, 0x7a, 0xc2, 0xf8, 0x5b, 0x90, 0x87, 0xd3, 0x89,
		0x08, 0x5a, 0xe5, 0xf0, 0x3d, 0xbb, 0xff, 0x2a, 0x32, 0x33, 0xd6, 0x2d, 0xd3, 0x89, 0x60, 0x21,
		0x7e, 0x39, 0x81, 0x6f, 0xc2, 0x22, 0xe7, 0x1b, 0x67, 0x7f, 0x33, 0x53, 0xae, 0x18, 0x59, 0x48,
		0xd9, 0xba, 0x49, 0x3c, 0xee, 0xe4, 0xcf, 0xdc, 0xb9, 0xc3, 0xb7, 0xd1, 0x10, 0x60, 0x36, 0x92,
		0x5b, 0x19, 0x85, 0x7c, 0x53, 0x4e, 0xcf, 0x24, 0x09, 0x5c, 0x4d, 0xec, 0x2a, 0xcf, 0xb0, 0xd4
	]);
	signature = new Uint8Array([
		0xac, 0x59, 0xe4, 0xb9, 0x69, 0x23, 0x6d, 0x71, 0x4c, 0x59, 0xcc, 0x42, 0x18, 0xa7, 0xcc, 0x02,
		0xcb, 0x31, 0xd8, 0x6a, 0xa2, 0x47, 0x41, 0xeb, 0xab, 0x2b, 0x02, 0xde, 0xea, 0xfc, 0x35, 0x0c,
		0x9d, 0x53, 0x3c, 0x8e, 0xb3, 0xd9, 0xa5, 0xf5, 0x33, 0x17, 0xa6, 0x34, 0xee, 0xeb, 0x05, 0xe0,
		0xd6, 0xd2, 0x92, 0xfc, 0x52, 0xaa, 0x3b, 0x54, 0x69, 0x16, 0x8b, 0x8c, 0xc7, 0x9b, 0x2d, 0xdc,
		0xfe, 0x9b, 0xe2, 0xc4, 0x2a, 0xdf, 0x62, 0xdc, 0xbc, 0x56, 0x83, 0x87, 0x42, 0x28, 0x51, 0xf3,
		0x34, 0xa2, 0x0b, 0x29, 0x94, 0xb4, 0x7f, 0xa4, 0x36, 0x15, 0xcf, 0x5e, 0xec, 0x6e, 0xed, 0x3a,
		0x99, 0x54, 0xd7, 0x71, 0x65, 0x26, 0xbd, 0x96, 0xd2, 0x61, 0x18, 0xaa, 0x85, 0xe2, 0x3c, 0x6c,
		0x82, 0x27, 0x85, 0x39, 0x87, 0x43, 0x24, 0x82, 0x2b, 0x59, 0x75, 0xc1, 0x37, 0x0a, 0x70, 0xd5
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd23bdn;
	message = new Uint8Array([
		0x1d, 0x4b, 0x55, 0x6a, 0xbc, 0x81, 0xb2, 0x93, 0xc2, 0x2f, 0xad, 0xd2, 0xb4, 0x8f, 0x26, 0xda,
		0x86, 0x99, 0xc9, 0xf5, 0x6c, 0x81, 0x84, 0xa6, 0xed, 0x81, 0x3e, 0x8d, 0x39, 0xd8, 0xc6, 0x8c,
		0xbc, 0x13, 0x09, 0x28, 0xf3, 0x8b, 0x89, 0x32, 0x7f, 0x2f, 0x0a, 0xa6, 0x78, 0x83, 0x8e, 0xd3,
		0x03, 0xe9, 0x84, 0xbc, 0x27, 0x20, 0x3d, 0xbf, 0xdc, 0x0a, 0x9f, 0x74, 0x65, 0xb2, 0x1d, 0xd8,
		0xe0, 0x8d, 0xe7, 0xab, 0x1c, 0x00, 0x5d, 0x16, 0xaa, 0x23, 0xca, 0x91, 0x37, 0xc5, 0x4f, 0x04,
		0x19, 0xb0, 0x1d, 0x2c, 0x27, 0x2d, 0xe7, 0x41, 0xce, 0xcb, 0x98, 0xd6, 0x61, 0x5d, 0x41, 0x00,
		0xb1, 0x42, 0x55, 0xba, 0xde, 0xe9, 0x18, 0x88, 0x6c, 0x93, 0x55, 0x5b, 0x99, 0x5b, 0x4f, 0xb5,
		0xee, 0x74, 0xfb, 0x0d, 0x15, 0xb3, 0x6c, 0x75, 0xea, 0x4d, 0x8f, 0x7a, 0xd4, 0xe1, 0x18, 0x4c
	]);
	signature = new Uint8Array([
		0x42, 0x5e, 0x7a, 0xb2, 0x7d, 0x14, 0xc8, 0xe0, 0x5f, 0x82, 0xc9, 0xdb, 0xc8, 0xe6, 0x60, 0xe0,
		0xf0, 0x62, 0x2d, 0xb0, 0x42, 0x6a, 0x74, 0x1e, 0xf7, 0x87, 0x6b, 0x74, 0x9f, 0xf4, 0x67, 0xf0,
		0xe5, 0x80, 0x43, 0xf1, 0x66, 0x4d, 0xe2, 0x18, 0x81, 0xf6, 0x3c, 0x08, 0x09, 0x52, 0x7a, 0xbf,
		0x40, 0x10, 0x38, 0xca, 0x92, 0x00, 0x0c, 0xa0, 0xc0, 0xf6, 0xd2, 0x2d, 0x63, 0x0c, 0x99, 0x5f,
		0xab, 0x4d, 0x26, 0x61, 0x25, 0x8f, 0xd5, 0x06, 0xcd, 0x77, 0x18, 0x9d, 0x88, 0xc4, 0x54, 0x12,
		0x78, 0xcb, 0x5a, 0x3e, 0x0a, 0xc5, 0x4e, 0x7d, 0xfa, 0x43, 0x1c, 0x47, 0x00, 0xf9, 0x91, 0x57,
		0xda, 0x16, 0xe4, 0xf8, 0x7b, 0x92, 0x53, 0x68, 0xf5, 0x37, 0x36, 0x2d, 0xbf, 0xfa, 0x9d, 0xba,
		0xec, 0x75, 0x24, 0xde, 0x3a, 0x1b, 0x1d, 0x98, 0x24, 0xce, 0x33, 0x97, 0x88, 0x77, 0x9a, 0x15
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd23bdn;
	message = new Uint8Array([
		0x99, 0x33, 0x1a, 0xf1, 0xb3, 0xc7, 0xf0, 0xf9, 0x42, 0x6b, 0x4e, 0x3d, 0x9b, 0x30, 0xd3, 0x71,
		0xf7, 0x76, 0x2e, 0x17, 0x1c, 0x02, 0xe1, 0x3b, 0x39, 0x51, 0x45, 0x61, 0x11, 0x2b, 0xcf, 0xbc,
		0x5b, 0x7b, 0x91, 0xa0, 0x69, 0x5d, 0x04, 0x3a, 0x09, 0x79, 0x04, 0x7f, 0xa9, 0x90, 0x1c, 0x62,
		0xbe, 0x54, 0x04, 0x4a, 0x66, 0x7d, 0x68, 0xc3, 0x4b, 0x19, 0xeb, 0x73, 0xcb, 0x23, 0x6c, 0x51,
		0x57, 0x58, 0x88, 0x11, 0x19, 0x46, 0x60, 0xe2, 0xda, 0xa6, 0x9c, 0x5c, 0x22, 0xeb, 0xb0, 0xb4,
		0xa1, 0x1b, 0x5d, 0x33, 0xcd, 0xde, 0x7b, 0xe6, 0xcd, 0xd5, 0xf7, 0x96, 0x96, 0x2c, 0x18, 0xfa,
		0x54, 0x73, 0x06, 0x2c, 0x0b, 0xa9, 0x8c, 0x5a, 0x7e, 0x9a, 0x1d, 0xbe, 0x50, 0x6c, 0x15, 0xd0,
		0x69, 0x74, 0x42, 0xba, 0x9b, 0x4e, 0xa3, 0x0c, 0x85, 0x2c, 0x6f, 0xb1, 0xb8, 0x6e, 0x59, 0x22
	]);
	signature = new Uint8Array([
		0x04, 0xdc, 0x5d, 0x56, 0x6e, 0x30, 0x2f, 0x6f, 0x1f, 0xbc, 0x45, 0xe4, 0xfd, 0x13, 0x64, 0x49,
		0xc3, 0x99, 0x51, 0x9b, 0xc0, 0x2a, 0x21, 0x2e, 0x1d, 0xf8, 0x77, 0x8d, 0x8f, 0xbf, 0x16, 0x6a,
		0x72, 0x31, 0x42, 0x60, 0xce, 0xd8, 0x2b, 0x30, 0x95, 0x0a, 0x34, 0x2b, 0x1c, 0xfb, 0x81, 0x57,
		0x4c, 0xe6, 0x52, 0xbb, 0x78, 0x1f, 0x6c, 0x01, 0x19, 0xa1, 0xae, 0x20, 0x21, 0xca, 0xd5, 0x21,
		0x88, 0x79, 0x16, 0x37, 0x8c, 0x84, 0x8d, 0xbc, 0x57, 0x3c, 0x3c, 0x7b, 0x8c, 0xb4, 0xf9, 0x42,
		0x1d, 0x4d, 0x79, 0xcb, 0xf3, 0xfe, 0x69, 0xcf, 0x78, 0xa0, 0xda, 0x68, 0xc7, 0xe7, 0x04, 0xc1,
		0x9b, 0x8b, 0x97, 0x16, 0xe4, 0x15, 0xe2, 0xc3, 0xf8, 0xc8, 0x53, 0x3a, 0xbe, 0x35, 0x90, 0xc3,
		0xd2, 0x5f, 0x2e, 0xe7, 0xa5, 0xcc, 0x46, 0xe0, 0xba, 0xb7, 0x49, 0x2d, 0x52, 0xdb, 0x0d, 0x4e
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd23bdn;
	message = new Uint8Array([
		0x6b, 0xe1, 0x03, 0x6d, 0x72, 0x8d, 0xea, 0x34, 0xe2, 0x24, 0xad, 0x92, 0x18, 0xdb, 0xbd, 0x01,
		0x2c, 0xb9, 0x17, 0x5b, 0x25, 0xf8, 0x19, 0x57, 0x6c, 0xae, 0x94, 0x50, 0x81, 0xad, 0x22, 0x49,
		0xed, 0xa7, 0xba, 0x2f, 0x78, 0x96, 0x81, 0x5d, 0x9b, 0x5a, 0xe3, 0x66, 0x38, 0xa4, 0xe3, 0x0e,
		0x89, 0x14, 0xaf, 0x99, 0x57, 0x9e, 0x78, 0x49, 0x6c, 0x32, 0x80, 0x22, 0x4a, 0x9c, 0x75, 0xf0,
		0x1d, 0xa9, 0xfd, 0x8b, 0xef, 0x8b, 0x92, 0x5a, 0x1b, 0x7e, 0x90, 0x16, 0x04, 0xac, 0x8c, 0xd0,
		0x06, 0x4e, 0xe8, 0x36, 0xad, 0x15, 0xa4, 0x12, 0x25, 0xc8, 0x77, 0x13, 0xf2, 0x2e, 0x1f, 0xd0,
		0xe1, 0x2e, 0xf5, 0x0a, 0x3f, 0x35, 0xc4, 0x31, 0x48, 0xd8, 0xdb, 0x2a, 0xe2, 0xbb, 0x61, 0x50,
		0x8c, 0xb1, 0xe9, 0xb9, 0x91, 0x24, 0x46, 0xba, 0x81, 0xb8, 0xa1, 0xad, 0xe1, 0x2b, 0xc9, 0xf1
	]);
	signature = new Uint8Array([
		0xc9, 0x37, 0x24, 0x23, 0x6f, 0x58, 0xae, 0x9e, 0xb0, 0xf9, 0xc6, 0xb4, 0xd9, 0x32, 0x6b, 0xb1,
		0x7c, 0xb5, 0x3b, 0x24, 0x33, 0xc2, 0xb1, 0x3d, 0x84, 0x02, 0xec, 0x0b, 0x44, 0x55, 0xd7, 0xe1,
		0xca, 0x8d, 0x5f, 0xfd, 0xe7, 0xd5, 0x7b, 0xf5, 0xd7, 0x15, 0x2d, 0xe6, 0xab, 0xe3, 0x33, 0x6d,
		0xdf, 0x78, 0x1b, 0x84, 0x9f, 0xa8, 0x21, 0xec, 0x80, 0x79, 0xd9, 0xef, 0x7c, 0x92, 0x72, 0xc9,
		0x1f, 0xf2, 0x49, 0x08, 0xf7, 0x9a, 0x9a, 0x62, 0xe8, 0x8d, 0x8f, 0xda, 0xfe, 0x3a, 0xa6, 0x7d,
		0xcb, 0x17, 0x59, 0xef, 0x54, 0xca, 0xb0, 0x3f, 0x56, 0x44, 0xfd, 0xa4, 0xde, 0xbf, 0x53, 0x7c,
		0xe6, 0xc1, 0x4c, 0xb2, 0xd3, 0x5c, 0xc2, 0x76, 0xc9, 0xde, 0xe0, 0x9a, 0xdb, 0x0e, 0xf2, 0x9c,
		0x3e, 0xd1, 0x51, 0x89, 0x29, 0x5d, 0xe1, 0x53, 0xbb, 0x20, 0xb0, 0x8c, 0x80, 0xe7, 0xd3, 0x48
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bd23bdn;
	message = new Uint8Array([
		0x98, 0x72, 0xdf, 0x5b, 0x90, 0x25, 0x39, 0x33, 0x94, 0xae, 0x1b, 0x59, 0x03, 0x07, 0x65, 0xba,
		0x60, 0xaf, 0x6c, 0xea, 0x40, 0xfc, 0xfa, 0x18, 0x67, 0xb3, 0x97, 0x42, 0x2e, 0xd6, 0x07, 0xa5,
		0x28, 0xbd, 0x14, 0x78, 0x04, 0x68, 0x8e, 0xd9, 0xb5, 0x14, 0x8f, 0x08, 0xd1, 0x0c, 0x03, 0xd3,
		0x37, 0xc2, 0x68, 0x51, 0xf5, 0x1e, 0xd3, 0xd3, 0x69, 0x16, 0x34, 0x18, 0xa6, 0x7f, 0xda, 0xc0,
		0x18, 0x23, 0x3a, 0x03, 0x6c, 0x13, 0xec, 0xa3, 0xaa, 0x3f, 0xf6, 0x1f, 0xa4, 0x43, 0x4d, 0x2a,
		0x94, 0x84, 0x99, 0x5b, 0x01, 0x7c, 0x39, 0x26, 0xe2, 0x52, 0x87, 0x0b, 0x06, 0xae, 0x5d, 0x0d,
		0xb3, 0xcb, 0xd8, 0x66, 0x8e, 0xce, 0x5b, 0x79, 0xba, 0x56, 0xd7, 0x08, 0x44, 0x54, 0x4a, 0xa7,
		0xbf, 0x1d, 0x86, 0x71, 0x2b, 0xbd, 0x34, 0xf9, 0x1c, 0x8e, 0x18, 0x84, 0x18, 0x0a, 0x97, 0x75
	]);
	signature = new Uint8Array([
		0xcc, 0x7a, 0x42, 0x7a, 0xb1, 0x09, 0xf8, 0x5f, 0x16, 0x83, 0x2c, 0x04, 0xbb, 0xa7, 0xa0, 0xee,
		0xbf, 0xcf, 0x4e, 0x23, 0x6c, 0x75, 0x07, 0xb3, 0x37, 0xfa, 0x9e, 0x1d, 0x43, 0x7d, 0x89, 0xc9,
		0x08, 0x68, 0x5a, 0x5b, 0xaf, 0xda, 0x8e, 0x26, 0xe4, 0xc1, 0x02, 0x7a, 0x84, 0x1c, 0x80, 0x9e,
		0xa0, 0x69, 0x37, 0x49, 0xc2, 0x46, 0x1c, 0x83, 0x4a, 0xa0, 0xa2, 0x34, 0x4a, 0x2a, 0x33, 0x2d,
		0xc3, 0xa3, 0x44, 0x0d, 0x89, 0x50, 0x87, 0x27, 0x85, 0x62, 0xa7, 0xe9, 0x11, 0x14, 0xa0, 0x52,
		0x59, 0x9d, 0xe0, 0xae, 0xf0, 0x67, 0x87, 0xaa, 0xc8, 0x96, 0x3b, 0x8e, 0xd2, 0xa9, 0x7d, 0xb0,
		0x88, 0xb8, 0x08, 0xf0, 0xb9, 0x1c, 0x17, 0xc9, 0x1e, 0x24, 0x44, 0x8b, 0x38, 0xfc, 0xee, 0x4c,
		0xf0, 0xc7, 0x6f, 0x4a, 0xaf, 0xa0, 0xc6, 0x1f, 0x38, 0x0c, 0x97, 0xaf, 0xc4, 0xdd, 0x49, 0xe1
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(true);

	n =
		0xcfc4fc3458c4e37c95a3d489a332e08e4019e477c85645c0fe24e25b6fbb2b24dc123ddf9f3220ba965dda6c97856b4821b3f7052453cd6ec8410f9fcb47cd2f4359d896092f8c944b9517c046adedc002219936da1276ca2e7cf43b344d96cf31313fd766f5e84af1d36afd6a46c45c140841579d1dee3907414118e382855fn;
	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053722dn;
	message = new Uint8Array([
		0x40, 0xd5, 0xb6, 0xa7, 0xc8, 0x75, 0x73, 0xde, 0x1c, 0xd1, 0x96, 0x0a, 0x16, 0xab, 0xed, 0x93,
		0x0b, 0x55, 0x91, 0xff, 0xfe, 0x17, 0xbc, 0x71, 0x14, 0xd1, 0xda, 0x70, 0x48, 0xe1, 0xe3, 0xea,
		0x60, 0x47, 0xe7, 0x79, 0x20, 0x07, 0xeb, 0xe4, 0xbd, 0xcf, 0xf3, 0xe9, 0x95, 0xda, 0x60, 0x3a,
		0x1c, 0x14, 0x7c, 0xc5, 0x1a, 0x7f, 0x54, 0x38, 0x14, 0xd5, 0xc6, 0xc5, 0x07, 0x6f, 0xda, 0x23,
		0x5d, 0x65, 0x56, 0xd5, 0x19, 0xf7, 0x8c, 0xae, 0x55, 0x2c, 0x77, 0x95, 0xee, 0xb8, 0x06, 0x86,
		0x7e, 0x23, 0xb8, 0xd9, 0x8a, 0x28, 0x69, 0xc7, 0xfd, 0x5c, 0x6c, 0x2a, 0xd5, 0x10, 0xd9, 0x84,
		0x1d, 0x77, 0x28, 0x43, 0x1b, 0x0c, 0xff, 0x43, 0xca, 0x2e, 0x49, 0x95, 0x8b, 0x0d, 0x88, 0x7f,
		0x17, 0xca, 0x6c, 0xc3, 0xb8, 0xda, 0xa4, 0x24, 0xb9, 0xac, 0xf4, 0x27, 0x1a, 0x8b, 0x88, 0x17
	]);
	signature = new Uint8Array([
		0x09, 0xe2, 0x2f, 0x65, 0x03, 0xb8, 0x1e, 0xe8, 0xe2, 0x9e, 0x0b, 0x6c, 0x96, 0x9b, 0x0a, 0xb7,
		0xdb, 0xde, 0x24, 0x22, 0x45, 0xd8, 0x06, 0xff, 0x55, 0x89, 0x15, 0x41, 0x42, 0x9a, 0x85, 0xfe,
		0x05, 0xca, 0x8d, 0x21, 0xbe, 0x82, 0x4b, 0xb9, 0x85, 0xec, 0x0a, 0xa9, 0x8d, 0x92, 0x63, 0xd8,
		0x3f, 0x8f, 0x3c, 0xe3, 0x5f, 0x5f, 0xb6, 0x79, 0x69, 0xe0, 0xe7, 0x70, 0x14, 0xd9, 0xb2, 0x09,
		0x36, 0xc3, 0x73, 0x48, 0xb3, 0x37, 0xff, 0xf3, 0x43, 0x3b, 0xab, 0x7f, 0xaf, 0xcb, 0xc4, 0x29,
		0xa3, 0x41, 0x37, 0x10, 0x48, 0x13, 0x8b, 0xc0, 0x72, 0x6a, 0x19, 0xb7, 0xa4, 0xe3, 0xc7, 0x65,
		0xe8, 0x96, 0x60, 0x40, 0x0e, 0x2c, 0xd7, 0xe1, 0x15, 0x40, 0x39, 0xfd, 0xd8, 0xc7, 0xd8, 0xf0,
		0xb8, 0x97, 0xf4, 0x42, 0xe5, 0xc9, 0xbd, 0x04, 0xd4, 0x9e, 0x11, 0x16, 0x93, 0x7a, 0x20, 0x45
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb045bn;
	message = new Uint8Array([
		0x62, 0x8a, 0xcb, 0x4d, 0xa4, 0xfb, 0x0c, 0x0b, 0x2a, 0x63, 0x28, 0x00, 0xb3, 0xd4, 0xf4, 0x7b,
		0xdf, 0xbb, 0x3c, 0xee, 0xe7, 0xc2, 0x11, 0xf4, 0x8a, 0xf4, 0x60, 0x92, 0x4b, 0x22, 0xc9, 0xbd,
		0xd9, 0x86, 0xad, 0x1d, 0xcf, 0xa7, 0x89, 0x11, 0x9d, 0x7c, 0x83, 0xf3, 0xc6, 0xd4, 0x43, 0x9d,
		0x4d, 0xf6, 0x04, 0x2c, 0x69, 0x84, 0xeb, 0x04, 0x80, 0xa5, 0x97, 0x14, 0x53, 0x62, 0xf9, 0x5b,
		0x77, 0x51, 0x66, 0xaa, 0x04, 0x71, 0xea, 0xac, 0x91, 0x56, 0xe0, 0x25, 0x5f, 0x86, 0xbf, 0x77,
		0xd4, 0x22, 0x37, 0x6a, 0x2b, 0xc9, 0x7d, 0x2c, 0x6b, 0xb9, 0xe3, 0x97, 0x95, 0x37, 0xab, 0xb3,
		0x22, 0x32, 0x1d, 0x7c, 0xac, 0x23, 0xd7, 0xe5, 0xec, 0x37, 0x65, 0x1c, 0xe4, 0xb0, 0x11, 0x10,
		0x5d, 0x88, 0xfc, 0x31, 0x94, 0x58, 0x6e, 0x76, 0x31, 0x79, 0x6b, 0xa5, 0x78, 0x69, 0x87, 0xcf
	]);
	signature = new Uint8Array([
		0x5b, 0x9c, 0xf3, 0xdf, 0x0c, 0x07, 0x17, 0x02, 0x7a, 0xd0, 0xac, 0xf5, 0x08, 0xfc, 0x0f, 0xf4,
		0xd1, 0x1f, 0xfe, 0xd4, 0x02, 0xe3, 0x55, 0x67, 0x54, 0x31, 0xb8, 0xfd, 0x44, 0xe3, 0x08, 0x94,
		0x4a, 0xce, 0x9c, 0xd6, 0x6a, 0x79, 0x0e, 0xa6, 0x6f, 0x25, 0xdd, 0xca, 0xa4, 0x3a, 0x65, 0xb5,
		0x03, 0x04, 0xda, 0x9d, 0x83, 0xb7, 0x70, 0x2f, 0xd3, 0xe9, 0xe6, 0x5d, 0x8e, 0xc2, 0xd7, 0x3c,
		0x96, 0x69, 0xdd, 0xba, 0xd5, 0x18, 0x14, 0xa0, 0x1a, 0x0a, 0x30, 0x64, 0x42, 0xae, 0x73, 0x6f,
		0xfa, 0x87, 0xfa, 0x8b, 0xc3, 0x8c, 0xd1, 0x48, 0x4d, 0xce, 0x14, 0xc5, 0x47, 0x4b, 0x57, 0x8e,
		0xa2, 0x6d, 0x98, 0xb4, 0x7d, 0xa0, 0x9e, 0xfe, 0x29, 0x4f, 0x16, 0x64, 0xc9, 0xd9, 0xa4, 0x1f,
		0x23, 0xd8, 0xbe, 0x9a, 0xaf, 0x3c, 0x68, 0xc4, 0x75, 0xd7, 0x93, 0xb6, 0xc6, 0xf8, 0xa3, 0x11
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb045bn;
	message = new Uint8Array([
		0x1d, 0x39, 0xed, 0xe4, 0x35, 0x51, 0xc1, 0x52, 0x70, 0x56, 0xd1, 0x0a, 0xd3, 0xc7, 0xec, 0xac,
		0x54, 0x57, 0x4d, 0x9a, 0x98, 0x9e, 0x7b, 0x4f, 0x01, 0x0d, 0x6d, 0xf2, 0xe8, 0x27, 0xf2, 0x2a,
		0x27, 0xee, 0x50, 0x35, 0xdb, 0x9c, 0x2b, 0x34, 0x68, 0x94, 0xa9, 0xc9, 0xbd, 0x98, 0xd4, 0xe4,
		0xd9, 0x3c, 0x40, 0xda, 0x8d, 0x9b, 0xed, 0xb8, 0x84, 0x48, 0x6e, 0xd6, 0x82, 0x88, 0x4b, 0xaf,
		0xe9, 0xbe, 0xa5, 0xef, 0x81, 0x26, 0x18, 0xce, 0x78, 0xc6, 0xe6, 0x9d, 0xa8, 0xa2, 0x51, 0x9e,
		0x19, 0x30, 0x48, 0x19, 0xc7, 0x0b, 0x46, 0xac, 0xa5, 0xeb, 0x78, 0xe3, 0xe1, 0xd5, 0x1e, 0x09,
		0x6a, 0x8f, 0x33, 0x3d, 0xb0, 0x57, 0x50, 0xc8, 0xab, 0xd4, 0xce, 0xad, 0x1e, 0x4d, 0x2b, 0x82,
		0x1d, 0x19, 0xae, 0x7f, 0xcd, 0x57, 0x4e, 0xd5, 0x6b, 0xdf, 0xd1, 0x40, 0x8f, 0x78, 0x31, 0xe0
	]);
	signature = new Uint8Array([
		0x8a, 0x54, 0x76, 0x41, 0xdb, 0x63, 0xe4, 0x0d, 0xe3, 0x8a, 0x4a, 0x9a, 0xea, 0x32, 0x7e, 0xe8,
		0x4d, 0x15, 0x8e, 0x97, 0x43, 0x29, 0xa1, 0x5c, 0xe2, 0x47, 0x8d, 0x27, 0x92, 0xfd, 0xcd, 0xac,
		0x0d, 0x0a, 0xbb, 0x6b, 0x61, 0xac, 0x8f, 0x9b, 0xec, 0x9a, 0xcb, 0x78, 0x02, 0x98, 0xbe, 0x56,
		0x97, 0x5c, 0x47, 0x6c, 0xeb, 0x12, 0x5e, 0x39, 0x4b, 0x3d, 0x16, 0x56, 0x2b, 0x03, 0xe9, 0x2f,
		0xa5, 0xf3, 0x92, 0xc7, 0x2f, 0xfc, 0xc0, 0xb3, 0xeb, 0xfd, 0x67, 0xa4, 0xc6, 0xb8, 0x0f, 0x56,
		0x52, 0xa5, 0x9b, 0xcf, 0xc1, 0x70, 0xa7, 0xf4, 0x6c, 0x21, 0x4c, 0x09, 0x9f, 0xf2, 0x87, 0xde,
		0x1c, 0xdb, 0xbb, 0x3e, 0x41, 0x0a, 0xc8, 0xd2, 0x7d, 0x72, 0xc2, 0xc5, 0x35, 0x70, 0x05, 0xa8,
		0x26, 0x2f, 0x32, 0x23, 0x08, 0xbe, 0xd5, 0x0c, 0x3b, 0x67, 0x96, 0x0e, 0x5f, 0xe0, 0xd9, 0x80
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb045bn;
	message = new Uint8Array([
		0x26, 0xf5, 0x67, 0xe1, 0xaf, 0x86, 0x6c, 0xe7, 0xa2, 0xdc, 0x22, 0xe0, 0xa2, 0x59, 0x6d, 0xf4,
		0xc6, 0x0d, 0x34, 0x3f, 0x4a, 0x91, 0xb5, 0xd4, 0x85, 0x32, 0x1b, 0x02, 0x1b, 0x52, 0x52, 0xd6,
		0x74, 0x0c, 0x1a, 0xe0, 0x6d, 0x17, 0x5a, 0x3a, 0x4d, 0xed, 0xb7, 0xc7, 0xfa, 0x2c, 0x66, 0xb9,
		0x6d, 0x3c, 0x3e, 0x56, 0x63, 0x32, 0x12, 0xfb, 0x55, 0xf4, 0x3d, 0x61, 0xab, 0x9e, 0x7e, 0x1f,
		0x2d, 0x25, 0x07, 0x70, 0xba, 0x3b, 0xd0, 0x37, 0x3c, 0x72, 0x31, 0x40, 0xdb, 0xa3, 0xb0, 0xc9,
		0x71, 0x91, 0x18, 0x41, 0x3e, 0xca, 0xcb, 0x4f, 0xde, 0xce, 0x58, 0x16, 0x77, 0x73, 0x50, 0xb8,
		0x37, 0x88, 0x56, 0x18, 0xfe, 0xb9, 0x76, 0xe5, 0x57, 0xb2, 0xb8, 0xd4, 0xad, 0x88, 0xf4, 0x2c,
		0xbc, 0x54, 0xe7, 0x88, 0x45, 0x21, 0x87, 0xd8, 0x06, 0x08, 0x94, 0xaa, 0xe9, 0x99, 0x70, 0xa8
	]);
	signature = new Uint8Array([
		0xb7, 0xa0, 0x51, 0xf7, 0x9f, 0xee, 0x95, 0xc6, 0x92, 0x77, 0xcf, 0x8e, 0xad, 0xc8, 0x67, 0x49,
		0x7f, 0x28, 0xbd, 0x9f, 0x66, 0xdf, 0x38, 0xde, 0x5b, 0xfe, 0xe5, 0x82, 0x8d, 0xe8, 0x9d, 0x9b,
		0x5b, 0xc3, 0xac, 0x72, 0x57, 0x9c, 0x86, 0xab, 0xc4, 0x05, 0xb3, 0x6f, 0x5d, 0x7e, 0xa2, 0x6b,
		0x4f, 0xdb, 0x88, 0xdb, 0xfb, 0xcd, 0xc8, 0xb7, 0x56, 0xc8, 0x0b, 0x8d, 0x0c, 0xca, 0xdd, 0x8e,
		0x33, 0xea, 0x5b, 0x5e, 0x4b, 0xbb, 0x9e, 0x8a, 0x45, 0xce, 0x61, 0xb4, 0xdb, 0xc6, 0x1f, 0x85,
		0x5f, 0x86, 0x4d, 0x46, 0xa2, 0x59, 0x9e, 0x1e, 0xc5, 0xd4, 0x59, 0x01, 0xf0, 0xe2, 0x73, 0x90,
		0x7a, 0x22, 0x0c, 0x00, 0x86, 0x3e, 0xe6, 0x9c, 0x74, 0xcd, 0x8e, 0x07, 0xf2, 0x9d, 0xda, 0x0e,
		0xd6, 0xd5, 0x19, 0xaf, 0x8c, 0x92, 0x6c, 0x2b, 0x2b, 0x64, 0x8e, 0xa1, 0xe9, 0xea, 0x06, 0xb3
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb045bn;
	message = new Uint8Array([
		0x48, 0x9a, 0x09, 0x3a, 0x19, 0x53, 0x92, 0xc1, 0x5b, 0x4a, 0xb9, 0x65, 0x67, 0x7d, 0x57, 0x28,
		0x88, 0x20, 0x9e, 0x06, 0x18, 0x34, 0x59, 0x2a, 0xe5, 0x5b, 0x75, 0x62, 0xda, 0xeb, 0xc1, 0xd1,
		0xdb, 0x41, 0xf2, 0xe4, 0xf0, 0x58, 0xea, 0x87, 0xa6, 0x9a, 0x3a, 0x98, 0xb2, 0xf5, 0xe5, 0x9b,
		0xd8, 0x32, 0x67, 0xb0, 0x0b, 0x82, 0xf5, 0xc3, 0xd6, 0x5a, 0x07, 0x03, 0xfa, 0x81, 0x14, 0x95,
		0x59, 0x68, 0x9c, 0x89, 0x12, 0xb9, 0x6c, 0x0d, 0xee, 0x32, 0x1e, 0xe0, 0xfb, 0xb4, 0xdf, 0x0a,
		0x76, 0x97, 0x75, 0xcb, 0xee, 0x41, 0x80, 0xd1, 0xa7, 0xf7, 0xff, 0xad, 0x3d, 0xf2, 0x17, 0x88,
		0x89, 0xb6, 0x10, 0x12, 0xc8, 0x9f, 0xa1, 0xbc, 0xfa, 0xbd, 0x6d, 0x27, 0x89, 0xe2, 0xcd, 0xdc,
		0x2b, 0xf8, 0xd0, 0x3d, 0x09, 0x98, 0x80, 0xbc, 0x21, 0xd9, 0x67, 0x4a, 0xe9, 0x66, 0x52, 0x12
	]);
	signature = new Uint8Array([
		0x71, 0xfd, 0x89, 0xc2, 0x0c, 0x03, 0x0e, 0x2f, 0x1d, 0x32, 0xc9, 0xb3, 0x24, 0x1f, 0x00, 0x8d,
		0xaa, 0x25, 0x02, 0xd2, 0x20, 0xa9, 0xee, 0x24, 0xdf, 0xb9, 0x37, 0xd6, 0xd0, 0xa9, 0x11, 0x72,
		0xc6, 0x86, 0xeb, 0xe1, 0x46, 0xa0, 0xb4, 0xaa, 0x88, 0x10, 0x42, 0xf0, 0x64, 0x5c, 0x65, 0xf3,
		0x24, 0x1e, 0xdc, 0xaf, 0x3e, 0x6e, 0x5e, 0x2e, 0xeb, 0x11, 0x96, 0xbc, 0xaf, 0xdb, 0xec, 0xd0,
		0x4b, 0xde, 0xc6, 0xd8, 0x4a, 0xa6, 0x80, 0x0b, 0x34, 0x4a, 0x93, 0xc0, 0xe2, 0x24, 0x3d, 0x64,
		0x50, 0xad, 0xb6, 0x8b, 0xba, 0x81, 0x68, 0xac, 0x8f, 0xe7, 0x13, 0xcd, 0xcf, 0x63, 0x95, 0x6e,
		0x50, 0x2c, 0x04, 0xa5, 0xef, 0x05, 0xae, 0x60, 0x3f, 0xa3, 0x8b, 0x3a, 0xd5, 0x01, 0x56, 0x59,
		0x8d, 0xe7, 0x0f, 0x74, 0x0e, 0x35, 0xe5, 0xa1, 0x75, 0xa6, 0xf0, 0x45, 0x10, 0x6a, 0x05, 0xf5
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(true);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fb045bn;
	message = new Uint8Array([
		0xea, 0x56, 0x7b, 0x6c, 0x6c, 0x27, 0x32, 0x08, 0x93, 0xfb, 0x1b, 0x63, 0x81, 0x77, 0x14, 0x73,
		0x9f, 0x71, 0x69, 0xe4, 0x3e, 0x06, 0x9b, 0xc4, 0x7d, 0xe6, 0x60, 0x80, 0x6c, 0xf3, 0xea, 0x0f,
		0x71, 0x0b, 0x6c, 0x6d, 0xeb, 0x21, 0xdb, 0x4b, 0x16, 0x93, 0xf2, 0x05, 0x2f, 0xb7, 0x78, 0xd4,
		0xd8, 0xb7, 0xc5, 0x45, 0xbd, 0xa0, 0x83, 0xe9, 0x78, 0xb5, 0xb2, 0x4e, 0xb2, 0x09, 0xee, 0x2f,
		0x8b, 0x4d, 0xf5, 0xe8, 0x3c, 0xe6, 0x64, 0x2c, 0xfb, 0x43, 0xc1, 0xfa, 0x20, 0x6d, 0xbe, 0xcd,
		0x85, 0xdf, 0xbc, 0x14, 0x32, 0x99, 0x8f, 0xe1, 0x3a, 0x70, 0x81, 0xe5, 0xe0, 0xa8, 0x99, 0x9c,
		0xfe, 0xc4, 0x1d, 0xc5, 0xa8, 0x9d, 0x55, 0x15, 0x0c, 0xb2, 0x92, 0x2c, 0x9c, 0xbf, 0x6f, 0xc8,
		0x70, 0x91, 0x57, 0x39, 0xe5, 0x18, 0x47, 0x15, 0x8b, 0xbe, 0xd5, 0x2c, 0x3e, 0xf7, 0x72, 0xbe
	]);
	signature = new Uint8Array([
		0x0b, 0x9e, 0x04, 0x37, 0xa5, 0x7b, 0x4a, 0x92, 0x7e, 0x26, 0xbd, 0xdb, 0x19, 0xa0, 0x73, 0x6c,
		0xe6, 0x7e, 0xcb, 0x21, 0x0e, 0x79, 0xf2, 0x46, 0x7a, 0x00, 0x11, 0x3b, 0xbb, 0x77, 0x3b, 0xe9,
		0xda, 0x3a, 0x10, 0x71, 0xc0, 0x83, 0x7d, 0xcc, 0xe4, 0x1a, 0xbc, 0xeb, 0xc5, 0x9f, 0x53, 0x87,
		0xad, 0xf9, 0x40, 0x2e, 0x50, 0xed, 0x6c, 0xf8, 0x84, 0xad, 0x00, 0x7c, 0x12, 0xc1, 0x6e, 0x7a,
		0x97, 0x32, 0x3c, 0x15, 0x0d, 0x7a, 0xcd, 0x7a, 0x45, 0x63, 0x48, 0xfa, 0x80, 0x3d, 0x4f, 0xdb,
		0xaa, 0x4c, 0x96, 0x48, 0x72, 0x4d, 0x2e, 0x68, 0xaf, 0xd1, 0x8f, 0x9b, 0x0d, 0x42, 0x47, 0x50,
		0x2b, 0x71, 0x57, 0x8a, 0xfa, 0x6d, 0x25, 0x33, 0x55, 0x65, 0xa4, 0x7b, 0x97, 0x80, 0x68, 0x7d,
		0x19, 0x97, 0xe3, 0x0a, 0xb5, 0xca, 0x2e, 0x60, 0xcb, 0x00, 0xde, 0x5b, 0x4a, 0x6b, 0x75, 0x7e
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	n =
		0x881b4401521ea4b72e57a9e3ad152536b2cc0375c5930e9699b8bfc3d16b8c1c3b37de3847438203b6664ee1b00fc7bcd03ec3c240a2cef3f367d8269bdb65cdf4bfbfc56e8fd82cc93ff90c91ce78c402da1c59037997baf56d27abfbfe9d0731b8def029501df0d83bf0fd2234344ec4daee7759969ceb5e24cc00bc12a437n;
	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8c34dn;
	message = new Uint8Array([
		0x54, 0x1b, 0x21, 0x71, 0x0c, 0x89, 0x56, 0x94, 0x94, 0x58, 0xf4, 0xda, 0xac, 0x99, 0xd9, 0x6f,
		0x59, 0x88, 0x61, 0x19, 0xde, 0xb5, 0xee, 0x78, 0xe8, 0x61, 0xc8, 0x8c, 0x09, 0x2b, 0x28, 0x77,
		0x67, 0xec, 0x8f, 0x84, 0xb6, 0xdf, 0x5c, 0x69, 0x63, 0x05, 0x9e, 0xc9, 0x12, 0xc7, 0x27, 0xfd,
		0x4b, 0xde, 0xe2, 0x14, 0x70, 0x70, 0x66, 0x18, 0xf3, 0x7b, 0xca, 0x93, 0xc5, 0x77, 0xbb, 0x52,
		0x12, 0x37, 0xcd, 0x69, 0x2b, 0x11, 0x0f, 0x78, 0xc4, 0x3e, 0xe2, 0x2c, 0x5f, 0x83, 0x0b, 0x08,
		0x08, 0x11, 0x06, 0x65, 0x43, 0xab, 0x9d, 0xb7, 0x43, 0x06, 0xba, 0x13, 0x5c, 0x75, 0x7a, 0xee,
		0xbb, 0xc6, 0x82, 0x28, 0x55, 0x66, 0x96, 0x49, 0x1d, 0xcc, 0x68, 0x0a, 0x7a, 0x15, 0xad, 0x17,
		0xf8, 0xec, 0x76, 0x13, 0x3e, 0xad, 0xbe, 0xdc, 0x40, 0xca, 0x3f, 0x11, 0xb5, 0x6d, 0x8b, 0xd2
	]);
	signature = new Uint8Array([
		0x28, 0x6d, 0xaf, 0xd4, 0xc0, 0x44, 0x95, 0xf8, 0x75, 0x45, 0x6b, 0xe6, 0xad, 0xcc, 0x91, 0x09,
		0xde, 0xf4, 0x90, 0x3b, 0xdf, 0x29, 0x72, 0xab, 0xde, 0xf4, 0x55, 0xaa, 0xc0, 0xf8, 0x14, 0xbd,
		0x71, 0x14, 0x4a, 0x0c, 0xdc, 0x87, 0x40, 0x6d, 0x4b, 0x08, 0xde, 0x70, 0xae, 0xed, 0x47, 0x07,
		0x3b, 0x70, 0xb8, 0xcc, 0x93, 0x32, 0xb7, 0x96, 0x5d, 0x58, 0x6a, 0xf2, 0xac, 0x41, 0x12, 0xbc,
		0x07, 0x68, 0x0a, 0xa9, 0x64, 0x1b, 0xea, 0xea, 0x7f, 0x5e, 0x1e, 0x7e, 0x6c, 0xda, 0x80, 0xe5,
		0x95, 0x8c, 0xe7, 0x48, 0x7e, 0x38, 0x8a, 0xad, 0x7d, 0x30, 0x27, 0xe7, 0x69, 0xac, 0x6b, 0xe2,
		0x60, 0xde, 0xb4, 0x8f, 0x7e, 0xae, 0xa1, 0xf3, 0x0e, 0x41, 0x10, 0x88, 0xc6, 0x84, 0xd5, 0x29,
		0x16, 0x18, 0x42, 0x12, 0x12, 0xba, 0x18, 0x46, 0x1f, 0x87, 0x37, 0x1f, 0xd1, 0x71, 0xb2, 0x5b
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8c34dn;
	message = new Uint8Array([
		0xde, 0x1b, 0xc3, 0x4f, 0x15, 0xb4, 0x73, 0x16, 0x7a, 0x95, 0xe1, 0xd7, 0x54, 0xf4, 0x3d, 0x94,
		0xe8, 0x10, 0x9d, 0x9c, 0x9f, 0xc3, 0x41, 0xba, 0x64, 0x56, 0x1b, 0xac, 0x4e, 0x9a, 0x8e, 0xd6,
		0x7f, 0x34, 0x77, 0x38, 0x4c, 0x39, 0x6a, 0x9e, 0x9e, 0xfb, 0x3e, 0x16, 0x97, 0x22, 0xcb, 0xa7,
		0x79, 0xfe, 0xf2, 0x40, 0xc4, 0x1b, 0xde, 0xef, 0x9f, 0x16, 0x8a, 0x53, 0x79, 0xb0, 0x83, 0x54,
		0xf0, 0x21, 0xf0, 0x11, 0xf2, 0xaf, 0xcf, 0x1a, 0x22, 0x7e, 0x81, 0xe0, 0x7d, 0xaa, 0x89, 0x6a,
		0x3d, 0x93, 0x91, 0x49, 0xfd, 0x78, 0xad, 0xcd, 0x1f, 0x48, 0xe4, 0x79, 0x6b, 0xb4, 0xed, 0xb5,
		0xf8, 0x89, 0x36, 0xc3, 0x50, 0x3d, 0x2b, 0xf4, 0xcf, 0xc7, 0xb4, 0x1c, 0x4c, 0xb4, 0xff, 0x43,
		0xfc, 0x78, 0x81, 0x9d, 0x92, 0x02, 0x37, 0xbd, 0xab, 0x93, 0x32, 0x05, 0x6a, 0xcf, 0x52, 0x61
	]);
	signature = new Uint8Array([
		0x1c, 0x63, 0x99, 0xbf, 0x07, 0x4d, 0xab, 0x80, 0x47, 0x8a, 0xfd, 0x8c, 0xd3, 0x5b, 0x21, 0x7b,
		0x9f, 0x4f, 0x7d, 0x10, 0xf8, 0x71, 0xdc, 0xac, 0xe4, 0xbc, 0x47, 0xc7, 0xaf, 0xdd, 0x37, 0xda,
		0x23, 0xb9, 0x47, 0x5c, 0x79, 0x90, 0xf8, 0x83, 0xe9, 0x5d, 0xb6, 0xe4, 0xd0, 0x25, 0x43, 0x06,
		0xba, 0x9e, 0x95, 0xca, 0x84, 0x7e, 0xf6, 0xde, 0xc8, 0x6c, 0x60, 0x84, 0xae, 0x78, 0x44, 0x0c,
		0x23, 0x08, 0xf2, 0x06, 0x1a, 0x81, 0x11, 0xbc, 0x4d, 0xf3, 0xee, 0x13, 0x3f, 0xcc, 0x00, 0xde,
		0xdc, 0xf8, 0xa3, 0x0b, 0xf5, 0xad, 0xc7, 0x97, 0x9d, 0x37, 0xda, 0xcb, 0xa5, 0x66, 0xc2, 0x29,
		0x96, 0xc0, 0x6a, 0xb1, 0x07, 0xf2, 0xbc, 0x7a, 0x0c, 0x05, 0xbd, 0xa7, 0xee, 0xf7, 0x74, 0x2b,
		0x4a, 0xba, 0xeb, 0xb4, 0x42, 0xc1, 0x1e, 0xb4, 0x1a, 0x9f, 0x32, 0xf5, 0x7f, 0x16, 0x98, 0xff
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8c34dn;
	message = new Uint8Array([
		0x81, 0x0f, 0xcf, 0xc1, 0x08, 0xd1, 0xc9, 0x58, 0xf6, 0x2f, 0x7a, 0x24, 0x3a, 0xaa, 0x72, 0x42,
		0x0b, 0xef, 0xba, 0x69, 0xdb, 0xfb, 0x68, 0x27, 0x86, 0x82, 0x71, 0x6d, 0xd0, 0x92, 0xbf, 0x4e,
		0x0e, 0x74, 0x83, 0x04, 0x23, 0xd3, 0xcd, 0x34, 0xae, 0x1f, 0x5a, 0x73, 0x82, 0x34, 0xac, 0x08,
		0x57, 0x37, 0x60, 0xf3, 0xbf, 0xc1, 0xbd, 0x2f, 0x5b, 0x40, 0x89, 0x35, 0x4e, 0x9a, 0x20, 0xc1,
		0xf2, 0x13, 0xc7, 0xd8, 0xca, 0x70, 0x3d, 0x0a, 0xb8, 0x5c, 0x93, 0xf5, 0x70, 0x0c, 0x3e, 0x0a,
		0x2d, 0x1f, 0x6b, 0x94, 0xa3, 0xc8, 0x92, 0xf5, 0x34, 0x2e, 0x4e, 0x33, 0x66, 0x13, 0x6c, 0xb4,
		0x95, 0xb4, 0x41, 0x46, 0xe5, 0xf1, 0x41, 0x63, 0x7b, 0xae, 0xce, 0xb2, 0xed, 0x79, 0x4e, 0xd0,
		0xf6, 0x6d, 0x80, 0x51, 0x6f, 0x56, 0x10, 0x02, 0x7a, 0x16, 0x69, 0x71, 0x01, 0x47, 0xca, 0xb0
	]);
	signature = new Uint8Array([
		0x52, 0x52, 0x06, 0x93, 0x7a, 0x5a, 0x77, 0x25, 0x9e, 0xf4, 0x24, 0x93, 0x50, 0xf8, 0x9d, 0x92,
		0xc1, 0xc6, 0x31, 0x37, 0xe4, 0xb1, 0x91, 0x81, 0x2a, 0x35, 0xb5, 0x3a, 0x7c, 0xb5, 0xcc, 0xa5,
		0x2b, 0x5f, 0x69, 0x7f, 0xd3, 0x02, 0xe3, 0x9a, 0x90, 0x24, 0xb0, 0x09, 0xff, 0x63, 0x57, 0xd9,
		0x98, 0xb2, 0x41, 0x69, 0x93, 0xcb, 0x72, 0xc5, 0xc8, 0x36, 0xb5, 0xba, 0x7d, 0xe7, 0x36, 0xbc,
		0x8d, 0x07, 0x02, 0x0c, 0xf9, 0x36, 0x0f, 0x76, 0x55, 0x44, 0x3a, 0x02, 0x82, 0xc9, 0x3b, 0xeb,
		0x40, 0xbb, 0x46, 0xa4, 0xf5, 0xef, 0x7b, 0x76, 0x59, 0x04, 0x33, 0xdb, 0xde, 0x99, 0x14, 0xd9,
		0xb9, 0xc4, 0x55, 0xf9, 0x35, 0x3d, 0xa4, 0x5c, 0xd4, 0x19, 0x2f, 0xeb, 0x8c, 0xdc, 0xe2, 0xcd,
		0x46, 0x74, 0x16, 0x82, 0x16, 0x29, 0x55, 0xac, 0x6d, 0xb8, 0x34, 0xa4, 0x2d, 0x2f, 0x92, 0xb5
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8c34dn;
	message = new Uint8Array([
		0x56, 0xf3, 0x5f, 0x42, 0x51, 0x6b, 0xfc, 0xa0, 0xdc, 0x1d, 0x2d, 0x72, 0x7a, 0x4f, 0xb6, 0xbb,
		0x2b, 0xcf, 0xba, 0x68, 0x41, 0x7c, 0x2b, 0xeb, 0x6f, 0x07, 0x85, 0x27, 0x23, 0xfb, 0xbc, 0x8c,
		0x15, 0xfb, 0x72, 0x83, 0x20, 0x4b, 0x6e, 0x0c, 0x52, 0x93, 0x4a, 0xa5, 0x3f, 0xdf, 0x6b, 0x6f,
		0x9a, 0xe9, 0x37, 0x8c, 0x06, 0x9b, 0x81, 0xcb, 0x29, 0xd0, 0x48, 0x87, 0x02, 0x5b, 0xa2, 0xcc,
		0x7d, 0x4a, 0xf3, 0xbc, 0x45, 0x6c, 0x62, 0x31, 0xda, 0x10, 0x8e, 0xa4, 0xe3, 0x10, 0x7c, 0x4e,
		0xc5, 0x0e, 0xd5, 0x8c, 0x74, 0xfe, 0x4e, 0x88, 0x8a, 0xe4, 0x67, 0x16, 0x96, 0xdf, 0x58, 0xdc,
		0xb6, 0x67, 0x48, 0xb6, 0x68, 0xd3, 0xc1, 0x59, 0x9d, 0x1e, 0x61, 0x36, 0x0f, 0xea, 0xd2, 0xa1,
		0xd5, 0xc5, 0xfc, 0x32, 0x34, 0xac, 0x78, 0x6b, 0xb9, 0xcd, 0x48, 0x9c, 0x84, 0x91, 0xc6, 0x04
	]);
	signature = new Uint8Array([
		0x2c, 0xe4, 0xa5, 0x86, 0x78, 0xab, 0x5a, 0x9d, 0xef, 0x66, 0x3e, 0x03, 0x39, 0x77, 0x56, 0xe4,
		0xe6, 0xe3, 0x45, 0x19, 0x96, 0x57, 0xe2, 0x52, 0x6c, 0x85, 0x15, 0xef, 0x5c, 0x70, 0x5d, 0x3d,
		0xb2, 0x77, 0x5a, 0x28, 0xc2, 0xc6, 0x55, 0x99, 0xdd, 0x78, 0x66, 0x82, 0x17, 0x0e, 0x36, 0xd5,
		0x02, 0x24, 0x28, 0x37, 0xe6, 0x88, 0xfc, 0x60, 0x20, 0xa4, 0x23, 0x9e, 0xc7, 0x38, 0x07, 0x65,
		0x72, 0x46, 0x45, 0xe9, 0x7f, 0x47, 0x95, 0xfd, 0x0e, 0x50, 0xc2, 0x57, 0xeb, 0x5c, 0x5b, 0x2f,
		0x43, 0x32, 0xf6, 0x21, 0x92, 0x31, 0xb4, 0x4b, 0x3f, 0x5b, 0xb4, 0x60, 0x5f, 0x45, 0xb9, 0x01,
		0xda, 0xe7, 0xaf, 0x47, 0x30, 0x0b, 0xb2, 0x94, 0x78, 0xff, 0x22, 0xb7, 0x40, 0x5a, 0x38, 0x3b,
		0x20, 0x87, 0x45, 0x64, 0xde, 0xf9, 0xf3, 0xb4, 0x70, 0xce, 0x46, 0xac, 0x6e, 0x56, 0x0d, 0x83
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(true);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d8c34dn;
	message = new Uint8Array([
		0x44, 0xfa, 0xf4, 0x22, 0xf1, 0x6b, 0x79, 0x4a, 0x97, 0x63, 0x18, 0x1c, 0x52, 0xdb, 0xf3, 0x06,
		0x6e, 0x43, 0xca, 0x91, 0xd7, 0x24, 0x14, 0x2e, 0xd0, 0x04, 0x4e, 0x33, 0xe8, 0x8a, 0x93, 0x21,
		0x2a, 0xe2, 0x6d, 0x28, 0x95, 0x63, 0xeb, 0xed, 0xcc, 0x6f, 0xf3, 0x8a, 0x0e, 0x9b, 0xda, 0xd6,
		0x67, 0x10, 0x32, 0xe8, 0x28, 0x32, 0xe3, 0xd6, 0x96, 0x7f, 0x7e, 0xc2, 0xdf, 0xb9, 0xcd, 0x18,
		0x52, 0x47, 0xaf, 0x11, 0xce, 0xd9, 0x22, 0x7c, 0x7b, 0x4b, 0xa2, 0xbd, 0xb9, 0xcc, 0xb2, 0x16,
		0x56, 0x3f, 0xb8, 0x25, 0x04, 0xe1, 0x0d, 0xae, 0x0a, 0x2c, 0x55, 0x9b, 0x39, 0xfc, 0x0c, 0x41,
		0x22, 0xf1, 0x62, 0xe5, 0x86, 0x14, 0x49, 0x7f, 0x0e, 0xbd, 0xcc, 0xbd, 0x3c, 0xb4, 0xa2, 0x4b,
		0xa2, 0x96, 0x03, 0x52, 0x52, 0x7a, 0xba, 0x3f, 0x95, 0xd5, 0x7c, 0xc5, 0xe0, 0x9b, 0x78, 0x25
	]);
	signature = new Uint8Array([
		0x13, 0xdb, 0x3f, 0xf9, 0xab, 0x38, 0x30, 0x59, 0x03, 0xf5, 0x40, 0x95, 0x04, 0x5f, 0xd9, 0x5e,
		0x68, 0x7a, 0x79, 0xe7, 0x64, 0x31, 0x1a, 0xf0, 0x9b, 0x3c, 0x6a, 0x26, 0x51, 0x76, 0x09, 0x9c,
		0x35, 0x47, 0x18, 0x78, 0x32, 0xa0, 0xb0, 0xd3, 0x18, 0xb0, 0xce, 0x9c, 0x58, 0xb2, 0x0b, 0x67,
		0xfb, 0xf0, 0xa8, 0xfd, 0xb0, 0x5a, 0x65, 0x6e, 0xdb, 0x46, 0x12, 0x8a, 0xa4, 0x5e, 0x1c, 0xaf,
		0xf3, 0xc6, 0x0a, 0x92, 0x0c, 0x2a, 0x50, 0x0e, 0xa0, 0xc8, 0xcf, 0x5e, 0xb4, 0xbc, 0xd9, 0xa0,
		0xfc, 0xb5, 0xac, 0xf7, 0xee, 0x33, 0x26, 0x8d, 0x35, 0x1a, 0xec, 0x65, 0x51, 0xa7, 0x3b, 0x9f,
		0x9b, 0x10, 0xf3, 0xc9, 0xc0, 0x21, 0x4a, 0xb5, 0x49, 0xa7, 0x1a, 0x7e, 0x24, 0x88, 0x40, 0xb0,
		0x92, 0x57, 0xbe, 0x2f, 0xe1, 0x5d, 0xcb, 0xf5, 0x76, 0x6d, 0x13, 0xf2, 0xef, 0x76, 0x2c, 0x97
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007afd43n;
	message = new Uint8Array([
		0x83, 0xc5, 0x3e, 0x87, 0x3e, 0x54, 0x8d, 0xe1, 0x9a, 0x44, 0xfa, 0x2d, 0x46, 0xd1, 0xdb, 0x33,
		0x77, 0xb2, 0x1c, 0x01, 0x96, 0xfb, 0x92, 0xeb, 0x35, 0x42, 0x8c, 0xd1, 0x48, 0x00, 0xab, 0xa0,
		0x92, 0x3b, 0xf4, 0x1b, 0x5d, 0x62, 0x24, 0xdc, 0x6e, 0x79, 0x43, 0x95, 0x38, 0x75, 0x7c, 0x9c,
		0x50, 0xea, 0x2c, 0xa7, 0x21, 0xe3, 0x39, 0xd4, 0xe1, 0x11, 0xa5, 0xec, 0xc4, 0x29, 0x63, 0xe8,
		0x6f, 0x87, 0x69, 0xb4, 0xaf, 0x17, 0x06, 0x34, 0x6b, 0x75, 0x76, 0x85, 0xd7, 0x53, 0xb4, 0x85,
		0xeb, 0x1c, 0x8f, 0x95, 0x14, 0xd6, 0x00, 0x9d, 0x29, 0x4d, 0xbb, 0x51, 0xa0, 0x6e, 0x04, 0xb3,
		0x02, 0xf1, 0xc4, 0xd9, 0x9c, 0x3b, 0xdc, 0xf1, 0x78, 0x82, 0xb9, 0x82, 0x8b, 0x32, 0x28, 0xf5,
		0x30, 0x8f, 0x6c, 0x53, 0xd5, 0x9c, 0x8f, 0x50, 0xf4, 0x3c, 0xf5, 0x89, 0x46, 0x98, 0x37, 0x0a
	]);
	signature = new Uint8Array([
		0x3c, 0x0a, 0x78, 0xc3, 0xf9, 0x8c, 0xf8, 0xec, 0x68, 0x83, 0x48, 0x79, 0xee, 0xf9, 0x7b, 0x99,
		0x0a, 0x69, 0xc6, 0x70, 0xb3, 0xcf, 0x98, 0x7d, 0x28, 0x36, 0x26, 0x3e, 0x0b, 0x5c, 0x33, 0xd9,
		0x20, 0x7e, 0x75, 0x21, 0xc6, 0x79, 0x42, 0x58, 0x50, 0x0a, 0x58, 0x6e, 0x30, 0x9a, 0xea, 0xdd,
		0x64, 0x1f, 0xf9, 0x8f, 0x4c, 0x55, 0xa8, 0xd9, 0xc9, 0x25, 0xe4, 0xbd, 0xff, 0xce, 0x15, 0xa3,
		0x1c, 0x31, 0xa0, 0x75, 0x1d, 0xb6, 0xf9, 0x9c, 0x89, 0x45, 0xbe, 0xeb, 0xb2, 0x59, 0x20, 0x7e,
		0x4d, 0xdc, 0xea, 0x64, 0x6e, 0x96, 0xc5, 0x7f, 0x56, 0x5f, 0x08, 0xe8, 0x7c, 0xf8, 0x3a, 0x6e,
		0x7c, 0x1e, 0x54, 0xdf, 0xb4, 0xeb, 0xa5, 0x71, 0x93, 0xb8, 0xc0, 0x66, 0xa2, 0xc5, 0x08, 0x58,
		0x74, 0x44, 0x6d, 0xf4, 0x0e, 0x40, 0x1d, 0xef, 0x7c, 0xba, 0xb9, 0x39, 0x0c, 0x13, 0x0c, 0x52
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	n =
		0xab2781536ef9ff9714f72313939513eb7c4570b7cbb1f8928576f7c9f7fdde20f5ba770c0c5a7e7857c54335e167a78bf06cea5cd2a1bfafdcfd673a7cee4a2fca01b60c3dfd78527bd1b147dd01426b7f1fb6ab34876f922dce3bbfc60d4522b6ccbf080aa72c688c0a4214d44b371008ed235902d3af3373d20ec2f631720bn;
	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d64215n;
	message = new Uint8Array([
		0x54, 0x1b, 0x21, 0x71, 0x0c, 0x89, 0x56, 0x94, 0x94, 0x58, 0xf4, 0xda, 0xac, 0x99, 0xd9, 0x6f,
		0x59, 0x88, 0x61, 0x19, 0xde, 0xb5, 0xee, 0x78, 0xe8, 0x61, 0xc8, 0x8c, 0x09, 0x2b, 0x28, 0x77,
		0x67, 0xec, 0x8f, 0x84, 0xb6, 0xdf, 0x5c, 0x69, 0x63, 0x05, 0x9e, 0xc9, 0x12, 0xc7, 0x27, 0xfd,
		0x4b, 0xde, 0xe2, 0x14, 0x70, 0x70, 0x66, 0x18, 0xf3, 0x7b, 0xca, 0x93, 0xc5, 0x77, 0xbb, 0x52,
		0x12, 0x37, 0xcd, 0x69, 0x2b, 0x11, 0x0f, 0x78, 0xc4, 0x3e, 0xe2, 0x2c, 0x5f, 0x83, 0x0b, 0x08,
		0x08, 0x11, 0x06, 0x65, 0x43, 0xab, 0x9d, 0xb7, 0x43, 0x06, 0xba, 0x13, 0x5c, 0x75, 0x7a, 0xee,
		0xbb, 0xc6, 0x82, 0x28, 0x55, 0x66, 0x96, 0x49, 0x1d, 0xcc, 0x68, 0x0a, 0x7a, 0x15, 0xad, 0x17,
		0xf8, 0xec, 0x76, 0x13, 0x3e, 0xad, 0xbe, 0xdc, 0x40, 0xca, 0x3f, 0x11, 0xb5, 0x6d, 0x8b, 0xd2
	]);
	signature = new Uint8Array([
		0x80, 0xe1, 0x84, 0x6a, 0xd5, 0x0e, 0xc6, 0xac, 0x99, 0x37, 0xbe, 0x11, 0xc1, 0xd5, 0x89, 0x04,
		0x1f, 0xc9, 0x70, 0x34, 0x4d, 0x59, 0x97, 0xac, 0x3d, 0x9f, 0x6e, 0xd5, 0x73, 0x53, 0x92, 0xbd,
		0x5d, 0xc3, 0xdc, 0x62, 0x6f, 0x5b, 0x6e, 0x49, 0x84, 0x2d, 0x79, 0xc9, 0xcc, 0xe2, 0x15, 0x27,
		0x80, 0x8d, 0x8c, 0x3b, 0xd3, 0x00, 0x48, 0xe1, 0xf0, 0x75, 0x67, 0xc8, 0x4e, 0xed, 0x70, 0x4a,
		0x8f, 0x20, 0x1c, 0xe8, 0x40, 0xef, 0xb0, 0x8e, 0x3c, 0x86, 0x0d, 0x15, 0xdb, 0x42, 0x1a, 0xb4,
		0x99, 0x8f, 0x4a, 0xcb, 0x43, 0x28, 0x0e, 0x84, 0x45, 0xed, 0x25, 0xb3, 0x2b, 0x6e, 0x62, 0xef,
		0x7b, 0x47, 0x27, 0x0e, 0x94, 0xcf, 0xef, 0xf3, 0x16, 0x03, 0xe6, 0x09, 0xa9, 0x98, 0x14, 0x36,
		0x9d, 0x2e, 0xef, 0xee, 0xb8, 0x8c, 0x5b, 0xc5, 0xa4, 0xa8, 0x12, 0x1e, 0xcb, 0xf3, 0x79, 0x00
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d64215n;
	message = new Uint8Array([
		0xde, 0x1b, 0xc3, 0x4f, 0x15, 0xb4, 0x73, 0x16, 0x7a, 0x95, 0xe1, 0xd7, 0x54, 0xf4, 0x3d, 0x94,
		0xe8, 0x10, 0x9d, 0x9c, 0x9f, 0xc3, 0x41, 0xba, 0x64, 0x56, 0x1b, 0xac, 0x4e, 0x9a, 0x8e, 0xd6,
		0x7f, 0x34, 0x77, 0x38, 0x4c, 0x39, 0x6a, 0x9e, 0x9e, 0xfb, 0x3e, 0x16, 0x97, 0x22, 0xcb, 0xa7,
		0x79, 0xfe, 0xf2, 0x40, 0xc4, 0x1b, 0xde, 0xef, 0x9f, 0x16, 0x8a, 0x53, 0x79, 0xb0, 0x83, 0x54,
		0xf0, 0x21, 0xf0, 0x11, 0xf2, 0xaf, 0xcf, 0x1a, 0x22, 0x7e, 0x81, 0xe0, 0x7d, 0xaa, 0x89, 0x6a,
		0x3d, 0x93, 0x91, 0x49, 0xfd, 0x78, 0xad, 0xcd, 0x1f, 0x48, 0xe4, 0x79, 0x6b, 0xb4, 0xed, 0xb5,
		0xf8, 0x89, 0x36, 0xc3, 0x50, 0x3d, 0x2b, 0xf4, 0xcf, 0xc7, 0xb4, 0x1c, 0x4c, 0xb4, 0xff, 0x43,
		0xfc, 0x78, 0x81, 0x9d, 0x92, 0x02, 0x37, 0xbd, 0xab, 0x93, 0x32, 0x05, 0x6a, 0xcf, 0x52, 0x61
	]);
	signature = new Uint8Array([
		0x06, 0xe5, 0x62, 0x0b, 0xd5, 0x95, 0xf0, 0xe1, 0xa7, 0x0a, 0xa5, 0xd7, 0x3b, 0xaf, 0xea, 0x42,
		0xea, 0xc2, 0xa1, 0x31, 0x12, 0x09, 0x19, 0x90, 0x3a, 0xd4, 0x25, 0x9d, 0x9b, 0x2a, 0x74, 0x4d,
		0x71, 0xd2, 0x2f, 0xc2, 0xab, 0x36, 0xdc, 0x1c, 0x6c, 0xb0, 0xd7, 0xe9, 0xe7, 0x73, 0x35, 0xa4,
		0x33, 0xb5, 0xc4, 0xea, 0x28, 0x51, 0x80, 0xcd, 0x55, 0x12, 0x14, 0x02, 0x2b, 0xe3, 0xd4, 0xa1,
		0x45, 0xb3, 0x71, 0xf3, 0x76, 0x0c, 0x0d, 0x01, 0x35, 0x97, 0x2b, 0x95, 0xeb, 0x59, 0x3e, 0x28,
		0x3e, 0x04, 0xc7, 0x57, 0x8d, 0x1d, 0xd9, 0xf3, 0x8f, 0x3f, 0x0a, 0xed, 0x08, 0xbc, 0xb6, 0x0f,
		0x80, 0x59, 0x3a, 0xef, 0x3b, 0x14, 0x15, 0x5a, 0xc0, 0xeb, 0x98, 0xd5, 0x47, 0x05, 0xf2, 0x4b,
		0xa7, 0x59, 0x58, 0x21, 0x5e, 0x30, 0x89, 0x49, 0xb6, 0x2f, 0x45, 0x45, 0xe4, 0x8e, 0xd9, 0x38
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d64215n;
	message = new Uint8Array([
		0x81, 0x0f, 0xcf, 0xc1, 0x08, 0xd1, 0xc9, 0x58, 0xf6, 0x2f, 0x7a, 0x24, 0x3a, 0xaa, 0x72, 0x42,
		0x0b, 0xef, 0xba, 0x69, 0xdb, 0xfb, 0x68, 0x27, 0x86, 0x82, 0x71, 0x6d, 0xd0, 0x92, 0xbf, 0x4e,
		0x0e, 0x74, 0x83, 0x04, 0x23, 0xd3, 0xcd, 0x34, 0xae, 0x1f, 0x5a, 0x73, 0x82, 0x34, 0xac, 0x08,
		0x57, 0x37, 0x60, 0xf3, 0xbf, 0xc1, 0xbd, 0x2f, 0x5b, 0x40, 0x89, 0x35, 0x4e, 0x9a, 0x20, 0xc1,
		0xf2, 0x13, 0xc7, 0xd8, 0xca, 0x70, 0x3d, 0x0a, 0xb8, 0x5c, 0x93, 0xf5, 0x70, 0x0c, 0x3e, 0x0a,
		0x2d, 0x1f, 0x6b, 0x94, 0xa3, 0xc8, 0x92, 0xf5, 0x34, 0x2e, 0x4e, 0x33, 0x66, 0x13, 0x6c, 0xb4,
		0x95, 0xb4, 0x41, 0x46, 0xe5, 0xf1, 0x41, 0x63, 0x7b, 0xae, 0xce, 0xb2, 0xed, 0x79, 0x4e, 0xd0,
		0xf6, 0x6d, 0x80, 0x51, 0x6f, 0x56, 0x10, 0x02, 0x7a, 0x16, 0x69, 0x71, 0x01, 0x47, 0xca, 0xb0
	]);
	signature = new Uint8Array([
		0x0c, 0x18, 0x05, 0x05, 0x60, 0xc4, 0x00, 0xfe, 0x3b, 0xc3, 0x90, 0xff, 0xf3, 0x14, 0xae, 0xcf,
		0xc9, 0x26, 0xd4, 0x5d, 0x5d, 0xc3, 0x10, 0xd1, 0xa8, 0x0e, 0xcd, 0xcd, 0x23, 0x7d, 0x2e, 0x97,
		0xa2, 0xa3, 0x28, 0x3c, 0x99, 0xbc, 0x49, 0xba, 0xaa, 0x14, 0x7b, 0xbb, 0x82, 0xf0, 0xe4, 0x83,
		0x4f, 0x2d, 0xa7, 0xd9, 0xca, 0x29, 0xbc, 0x36, 0xfe, 0x43, 0x03, 0x3a, 0xdc, 0x0e, 0x56, 0xbd,
		0xd1, 0x75, 0x66, 0x64, 0x24, 0x1b, 0x16, 0x66, 0x4a, 0x52, 0xd6, 0x38, 0x3c, 0xf5, 0x45, 0xf3,
		0xec, 0xd2, 0x5b, 0xe6, 0xd4, 0x50, 0xbf, 0x82, 0x33, 0x0c, 0x1f, 0xc0, 0x20, 0xd4, 0xf8, 0x99,
		0x45, 0x18, 0x6e, 0x53, 0x47, 0xf6, 0x57, 0xaa, 0x8c, 0xb3, 0x64, 0xbd, 0xda, 0xd0, 0xc3, 0x3f,
		0x7d, 0x94, 0xb6, 0x52, 0x19, 0x74, 0x32, 0x10, 0x8d, 0xed, 0xaa, 0x18, 0x63, 0x38, 0xd2, 0x90
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d64215n;
	message = new Uint8Array([
		0x60, 0xe8, 0xb8, 0x40, 0x31, 0x6f, 0x75, 0x53, 0x5b, 0x11, 0x71, 0xf6, 0xea, 0x36, 0xc7, 0xea,
		0x71, 0xba, 0x2e, 0x16, 0x07, 0xe7, 0x20, 0x1f, 0x90, 0xa0, 0x3b, 0x3a, 0x3e, 0xde, 0xe7, 0x3e,
		0x57, 0x61, 0x39, 0xfe, 0x38, 0x9f, 0x17, 0xd5, 0x9a, 0x01, 0x9d, 0x82, 0x14, 0x4e, 0xc0, 0x36,
		0xe1, 0x67, 0x31, 0xec, 0xe4, 0x36, 0x84, 0xf9, 0xe9, 0xe1, 0x92, 0xe4, 0x2e, 0x43, 0x1c, 0x77,
		0x22, 0x9c, 0xb1, 0x16, 0x6c, 0x87, 0xd1, 0x50, 0x2f, 0x2d, 0x52, 0xb4, 0x8c, 0xb9, 0x03, 0xe6,
		0x69, 0x0c, 0x90, 0xf2, 0x71, 0xb1, 0xa5, 0xdf, 0x5c, 0x13, 0x56, 0x88, 0x71, 0xed, 0xbf, 0xa7,
		0x49, 0x03, 0xe7, 0x33, 0xd5, 0x10, 0xeb, 0xec, 0xa3, 0xff, 0x58, 0x34, 0x5c, 0x5d, 0xd8, 0x20,
		0x92, 0x0f, 0x11, 0xcf, 0xb8, 0x40, 0xca, 0xfa, 0x72, 0x9e, 0x4f, 0xcd, 0x10, 0xc6, 0x17, 0xf5
	]);
	signature = new Uint8Array([
		0x50, 0x0d, 0x43, 0xa0, 0x5b, 0x30, 0x83, 0xbf, 0x97, 0x20, 0xd5, 0x9e, 0x24, 0x85, 0x6d, 0x84,
		0x29, 0xd9, 0x5f, 0xdd, 0xf3, 0xca, 0xea, 0x99, 0x68, 0xd3, 0x09, 0x62, 0xe1, 0x44, 0x73, 0xb6,
		0x00, 0x17, 0xad, 0x57, 0xf0, 0x70, 0x86, 0xbb, 0x0f, 0x3d, 0xed, 0x5a, 0xae, 0xb2, 0xb5, 0x03,
		0x4e, 0xcd, 0x54, 0x1f, 0x64, 0xe7, 0xbd, 0x40, 0xbd, 0xd2, 0x5d, 0xbf, 0xb0, 0xb1, 0xd4, 0x6f,
		0xc6, 0x9c, 0x79, 0xa8, 0xf8, 0x33, 0xee, 0x3c, 0x75, 0x80, 0x33, 0xf3, 0xa4, 0x8a, 0x5d, 0x79,
		0xab, 0x0f, 0xdb, 0xed, 0xd7, 0x26, 0x49, 0x18, 0x80, 0xd5, 0xa1, 0x3e, 0x6a, 0x54, 0x50, 0x21,
		0x12, 0x5a, 0x0f, 0xd6, 0x95, 0xb0, 0xd2, 0x66, 0xf9, 0xe5, 0x27, 0x23, 0x7e, 0x11, 0x90, 0x83,
		0xc4, 0xb1, 0x75, 0xab, 0xd8, 0x39, 0x1c, 0xa0, 0xbd, 0x26, 0xcb, 0x84, 0x24, 0x9b, 0xf1, 0xf0
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(true);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d64215n;
	message = new Uint8Array([
		0xde, 0x22, 0x5e, 0x04, 0xaf, 0xc5, 0x70, 0x1b, 0xc2, 0xc4, 0x0a, 0xc3, 0xa9, 0xb9, 0x72, 0xfc,
		0xf0, 0x4d, 0xb8, 0x63, 0x53, 0xa0, 0x8d, 0xb3, 0x2d, 0xec, 0x58, 0x8c, 0x34, 0x65, 0x87, 0x73,
		0x64, 0x63, 0x23, 0x1b, 0x39, 0xc2, 0xa8, 0xe2, 0x21, 0x89, 0x13, 0x9f, 0x31, 0xcb, 0x3c, 0x9b,
		0x17, 0xcb, 0x66, 0xdd, 0x50, 0x63, 0x15, 0xab, 0x9b, 0xa7, 0x20, 0x4d, 0xad, 0xc5, 0x06, 0x14,
		0x26, 0x30, 0x85, 0x9b, 0xc4, 0xfd, 0x69, 0x4d, 0xd6, 0x8d, 0xa3, 0x27, 0xf4, 0x6c, 0x9a, 0xbf,
		0xee, 0x79, 0xc6, 0x86, 0x02, 0x47, 0x7a, 0x4a, 0x52, 0xc4, 0x01, 0xff, 0x95, 0x18, 0xed, 0xbe,
		0x0c, 0xd0, 0xac, 0x0e, 0xb7, 0x3c, 0x5c, 0x63, 0xca, 0x15, 0xe0, 0xe4, 0x5b, 0x63, 0x34, 0x71,
		0x5d, 0x9e, 0xfd, 0xe5, 0xd1, 0x14, 0x65, 0x98, 0x3b, 0x8a, 0x25, 0x29, 0x53, 0x26, 0xe3, 0x7a
	]);
	signature = new Uint8Array([
		0x0a, 0x2d, 0x99, 0xa4, 0x41, 0x6e, 0x30, 0x96, 0x9e, 0x2e, 0x6c, 0x5c, 0xf9, 0x46, 0x03, 0xdc,
		0x1f, 0x94, 0x93, 0x69, 0x74, 0x75, 0x3e, 0xf5, 0x51, 0x3d, 0xf8, 0xe5, 0xdc, 0x6a, 0xe6, 0x76,
		0x8f, 0xf5, 0xb2, 0xba, 0x32, 0x31, 0xe5, 0x1b, 0x45, 0xda, 0x4d, 0xd9, 0x02, 0x33, 0xfd, 0x13,
		0x6d, 0x59, 0xe5, 0x6a, 0x2a, 0x96, 0xc8, 0x86, 0xb1, 0xed, 0xaf, 0xba, 0xe4, 0x85, 0xc9, 0xb6,
		0x08, 0x4c, 0x88, 0xfd, 0x09, 0xd6, 0x91, 0xc2, 0xeb, 0xb1, 0x57, 0xf4, 0xf7, 0x1b, 0x2f, 0x3c,
		0xbf, 0x92, 0x90, 0x12, 0x3a, 0xcf, 0x50, 0xe4, 0xd6, 0x97, 0xbb, 0xa9, 0xb0, 0x02, 0x2f, 0x61,
		0x86, 0x27, 0xa2, 0x64, 0x6e, 0xad, 0x3b, 0x93, 0x06, 0x7c, 0xcb, 0xa8, 0x2a, 0x4b, 0x43, 0xf8,
		0x75, 0x5a, 0x53, 0x93, 0xe5, 0x43, 0x3a, 0x00, 0x39, 0x8d, 0xf0, 0x83, 0x7d, 0x54, 0x57, 0xae
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bbb2f9n;
	message = new Uint8Array([
		0xd4, 0xfa, 0xc2, 0xaf, 0x4f, 0xa7, 0xa3, 0x93, 0x4a, 0xfc, 0x12, 0x3e, 0x9f, 0x3d, 0xd0, 0xbe,
		0x32, 0x8c, 0x0c, 0xd6, 0xca, 0x67, 0xd6, 0xa3, 0x1f, 0x72, 0xd6, 0x7f, 0x34, 0x77, 0x3e, 0x26,
		0xe6, 0xab, 0xfd, 0x18, 0xc5, 0x33, 0x36, 0x3e, 0x24, 0xe6, 0xf0, 0xcf, 0x6c, 0x55, 0x0f, 0x75,
		0xb6, 0x08, 0x83, 0xac, 0x98, 0x0b, 0xbf, 0x6b, 0x3e, 0xaa, 0x6c, 0x07, 0xbd, 0x78, 0x5f, 0x54,
		0xa5, 0x96, 0xc9, 0x0d, 0xd5, 0x31, 0xae, 0x76, 0x94, 0x4d, 0x99, 0x3f, 0xdd, 0xc1, 0x8d, 0xac,
		0xf9, 0x83, 0x3e, 0xf3, 0x54, 0x26, 0x81, 0xe6, 0x89, 0xa1, 0x02, 0xd1, 0xbf, 0x52, 0x35, 0xa6,
		0x38, 0x43, 0x8f, 0x57, 0x27, 0xab, 0xf5, 0x84, 0xc2, 0xb8, 0x75, 0x56, 0x99, 0x8b, 0x34, 0xab,
		0x26, 0x85, 0xa7, 0x73, 0xa5, 0xc1, 0x06, 0x59, 0x26, 0xe1, 0xfe, 0xa7, 0xe0, 0x0e, 0xa7, 0x63
	]);
	signature = new Uint8Array([
		0x57, 0x82, 0xdb, 0xf7, 0xe8, 0x01, 0xd7, 0x45, 0x32, 0xc0, 0x88, 0xc2, 0x94, 0xb6, 0x98, 0x11,
		0xa6, 0xe3, 0x7e, 0x1d, 0x29, 0x69, 0xfa, 0xdb, 0x7b, 0x7b, 0x18, 0x07, 0x3b, 0xcd, 0x59, 0x17,
		0x2a, 0x1a, 0x2b, 0x4d, 0x19, 0xee, 0xa6, 0xc2, 0xab, 0xbe, 0xad, 0xda, 0xa8, 0x0d, 0x88, 0xa4,
		0xb2, 0x1b, 0xe6, 0xab, 0xeb, 0xd0, 0x40, 0x15, 0x1b, 0xd0, 0xf2, 0x58, 0xc1, 0x1e, 0xe0, 0x6b,
		0xd8, 0x1d, 0xb3, 0x42, 0x17, 0x0f, 0x7b, 0x68, 0xf0, 0x71, 0x6c, 0xd1, 0xee, 0xed, 0xca, 0xee,
		0x76, 0x4f, 0xff, 0x90, 0x23, 0xd1, 0xfa, 0x6a, 0x83, 0x71, 0x94, 0x6b, 0x78, 0x96, 0x73, 0xc7,
		0xde, 0xbb, 0xfe, 0x9c, 0xe6, 0x3f, 0xde, 0x4f, 0x23, 0x3f, 0x47, 0x6e, 0x80, 0xec, 0xbf, 0x95,
		0x92, 0x0e, 0xf1, 0x9b, 0xb2, 0x2b, 0xdb, 0x00, 0x6e, 0x4f, 0xc9, 0xbd, 0xb5, 0x56, 0xae, 0xde
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	n =
		0xdda48fef7ea12b75d0446ac178e988cbfcb7da998c00ba51a5529cd97cc47f03772e1686fa5c43bb9ea4a62726e95889011439cce1e4b3be4efdb0f1fedd03549ec4d5c93fd6f4fb0219dfbd4b43f1b38428e2bde0cd562a999c77f2e5394d1bc1f375d63af7bfc73571b8c777966bb0fc75ec8167c46972b7844e981b90e2edn;
	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006ba2f3n;
	message = new Uint8Array([
		0x0a, 0xa5, 0x4f, 0x40, 0x50, 0x66, 0x82, 0x88, 0x1b, 0x5e, 0xcb, 0x53, 0x01, 0x19, 0x99, 0x29,
		0xf9, 0xfc, 0xce, 0x36, 0x14, 0x28, 0x13, 0x4b, 0x6b, 0xa2, 0x6e, 0x26, 0x55, 0xb0, 0x16, 0xf3,
		0xde, 0x86, 0x86, 0x13, 0x75, 0x21, 0xd0, 0x1b, 0xe5, 0x74, 0x34, 0x20, 0x87, 0xc2, 0xf1, 0x32,
		0xb5, 0x4b, 0x5b, 0x26, 0x81, 0x2a, 0x2e, 0x99, 0xa7, 0x7e, 0x22, 0x31, 0xc1, 0xc8, 0xbf, 0x26,
		0xba, 0x94, 0x73, 0x01, 0x85, 0x5c, 0xe2, 0xa4, 0x0f, 0xa9, 0x7d, 0x8b, 0x72, 0x7b, 0x56, 0x51,
		0x6b, 0xeb, 0x32, 0x76, 0x0e, 0x0f, 0xe0, 0x5f, 0xb8, 0x1e, 0xca, 0x9e, 0x46, 0xd4, 0xca, 0x74,
		0x84, 0x18, 0x3f, 0x94, 0xe8, 0xdd, 0x5f, 0x2a, 0x81, 0x46, 0xcf, 0x1c, 0x2a, 0x0d, 0x71, 0x90,
		0x03, 0x25, 0x7d, 0xae, 0x22, 0x9e, 0xd3, 0xa7, 0x85, 0xca, 0x8f, 0xf6, 0x4b, 0x9e, 0xde, 0xe6
	]);
	signature = new Uint8Array([
		0xc8, 0xe2, 0xf3, 0xae, 0x12, 0x07, 0x1b, 0x49, 0x73, 0x65, 0x53, 0xef, 0x63, 0x4f, 0xee, 0x2f,
		0xcd, 0x61, 0xe4, 0x01, 0x8f, 0xdb, 0x45, 0x2d, 0x66, 0x3c, 0x3b, 0x07, 0x43, 0x2c, 0xf1, 0xf0,
		0x0e, 0x3e, 0x59, 0xb0, 0x16, 0x66, 0x30, 0x52, 0xd9, 0x2b, 0x63, 0x11, 0xc2, 0xcc, 0xd3, 0xae,
		0xe1, 0xad, 0x59, 0x93, 0xb2, 0xd4, 0x66, 0x0f, 0xa7, 0x9b, 0xa5, 0xe8, 0xbc, 0x5d, 0xf3, 0x04,
		0xe1, 0xab, 0xc9, 0xbf, 0x06, 0x84, 0x8c, 0x48, 0x7b, 0x81, 0xe7, 0x53, 0x6e, 0x5f, 0x13, 0xe1,
		0xdb, 0x81, 0x25, 0x94, 0x1a, 0x16, 0x8f, 0xec, 0x73, 0xfa, 0x3c, 0x3e, 0x85, 0x51, 0xda, 0x24,
		0x44, 0xcb, 0x0b, 0xfe, 0xee, 0x2a, 0xb9, 0xed, 0xe1, 0x28, 0xea, 0xb7, 0x18, 0xf3, 0x73, 0xe5,
		0x63, 0x48, 0x50, 0x0d, 0xd4, 0xce, 0xe9, 0x00, 0xf9, 0xac, 0x56, 0x1b, 0x03, 0xd5, 0x24, 0x8e
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006ba2f3n;
	message = new Uint8Array([
		0x17, 0xe9, 0x51, 0x74, 0x28, 0x23, 0x9f, 0xcf, 0x87, 0xfa, 0x7f, 0x46, 0x1e, 0x83, 0x3d, 0x45,
		0xb9, 0x28, 0x2a, 0x25, 0x5d, 0xaa, 0x94, 0x51, 0xdc, 0x67, 0xf5, 0xa8, 0xa6, 0xd9, 0x6b, 0x23,
		0xe2, 0x60, 0x68, 0xb8, 0xbd, 0x41, 0xab, 0x7e, 0x02, 0xee, 0x6f, 0x11, 0xec, 0x88, 0xe2, 0x38,
		0x38, 0xa2, 0xd8, 0xc5, 0x7d, 0x48, 0xc1, 0xbd, 0xc0, 0x3f, 0xd8, 0xb9, 0x43, 0x8f, 0x9e, 0x8c,
		0x9f, 0x3f, 0x87, 0x26, 0x12, 0x60, 0xf3, 0xb9, 0x1a, 0x4d, 0x5f, 0x1a, 0x43, 0x30, 0xdd, 0x69,
		0x3d, 0xc8, 0xc1, 0xf4, 0x31, 0x6a, 0x9e, 0x59, 0x55, 0x46, 0x71, 0xeb, 0xbf, 0xec, 0x1b, 0x57,
		0x77, 0x0f, 0x15, 0x88, 0xcf, 0x88, 0x5f, 0xc7, 0xf7, 0x9d, 0xb9, 0x27, 0xcc, 0x84, 0x16, 0x20,
		0xf1, 0x23, 0x4e, 0x7a, 0x21, 0x1a, 0x13, 0x6c, 0xc3, 0x03, 0x26, 0x06, 0xbf, 0xf8, 0xca, 0xcc
	]);
	signature = new Uint8Array([
		0xbd, 0x83, 0xd9, 0x10, 0x36, 0x4d, 0x07, 0x02, 0x2f, 0x77, 0x5c, 0x67, 0x91, 0x10, 0xbf, 0xbf,
		0xff, 0x38, 0xf0, 0x0f, 0x29, 0xf9, 0x84, 0xb9, 0xf9, 0x51, 0xb4, 0x40, 0xae, 0x9c, 0x09, 0x47,
		0x71, 0x28, 0xdc, 0xfb, 0x0d, 0xc6, 0xda, 0x7c, 0x0f, 0x21, 0x4e, 0x4c, 0x79, 0xa7, 0x33, 0x14,
		0xd7, 0xfd, 0xdc, 0xef, 0x27, 0x77, 0x81, 0xa7, 0x0c, 0xee, 0xfd, 0x81, 0xba, 0xb2, 0xf9, 0xde,
		0xd7, 0xba, 0xef, 0x76, 0x30, 0x8c, 0xdb, 0xfa, 0x0d, 0x2a, 0x02, 0x44, 0xcf, 0xef, 0xb7, 0xc9,
		0x0d, 0x61, 0xc1, 0xf8, 0xfa, 0x55, 0x7e, 0xbc, 0xec, 0xfd, 0x48, 0x1a, 0x8e, 0x7f, 0xac, 0xa0,
		0x60, 0xdf, 0x6a, 0xf9, 0x34, 0x86, 0xac, 0xec, 0x76, 0x08, 0x47, 0x45, 0x14, 0xb3, 0x9a, 0xe0,
		0x02, 0xeb, 0x7f, 0x2e, 0x4a, 0x95, 0xba, 0x17, 0x99, 0xca, 0x47, 0x00, 0xcf, 0x92, 0x46, 0x1f
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006ba2f3n;
	message = new Uint8Array([
		0x74, 0x90, 0xb7, 0x7f, 0x60, 0x40, 0x83, 0xc6, 0xc8, 0x8c, 0x55, 0x71, 0xa9, 0x8a, 0xb9, 0x6a,
		0x8e, 0xa9, 0x32, 0xb9, 0xb3, 0x45, 0x7e, 0xb2, 0x69, 0x79, 0x1c, 0x6d, 0xbc, 0x35, 0x0c, 0x77,
		0x54, 0x90, 0xd6, 0xc7, 0x99, 0x5f, 0xcd, 0xf4, 0x1b, 0x06, 0x95, 0xa5, 0x30, 0x8e, 0xe3, 0x48,
		0xdf, 0xf8, 0x84, 0x07, 0xfc, 0xd1, 0xa1, 0xf7, 0x95, 0x07, 0x41, 0x93, 0x8d, 0xfb, 0x0f, 0x6a,
		0x87, 0xd7, 0x5e, 0x14, 0x05, 0x22, 0x6a, 0x6a, 0xd1, 0x92, 0xe0, 0xf7, 0x9d, 0x21, 0xa1, 0xa9,
		0xe6, 0x62, 0xc3, 0xcc, 0x1e, 0x16, 0xd9, 0x39, 0x09, 0xfb, 0x75, 0xcb, 0x68, 0xe4, 0xeb, 0x13,
		0xd5, 0x0e, 0x57, 0x4d, 0xee, 0xb2, 0xe1, 0x92, 0xb5, 0xd7, 0x3f, 0x4f, 0x37, 0x6a, 0x7c, 0xf5,
		0x6c, 0x90, 0xf8, 0xf2, 0x5f, 0x3b, 0xb1, 0xe1, 0x8e, 0xfc, 0xc0, 0xfd, 0x94, 0x18, 0x27, 0xdc
	]);
	signature = new Uint8Array([
		0x74, 0x34, 0x62, 0x14, 0x57, 0xf9, 0x84, 0x15, 0x73, 0xfe, 0xfc, 0x0b, 0xe8, 0x27, 0x79, 0xd4,
		0x4c, 0x68, 0x7d, 0x15, 0xab, 0x75, 0xa6, 0xf2, 0x84, 0xbf, 0x86, 0xb1, 0xe0, 0xa3, 0x16, 0x47,
		0xb0, 0xa8, 0xf5, 0xaa, 0x8d, 0x8a, 0x8a, 0xa2, 0x16, 0x64, 0x7f, 0x7b, 0xa8, 0x02, 0x72, 0x44,
		0x06, 0xb1, 0x8e, 0xe4, 0x73, 0x72, 0x4e, 0x2f, 0xa9, 0xed, 0xe3, 0xca, 0xe8, 0x31, 0x30, 0x48,
		0x7c, 0xec, 0x41, 0x45, 0xec, 0x00, 0xd4, 0xae, 0x5e, 0x05, 0x42, 0xf2, 0xa1, 0xa7, 0xbe, 0x49,
		0x1e, 0x59, 0xba, 0xd6, 0xe0, 0x5d, 0x04, 0x22, 0xe8, 0x7e, 0x98, 0xba, 0x5c, 0xe9, 0xce, 0xef,
		0xe4, 0x3c, 0x5a, 0x96, 0xa9, 0x4f, 0x26, 0x00, 0x35, 0xd7, 0xe7, 0x13, 0x1d, 0xac, 0xbd, 0xbd,
		0xf7, 0xbe, 0xb0, 0xa1, 0x0e, 0x88, 0x83, 0xff, 0x27, 0x28, 0x84, 0xc6, 0x02, 0xce, 0x11, 0xbd
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(true);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006ba2f3n;
	message = new Uint8Array([
		0x63, 0x35, 0xac, 0x2f, 0xe0, 0x53, 0xd7, 0x5f, 0x7e, 0x28, 0x87, 0x05, 0xae, 0x77, 0x43, 0x1b,
		0xcf, 0x2e, 0x0e, 0x29, 0x97, 0x3d, 0xe9, 0xbb, 0xb5, 0xa8, 0x9a, 0x12, 0xb4, 0xdb, 0xac, 0x1a,
		0x23, 0x3f, 0xb7, 0x9c, 0xf3, 0x0a, 0xe1, 0xb5, 0x20, 0x5b, 0xa5, 0x87, 0x94, 0x86, 0xd3, 0x2e,
		0x48, 0xac, 0xd8, 0xf5, 0xac, 0x90, 0x40, 0xca, 0x49, 0xa5, 0x79, 0xf0, 0xa4, 0x6c, 0xda, 0xf4,
		0x66, 0xfc, 0xe3, 0xe2, 0xbb, 0xe2, 0xc7, 0xb8, 0xf8, 0x2c, 0x27, 0x1b, 0x80, 0xc1, 0x21, 0x49,
		0xe8, 0xf4, 0x89, 0x4f, 0x59, 0x58, 0x76, 0x7c, 0x36, 0xd5, 0x01, 0x15, 0xff, 0xfb, 0x49, 0x4a,
		0x76, 0x97, 0xbb, 0x69, 0x00, 0x84, 0x90, 0x52, 0x4d, 0xc4, 0x96, 0x2b, 0x3b, 0xcf, 0x34, 0x55,
		0xf8, 0x2b, 0xa8, 0x9e, 0x67, 0x3d, 0x94, 0xb8, 0xc6, 0x5f, 0xb9, 0xea, 0x8d, 0x33, 0x02, 0x05
	]);
	signature = new Uint8Array([
		0x83, 0x24, 0xe0, 0xf7, 0x71, 0xe2, 0x42, 0x5b, 0x09, 0xa6, 0xbe, 0x49, 0x45, 0xba, 0xfc, 0xc3,
		0x0f, 0x21, 0xf6, 0xc8, 0x5c, 0xb1, 0x05, 0xff, 0x76, 0x00, 0x9c, 0x7c, 0x79, 0xa8, 0xcf, 0x69,
		0x08, 0xde, 0x69, 0x52, 0xfa, 0x92, 0x26, 0x12, 0x3e, 0x14, 0x51, 0x86, 0xdf, 0x7c, 0x57, 0xca,
		0x40, 0x81, 0x9a, 0x5e, 0xf4, 0x25, 0x56, 0xbf, 0x52, 0x17, 0x71, 0x97, 0x9a, 0x5d, 0x32, 0xf7,
		0x43, 0x77, 0x26, 0x93, 0xd0, 0xc6, 0xee, 0x90, 0x55, 0xf3, 0xf6, 0x13, 0xf7, 0x9f, 0x91, 0xf4,
		0x6e, 0xf8, 0xa0, 0x81, 0x7f, 0x39, 0xbf, 0x75, 0xd8, 0x9f, 0xde, 0x5a, 0x62, 0xc3, 0x77, 0xd0,
		0xda, 0x29, 0xc6, 0x41, 0x86, 0x41, 0x59, 0x1c, 0x37, 0xab, 0xd0, 0x31, 0x4b, 0xd8, 0xed, 0x8f,
		0x25, 0xd4, 0xce, 0xa6, 0xee, 0x00, 0x80, 0x2a, 0xb5, 0xef, 0xd0, 0xf6, 0x83, 0xa8, 0x5f, 0x50
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4c049n;
	message = new Uint8Array([
		0xbd, 0x55, 0x01, 0x57, 0x37, 0x1c, 0x4e, 0xc7, 0x1c, 0x10, 0xcc, 0x7c, 0xb4, 0x67, 0xae, 0x6b,
		0x6e, 0xe3, 0x75, 0x9c, 0x82, 0xef, 0xb9, 0xde, 0xd6, 0xea, 0x26, 0xb9, 0x1f, 0xc3, 0xc5, 0xa4,
		0x48, 0xc6, 0x7c, 0x78, 0x17, 0xb5, 0xd9, 0x25, 0x0e, 0x1b, 0x0b, 0xa3, 0x8f, 0xdd, 0x31, 0x2c,
		0x44, 0x12, 0xd8, 0xa9, 0xbe, 0x14, 0xbe, 0x6a, 0x5c, 0xd7, 0xdc, 0x19, 0x6f, 0x7a, 0xa4, 0xf1,
		0x9b, 0x1c, 0x88, 0x2b, 0x81, 0xf1, 0xbb, 0xb9, 0x9a, 0x95, 0x3b, 0x37, 0x66, 0xa0, 0x0f, 0x1f,
		0xc7, 0x7a, 0xcd, 0x3c, 0xa7, 0x71, 0x60, 0x61, 0xe1, 0x08, 0x08, 0x5a, 0x5f, 0x92, 0xa2, 0x23,
		0x80, 0x00, 0x2a, 0x58, 0xbc, 0xf8, 0x7e, 0xed, 0x8a, 0x27, 0x65, 0x1f, 0x81, 0xd7, 0xcf, 0xaa,
		0xbe, 0xc4, 0x5f, 0x3d, 0x87, 0x2b, 0x26, 0x2b, 0x2d, 0x25, 0xb2, 0x63, 0x37, 0x33, 0x47, 0xa2
	]);
	signature = new Uint8Array([
		0x9c, 0xad, 0x4b, 0x85, 0x8d, 0x96, 0x70, 0xd6, 0x85, 0x92, 0x54, 0x4e, 0x11, 0xe6, 0xff, 0xe8,
		0x49, 0x05, 0x1f, 0x7d, 0x5a, 0x57, 0x32, 0xaa, 0x20, 0xc2, 0xb3, 0xd6, 0xf8, 0xc9, 0x64, 0x8e,
		0x52, 0xa4, 0x5a, 0xa0, 0x2f, 0xc2, 0x7a, 0x4f, 0x36, 0x14, 0xc2, 0x7d, 0x1f, 0x9e, 0xda, 0x37,
		0x47, 0x7d, 0x2e, 0x9f, 0x5a, 0x32, 0x3e, 0x3c, 0xa1, 0x09, 0x98, 0xf1, 0x3d, 0x56, 0xca, 0x0b,
		0x46, 0xb0, 0xa4, 0x21, 0x4a, 0xb3, 0x1f, 0x12, 0x4f, 0x81, 0xe6, 0x44, 0x8f, 0x79, 0x0d, 0x02,
		0x78, 0x95, 0xb4, 0x01, 0xa1, 0x1a, 0x7f, 0x75, 0xa8, 0x2c, 0xc0, 0x6f, 0x54, 0x17, 0xeb, 0x82,
		0x51, 0x1f, 0x56, 0x74, 0xa3, 0x61, 0x87, 0xb2, 0xbc, 0x3d, 0x12, 0x2f, 0x99, 0x2f, 0xa2, 0xa8,
		0x5e, 0xc2, 0xbc, 0xf9, 0x1b, 0xcb, 0x38, 0x6e, 0x53, 0x20, 0xdd, 0x50, 0x2e, 0x3c, 0x9d, 0xcd
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006ba2f3n;
	message = new Uint8Array([
		0x36, 0x33, 0x7d, 0xcd, 0x88, 0xc6, 0x6f, 0x37, 0xc4, 0xe3, 0xe8, 0xa0, 0x51, 0x23, 0xaa, 0x0e,
		0x2c, 0x65, 0xaf, 0xe5, 0x38, 0xcb, 0x19, 0x0a, 0xd6, 0x06, 0x6c, 0x49, 0xb6, 0xd4, 0xfb, 0xf4,
		0xed, 0xc6, 0xa0, 0xcd, 0x47, 0x47, 0xb0, 0x26, 0xde, 0xda, 0x2e, 0x47, 0xeb, 0xa3, 0x3f, 0x10,
		0xdd, 0x29, 0xde, 0xe0, 0xa8, 0x5a, 0xd1, 0xb5, 0x60, 0xd0, 0xdc, 0x94, 0x06, 0x52, 0x34, 0x2b,
		0xa2, 0x9e, 0x36, 0xb5, 0x91, 0x65, 0x59, 0x1e, 0x21, 0x98, 0x62, 0x67, 0x5b, 0xe2, 0xd7, 0x4d,
		0x20, 0x76, 0xb5, 0x25, 0x78, 0x0a, 0x65, 0x0b, 0x26, 0x23, 0xed, 0x3b, 0x80, 0x94, 0x64, 0xbf,
		0x7d, 0x41, 0xa8, 0x4b, 0x10, 0x29, 0x53, 0x65, 0xb4, 0xa4, 0xea, 0xc8, 0x48, 0xe8, 0x58, 0x0b,
		0x1e, 0xd2, 0x9b, 0x7e, 0x4f, 0xe4, 0xbe, 0x55, 0x51, 0x8a, 0x07, 0x08, 0xcb, 0xa1, 0x71, 0xf9
	]);
	signature = new Uint8Array([
		0x14, 0x8a, 0x9f, 0x67, 0x32, 0xc7, 0x71, 0x52, 0x22, 0x3c, 0x8f, 0x38, 0xea, 0xd0, 0x01, 0x6e,
		0xc9, 0xcf, 0xf5, 0x23, 0x02, 0xfc, 0xca, 0x9b, 0x4b, 0x99, 0xce, 0x1f, 0x1f, 0x09, 0x32, 0x76,
		0xac, 0x22, 0x35, 0xa8, 0x2a, 0x61, 0x97, 0x30, 0x1e, 0xf7, 0x3f, 0x63, 0x98, 0x96, 0x00, 0xa1,
		0x60, 0xcb, 0xaa, 0xf8, 0x30, 0xa2, 0xe4, 0xcb, 0xd0, 0x87, 0x2b, 0xdf, 0xd2, 0xfb, 0xed, 0xc2,
		0xf0, 0xaf, 0xa6, 0x6c, 0x5c, 0xdf, 0x9c, 0xae, 0x80, 0x62, 0xf3, 0x1d, 0x97, 0xb4, 0xb6, 0x64,
		0x7f, 0x59, 0xbf, 0x04, 0xa9, 0xf1, 0xbf, 0xe2, 0xc5, 0x5a, 0xc4, 0xe4, 0x91, 0x42, 0x65, 0x9a,
		0x35, 0x29, 0x55, 0x0b, 0xe5, 0x9f, 0xff, 0xd8, 0x66, 0x9c, 0xfd, 0xca, 0x9e, 0x58, 0x89, 0x5c,
		0xae, 0xa6, 0x67, 0x6e, 0xdb, 0x17, 0xa7, 0x09, 0xe5, 0xba, 0x4f, 0x01, 0xb4, 0x34, 0x3f, 0xde
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	n =
		0x8b72cf259d853597bc0c4b79f21061a3ae12f6e8eb5bde829633ef207aa282fb47bd574a4c6983ffe5687d1e4ede14db5ceb326717af8985c7778888521b4a431b1643b80df1f039601b4d5d8773f91c19239be3709d625174e05e946dd29d4cd58e9aef28946c8811dd1fdd84f9eb2176902ef2a710bb76494c65c37559dfdfn;
	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc8ffn;
	message = new Uint8Array([
		0x91, 0xb0, 0x7f, 0xfc, 0x7a, 0x0f, 0x56, 0xdf, 0xd8, 0x1f, 0xe5, 0x34, 0x14, 0xf6, 0xfc, 0x57,
		0xae, 0x65, 0x38, 0x49, 0x2f, 0x21, 0x8c, 0xf7, 0x5f, 0x20, 0x21, 0xbf, 0xb7, 0x46, 0x60, 0x30,
		0x19, 0x41, 0x4d, 0x11, 0xbf, 0xb2, 0x16, 0xa5, 0x72, 0x8d, 0xeb, 0x2e, 0xfc, 0xc2, 0x11, 0xb0,
		0xdf, 0x1d, 0x32, 0xf7, 0x47, 0x6a, 0xf8, 0xdb, 0x3e, 0xde, 0xda, 0xc3, 0x1f, 0xb2, 0x35, 0x68,
		0x4d, 0x11, 0x9e, 0xdc, 0x24, 0x34, 0x77, 0xca, 0x30, 0xcc, 0xc0, 0xff, 0x9d, 0xa0, 0x30, 0x29,
		0xef, 0x77, 0x84, 0xdf, 0xf4, 0x38, 0x18, 0xe2, 0xf6, 0x50, 0xb4, 0xa3, 0x34, 0x54, 0xa8, 0x05,
		0x94, 0xe7, 0x1b, 0x63, 0x92, 0xdf, 0xa0, 0xd5, 0x7c, 0xa3, 0x0a, 0xaf, 0xe1, 0xd7, 0x82, 0x4b,
		0x47, 0x3c, 0xd6, 0x09, 0x1c, 0xd1, 0x14, 0x93, 0xef, 0x3f, 0x58, 0x66, 0xe0, 0x73, 0xe2, 0x8e
	]);
	signature = new Uint8Array([
		0x59, 0x81, 0x1c, 0x0f, 0x93, 0xc7, 0x40, 0x75, 0x46, 0xa1, 0x9b, 0xf0, 0xdc, 0xcf, 0x24, 0x4b,
		0x15, 0x29, 0xc1, 0xdb, 0x5b, 0x8a, 0x6f, 0xeb, 0x9e, 0x41, 0x82, 0xf4, 0xc2, 0x97, 0x48, 0x10,
		0xa9, 0x7d, 0xc8, 0x5f, 0x62, 0x1a, 0x4a, 0xe4, 0x3e, 0x45, 0xda, 0xb7, 0xaf, 0x4f, 0xba, 0x76,
		0x41, 0x2d, 0xdd, 0xfe, 0x38, 0x07, 0x85, 0xed, 0xb2, 0xe2, 0x44, 0x93, 0x67, 0x0a, 0xaa, 0xa9,
		0xa7, 0x82, 0xf5, 0xef, 0xfb, 0x71, 0x24, 0xbc, 0x60, 0xf2, 0x54, 0xfd, 0x25, 0xb1, 0x1b, 0x12,
		0x55, 0x84, 0x95, 0x2d, 0x32, 0xe1, 0xdb, 0x39, 0x56, 0x7e, 0x82, 0xbd, 0x34, 0xee, 0xb1, 0xea,
		0xfd, 0x3c, 0xea, 0xc1, 0x55, 0x4b, 0x36, 0x8f, 0x61, 0xd7, 0x77, 0x62, 0xae, 0x3e, 0x67, 0x2c,
		0x05, 0x3d, 0x20, 0xa3, 0xaf, 0x59, 0x1b, 0x9b, 0xd2, 0x74, 0x41, 0xe7, 0x97, 0x7c, 0x0f, 0xef
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc8ffn;
	message = new Uint8Array([
		0x34, 0x3d, 0x56, 0x5d, 0x85, 0xc1, 0xa3, 0x26, 0x57, 0x0c, 0xc4, 0x06, 0x2d, 0x61, 0x77, 0x11,
		0xe0, 0x0c, 0x71, 0x78, 0xef, 0x5b, 0x52, 0xaa, 0x16, 0xea, 0xd8, 0xbf, 0x22, 0x23, 0x53, 0x17,
		0x03, 0x06, 0x59, 0x3e, 0x23, 0x26, 0xba, 0x13, 0xf6, 0xf4, 0xb6, 0x2a, 0xd3, 0x40, 0x6e, 0x6e,
		0x02, 0xfd, 0x99, 0x0b, 0x16, 0x45, 0x78, 0x8b, 0x7c, 0x9d, 0x0c, 0x3e, 0x55, 0x79, 0x86, 0xe0,
		0x81, 0x03, 0xff, 0x76, 0xfc, 0x18, 0x69, 0x79, 0x6e, 0x93, 0xc6, 0x36, 0xfd, 0xcf, 0x98, 0x75,
		0x66, 0x67, 0x98, 0x59, 0x4c, 0x40, 0xaa, 0x87, 0xd0, 0xca, 0x11, 0x8a, 0x61, 0x82, 0xdf, 0x77,
		0xd5, 0xbc, 0xb0, 0xcc, 0xb9, 0x9f, 0x98, 0x9e, 0xe6, 0x71, 0x5a, 0xf4, 0x55, 0x15, 0xdb, 0x6e,
		0x35, 0xd1, 0xd6, 0x2a, 0x3a, 0x55, 0xd0, 0xe7, 0x37, 0xf9, 0x4f, 0x6b, 0xef, 0x47, 0x47, 0x23
	]);
	signature = new Uint8Array([
		0x1e, 0xe5, 0xc5, 0x65, 0xd8, 0x13, 0x47, 0xbf, 0xe2, 0x22, 0x94, 0x50, 0x08, 0xda, 0xa3, 0x92,
		0x3e, 0x88, 0xe2, 0x73, 0xd5, 0x37, 0xb4, 0xf9, 0x93, 0x19, 0x7f, 0x8e, 0x2c, 0xce, 0xb6, 0x0f,
		0x47, 0x7c, 0xd5, 0x3a, 0x63, 0x95, 0x0b, 0x9c, 0x0a, 0xa0, 0x3d, 0x55, 0x9f, 0xbe, 0x94, 0x0a,
		0x50, 0x6b, 0xe4, 0xe9, 0xd8, 0xa8, 0xf5, 0x33, 0x5d, 0xdd, 0x51, 0x44, 0x83, 0xa7, 0x9e, 0x81,
		0xe2, 0x43, 0x88, 0xe3, 0x1c, 0x90, 0xca, 0x69, 0x06, 0xbe, 0x6c, 0x31, 0x4d, 0xf7, 0x90, 0x4d,
		0x6a, 0x79, 0x61, 0x83, 0x2c, 0x21, 0x75, 0xed, 0xfe, 0x0f, 0x41, 0x41, 0x2b, 0xc0, 0x42, 0xd6,
		0x46, 0xed, 0xf6, 0x89, 0x79, 0x79, 0xce, 0x0c, 0xf0, 0xf3, 0x0c, 0xb3, 0x6a, 0xe2, 0x2f, 0xab,
		0x36, 0xca, 0x81, 0x5a, 0xc5, 0x28, 0x8b, 0xa7, 0xb3, 0xb4, 0x9f, 0xc1, 0x09, 0xaa, 0xc7, 0x98
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(true);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006e7fdfn;
	message = new Uint8Array([
		0xb1, 0x91, 0x37, 0x63, 0xb5, 0xaf, 0xa5, 0x04, 0x53, 0x96, 0xec, 0x7a, 0x4d, 0xd1, 0xfc, 0x47,
		0x2e, 0x92, 0xce, 0xd0, 0xdb, 0xf7, 0x9a, 0xbc, 0x6b, 0x8d, 0x49, 0x9d, 0x38, 0x13, 0x2d, 0xd2,
		0x36, 0x80, 0xf0, 0xac, 0x84, 0x47, 0xca, 0xcf, 0x41, 0xd9, 0xf7, 0xdb, 0xa1, 0x6b, 0x69, 0x4c,
		0x40, 0xfa, 0xba, 0x9f, 0xb6, 0x8d, 0x64, 0xb7, 0x6b, 0xbb, 0x34, 0x7e, 0xad, 0x6c, 0xfc, 0xcf,
		0xff, 0xe4, 0x89, 0x94, 0xb4, 0xfd, 0xd4, 0x2b, 0xbd, 0xb3, 0x7c, 0x0f, 0xc0, 0xe6, 0x74, 0xb4,
		0x6a, 0x5c, 0xf9, 0xb2, 0x05, 0x06, 0xc8, 0x26, 0x4d, 0x84, 0x8d, 0x55, 0x7f, 0xea, 0x9e, 0x93,
		0xb4, 0xc5, 0xe9, 0x64, 0x6d, 0x59, 0x2c, 0xe0, 0x6f, 0x2d, 0x64, 0x5c, 0xd1, 0xca, 0x87, 0x46,
		0x53, 0xbf, 0x75, 0x51, 0xf1, 0xe8, 0x2c, 0xd2, 0xb8, 0xf0, 0x3c, 0x6a, 0xd9, 0x15, 0x7c, 0xe6
	]);
	signature = new Uint8Array([
		0x41, 0x1d, 0xf9, 0xbc, 0x42, 0x6d, 0x5b, 0xf6, 0xca, 0x6e, 0x12, 0xc5, 0x64, 0xff, 0xaa, 0x52,
		0xb1, 0x77, 0x0c, 0xc9, 0x6b, 0xc6, 0x70, 0xe9, 0x72, 0x67, 0x59, 0xb1, 0xbe, 0xf2, 0x33, 0xa7,
		0xb6, 0xad, 0x24, 0xd7, 0x95, 0x45, 0xeb, 0x78, 0xf3, 0xa1, 0x31, 0x88, 0x81, 0xbf, 0x65, 0xe8,
		0x86, 0x56, 0x39, 0x18, 0x52, 0x13, 0x50, 0xe1, 0x25, 0xb9, 0x57, 0xea, 0xbe, 0xa8, 0x9d, 0x0e,
		0x48, 0x7f, 0x7b, 0x96, 0x37, 0x67, 0xbf, 0x17, 0x25, 0xc6, 0xa4, 0xc6, 0x54, 0x4c, 0x73, 0x46,
		0x00, 0x66, 0x96, 0x99, 0xec, 0x2b, 0x7f, 0xae, 0x5a, 0x01, 0x43, 0x3d, 0xae, 0x3c, 0x14, 0x8d,
		0x58, 0x24, 0x03, 0x12, 0x09, 0xc7, 0x54, 0xfc, 0xfb, 0x0a, 0x2d, 0x97, 0x02, 0xbb, 0xcf, 0x17,
		0xbf, 0x35, 0xcf, 0x9f, 0x07, 0xb7, 0x3e, 0xa6, 0xa7, 0x32, 0xc3, 0x53, 0x1a, 0x22, 0x94, 0x71
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc8ffn;
	message = new Uint8Array([
		0x58, 0xb2, 0x62, 0xcd, 0x0a, 0x08, 0x59, 0x38, 0x15, 0x41, 0xe2, 0x43, 0x40, 0x16, 0x9e, 0x9b,
		0xd8, 0xb3, 0xdd, 0xdd, 0x52, 0xc5, 0x64, 0x4e, 0x31, 0xd5, 0x6e, 0xcb, 0x2b, 0xd4, 0xf0, 0x03,
		0x87, 0xf7, 0x21, 0xe3, 0xc9, 0xc5, 0x3a, 0x52, 0x91, 0x6e, 0x7a, 0x1f, 0xc1, 0x5e, 0x6e, 0x37,
		0xde, 0x12, 0x6f, 0x1c, 0xb9, 0x2a, 0x6c, 0x92, 0x4e, 0xc0, 0xea, 0x9c, 0xec, 0xf9, 0x48, 0xa6,
		0x96, 0xd9, 0x48, 0x04, 0xaa, 0x5c, 0xcb, 0x9b, 0xc0, 0xc2, 0xdc, 0xde, 0xd5, 0x2a, 0xf0, 0xfd,
		0xa9, 0x62, 0x6c, 0x58, 0x65, 0xfe, 0x68, 0x3a, 0x81, 0xa7, 0xb3, 0xc4, 0xe5, 0xb6, 0x17, 0x27,
		0x4e, 0x02, 0xde, 0x17, 0xf4, 0xf5, 0x94, 0x7c, 0x6a, 0xe6, 0x0f, 0x6a, 0xc5, 0xa2, 0xad, 0x53,
		0x00, 0x4c, 0xdd, 0x7b, 0x9f, 0x68, 0xe1, 0xad, 0x93, 0x32, 0xd2, 0x2d, 0x5e, 0x34, 0xe4, 0xed
	]);
	signature = new Uint8Array([
		0x56, 0xea, 0x3c, 0x12, 0x8c, 0x5d, 0x3c, 0x63, 0x42, 0xc4, 0x5a, 0x8e, 0xb5, 0x27, 0x5a, 0x51,
		0x8b, 0xa0, 0x0a, 0xa2, 0xa6, 0xe1, 0x77, 0xfd, 0x85, 0x5a, 0xbb, 0xf3, 0x53, 0x86, 0x83, 0x57,
		0x73, 0x29, 0x9a, 0xf0, 0x80, 0x9c, 0x04, 0x9c, 0x48, 0xab, 0x18, 0xb5, 0x0e, 0xde, 0x9c, 0xf2,
		0xd8, 0x46, 0x50, 0xdc, 0x33, 0xb7, 0x5d, 0x11, 0xe6, 0xe6, 0x07, 0xc5, 0xe0, 0x5d, 0x30, 0x52,
		0xc0, 0xcb, 0x51, 0x3a, 0xb6, 0x21, 0x14, 0xcf, 0x9d, 0x85, 0x0a, 0x11, 0x17, 0xae, 0x65, 0x5a,
		0x3e, 0x5b, 0x54, 0x14, 0x9b, 0x70, 0x89, 0xae, 0xa3, 0x3d, 0x38, 0xbf, 0x67, 0x3d, 0x04, 0x86,
		0x8e, 0xe3, 0x14, 0xe8, 0x58, 0xd9, 0x81, 0xa3, 0x19, 0x67, 0x17, 0x84, 0x71, 0xed, 0x93, 0xd3,
		0x50, 0x59, 0x0f, 0xaf, 0xa3, 0x37, 0xde, 0xff, 0x21, 0xc0, 0x46, 0x8a, 0xef, 0xa4, 0xbc, 0xa2
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc8ffn;
	message = new Uint8Array([
		0x45, 0xb7, 0x3d, 0x8a, 0xb4, 0xf3, 0x35, 0xe0, 0x3c, 0x01, 0x54, 0xe9, 0x2e, 0x46, 0x7b, 0xd3,
		0x90, 0xf8, 0x17, 0x28, 0x5b, 0x83, 0xf6, 0x4d, 0xe7, 0x2b, 0x59, 0x4f, 0xa3, 0xf3, 0x4a, 0xde,
		0x09, 0xbe, 0x2f, 0x9a, 0xd1, 0xb5, 0xa0, 0x8e, 0x65, 0xe8, 0x76, 0xfa, 0x96, 0x38, 0x24, 0x56,
		0x8d, 0x74, 0x4b, 0x93, 0x04, 0xc2, 0x88, 0xa4, 0xb6, 0x41, 0x91, 0x3d, 0x13, 0xec, 0x80, 0xdb,
		0x39, 0xc2, 0x6e, 0x04, 0x20, 0x24, 0x44, 0xd0, 0x14, 0x7e, 0xce, 0xa8, 0x69, 0x29, 0x11, 0x4e,
		0x6a, 0x90, 0xdf, 0x1d, 0x92, 0x92, 0xa8, 0x93, 0xff, 0x28, 0x93, 0x0c, 0x23, 0x48, 0xcd, 0xd0,
		0xbd, 0x09, 0x21, 0x50, 0x07, 0x07, 0xca, 0xad, 0x31, 0x09, 0x85, 0x7a, 0x0f, 0xe1, 0xea, 0xc3,
		0x0f, 0x94, 0xfb, 0x4e, 0x6d, 0xbb, 0xfe, 0x20, 0xaa, 0x29, 0x88, 0x43, 0x3a, 0xce, 0xdb, 0xc7
	]);
	signature = new Uint8Array([
		0x66, 0x09, 0x0f, 0x92, 0xda, 0xa9, 0x4f, 0x0d, 0x03, 0xbc, 0x2c, 0xee, 0x8b, 0x21, 0x14, 0x0d,
		0x5e, 0xec, 0x31, 0xbf, 0x90, 0xd0, 0x96, 0xff, 0x8e, 0x3f, 0x23, 0xbb, 0x29, 0x66, 0x2c, 0xc3,
		0x69, 0x25, 0xe1, 0xdb, 0x46, 0xe9, 0xc9, 0x1d, 0xe5, 0xbc, 0xcb, 0x20, 0x9f, 0x9d, 0xd9, 0xd7,
		0xec, 0x8e, 0x3f, 0x04, 0x96, 0xdc, 0xc7, 0x21, 0x91, 0x23, 0x83, 0x27, 0xee, 0xed, 0xd1, 0x9c,
		0x40, 0x32, 0x5f, 0x74, 0xe0, 0x46, 0x36, 0x45, 0x74, 0x85, 0xc6, 0xba, 0xb6, 0x2d, 0x1a, 0x75,
		0xc7, 0x8d, 0xc8, 0xe8, 0x41, 0xd1, 0xf2, 0xdc, 0x33, 0xaf, 0xff, 0xa9, 0xac, 0xb7, 0xa4, 0x4a,
		0xd4, 0xbd, 0x5a, 0x00, 0x38, 0xee, 0x2f, 0xec, 0x8c, 0x5d, 0x2e, 0x06, 0x0f, 0xff, 0x41, 0x2e,
		0x88, 0xf4, 0xdd, 0x25, 0xbb, 0x90, 0xe2, 0xa3, 0xf4, 0x6a, 0x6e, 0x37, 0x8b, 0xe2, 0x09, 0xd4
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffc8ffn;
	message = new Uint8Array([
		0x61, 0xbd, 0x54, 0x6b, 0xc5, 0x49, 0xb9, 0x62, 0xa8, 0x86, 0x8d, 0x7e, 0xc8, 0x03, 0xb9, 0x56,
		0x74, 0xa8, 0x12, 0xb4, 0x59, 0x3c, 0xd3, 0x3e, 0x98, 0x29, 0x4a, 0x56, 0x1b, 0x84, 0xd1, 0x3e,
		0x28, 0x48, 0x00, 0x80, 0x36, 0xe2, 0x21, 0x8d, 0x00, 0xf3, 0xe4, 0xa4, 0xd9, 0x51, 0x55, 0xf5,
		0x3f, 0x4f, 0x0a, 0x07, 0xb2, 0x3e, 0xa1, 0x57, 0xc7, 0x33, 0x6a, 0x42, 0x78, 0x0b, 0x60, 0x24,
		0xbe, 0xad, 0x5e, 0xc2, 0x62, 0x8f, 0x8f, 0xe5, 0x0f, 0x7c, 0x27, 0x48, 0xad, 0x94, 0x50, 0xb4,
		0xea, 0x94, 0x67, 0x6a, 0x19, 0x57, 0x69, 0xc1, 0x40, 0x9d, 0xa8, 0x10, 0x6c, 0x0c, 0xc3, 0xce,
		0x48, 0x74, 0xd4, 0xf8, 0xee, 0x57, 0xeb, 0xb3, 0xfd, 0xa9, 0xbc, 0x33, 0xec, 0xd4, 0x94, 0xdb,
		0x9e, 0xff, 0x92, 0xa6, 0x36, 0x90, 0x13, 0xc5, 0x2c, 0xef, 0x6e, 0x8a, 0xa1, 0x8d, 0xe2, 0x84
	]);
	signature = new Uint8Array([
		0x1c, 0xa0, 0xb7, 0x12, 0x16, 0x2c, 0x8f, 0x1e, 0xf2, 0xc4, 0x43, 0xd7, 0xca, 0xab, 0x39, 0x0e,
		0x84, 0x4e, 0x08, 0x59, 0xd3, 0x37, 0xdf, 0xa4, 0xc4, 0x2f, 0x17, 0xaf, 0xff, 0x26, 0xfe, 0xa8,
		0x32, 0xab, 0x4d, 0x7b, 0xf1, 0x15, 0x4c, 0xcb, 0xb8, 0x8f, 0x72, 0x20, 0xbc, 0x0f, 0xb6, 0x98,
		0x05, 0x06, 0xd3, 0x9b, 0x8f, 0x81, 0x26, 0xac, 0xb1, 0xcb, 0x56, 0x36, 0x9f, 0x79, 0x91, 0x64,
		0xac, 0x9a, 0xb7, 0x02, 0x07, 0x46, 0x77, 0xab, 0xf3, 0xd6, 0xee, 0xa0, 0x03, 0x07, 0x2b, 0x49,
		0xf7, 0x0f, 0x3a, 0x9d, 0x11, 0xbf, 0x3c, 0xdb, 0xf5, 0xf4, 0xb6, 0xad, 0xae, 0x5c, 0x5b, 0x6c,
		0xb4, 0xb7, 0x5a, 0xf5, 0xe1, 0xa8, 0x86, 0x5f, 0xc1, 0xbd, 0x9b, 0x09, 0xea, 0x35, 0xa5, 0x27,
		0x4c, 0x4e, 0x3d, 0x62, 0xaf, 0xa5, 0x75, 0xbf, 0x85, 0xbd, 0xb4, 0xd8, 0x77, 0x25, 0xee, 0x84
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	n =
		0xecd6bfa6bdfd753f6f856db12da04af254dbf26e56623f86c06031bdd60124544ceb56e4dbec53740d231459ad3767bd202f857e88e4d767f04574329aa51c414f4d4c52edd021850cb1b6a4bdc11be1ab63b9da3ea1e80db05eb8bb4f1e801fbe4b7a9d53226dcb8a4cc6fb954a6c44802011ea4745c75ba6d82b50e3243aebn;
	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4bcf7n;
	message = new Uint8Array([
		0xa5, 0xe2, 0xce, 0x04, 0xa2, 0x7a, 0x89, 0x8b, 0x29, 0xd3, 0xf5, 0x1c, 0x2c, 0xdf, 0xcf, 0xda,
		0x59, 0x67, 0x49, 0x75, 0xa9, 0x4f, 0x47, 0x96, 0x36, 0x1c, 0xcd, 0x7e, 0x4c, 0xb3, 0xb8, 0xea,
		0xc2, 0x63, 0xad, 0x39, 0x8b, 0x26, 0x50, 0xd0, 0x88, 0x24, 0xb6, 0xbe, 0xa0, 0x79, 0x1c, 0x9c,
		0x13, 0x38, 0xd9, 0xb7, 0x0b, 0xb0, 0x91, 0x72, 0x75, 0xee, 0xac, 0xe5, 0x0e, 0x83, 0x06, 0xca,
		0xc1, 0x87, 0xe8, 0x9a, 0x30, 0xdd, 0x38, 0xf3, 0x91, 0xb9, 0xec, 0x3d, 0xbb, 0x60, 0xc4, 0x8d,
		0x80, 0x2f, 0x39, 0xc9, 0x3e, 0xdf, 0xb1, 0x0e, 0xb1, 0x07, 0xf4, 0x4e, 0x0b, 0xe2, 0xe3, 0x3e,
		0x47, 0x53, 0x68, 0x6f, 0xba, 0x26, 0xa9, 0xba, 0xeb, 0x99, 0x81, 0xe2, 0xa4, 0x1b, 0x30, 0x75,
		0x49, 0x53, 0x51, 0xf3, 0x69, 0x64, 0x0d, 0x32, 0x93, 0x70, 0x8f, 0x01, 0x6b, 0x5b, 0xb7, 0x0c
	]);
	signature = new Uint8Array([
		0xbe, 0xf3, 0x92, 0x8d, 0x30, 0x82, 0x8d, 0x0f, 0x47, 0x3d, 0x1b, 0xca, 0xdb, 0x04, 0xc4, 0xbc,
		0x63, 0x63, 0x62, 0xf8, 0x2b, 0xfe, 0xd5, 0xa3, 0xf5, 0xca, 0xf3, 0xfa, 0x1d, 0x50, 0xfc, 0xff,
		0x15, 0xce, 0xaa, 0xbf, 0xde, 0x59, 0x3f, 0x99, 0x73, 0x15, 0xb1, 0x16, 0x3c, 0x03, 0xf8, 0x0c,
		0x5f, 0x66, 0x8e, 0x32, 0xed, 0xf2, 0x4c, 0xb4, 0xb9, 0xf0, 0xea, 0x06, 0x9f, 0x9c, 0xba, 0x9e,
		0xe4, 0xc2, 0x34, 0xcb, 0x30, 0x44, 0x22, 0x23, 0x10, 0x04, 0x6b, 0xdb, 0x4c, 0xdf, 0x00, 0x30,
		0x33, 0xde, 0x6a, 0x48, 0x3f, 0xfd, 0x36, 0xf0, 0x1b, 0x1b, 0xf2, 0x05, 0xfd, 0x79, 0xb5, 0x83,
		0x94, 0xf4, 0x77, 0xd4, 0xeb, 0x88, 0xf6, 0xe4, 0xe2, 0xb2, 0xd3, 0xaa, 0xf5, 0x6a, 0x9a, 0x44,
		0xc1, 0xf5, 0xa3, 0x77, 0xec, 0xd7, 0x55, 0xdc, 0x71, 0x81, 0x2e, 0x20, 0x5e, 0x0c, 0xbb, 0xb5
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000059c0d7n;
	message = new Uint8Array([
		0xa8, 0xa1, 0x86, 0xdb, 0x7f, 0x99, 0x6a, 0x09, 0xa6, 0x52, 0xfa, 0x6c, 0x82, 0xea, 0xe8, 0xbe,
		0x78, 0x86, 0xd7, 0xe7, 0x5e, 0xf4, 0x6d, 0xc2, 0x30, 0x8f, 0xaa, 0x24, 0x05, 0x63, 0x78, 0x1b,
		0x41, 0x92, 0x83, 0x73, 0x0b, 0xf7, 0x4a, 0x7f, 0x02, 0x08, 0x77, 0x16, 0x2b, 0x01, 0x6b, 0xdb,
		0x2e, 0x3f, 0x1e, 0xc1, 0xc3, 0xe9, 0x26, 0xcf, 0x67, 0xd6, 0x15, 0x21, 0x53, 0xab, 0x08, 0x30,
		0xae, 0x44, 0x7d, 0x53, 0x02, 0x56, 0x65, 0x85, 0xed, 0x52, 0x7b, 0x68, 0x19, 0x8c, 0xd3, 0x8a,
		0x6d, 0x9c, 0xb6, 0xe7, 0x85, 0x04, 0xad, 0xb0, 0x60, 0x14, 0xdc, 0x4b, 0x59, 0x0b, 0x91, 0x9b,
		0x59, 0x7f, 0x1d, 0x81, 0x4a, 0xff, 0xe3, 0xa3, 0xcf, 0xf6, 0xae, 0x6c, 0x32, 0xd2, 0x48, 0x54,
		0x9e, 0x66, 0x48, 0x61, 0x8e, 0x8d, 0x2b, 0xed, 0x85, 0x11, 0xa6, 0xab, 0x00, 0xcb, 0x3b, 0xe5
	]);
	signature = new Uint8Array([
		0xa5, 0xf4, 0xea, 0x68, 0xef, 0x0a, 0xeb, 0x4b, 0x95, 0xf1, 0x66, 0xf5, 0x00, 0xad, 0x95, 0xed,
		0x68, 0xe8, 0x76, 0x74, 0x3a, 0xdd, 0x1c, 0xd8, 0x84, 0xc9, 0x2e, 0x8c, 0x1e, 0x5d, 0xff, 0x02,
		0xe3, 0xc5, 0x63, 0x1e, 0x24, 0x4e, 0xfd, 0x87, 0x08, 0x15, 0x0e, 0x1b, 0xc1, 0xf8, 0x48, 0xd3,
		0x38, 0xbc, 0xcd, 0x7d, 0x3c, 0x74, 0x09, 0x9b, 0xc4, 0xe8, 0x86, 0x18, 0x34, 0x9f, 0xc3, 0xe5,
		0x1b, 0x50, 0xc3, 0x11, 0xee, 0xec, 0xe2, 0x6f, 0x21, 0xb6, 0x3f, 0xb3, 0xd2, 0x0a, 0xc5, 0x2f,
		0x4f, 0x20, 0x88, 0x9f, 0x14, 0x8b, 0xaf, 0xe2, 0x4f, 0xfb, 0x5a, 0x5e, 0x91, 0x3b, 0x83, 0x84,
		0x94, 0x45, 0xe1, 0x63, 0xc4, 0xb0, 0x77, 0x7e, 0x78, 0xcb, 0x14, 0x20, 0x84, 0x89, 0x36, 0x95,
		0x3a, 0x58, 0xb7, 0x3d, 0x61, 0xa7, 0x4f, 0xf9, 0xe1, 0x95, 0xfe, 0x9c, 0x8a, 0x98, 0x9f, 0x79
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4bcf7n;
	message = new Uint8Array([
		0xb4, 0x7e, 0x91, 0xf1, 0x3b, 0x8c, 0xba, 0xbb, 0x48, 0x63, 0x7d, 0xdb, 0xf2, 0x8a, 0xd8, 0xa4,
		0x4c, 0x9c, 0x82, 0x3d, 0xf2, 0x93, 0x24, 0x03, 0xe1, 0x46, 0xc6, 0x29, 0x8c, 0x31, 0x87, 0xa1,
		0x2c, 0x75, 0x92, 0x40, 0x57, 0x1f, 0x4d, 0x1d, 0xd4, 0xad, 0xd4, 0x3a, 0xae, 0xcf, 0xa5, 0x66,
		0x87, 0x6a, 0x9d, 0x61, 0x2f, 0xe2, 0x23, 0x42, 0x75, 0x99, 0xa3, 0x16, 0x3d, 0xb3, 0x3e, 0xca,
		0xd3, 0x1d, 0xbf, 0x4b, 0x7f, 0xcd, 0xd1, 0xeb, 0x5a, 0x4b, 0x70, 0x07, 0x5f, 0x70, 0x9e, 0xe6,
		0xc5, 0x6d, 0x57, 0xe5, 0x8d, 0x10, 0xc6, 0xd1, 0x57, 0x43, 0xb9, 0x95, 0x79, 0xd6, 0x53, 0x15,
		0x52, 0x7e, 0x00, 0x59, 0xdc, 0x1d, 0xae, 0xee, 0x81, 0x43, 0x3b, 0x89, 0x30, 0xf5, 0x29, 0xee,
		0xaf, 0xae, 0x99, 0x10, 0x33, 0xa4, 0x77, 0x7a, 0x2e, 0x4c, 0xf2, 0xed, 0x68, 0x20, 0x2f, 0x4b
	]);
	signature = new Uint8Array([
		0x6c, 0xb1, 0xe5, 0xa1, 0x78, 0xa8, 0xf5, 0x33, 0x1e, 0x7b, 0x93, 0xad, 0xe2, 0xec, 0x62, 0xe7,
		0x56, 0x13, 0xf5, 0xb9, 0x3b, 0x1c, 0x82, 0xa3, 0xc1, 0x3f, 0x0d, 0x95, 0x0e, 0xd1, 0x4f, 0x1f,
		0x67, 0x9c, 0xdb, 0x0c, 0x3d, 0x11, 0xd4, 0x31, 0x00, 0x5f, 0x41, 0x52, 0xe7, 0xf1, 0x93, 0x47,
		0xf0, 0xda, 0xa3, 0x08, 0x65, 0x2a, 0xff, 0x6d, 0x7d, 0x2c, 0x16, 0x2b, 0x64, 0x86, 0xcb, 0xe8,
		0x58, 0x8e, 0xe1, 0xe8, 0xd3, 0xa6, 0xe8, 0xa5, 0xce, 0xf1, 0x2a, 0xc6, 0x1c, 0x1f, 0x69, 0xef,
		0x88, 0xca, 0x70, 0xc8, 0xc6, 0x00, 0x82, 0x00, 0x75, 0xfe, 0x84, 0x4a, 0x6e, 0x4d, 0x00, 0x3e,
		0x72, 0x25, 0x86, 0x68, 0x45, 0x66, 0xb1, 0x7b, 0x51, 0x43, 0x8d, 0xf5, 0xe9, 0xee, 0x2a, 0x52,
		0x72, 0xad, 0xd5, 0x16, 0x43, 0x0b, 0xea, 0xc8, 0x37, 0x04, 0xcc, 0xfe, 0x9f, 0x3e, 0x32, 0xc7
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4bcf7n;
	message = new Uint8Array([
		0xe3, 0x02, 0xec, 0xcd, 0xfd, 0xdf, 0x14, 0x55, 0xa1, 0x7f, 0xd2, 0x87, 0x0f, 0x73, 0x7f, 0x23,
		0x90, 0x2f, 0xd1, 0xd8, 0xab, 0x6c, 0xaf, 0xc3, 0x9b, 0xca, 0x44, 0x33, 0x01, 0xba, 0x53, 0xaf,
		0xd7, 0x9b, 0xca, 0x3a, 0xa5, 0x23, 0x99, 0xd5, 0xf7, 0x01, 0xc4, 0x46, 0x0e, 0xc0, 0xb7, 0x18,
		0xd6, 0xef, 0xdb, 0xe3, 0x18, 0x7f, 0x66, 0xcd, 0xf1, 0x6c, 0x77, 0x51, 0x83, 0xa0, 0x62, 0x3f,
		0xea, 0x14, 0x48, 0x04, 0x71, 0x38, 0xec, 0x2c, 0x06, 0x95, 0xc1, 0x25, 0xec, 0xb0, 0x48, 0x46,
		0xb0, 0x32, 0x98, 0x0f, 0x5e, 0x47, 0x3e, 0xb3, 0xf4, 0x44, 0x48, 0xd3, 0x17, 0x8c, 0x9d, 0x8d,
		0x05, 0xb4, 0x90, 0xb5, 0xcb, 0xe5, 0xb4, 0x62, 0xb8, 0x82, 0xf1, 0xad, 0x11, 0x0b, 0xd7, 0xb5,
		0x06, 0x42, 0x33, 0xe7, 0xe5, 0x8c, 0xe0, 0x7c, 0x8e, 0x99, 0xe0, 0x42, 0x27, 0x47, 0xab, 0xa0
	]);
	signature = new Uint8Array([
		0x03, 0x26, 0x78, 0xe9, 0xfe, 0xed, 0x45, 0xed, 0xf1, 0x2a, 0xf6, 0x7a, 0x5f, 0xda, 0x9d, 0x19,
		0x41, 0xf2, 0x94, 0x25, 0x12, 0xad, 0xf9, 0x5b, 0x04, 0x80, 0x4e, 0xba, 0x5c, 0xcf, 0x01, 0xf0,
		0xb3, 0x7b, 0xf9, 0xe6, 0xa2, 0xe0, 0x1b, 0x48, 0x2a, 0xc1, 0xaf, 0xec, 0x76, 0x84, 0xac, 0x89,
		0x6b, 0x0d, 0x8c, 0x41, 0x49, 0x33, 0x8e, 0x39, 0x36, 0x42, 0x2c, 0xc7, 0x05, 0x81, 0x14, 0xfa,
		0xf4, 0xdb, 0xbf, 0x7b, 0xf3, 0xc3, 0x30, 0xf3, 0xf1, 0xe8, 0xe1, 0x6a, 0x4b, 0xb7, 0x55, 0xce,
		0x1d, 0xce, 0x34, 0xfe, 0xe3, 0x76, 0xb6, 0xc5, 0x8e, 0x35, 0x2f, 0x88, 0xe6, 0xec, 0x8f, 0x60,
		0xc5, 0x31, 0x9d, 0x45, 0xfa, 0x01, 0xd4, 0x6d, 0x7f, 0xa5, 0xfd, 0x2e, 0xb7, 0xac, 0x45, 0x3d,
		0x1b, 0x3d, 0x34, 0xc1, 0x7e, 0x2c, 0x9c, 0xf3, 0xb8, 0x51, 0xbe, 0x7b, 0x73, 0x4c, 0x73, 0x3f
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(true);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4bcf7n;
	message = new Uint8Array([
		0xf5, 0xab, 0x2a, 0xf8, 0x1f, 0xa3, 0x1c, 0xd0, 0xc8, 0x53, 0x48, 0xd9, 0x48, 0x47, 0x5b, 0x19,
		0x5b, 0xd3, 0xa5, 0xb2, 0x6c, 0x4b, 0x7a, 0xb7, 0x13, 0x76, 0xd8, 0x3e, 0xdc, 0x41, 0x49, 0xb7,
		0x4a, 0xb1, 0x0b, 0x7c, 0x1b, 0x1b, 0x6f, 0xa9, 0xce, 0x97, 0x7f, 0x2d, 0x63, 0xb2, 0xe3, 0x21,
		0x62, 0x63, 0x06, 0x59, 0x1e, 0x41, 0x74, 0x39, 0x3b, 0xf2, 0x87, 0xca, 0x6e, 0xe7, 0x42, 0x0d,
		0x84, 0x46, 0x7d, 0x90, 0xa6, 0x28, 0x42, 0x3e, 0xdb, 0x05, 0x78, 0x7b, 0xce, 0x6c, 0xbe, 0x71,
		0xd2, 0xf8, 0x9a, 0xa4, 0x23, 0x7f, 0xd3, 0xcd, 0x6e, 0x8c, 0x1b, 0xe5, 0x94, 0x10, 0xf1, 0x80,
		0xac, 0x54, 0xc6, 0x5c, 0x47, 0x32, 0x5f, 0x3a, 0xf7, 0x85, 0x7a, 0xec, 0x12, 0xde, 0xb4, 0xb0,
		0xb3, 0x79, 0xaa, 0xbc, 0x02, 0x6f, 0x5f, 0x1a, 0xb5, 0x2c, 0xde, 0xb6, 0xd7, 0x24, 0x20, 0xb6
	]);
	signature = new Uint8Array([
		0xe1, 0xc4, 0xae, 0x4f, 0x01, 0xae, 0x88, 0x22, 0x68, 0xb3, 0x5f, 0x11, 0xce, 0xc2, 0xb1, 0x12,
		0x81, 0x60, 0x63, 0x50, 0x6e, 0xf8, 0xd1, 0x93, 0x4e, 0xd7, 0xf3, 0xad, 0x76, 0xb7, 0xa1, 0x2a,
		0x66, 0x3f, 0xb9, 0x65, 0x32, 0x18, 0x86, 0xfe, 0x7e, 0xaf, 0x05, 0xab, 0xeb, 0xa8, 0xbb, 0x57,
		0xe4, 0x4c, 0x99, 0x37, 0xec, 0xf0, 0x51, 0x58, 0x62, 0x24, 0x6f, 0x73, 0x7a, 0xba, 0xa8, 0x0a,
		0x12, 0x7b, 0xa3, 0x2e, 0x78, 0xe6, 0x50, 0xd2, 0x36, 0x65, 0x3d, 0x36, 0x42, 0x65, 0x89, 0xe7,
		0x28, 0x38, 0x7f, 0x1a, 0xdb, 0x80, 0x01, 0xb9, 0xf6, 0x90, 0x07, 0xd5, 0xb2, 0xd5, 0x04, 0xef,
		0x5c, 0x53, 0x45, 0x26, 0xa6, 0x0f, 0x6b, 0x53, 0xd0, 0x06, 0xc7, 0xed, 0x02, 0x30, 0xa7, 0xec,
		0x9c, 0x09, 0xd8, 0x0e, 0xb2, 0x2a, 0x7b, 0xdb, 0x07, 0xf3, 0x54, 0xa0, 0x29, 0x2c, 0x0e, 0x22
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4bcf7n;
	message = new Uint8Array([
		0x31, 0xae, 0xa9, 0xd1, 0xbe, 0xb7, 0xbc, 0x4f, 0x5f, 0xc7, 0xf5, 0xa4, 0x9f, 0x89, 0x68, 0x65,
		0x4f, 0xdf, 0x7c, 0x2d, 0x32, 0xc8, 0x41, 0x99, 0xfa, 0x87, 0x03, 0x97, 0x73, 0x02, 0x1f, 0xe1,
		0xff, 0x68, 0x15, 0xc4, 0x42, 0x16, 0xdf, 0x26, 0x1e, 0xbc, 0x81, 0xc7, 0xe2, 0xbb, 0xe2, 0xc7,
		0xbe, 0xd2, 0xda, 0x69, 0x7b, 0xfa, 0x8c, 0x16, 0x68, 0x8e, 0xf6, 0xa5, 0x98, 0xaf, 0xc6, 0xd9,
		0x4a, 0xe7, 0x6f, 0x2b, 0xa9, 0x0c, 0x7d, 0xca, 0xb6, 0x68, 0x25, 0xe1, 0x82, 0x16, 0x21, 0x18,
		0xa0, 0xaf, 0xbb, 0x5d, 0xda, 0x27, 0x27, 0xe4, 0x23, 0xf1, 0x15, 0x6c, 0xcd, 0x6a, 0x87, 0xc5,
		0xfc, 0x74, 0xe0, 0x8f, 0x5b, 0x61, 0x3e, 0x44, 0x0d, 0x14, 0x0a, 0x79, 0xe7, 0x62, 0xce, 0x60,
		0xdc, 0xbe, 0x46, 0x92, 0xb8, 0x16, 0xb9, 0x0b, 0x12, 0xf8, 0x89, 0x76, 0x7b, 0xf9, 0x0a, 0xac
	]);
	signature = new Uint8Array([
		0x10, 0x3a, 0xa0, 0x87, 0x3b, 0x0d, 0x20, 0x45, 0xb0, 0x86, 0x7c, 0x08, 0x4f, 0xa7, 0xe2, 0x53,
		0xc0, 0x11, 0x9c, 0x91, 0xad, 0x3c, 0x81, 0x44, 0x15, 0x6b, 0x61, 0xf3, 0x6f, 0xcd, 0xa4, 0xa5,
		0x57, 0x8f, 0x51, 0x5b, 0xf7, 0x01, 0x67, 0xa1, 0xac, 0xa0, 0x5b, 0x8f, 0xd1, 0x68, 0x28, 0x7b,
		0xba, 0x88, 0x55, 0x89, 0x32, 0xd5, 0x4b, 0x21, 0x8e, 0x82, 0x2b, 0xb8, 0xc6, 0x57, 0x06, 0x79,
		0x55, 0xc7, 0x8e, 0xf3, 0xf9, 0x7f, 0x3f, 0xc7, 0x3d, 0x1c, 0x9a, 0xd9, 0x3c, 0x31, 0x12, 0x3c,
		0xd5, 0x19, 0xa1, 0x7a, 0x82, 0xc4, 0xaf, 0xd2, 0xbf, 0x91, 0x59, 0x07, 0x43, 0x3b, 0xe7, 0x89,
		0xb3, 0x02, 0xa9, 0xcb, 0x7c, 0xef, 0x11, 0xe9, 0x3c, 0x07, 0xd3, 0x59, 0x61, 0xad, 0x82, 0x79,
		0x71, 0x22, 0x1a, 0x0a, 0x3b, 0x26, 0xeb, 0x74, 0x44, 0x5e, 0x6e, 0xa0, 0xdb, 0x33, 0x8b, 0x8e
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	n =
		0xb0ec8da8b8d87c94443202a94262afd545d9187d5c45111e7b246da630b1aab516133d6d9c8dbc98ac27d09843f452063f2f577c997e56da01f3861e123c842ace49ec71622c3d6cf54d13bb542d9a55a0be0fd79a65c4f72f1539026cae2e48026e3282e24a8c31e3e699deabd41d31461f6a7bd59978dc189077d46f9ee27bn;
	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebb1ebn;
	message = new Uint8Array([
		0x53, 0x74, 0x27, 0xfc, 0x22, 0x6d, 0x46, 0xbe, 0xbf, 0x32, 0x64, 0x62, 0x1d, 0x7a, 0xa9, 0x7b,
		0x56, 0x86, 0xa2, 0x77, 0xee, 0x57, 0x9f, 0x74, 0x5c, 0x1e, 0x59, 0x55, 0xc6, 0xf4, 0xd8, 0x15,
		0x0d, 0xcb, 0x94, 0x5c, 0x09, 0xa4, 0xdb, 0x50, 0x16, 0x03, 0x72, 0xae, 0xcf, 0xa0, 0x7f, 0x19,
		0x19, 0x60, 0xa6, 0xb2, 0x64, 0x83, 0x73, 0xe8, 0x2d, 0x1f, 0xf8, 0x92, 0xc7, 0xcd, 0xb7, 0x3b,
		0x5c, 0xa2, 0xc2, 0xbc, 0x2f, 0x61, 0x20, 0x11, 0x23, 0xee, 0x73, 0x65, 0x81, 0x06, 0xd8, 0x6f,
		0xf6, 0x2e, 0x0f, 0x01, 0xdb, 0xe9, 0xdc, 0xde, 0xb9, 0x2e, 0xac, 0xcd, 0x0d, 0x19, 0x7c, 0xeb,
		0x48, 0xe1, 0xf7, 0x45, 0x1a, 0x0a, 0xde, 0xa6, 0xf0, 0xdc, 0xad, 0xae, 0xbc, 0x13, 0x7c, 0x24,
		0xf4, 0xd8, 0x23, 0x8d, 0xdd, 0xf0, 0xa1, 0xfe, 0x09, 0x34, 0xbf, 0x2e, 0x1e, 0x41, 0xf0, 0xcf
	]);
	signature = new Uint8Array([
		0x4a, 0xc9, 0x8f, 0x88, 0x9b, 0x20, 0xbe, 0xc8, 0x55, 0x06, 0x52, 0x3c, 0x1f, 0x66, 0x03, 0xef,
		0x0a, 0xce, 0xa6, 0x2d, 0x29, 0x4e, 0x4f, 0x76, 0x9b, 0x3a, 0x4b, 0xe0, 0x20, 0x91, 0xc2, 0x46,
		0xb1, 0x86, 0xd2, 0x3e, 0x5f, 0x22, 0xcf, 0xee, 0x7c, 0x38, 0x64, 0xf1, 0x9f, 0x41, 0x4c, 0x27,
		0x60, 0xb3, 0x0a, 0x72, 0x5d, 0xe0, 0x4e, 0xd2, 0xbc, 0xc9, 0x3c, 0xf8, 0x71, 0xad, 0xfc, 0x94,
		0xac, 0x9a, 0x12, 0x82, 0xcc, 0xa0, 0xd3, 0x67, 0x0e, 0xa2, 0x7a, 0x7e, 0xbc, 0x14, 0x6d, 0x39,
		0x81, 0xc6, 0xa7, 0x05, 0xfb, 0xc7, 0x73, 0x8f, 0x96, 0xad, 0xad, 0xf5, 0x41, 0x1b, 0x44, 0xeb,
		0x1c, 0x41, 0xac, 0x19, 0xfa, 0xc9, 0x96, 0xa3, 0x5a, 0x79, 0xad, 0x34, 0xec, 0x1d, 0x6d, 0x10,
		0xab, 0x06, 0x2b, 0xb5, 0x9d, 0x92, 0xbd, 0x9c, 0xda, 0xd7, 0x50, 0x08, 0x64, 0xc6, 0x72, 0x1c
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebb1ebn;
	message = new Uint8Array([
		0x31, 0x51, 0xfc, 0xca, 0x24, 0x36, 0x4d, 0x0f, 0xe8, 0x73, 0x3e, 0x86, 0xe2, 0xa6, 0x80, 0x6c,
		0x6c, 0x93, 0x5a, 0x3c, 0x27, 0x24, 0x9d, 0xcf, 0x92, 0xae, 0xda, 0xc8, 0xdc, 0x76, 0xd2, 0x2f,
		0xf7, 0x74, 0x2e, 0x5c, 0xee, 0x57, 0x71, 0x17, 0x78, 0xc9, 0x2a, 0xfd, 0xcd, 0xf3, 0x6e, 0x26,
		0xb8, 0x44, 0x85, 0x04, 0xee, 0x6e, 0xe4, 0x8e, 0x9e, 0xb2, 0x5b, 0x9e, 0x49, 0x5e, 0x90, 0x98,
		0xd4, 0x94, 0xac, 0x4d, 0xdc, 0x4c, 0x54, 0x1f, 0x49, 0x9c, 0xdb, 0x65, 0x26, 0x38, 0xb6, 0x11,
		0xb0, 0x35, 0x30, 0x90, 0xac, 0x12, 0x5f, 0xf1, 0xfe, 0xf8, 0x56, 0x4a, 0x78, 0x41, 0x9c, 0x57,
		0xf0, 0x38, 0xdd, 0x65, 0x95, 0x1f, 0xe0, 0x6e, 0x83, 0x77, 0xb9, 0x86, 0x94, 0x7b, 0x40, 0x75,
		0x79, 0xee, 0xc1, 0xa6, 0x0a, 0x16, 0xf5, 0x40, 0xdb, 0x09, 0x31, 0x92, 0x10, 0x27, 0xde, 0xb4
	]);
	signature = new Uint8Array([
		0x98, 0x75, 0xf7, 0xbb, 0x19, 0x4c, 0x63, 0xb5, 0x3a, 0x38, 0xa0, 0x65, 0x24, 0xb2, 0xd1, 0x30,
		0x0f, 0x1b, 0x3d, 0xb3, 0x3b, 0xcb, 0xbc, 0x6f, 0xaf, 0xed, 0x33, 0xed, 0x7f, 0x49, 0xab, 0x2b,
		0xfb, 0x0a, 0x4a, 0x08, 0x5b, 0xd4, 0xe4, 0x3e, 0x43, 0x51, 0x55, 0x19, 0xae, 0xc4, 0xf0, 0x55,
		0x78, 0xbf, 0xd9, 0x63, 0x9e, 0xee, 0xd5, 0xc5, 0x7f, 0x4e, 0xff, 0x0f, 0x0f, 0xcb, 0x4b, 0xc1,
		0xd2, 0x1f, 0xf0, 0xd1, 0x8a, 0x67, 0x1b, 0x39, 0x80, 0x8b, 0x72, 0xb2, 0x66, 0x51, 0xc9, 0x35,
		0x15, 0xce, 0x97, 0x35, 0x8b, 0x85, 0x08, 0x40, 0xa7, 0xfe, 0x4c, 0x51, 0x3a, 0x05, 0x47, 0x6e,
		0xe4, 0x47, 0xe4, 0x64, 0x18, 0x37, 0x93, 0xf9, 0x2a, 0xeb, 0x1a, 0x34, 0xb8, 0x56, 0x0f, 0x59,
		0x0e, 0x54, 0x1c, 0x7e, 0xbb, 0x50, 0x4f, 0x6f, 0xa8, 0x39, 0xdb, 0x5b, 0x59, 0xa9, 0x2f, 0xaf
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebb1ebn;
	message = new Uint8Array([
		0x39, 0x0f, 0xb4, 0xad, 0xb6, 0xb1, 0xb1, 0x4c, 0x59, 0x87, 0x2d, 0x15, 0x84, 0xb5, 0xd1, 0xe2,
		0x37, 0x8f, 0xae, 0x4a, 0x3e, 0xfe, 0x19, 0x23, 0xa7, 0x25, 0xb9, 0x45, 0x79, 0x44, 0xde, 0x91,
		0xa3, 0xdc, 0x14, 0x32, 0x33, 0x14, 0xf9, 0x23, 0xc8, 0x5b, 0x4b, 0xf1, 0x4a, 0x4f, 0x45, 0xc3,
		0xd8, 0xdd, 0x2c, 0x97, 0x02, 0xaa, 0x25, 0xce, 0x39, 0xb2, 0x49, 0xeb, 0x83, 0x30, 0xfb, 0x98,
		0x74, 0xbd, 0x79, 0xea, 0x59, 0xbb, 0xb2, 0xe5, 0xb6, 0xf4, 0x58, 0x43, 0xf3, 0x7f, 0x35, 0x71,
		0x52, 0xe4, 0xc2, 0xdb, 0x24, 0x7f, 0xf6, 0x69, 0x3d, 0x2a, 0x5c, 0x49, 0xa5, 0x16, 0x68, 0xf0,
		0x90, 0xfa, 0x0b, 0x5b, 0x90, 0x70, 0x85, 0x9b, 0x0a, 0x9b, 0x7b, 0x90, 0xe7, 0x0e, 0x49, 0xf5,
		0x8b, 0xe9, 0x99, 0x9c, 0x0b, 0x45, 0x35, 0xfb, 0x9a, 0xd3, 0x19, 0xe8, 0x45, 0xbf, 0xcd, 0xa1
	]);
	signature = new Uint8Array([
		0x5d, 0xf6, 0x89, 0x4b, 0x07, 0x07, 0x8b, 0xda, 0x9a, 0x4b, 0x3d, 0xa8, 0x9c, 0x7e, 0x92, 0xd9,
		0x8d, 0x66, 0xd3, 0xe6, 0x73, 0x81, 0xad, 0xfb, 0x8e, 0x1a, 0x2c, 0xe8, 0xcf, 0x57, 0x20, 0x69,
		0xa4, 0x2d, 0x1e, 0xbd, 0x39, 0xce, 0xf5, 0xbc, 0xeb, 0x39, 0x9c, 0x8e, 0x08, 0x23, 0xd2, 0x5b,
		0x59, 0x4d, 0xfa, 0xa8, 0xbc, 0xb2, 0x70, 0xa9, 0x28, 0x13, 0x84, 0xb6, 0x23, 0x41, 0xe9, 0x1b,
		0xcd, 0x9b, 0x25, 0x25, 0x2d, 0xec, 0x25, 0xae, 0xe0, 0xc7, 0x10, 0x85, 0xfc, 0x21, 0xca, 0xd4,
		0x23, 0xf6, 0x5e, 0x14, 0x4e, 0xec, 0x0d, 0x3e, 0x9a, 0x70, 0x0b, 0x8b, 0xf7, 0xe9, 0x2a, 0xc0,
		0x6e, 0x33, 0xcc, 0xc7, 0x0f, 0x2b, 0xbe, 0xc5, 0xf7, 0xe3, 0x55, 0xfe, 0x44, 0x4a, 0xbb, 0x0a,
		0xce, 0xf5, 0x8c, 0xf9, 0x78, 0xe1, 0x0a, 0x4a, 0x95, 0x3a, 0x6e, 0xf0, 0xd4, 0x82, 0x14, 0xc5
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebb1ebn;
	message = new Uint8Array([
		0x5b, 0x54, 0x6a, 0x18, 0x6e, 0xb7, 0xaf, 0x3e, 0x5c, 0x12, 0x70, 0xc3, 0xb9, 0x79, 0x04, 0xef,
		0xbd, 0x11, 0x89, 0xb7, 0x9b, 0x17, 0xd9, 0xe1, 0x0f, 0x24, 0xba, 0x69, 0x36, 0xaf, 0x55, 0x24,
		0xa3, 0xd3, 0xea, 0xa3, 0xaf, 0x52, 0xc1, 0x5a, 0x10, 0xdb, 0x64, 0x01, 0xae, 0x88, 0x0b, 0x3b,
		0xb2, 0xab, 0x58, 0x76, 0xdf, 0xca, 0x44, 0x12, 0x25, 0xe8, 0x5a, 0xc5, 0x73, 0x06, 0x23, 0x3e,
		0xce, 0xea, 0xe1, 0x08, 0xa0, 0x1f, 0x7f, 0xb2, 0x52, 0x3d, 0xc9, 0x2d, 0x1c, 0x6b, 0xd9, 0x75,
		0x1c, 0x21, 0xd1, 0x73, 0xa6, 0x33, 0xd0, 0x23, 0xdc, 0x0b, 0x1e, 0xf2, 0x7e, 0x35, 0xaa, 0x6a,
		0x03, 0x22, 0xb7, 0x10, 0xe8, 0x25, 0xd2, 0x8d, 0x48, 0xc2, 0x07, 0x0d, 0xad, 0x28, 0x54, 0xe5,
		0x26, 0xfc, 0x5e, 0x78, 0x99, 0x58, 0x63, 0x5b, 0x5b, 0x14, 0x70, 0xb7, 0xfe, 0x44, 0xd4, 0xef
	]);
	signature = new Uint8Array([
		0x52, 0x11, 0x98, 0x92, 0xd0, 0xcf, 0x2f, 0x9d, 0x55, 0x6c, 0x91, 0x19, 0x97, 0x9e, 0xd9, 0xd9,
		0xe4, 0x9c, 0xfc, 0xb4, 0xd6, 0x34, 0xb9, 0x51, 0xe7, 0xdb, 0xea, 0x75, 0x0f, 0x97, 0xc1, 0xbc,
		0xd2, 0xb7, 0x13, 0xcd, 0xe9, 0x2a, 0xe5, 0xcb, 0x91, 0x97, 0x97, 0x11, 0xaf, 0xf3, 0x89, 0x1a,
		0xed, 0x1f, 0x51, 0x42, 0x65, 0xd0, 0xee, 0x72, 0x73, 0x63, 0x0f, 0xdc, 0xde, 0x38, 0x18, 0xcd,
		0x5c, 0xe6, 0x34, 0x94, 0x60, 0x4a, 0x89, 0xdc, 0xc9, 0x74, 0x5d, 0x0f, 0xff, 0x9b, 0xfc, 0xfd,
		0xad, 0xa0, 0x43, 0xba, 0x2e, 0x66, 0x9c, 0x9a, 0x51, 0x12, 0x1f, 0xdc, 0x0a, 0x7a, 0xde, 0xaf,
		0x13, 0x24, 0x76, 0x81, 0x5a, 0xfb, 0x47, 0x44, 0x0f, 0x3e, 0x47, 0xd6, 0x50, 0x8f, 0x02, 0x19,
		0x38, 0x59, 0x6e, 0x61, 0xbe, 0x6a, 0x98, 0x25, 0x61, 0x85, 0x5c, 0x29, 0x44, 0x7f, 0x89, 0xab
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(true);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c1ddcdn;
	message = new Uint8Array([
		0x83, 0xd4, 0xb9, 0xb3, 0x38, 0xfd, 0xa0, 0x0d, 0x34, 0x27, 0x09, 0x63, 0xc6, 0xf3, 0x5c, 0x85,
		0x4e, 0xd5, 0x8e, 0xa8, 0xfc, 0xc7, 0xff, 0xb8, 0xda, 0x3f, 0xa3, 0xf0, 0x0d, 0x5e, 0x61, 0xa7,
		0x58, 0x6a, 0xb8, 0x6d, 0xe1, 0x7e, 0xa8, 0x56, 0x38, 0x80, 0xd0, 0x96, 0x95, 0x54, 0xd4, 0x4e,
		0x61, 0x4f, 0x01, 0xa6, 0xf8, 0xef, 0x34, 0x1c, 0xae, 0xc9, 0xf7, 0x1c, 0x10, 0xc2, 0xee, 0xd0,
		0x6c, 0x82, 0x72, 0x39, 0x93, 0x26, 0x7b, 0x7f, 0xdd, 0x35, 0xc3, 0x85, 0x6e, 0xd6, 0x28, 0xc1,
		0xb8, 0x40, 0x52, 0x4b, 0x41, 0x71, 0x97, 0x33, 0xa6, 0x23, 0x1b, 0x18, 0xe1, 0xfc, 0x3c, 0xf6,
		0xc7, 0x05, 0x2d, 0x40, 0xd4, 0x5d, 0xe0, 0x2f, 0x2b, 0x2f, 0x2a, 0x59, 0xd9, 0xe1, 0x22, 0x85,
		0x5a, 0x8e, 0xca, 0xbe, 0x5e, 0xb7, 0xf1, 0xa6, 0xcd, 0x35, 0x57, 0x0d, 0x08, 0x72, 0x13, 0xc2
	]);
	signature = new Uint8Array([
		0x02, 0x90, 0x82, 0x46, 0xb1, 0x50, 0x1d, 0xba, 0x9d, 0xaf, 0x82, 0x75, 0x0f, 0xdd, 0xb0, 0x95,
		0xf6, 0x6e, 0xf6, 0x6e, 0x8b, 0x26, 0xfe, 0xa9, 0x7c, 0xcd, 0xb1, 0x20, 0xa7, 0xc9, 0xf5, 0xae,
		0x0f, 0xae, 0xc9, 0x77, 0xb3, 0x7d, 0x2a, 0x7c, 0x3c, 0x48, 0x73, 0xfe, 0x98, 0x13, 0x9d, 0x85,
		0xe2, 0xda, 0xa0, 0x2b, 0xc9, 0xdf, 0x12, 0x13, 0xf7, 0x8c, 0x54, 0x17, 0x55, 0x2c, 0xdd, 0xf3,
		0x84, 0x49, 0x52, 0xa4, 0x29, 0x5a, 0x6b, 0xab, 0xd5, 0x98, 0x22, 0xa8, 0x24, 0xfd, 0x34, 0x04,
		0x29, 0x65, 0x32, 0xa2, 0xe8, 0xdd, 0x00, 0x42, 0x44, 0xbf, 0x95, 0xad, 0x22, 0x82, 0x31, 0x9a,
		0xc0, 0x7e, 0x31, 0xaf, 0xab, 0xc0, 0x92, 0xc2, 0x5b, 0xeb, 0xd2, 0x3d, 0x29, 0xd7, 0x48, 0xe6,
		0x0c, 0xd6, 0xf8, 0xc5, 0xfc, 0x0f, 0x36, 0x53, 0x90, 0x16, 0x9b, 0x3a, 0x8d, 0xa1, 0xe3, 0x8e
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ebb1ebn;
	message = new Uint8Array([
		0x31, 0x50, 0xfc, 0xd0, 0xfe, 0xe4, 0x8e, 0x6e, 0x62, 0x3e, 0x34, 0xa5, 0x88, 0xa9, 0x9c, 0xb5,
		0xc2, 0x02, 0xbd, 0x0a, 0xd8, 0xbf, 0xc8, 0x63, 0xa0, 0x30, 0x5b, 0x33, 0xce, 0x05, 0xf8, 0x47,
		0x0e, 0x11, 0xb7, 0xaa, 0x50, 0x4d, 0x37, 0xc6, 0x63, 0x20, 0xda, 0xcb, 0xc6, 0xdd, 0x32, 0x55,
		0xbb, 0x8e, 0xb6, 0x49, 0x9c, 0xf0, 0xba, 0xff, 0x72, 0xbe, 0x9e, 0xa7, 0xc4, 0x32, 0x45, 0xe5,
		0xad, 0xca, 0xc8, 0xbf, 0x31, 0x48, 0x6c, 0xb9, 0xd1, 0xfc, 0xd2, 0x3e, 0x5d, 0x45, 0x6e, 0x42,
		0x0a, 0x56, 0x3a, 0x26, 0xc5, 0x36, 0xac, 0xdc, 0xc6, 0x0a, 0xe5, 0x4b, 0x67, 0x97, 0x2b, 0xf5,
		0x37, 0x03, 0x99, 0xd7, 0x4a, 0xdb, 0x15, 0x90, 0xd4, 0x5b, 0x83, 0xc6, 0xf6, 0xe9, 0x38, 0xc6,
		0xd8, 0xe2, 0xb2, 0x6a, 0xf8, 0x99, 0x86, 0x40, 0xc2, 0x9d, 0x99, 0xe8, 0x60, 0x3b, 0x93, 0xbe
	]);
	signature = new Uint8Array([
		0x73, 0xe5, 0x90, 0x71, 0x30, 0x8a, 0x44, 0x3d, 0x19, 0x4c, 0x43, 0xba, 0x89, 0xbc, 0x57, 0x00,
		0xe0, 0x93, 0x26, 0x99, 0xb8, 0x92, 0x3a, 0x2a, 0x84, 0x91, 0xdb, 0x20, 0x43, 0x3d, 0x90, 0xc8,
		0x02, 0x89, 0x26, 0x5c, 0xfc, 0xe1, 0xcf, 0x41, 0x9b, 0x83, 0x87, 0x3b, 0xc5, 0xad, 0xad, 0xf4,
		0x2d, 0xd2, 0x6d, 0x36, 0x78, 0x19, 0xdd, 0xfd, 0x51, 0x10, 0xc3, 0x1e, 0x7c, 0x1f, 0xc7, 0xb8,
		0x6f, 0x94, 0xe7, 0x82, 0xc5, 0x50, 0x23, 0xe2, 0x16, 0x94, 0xcf, 0x05, 0xeb, 0x08, 0xee, 0xe9,
		0x83, 0x8c, 0xb3, 0x50, 0x81, 0x84, 0x7c, 0x74, 0x72, 0x84, 0x0e, 0xce, 0x72, 0x52, 0xc2, 0x40,
		0x4d, 0x66, 0xf1, 0x73, 0xf6, 0xc6, 0xc7, 0x4d, 0xb5, 0xf9, 0xd2, 0x47, 0xd9, 0x3f, 0x1e, 0xd0,
		0x77, 0xf3, 0x7e, 0x57, 0x48, 0x04, 0xa7, 0xdc, 0xe9, 0x9c, 0x03, 0xf3, 0x93, 0x14, 0x9f, 0xb4
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	n =
		0xc4b9ea11f21cd93c01f56c4219db7d2e52581a6c968705c06588c036b6f51a27de43ba0006d6e54d9ee20dd8bc1c4787b4c45e9545cf98c7872100f6c3492f5c3f1ce2d28caf10fa611cc4a4ec94543fbb872ef0fc8bb9558360960e4e386874d3beef4e9662e8779304e8d09bfc290a6fc19e9908e8eb49336ef02224107bd74de231f2610d76fa834baad342e87f5ffbd56ee8b459702425109af864401b713cd9e96a01137a860c3079e13704d3328003136631062b198be8d644ed99a0c62f94cf7971a0f2875592f35e362abcf2845a11ee98e5f01a515abd0d03646da28123b45cea4cbfd7de9bc399fd9f05349a2d0386516f70f5c9a9970d3231ff73n;
	e =
		0xc29n;
	message = new Uint8Array([
		0x6c, 0x0e, 0x15, 0xa9, 0x9f, 0x99, 0x48, 0xd4, 0x19, 0x80, 0xd7, 0xa3, 0x7a, 0x32, 0x7e, 0xb2,
		0x80, 0xc7, 0x0a, 0x6b, 0x7b, 0x9f, 0x6b, 0xce, 0x01, 0x46, 0x0b, 0x6e, 0xe2, 0x9b, 0x5e, 0xbc,
		0x5e, 0x32, 0xbb, 0x88, 0x96, 0xf6, 0x6a, 0xc5, 0x41, 0x13, 0xfe, 0x8d, 0xa0, 0x13, 0xe4, 0x65,
		0xb4, 0x46, 0x3d, 0xc1, 0xae, 0x68, 0xe9, 0xcb, 0xa7, 0x7e, 0xe4, 0x60, 0x91, 0x01, 0xd6, 0x5b,
		0x6e, 0x3e, 0xe5, 0x17, 0xc0, 0xfd, 0xce, 0x2f, 0x40, 0x61, 0x34, 0x88, 0xd2, 0x0f, 0x38, 0x92,
		0xb9, 0x92, 0x49, 0xca, 0x07, 0xff, 0x3d, 0x84, 0x58, 0xd4, 0xa1, 0xe7, 0xc0, 0x26, 0x4e, 0x39,
		0x02, 0xfc, 0x3d, 0x5d, 0x03, 0xf6, 0x9d, 0x99, 0x7e, 0x32, 0x22, 0x9d, 0xf8, 0x6f, 0x9f, 0xc1,
		0xf7, 0x73, 0xd7, 0x8f, 0x6f, 0xab, 0x91, 0x81, 0x7d, 0x12, 0xea, 0x0b, 0x57, 0x53, 0xef, 0xdc
	]);
	signature = new Uint8Array([
		0x57, 0x3c, 0xbe, 0xd4, 0x50, 0xf9, 0x45, 0xf5, 0x64, 0x97, 0x27, 0x3f, 0xc3, 0xc1, 0x73, 0x1d,
		0x61, 0x98, 0x06, 0x7f, 0xfa, 0x30, 0x04, 0x7e, 0x38, 0xd1, 0xe6, 0xaf, 0xe0, 0xaa, 0x64, 0x3a,
		0xe0, 0x51, 0xb6, 0xa1, 0x9e, 0xd6, 0x4e, 0xc8, 0x1a, 0x76, 0x21, 0x04, 0x54, 0x92, 0xcf, 0xe8,
		0xad, 0x18, 0xc9, 0x8e, 0x58, 0xb6, 0x23, 0x8b, 0xc7, 0x7c, 0x24, 0x18, 0x62, 0x90, 0xdd, 0x99,
		0x09, 0x26, 0xa9, 0xfa, 0x6c, 0xe0, 0x6e, 0xb0, 0x89, 0x1d, 0xb9, 0x42, 0xc0, 0x7b, 0x44, 0xfd,
		0x00, 0x45, 0x7c, 0xf2, 0x77, 0xb1, 0x2d, 0xaf, 0xd0, 0xd6, 0x36, 0x76, 0x64, 0x56, 0x25, 0x4b,
		0x02, 0x08, 0x7d, 0x0e, 0x05, 0x25, 0x3f, 0x1f, 0xec, 0x4c, 0xdc, 0xfd, 0x65, 0x88, 0x53, 0x40,
		0xb6, 0xc6, 0xee, 0x46, 0xbe, 0xa2, 0x67, 0xaa, 0xb3, 0x89, 0x5c, 0xca, 0x4a, 0xc8, 0xdd, 0xdf,
		0x15, 0xce, 0x11, 0x57, 0x60, 0x3f, 0x27, 0x25, 0x51, 0xc4, 0x7d, 0x79, 0x27, 0x09, 0xe9, 0x4a,
		0x89, 0x4b, 0x23, 0x6b, 0xeb, 0xda, 0x73, 0xaf, 0x22, 0xd8, 0x40, 0xc3, 0x4d, 0x59, 0xe5, 0xeb,
		0xfa, 0xc5, 0xab, 0x3f, 0x52, 0xcf, 0xa4, 0x33, 0x98, 0xdc, 0x14, 0x11, 0x3f, 0x45, 0xf5, 0xea,
		0x5c, 0x1f, 0x15, 0x39, 0xdb, 0xb7, 0xcf, 0x70, 0xbd, 0x63, 0x29, 0x31, 0xfa, 0xc7, 0x3c, 0x26,
		0xbd, 0x28, 0xb9, 0x30, 0x13, 0x38, 0xa2, 0x2a, 0xec, 0x43, 0xb8, 0xf7, 0x56, 0x47, 0x36, 0x54,
		0x3a, 0xf5, 0x61, 0x98, 0xf9, 0x62, 0xfc, 0x30, 0x36, 0x9b, 0x50, 0xca, 0xef, 0x1e, 0xda, 0x10,
		0x80, 0x6f, 0xa7, 0x0d, 0xae, 0x5c, 0x07, 0x2f, 0x7f, 0x4e, 0xd1, 0xfc, 0x21, 0xe8, 0x9d, 0x79,
		0x86, 0xae, 0xda, 0x08, 0x4b, 0x5c, 0x4b, 0x8e, 0x51, 0xa2, 0xd9, 0x27, 0x5e, 0xcb, 0x38, 0xb1
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xd67n;
	message = new Uint8Array([
		0x06, 0x42, 0x06, 0x83, 0x1c, 0xd4, 0x15, 0x42, 0x5c, 0xda, 0xeb, 0x49, 0xee, 0x72, 0x7d, 0xc9,
		0x0e, 0x74, 0x91, 0x7f, 0x55, 0xa7, 0x23, 0x88, 0x3a, 0x34, 0x08, 0x77, 0xd8, 0x5a, 0xd1, 0xa5,
		0xf2, 0x64, 0xf2, 0xc8, 0x34, 0xd8, 0x24, 0xc7, 0xbb, 0xf2, 0x07, 0xcd, 0xd8, 0x50, 0x0c, 0x9d,
		0x11, 0xef, 0x92, 0x25, 0x69, 0x56, 0x4f, 0x55, 0xe2, 0x11, 0xf2, 0x31, 0x3f, 0x61, 0x06, 0x25,
		0x0e, 0x32, 0x1a, 0x99, 0xe6, 0x4d, 0x1f, 0xc6, 0xee, 0xcf, 0x11, 0xc8, 0x9e, 0xda, 0xda, 0xf4,
		0xca, 0x8a, 0x73, 0x6b, 0xdc, 0x2b, 0x4c, 0xef, 0x61, 0xa9, 0xee, 0xf6, 0xc7, 0x47, 0xdf, 0xfd,
		0x64, 0x94, 0xc5, 0x1f, 0xbb, 0x9c, 0xcf, 0xe6, 0xfb, 0x5b, 0x51, 0x61, 0xc9, 0x77, 0xae, 0x77,
		0x3f, 0x2e, 0x7b, 0x7a, 0x35, 0x8c, 0xe1, 0x00, 0xbf, 0xe2, 0x43, 0xee, 0xf6, 0x75, 0x21, 0xd5
	]);
	signature = new Uint8Array([
		0x38, 0x5b, 0x55, 0x1f, 0xca, 0x5e, 0x32, 0xd9, 0xe3, 0xdd, 0xb5, 0xdc, 0xa3, 0x14, 0x64, 0xb1,
		0x4c, 0xc4, 0x30, 0x36, 0x88, 0xc1, 0x73, 0xa4, 0x3e, 0x13, 0xa8, 0xf0, 0x36, 0xa9, 0xc9, 0x18,
		0x4d, 0x55, 0x73, 0x12, 0x23, 0x98, 0xcc, 0xfc, 0x5f, 0x5e, 0xef, 0x01, 0xc3, 0xa0, 0xb2, 0x9d,
		0x25, 0xac, 0xa8, 0xe3, 0x88, 0xf6, 0xcb, 0x84, 0x72, 0x0b, 0xd6, 0xbd, 0xf3, 0x2d, 0xa6, 0x81,
		0xd4, 0x31, 0xb6, 0xde, 0x9f, 0xea, 0xdb, 0x46, 0x31, 0xae, 0x7f, 0xb1, 0xe2, 0xae, 0xc9, 0xa3,
		0x0b, 0x99, 0xf8, 0x2e, 0x62, 0x02, 0x46, 0x35, 0x7c, 0x45, 0x88, 0xb0, 0xb9, 0x75, 0xc0, 0xa3,
		0xf6, 0x79, 0x7b, 0x71, 0xdf, 0xa7, 0x41, 0xdd, 0x01, 0x50, 0xf9, 0xb6, 0x14, 0x68, 0x5a, 0xcc,
		0xbb, 0x76, 0x09, 0xa5, 0xc5, 0x11, 0xbe, 0x4d, 0x52, 0x26, 0x31, 0xc3, 0xf9, 0xc8, 0x4e, 0x30,
		0x8c, 0x6e, 0x70, 0x34, 0xfd, 0xfd, 0x78, 0xda, 0x43, 0xea, 0xc1, 0xd4, 0x59, 0x83, 0xc6, 0x53,
		0xeb, 0x57, 0x67, 0x7d, 0x71, 0x30, 0x95, 0x88, 0xcd, 0x18, 0xb6, 0x22, 0x30, 0x24, 0xc2, 0x28,
		0x9c, 0x8f, 0xf5, 0xbc, 0x62, 0xcc, 0x71, 0x43, 0xde, 0x19, 0xc4, 0x46, 0xe5, 0x6c, 0x0e, 0x95,
		0x24, 0x5e, 0x84, 0x89, 0x99, 0x72, 0x83, 0x2b, 0xee, 0xae, 0xa3, 0x6e, 0x50, 0x10, 0xe9, 0xbd,
		0x7d, 0xf8, 0xca, 0x0b, 0xf4, 0x64, 0xbd, 0xfe, 0xa1, 0x3a, 0xc4, 0xea, 0x1e, 0x57, 0xff, 0xe8,
		0xf7, 0xf6, 0x5a, 0x5e, 0x66, 0xbd, 0xcc, 0xba, 0x12, 0x7f, 0x08, 0xfb, 0xb8, 0x08, 0xd4, 0xb9,
		0xa7, 0x28, 0x8b, 0x7f, 0x3f, 0x2a, 0x42, 0x23, 0x3d, 0xe4, 0x96, 0x83, 0x3c, 0xec, 0x58, 0x7f,
		0x36, 0x0e, 0x13, 0x5a, 0x70, 0x51, 0xa0, 0xa9, 0xfd, 0x24, 0xd9, 0xbb, 0xdf, 0x0f, 0xa1, 0x0c
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xd67n;
	message = new Uint8Array([
		0x62, 0x4e, 0xf4, 0x31, 0xa1, 0xc8, 0x1e, 0x27, 0x9c, 0x7f, 0x3e, 0x37, 0x60, 0x9e, 0xe5, 0x7c,
		0x27, 0xc4, 0x43, 0x33, 0xce, 0xaa, 0x3e, 0x7a, 0x89, 0x05, 0xc6, 0x58, 0xd6, 0xae, 0x62, 0xfe,
		0xaf, 0x00, 0x0f, 0x4c, 0x04, 0x81, 0x4b, 0x97, 0x68, 0xc5, 0x6d, 0xaa, 0x0b, 0x90, 0x37, 0x0a,
		0xe8, 0x3b, 0xae, 0x7f, 0x3f, 0x59, 0x29, 0xcf, 0x46, 0x9a, 0xa9, 0xcd, 0x1c, 0xef, 0x68, 0x92,
		0xfe, 0xee, 0xb5, 0x0b, 0xbd, 0x79, 0xfe, 0xb4, 0x6f, 0x9a, 0x2f, 0xa2, 0x65, 0xb2, 0x3b, 0xc7,
		0x5e, 0xd3, 0xf7, 0x72, 0xfa, 0x6a, 0x2f, 0x15, 0x72, 0x21, 0xf4, 0x4b, 0x85, 0x03, 0x33, 0x19,
		0xb6, 0xe1, 0x8c, 0x74, 0xb4, 0xf5, 0x60, 0x04, 0x1a, 0xc6, 0x2c, 0x28, 0x58, 0x4b, 0x16, 0x3a,
		0xf1, 0x53, 0xc6, 0x14, 0xe8, 0x25, 0x77, 0xd3, 0x74, 0x63, 0x4e, 0xdb, 0xfb, 0x34, 0xea, 0x1b
	]);
	signature = new Uint8Array([
		0x31, 0x62, 0xcc, 0x1b, 0xb7, 0x42, 0xed, 0xb6, 0xbb, 0x18, 0x21, 0x1d, 0xc8, 0x0a, 0x5f, 0xb1,
		0xab, 0x19, 0x64, 0x87, 0x11, 0x70, 0x80, 0x58, 0x0c, 0x2f, 0x28, 0x05, 0x9c, 0x64, 0xfb, 0x5a,
		0xed, 0xdf, 0x40, 0xd9, 0x8b, 0x2c, 0xf9, 0x50, 0x24, 0xf8, 0xdd, 0x9c, 0x16, 0x98, 0xf0, 0x65,
		0x72, 0xf7, 0xf1, 0x68, 0x2b, 0x67, 0x86, 0x87, 0x49, 0xd3, 0x3b, 0xcb, 0x67, 0x8a, 0x3d, 0xff,
		0xb9, 0xe4, 0xbd, 0xe2, 0x90, 0xd2, 0x56, 0xc7, 0x09, 0x02, 0x12, 0x84, 0x4f, 0xf2, 0x79, 0x90,
		0x62, 0x91, 0x00, 0x2b, 0xff, 0x16, 0x1b, 0x30, 0xe2, 0x56, 0xb7, 0xe5, 0x7a, 0x65, 0xf5, 0xc8,
		0x92, 0x73, 0x95, 0x6a, 0x0a, 0x92, 0xe1, 0x48, 0x2a, 0x90, 0xdc, 0x8f, 0xb2, 0x70, 0x7c, 0xb3,
		0xb6, 0x44, 0x97, 0xc6, 0xed, 0x40, 0xbf, 0x89, 0xc5, 0xb7, 0x3d, 0xe7, 0x59, 0xa8, 0xa4, 0x0e,
		0x2f, 0x95, 0x94, 0x3a, 0xaf, 0x6b, 0xa8, 0x09, 0x46, 0x70, 0x4f, 0x91, 0x71, 0xee, 0xc6, 0xd6,
		0x8c, 0x11, 0xf4, 0x15, 0x8b, 0xc2, 0x91, 0x41, 0xbc, 0x1b, 0x31, 0xd8, 0xcc, 0xfc, 0x62, 0xe9,
		0xf4, 0x22, 0x1d, 0xcc, 0x44, 0x51, 0xfb, 0x4c, 0x16, 0x19, 0x76, 0x5a, 0xa2, 0x30, 0xcb, 0x3c,
		0x48, 0x7b, 0xc9, 0xa0, 0x55, 0xf6, 0x13, 0x60, 0xe9, 0xc4, 0x2e, 0x93, 0x8f, 0x16, 0xe3, 0x8f,
		0xa4, 0x25, 0x74, 0x43, 0xb0, 0x93, 0x9c, 0x7d, 0x55, 0x06, 0xc4, 0x65, 0x2c, 0x75, 0x0f, 0x22,
		0x78, 0x8f, 0x6d, 0xb3, 0x4b, 0x0d, 0xf5, 0x4c, 0x8b, 0xb1, 0xed, 0x75, 0x65, 0x0f, 0x74, 0x34,
		0x77, 0x90, 0x41, 0xab, 0xe1, 0xb7, 0x0c, 0x40, 0x39, 0x33, 0xbe, 0xef, 0xb3, 0xd2, 0x28, 0x92,
		0x84, 0x9e, 0x00, 0x20, 0x6d, 0x01, 0xed, 0x74, 0xfe, 0x13, 0x76, 0x12, 0x8a, 0x41, 0xe1, 0x9e
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xd67n;
	message = new Uint8Array([
		0x7a, 0x88, 0x4d, 0x5e, 0x7e, 0xdc, 0x74, 0xc1, 0x0c, 0x44, 0x41, 0x8e, 0x47, 0xec, 0x7d, 0x7d,
		0xd6, 0x6d, 0xb0, 0x01, 0x2d, 0xfc, 0x8a, 0x20, 0x0e, 0xe1, 0x81, 0x82, 0x4f, 0x2c, 0xbc, 0xc8,
		0xdd, 0xa3, 0x30, 0x1f, 0x01, 0xfe, 0x09, 0x14, 0xe2, 0x57, 0x4b, 0xaa, 0x4c, 0xdc, 0xb9, 0xa9,
		0xaf, 0xc7, 0xf6, 0x3a, 0x6b, 0x90, 0xea, 0xb1, 0x4a, 0x60, 0x67, 0xaa, 0x4e, 0xca, 0x0c, 0x57,
		0xae, 0xb6, 0x6a, 0x18, 0x1b, 0x9d, 0x66, 0x4c, 0x47, 0xfc, 0xde, 0x68, 0xa8, 0x02, 0x90, 0x46,
		0x7a, 0x8c, 0x37, 0xbf, 0x03, 0x54, 0xf6, 0x7b, 0x1a, 0x65, 0xfa, 0x08, 0xea, 0xd3, 0x5c, 0x2a,
		0xf4, 0xa8, 0x44, 0x72, 0x53, 0x21, 0x54, 0x12, 0x44, 0x1b, 0x44, 0xf0, 0xe5, 0xc8, 0xc9, 0xf9,
		0x3d, 0xa6, 0xbc, 0xb8, 0x7d, 0xb2, 0x78, 0x27, 0x85, 0xd9, 0x84, 0xc5, 0xaa, 0xaf, 0x72, 0xe8
	]);
	signature = new Uint8Array([
		0x81, 0x03, 0xb5, 0x64, 0x89, 0x93, 0x73, 0x66, 0x24, 0x55, 0x6e, 0x99, 0x4e, 0x05, 0x2f, 0x6f,
		0xb9, 0xb7, 0xda, 0xd3, 0x6b, 0xbb, 0x84, 0x5b, 0xf7, 0x88, 0xa3, 0x1c, 0x32, 0x5f, 0x02, 0xc6,
		0xf1, 0x39, 0x71, 0x90, 0x0c, 0x08, 0x94, 0x8f, 0x44, 0x84, 0x38, 0x47, 0x22, 0x30, 0xea, 0x69,
		0xa6, 0x00, 0x2f, 0x52, 0x41, 0x7b, 0x53, 0xe1, 0xd3, 0x29, 0x54, 0xd9, 0x6d, 0xd3, 0x54, 0x43,
		0xcc, 0xd4, 0x59, 0xb9, 0x8d, 0x4c, 0x21, 0x1c, 0x22, 0x77, 0xb5, 0x4b, 0x36, 0x31, 0x0c, 0xbf,
		0xf6, 0xda, 0x97, 0x29, 0x8c, 0xd6, 0xef, 0x26, 0x1a, 0x7b, 0x4f, 0x70, 0x27, 0xee, 0x11, 0xb9,
		0x70, 0x81, 0xcc, 0x71, 0x0a, 0x7a, 0x3b, 0xc6, 0x57, 0x14, 0xe1, 0xc6, 0x9c, 0xb3, 0x7b, 0xc8,
		0x44, 0x02, 0x36, 0x91, 0xec, 0x9f, 0x70, 0x4d, 0x57, 0x35, 0x7e, 0xeb, 0xec, 0x21, 0xa2, 0x7f,
		0x6e, 0x62, 0x4f, 0x46, 0xd3, 0x5d, 0x88, 0xa6, 0x4c, 0xfd, 0xed, 0x5c, 0x5f, 0xbc, 0xe3, 0xe9,
		0x7e, 0x71, 0xba, 0xd2, 0x1f, 0x8d, 0x09, 0xf0, 0x7d, 0xe8, 0xaf, 0xcb, 0x73, 0xe5, 0xd1, 0x65,
		0x99, 0x9c, 0xe7, 0xfa, 0xbc, 0x8f, 0xba, 0x81, 0x00, 0xfc, 0x7e, 0xfa, 0x85, 0xac, 0xd4, 0x47,
		0xaf, 0xb5, 0x93, 0xb9, 0x7b, 0x8e, 0x86, 0xad, 0x24, 0xc1, 0xb9, 0x3e, 0x22, 0x66, 0xd9, 0xcd,
		0x43, 0x33, 0x31, 0xc6, 0xc9, 0x39, 0x5e, 0x1a, 0x7a, 0x44, 0x31, 0xec, 0x46, 0xd5, 0x7d, 0x53,
		0xa3, 0x7a, 0xfb, 0xc9, 0x85, 0xdb, 0x7e, 0x4e, 0xe3, 0x2d, 0x34, 0xda, 0x6d, 0xa2, 0x72, 0x7b,
		0x93, 0x0f, 0xe6, 0xce, 0x8d, 0x74, 0x29, 0xbc, 0x04, 0xba, 0x48, 0x77, 0x76, 0x0d, 0x73, 0xfd,
		0x1e, 0xe9, 0xc8, 0xe2, 0x24, 0x78, 0x73, 0x7c, 0x73, 0x40, 0x51, 0x36, 0xa4, 0xe3, 0xd5, 0xd2
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(true);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000593d67n;
	message = new Uint8Array([
		0x63, 0x05, 0xa7, 0xc4, 0x51, 0x2d, 0x7d, 0x90, 0x3e, 0xae, 0x65, 0xdc, 0x8e, 0x62, 0x9c, 0x81,
		0x06, 0x0d, 0xa6, 0x81, 0xea, 0xef, 0x92, 0x40, 0x65, 0x9a, 0x7f, 0xf1, 0x2a, 0x02, 0x5f, 0x4e,
		0x5c, 0xd3, 0xfb, 0x8c, 0xac, 0x07, 0x38, 0x8e, 0xc1, 0xb7, 0x98, 0x59, 0xdc, 0x31, 0x03, 0xc8,
		0xbc, 0x4c, 0xc8, 0x80, 0xbf, 0xf8, 0xdf, 0x27, 0x4b, 0x19, 0x71, 0xd1, 0x6c, 0x96, 0x99, 0xbb,
		0xbe, 0xac, 0x6d, 0x3c, 0x8e, 0x89, 0x38, 0xf8, 0x3c, 0x16, 0x0a, 0x57, 0xe3, 0x14, 0x73, 0x36,
		0x3c, 0x6a, 0x8b, 0xdc, 0xc0, 0xbd, 0x35, 0x2f, 0x0d, 0x42, 0xa5, 0x27, 0x8b, 0xd0, 0x20, 0x84,
		0x4f, 0x3a, 0x03, 0xbc, 0x40, 0xdb, 0x07, 0x38, 0x78, 0x72, 0xc3, 0xbf, 0xed, 0x31, 0x73, 0x33,
		0x50, 0x10, 0xf7, 0x7b, 0x35, 0x67, 0x1f, 0xc0, 0x75, 0xbc, 0x25, 0xdc, 0xd0, 0xd9, 0x7b, 0x0f
	]);
	signature = new Uint8Array([
		0x40, 0xe1, 0xaf, 0xa3, 0x89, 0x5d, 0x93, 0x8a, 0x97, 0x38, 0x79, 0x15, 0x78, 0xa3, 0x43, 0xc9,
		0x60, 0x95, 0xdb, 0x0e, 0x72, 0x02, 0x5d, 0xc2, 0xf8, 0x0f, 0xc9, 0x4a, 0x64, 0x14, 0x34, 0x25,
		0xab, 0xd9, 0x6b, 0x9a, 0x3b, 0x5d, 0x03, 0x9a, 0x56, 0x45, 0xc2, 0xfc, 0x6e, 0x70, 0xbe, 0xf6,
		0x4a, 0x3d, 0xea, 0xfd, 0x9e, 0xb6, 0xde, 0xc0, 0x41, 0xc4, 0x9e, 0x04, 0xf8, 0x6d, 0x03, 0x8a,
		0x61, 0x71, 0x93, 0x64, 0xd4, 0xf3, 0x59, 0x9f, 0x13, 0xa8, 0xba, 0x04, 0x7c, 0x2f, 0x88, 0xa9,
		0x63, 0x8c, 0x75, 0x17, 0x6e, 0xc1, 0x5b, 0x26, 0xb3, 0xb3, 0x75, 0x30, 0x44, 0x1a, 0x12, 0x0e,
		0x84, 0x31, 0xce, 0xca, 0x4c, 0x63, 0xc5, 0x92, 0x78, 0x9a, 0x1d, 0xb9, 0xba, 0xb4, 0x99, 0x59,
		0xd5, 0x93, 0xb2, 0x73, 0x82, 0x3b, 0xba, 0xb4, 0x6b, 0x51, 0x78, 0xa8, 0xd1, 0xa7, 0x9e, 0x7f,
		0x93, 0xc0, 0x3b, 0xb0, 0x46, 0x8d, 0x5f, 0x64, 0xe5, 0xa0, 0xf5, 0xc6, 0x07, 0xf3, 0x8d, 0x41,
		0x06, 0x02, 0x2e, 0x4e, 0xed, 0xdb, 0x34, 0xed, 0x45, 0x7d, 0xca, 0x40, 0xa4, 0xf2, 0x5f, 0xd9,
		0xcb, 0x68, 0xd4, 0x97, 0xb4, 0x2d, 0x96, 0x10, 0x91, 0xe4, 0xa0, 0x6e, 0x6a, 0xd7, 0x0a, 0x2b,
		0x76, 0xca, 0xa8, 0xe2, 0x67, 0xd5, 0x4f, 0x8e, 0xa9, 0xae, 0xe8, 0x5d, 0x4f, 0x8f, 0xa5, 0x10,
		0xb5, 0xea, 0x8a, 0xc9, 0xb4, 0x58, 0xeb, 0x05, 0x56, 0x56, 0x6e, 0x8a, 0x71, 0x14, 0x5a, 0x73,
		0x38, 0x97, 0xe0, 0x09, 0x8d, 0xcb, 0x54, 0x0d, 0xc4, 0x24, 0x7a, 0x0f, 0x5f, 0x8b, 0x1e, 0x97,
		0x35, 0xa6, 0x36, 0xa4, 0x56, 0x1e, 0x96, 0x14, 0x1e, 0x33, 0xd3, 0xbe, 0xb6, 0x29, 0xeb, 0x90,
		0x61, 0x3c, 0x0d, 0x23, 0xf8, 0x33, 0x0d, 0x3c, 0xee, 0xfb, 0x11, 0xe1, 0x95, 0x18, 0xd2, 0x19
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xd67n;
	message = new Uint8Array([
		0x1c, 0x9c, 0x81, 0x54, 0x46, 0x61, 0xaa, 0xb0, 0xec, 0x7f, 0x62, 0x96, 0x57, 0x2c, 0xd6, 0x08,
		0xcc, 0xa5, 0x1f, 0x55, 0xb4, 0xc4, 0x7c, 0x48, 0xfa, 0xd5, 0xdf, 0x9f, 0xb5, 0xa6, 0xac, 0xbe,
		0x07, 0xdd, 0xbd, 0xa5, 0x44, 0x8e, 0xa9, 0x20, 0x57, 0x0d, 0x46, 0x3d, 0x62, 0x01, 0x6c, 0x03,
		0xa5, 0xba, 0xfc, 0x61, 0xa1, 0xc5, 0x21, 0x65, 0x7d, 0xbd, 0xd6, 0xaf, 0xa8, 0x63, 0xa9, 0x24,
		0xc0, 0xf1, 0xbe, 0xe7, 0xb3, 0xac, 0x16, 0x85, 0x24, 0xb9, 0x11, 0x6f, 0x10, 0x31, 0x32, 0xae,
		0xb1, 0x78, 0x23, 0xd2, 0xa2, 0xca, 0xf9, 0x2b, 0x45, 0x16, 0xb8, 0x3c, 0x62, 0x10, 0x1a, 0x6d,
		0x10, 0x82, 0x8c, 0x00, 0xd9, 0xe2, 0x7a, 0x46, 0x19, 0x2a, 0xcc, 0x13, 0xa7, 0xe4, 0xb1, 0x6f,
		0xb7, 0x84, 0x9b, 0x8e, 0xff, 0xfb, 0x8b, 0x03, 0x19, 0x89, 0x8e, 0x30, 0x29, 0xd3, 0x87, 0x01
	]);
	signature = new Uint8Array([
		0x7a, 0x5d, 0xa6, 0x03, 0xb9, 0xe8, 0xaf, 0x2f, 0xe8, 0x78, 0x7a, 0xbf, 0x94, 0x96, 0xc2, 0x73,
		0x24, 0xfe, 0x31, 0xe2, 0x96, 0x7c, 0xc6, 0x45, 0x18, 0x98, 0x58, 0x7d, 0xa6, 0x7c, 0x33, 0x7c,
		0xf0, 0x3c, 0xea, 0x8a, 0x52, 0x84, 0x65, 0x64, 0x9f, 0x76, 0xda, 0x77, 0xed, 0x4b, 0x23, 0xb9,
		0x56, 0xbe, 0x31, 0x7a, 0xe3, 0x92, 0x9a, 0xeb, 0x06, 0x64, 0xad, 0x06, 0xa6, 0xbd, 0x83, 0xa9,
		0x22, 0x8c, 0x7a, 0x31, 0xf1, 0x4f, 0xe5, 0x4b, 0x87, 0x9b, 0x80, 0x19, 0xe4, 0x62, 0x2a, 0xf5,
		0x9d, 0x31, 0xc7, 0xe4, 0x92, 0x4e, 0xbe, 0x0d, 0x62, 0x60, 0xff, 0x83, 0x01, 0x3f, 0x2f, 0x68,
		0x4d, 0xd3, 0x46, 0x71, 0xcd, 0xbb, 0xb9, 0xb9, 0x93, 0x7f, 0x5d, 0x8c, 0xbc, 0x13, 0xd2, 0x22,
		0xe3, 0x80, 0x9a, 0x75, 0x7d, 0x41, 0x68, 0xd7, 0x21, 0x00, 0x39, 0xfc, 0x4e, 0xdd, 0xe9, 0xfb,
		0x23, 0xe2, 0x73, 0x63, 0x84, 0x86, 0x64, 0xba, 0x10, 0xa7, 0x50, 0xa7, 0xc3, 0xf3, 0xe0, 0x65,
		0x59, 0x30, 0x37, 0x62, 0xac, 0xff, 0x5c, 0x15, 0x24, 0xb3, 0x69, 0xf5, 0xfc, 0x8b, 0x07, 0x68,
		0xc4, 0xc4, 0x65, 0xa8, 0x87, 0x20, 0xcd, 0xbb, 0xa3, 0x6a, 0xb4, 0x9c, 0xbd, 0x6a, 0x95, 0xd4,
		0xcf, 0x15, 0xc4, 0x50, 0x84, 0xa8, 0x4d, 0x7f, 0x88, 0xab, 0x61, 0xd1, 0x54, 0x6c, 0xbe, 0x1d,
		0x56, 0xff, 0xb2, 0x9e, 0x9e, 0xf8, 0x01, 0x15, 0xf6, 0x7c, 0x8a, 0x96, 0x2a, 0x31, 0xc6, 0xd4,
		0xca, 0x74, 0x2a, 0xce, 0x4b, 0x53, 0x66, 0x7f, 0xf9, 0xbf, 0x44, 0xf7, 0xa1, 0xda, 0x87, 0x64,
		0x81, 0x53, 0xe2, 0x60, 0x80, 0x56, 0x0b, 0xfe, 0x82, 0x20, 0x4b, 0xde, 0xe0, 0x0a, 0x7d, 0xb0,
		0xb1, 0x4b, 0xe0, 0xc0, 0x0e, 0xb2, 0x9a, 0x4e, 0x93, 0x11, 0xf6, 0x20, 0xcb, 0x81, 0xe3, 0x14
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	n =
		0xacfdfb1dcb1459b489cd4a8c9fab64a7da4f044bef1c506f0872e9476f3357abda509d9fb1db6a4f5306c40c058826253171cfedbc160776a48ec35b655bb9963286b6aece1c77dff987a0aae9720ba035dda67f317101bd3cd4e6caac867a8c38b87067938e96e72df1875f94e43e4c06f7a86a1dbe07836ee69763eee29bc13ca906d7740c29e651872a9ec7c6237f7c8290bb0800a030b323d09e7c903751d21a224266f9d6c94c17a4c0cd8175ea67b9d9020f2b3f31a96206084cddb2acef70b11ae25a46c4f6817c4813466d7cac76b27927145bd499ff87f22a946b688e980a00a3d54c72ab9c2c88a55a3ea4c6784068673532737cbe4799e98bd711n;
	e =
		0xb29bc5n;
	message = new Uint8Array([
		0x7c, 0xed, 0x8a, 0x54, 0xc8, 0xe3, 0x5e, 0xf5, 0xc8, 0x7d, 0x03, 0xee, 0x63, 0x57, 0xb6, 0x58,
		0xe2, 0xe5, 0x28, 0xed, 0xa5, 0x5a, 0xd3, 0x0f, 0x14, 0xc8, 0x8d, 0x0c, 0xd9, 0x89, 0x5e, 0xa0,
		0x4d, 0xdf, 0x8f, 0xbb, 0x2f, 0xd7, 0x03, 0x85, 0x9c, 0x73, 0xcb, 0x9f, 0x3b, 0x07, 0xf4, 0xac,
		0xb9, 0xe4, 0xa3, 0x11, 0x75, 0x34, 0x65, 0xf8, 0x7c, 0x25, 0xc0, 0x9b, 0xb7, 0x4a, 0x0e, 0xbf,
		0x63, 0x3e, 0x8b, 0x7e, 0xc2, 0x8a, 0xac, 0x4a, 0x10, 0xc8, 0xb2, 0x2f, 0xb9, 0x09, 0x80, 0x58,
		0xc9, 0x75, 0xa9, 0xd5, 0xa4, 0x31, 0xce, 0x9c, 0xf7, 0x86, 0x27, 0xcd, 0xee, 0x3f, 0x5f, 0x3a,
		0xa8, 0x52, 0xa5, 0x26, 0xe8, 0xc3, 0x00, 0x4d, 0x0d, 0xc6, 0xe2, 0x25, 0x44, 0x24, 0x01, 0x64,
		0xfc, 0xdf, 0x62, 0xc2, 0x9a, 0x19, 0xb6, 0x00, 0x6e, 0x32, 0xea, 0x29, 0xe6, 0x31, 0xfa, 0x18
	]);
	signature = new Uint8Array([
		0x8c, 0x07, 0x4b, 0xae, 0x48, 0x45, 0x48, 0x75, 0xae, 0xfa, 0x2b, 0x7e, 0xa0, 0x90, 0xd1, 0x1d,
		0x88, 0x60, 0xd7, 0xcb, 0xee, 0x5e, 0xe4, 0xc3, 0xed, 0x02, 0xcb, 0x45, 0xaa, 0xdb, 0x0b, 0x45,
		0x16, 0x87, 0x2b, 0x0e, 0x45, 0x21, 0x78, 0x9d, 0x50, 0x3b, 0x4e, 0x70, 0x09, 0x2c, 0xa2, 0xa0,
		0xc7, 0xa8, 0x8e, 0xfb, 0x7d, 0x74, 0xc6, 0x3c, 0xe8, 0xdf, 0xfc, 0xf0, 0x69, 0x95, 0xaf, 0x7c,
		0x95, 0x67, 0xa8, 0xdf, 0x05, 0xa0, 0x1b, 0x24, 0x3c, 0x5f, 0x3e, 0xdc, 0xfa, 0x39, 0x22, 0xd0,
		0x69, 0x67, 0xbe, 0xc9, 0xd0, 0xfa, 0xad, 0x2c, 0x84, 0x48, 0x6d, 0xd3, 0x86, 0x02, 0xa4, 0x16,
		0xef, 0x25, 0x3e, 0x4a, 0x28, 0xf7, 0x4c, 0xa2, 0x90, 0xe4, 0xd7, 0x43, 0xac, 0xcc, 0xcd, 0x20,
		0x4d, 0x8b, 0x13, 0x6d, 0xd1, 0x97, 0xe7, 0xa2, 0xf2, 0x5a, 0x27, 0x07, 0xf3, 0x39, 0xc6, 0xba,
		0x44, 0x4c, 0x19, 0xbc, 0x04, 0x7d, 0xff, 0x05, 0x84, 0xc4, 0x79, 0xab, 0x07, 0xc2, 0xae, 0x68,
		0xf2, 0x19, 0xc3, 0xc4, 0x30, 0xf1, 0x9c, 0xae, 0x3f, 0x71, 0x1c, 0x0e, 0xfa, 0xb8, 0xd0, 0x9f,
		0x85, 0xab, 0x66, 0xae, 0x94, 0x8c, 0x35, 0x7d, 0xb6, 0x70, 0x78, 0xa3, 0x59, 0xb9, 0xc7, 0x46,
		0xd2, 0xd6, 0x6b, 0x31, 0x48, 0x6c, 0x83, 0x76, 0x5a, 0xb0, 0x97, 0xb5, 0x40, 0xb5, 0xe6, 0xf6,
		0x26, 0xc9, 0x11, 0x1a, 0x29, 0x58, 0x55, 0xdf, 0xf5, 0xc2, 0xac, 0xea, 0x10, 0x2f, 0x6a, 0x29,
		0xb9, 0x56, 0x99, 0x09, 0xda, 0xd0, 0xd4, 0xc7, 0x9a, 0x94, 0x1a, 0x3e, 0x71, 0xb3, 0x13, 0x7d,
		0xc6, 0x8a, 0xe2, 0x29, 0x6b, 0x6f, 0x81, 0x75, 0xbf, 0xab, 0x20, 0x54, 0x32, 0xe4, 0x09, 0xbe,
		0x90, 0x75, 0xd1, 0x25, 0x80, 0xb5, 0xc1, 0x49, 0x24, 0xdd, 0x53, 0xc3, 0xd4, 0x47, 0x45, 0xd7
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(true);

	e =
		0xb29bc5n;
	message = new Uint8Array([
		0xc9, 0xa1, 0x21, 0xfa, 0x15, 0xbf, 0xfe, 0xfb, 0x86, 0x4f, 0xe3, 0xcf, 0xc2, 0xb1, 0xbf, 0x77,
		0x58, 0x86, 0xbe, 0x3f, 0xf5, 0x15, 0x1c, 0x40, 0xda, 0xee, 0x3c, 0x28, 0x8d, 0xcc, 0xf4, 0x3e,
		0xcf, 0xc0, 0x2b, 0xa0, 0xcf, 0x8c, 0xa7, 0xcf, 0x9d, 0x4d, 0x20, 0x6e, 0xe1, 0x5e, 0x99, 0x47,
		0xcd, 0x78, 0xf0, 0x8f, 0x50, 0x1e, 0xb3, 0x6b, 0x8d, 0x38, 0x35, 0xb3, 0x8b, 0xfe, 0xe1, 0xf5,
		0x2e, 0x17, 0xcf, 0xbd, 0x66, 0x02, 0x95, 0x13, 0xa6, 0xb6, 0x60, 0x46, 0x98, 0x85, 0x43, 0xe8,
		0x0f, 0x46, 0xce, 0x1a, 0x3d, 0xb3, 0xe3, 0x0a, 0x26, 0x10, 0xc5, 0xb9, 0x54, 0x0e, 0x72, 0x02,
		0xcc, 0xee, 0x33, 0xd8, 0x42, 0xe9, 0x71, 0xcf, 0x89, 0xd0, 0xca, 0xdd, 0x4d, 0xf0, 0x64, 0x62,
		0x04, 0x38, 0x81, 0x67, 0x22, 0x9e, 0x54, 0x23, 0x8c, 0xbe, 0x14, 0xc4, 0x50, 0xc4, 0x4e, 0x6c
	]);
	signature = new Uint8Array([
		0x7d, 0x08, 0x1b, 0x0e, 0x38, 0xd7, 0x32, 0x56, 0x47, 0x63, 0x58, 0xc0, 0x13, 0x90, 0x8f, 0x34,
		0x97, 0x81, 0x0a, 0xc4, 0xbd, 0x5d, 0x76, 0x25, 0x2f, 0x3e, 0xf4, 0x40, 0xc5, 0x74, 0x2e, 0xa5,
		0x52, 0xef, 0x53, 0x48, 0xec, 0xcf, 0x6e, 0xf1, 0x3a, 0xfd, 0xf6, 0x16, 0x28, 0x8d, 0xbb, 0xf0,
		0x5a, 0x5b, 0x25, 0xe6, 0x6a, 0x87, 0x45, 0xd9, 0xdd, 0xf6, 0x66, 0x39, 0xca, 0x89, 0x36, 0x6e,
		0x28, 0x06, 0x25, 0x29, 0xe8, 0x0b, 0x65, 0x5b, 0x02, 0x68, 0xe9, 0x22, 0xc8, 0xd7, 0x7e, 0xb8,
		0xce, 0xee, 0x83, 0x0f, 0xa1, 0x4c, 0x15, 0x23, 0x8d, 0xc1, 0x44, 0x2d, 0xfd, 0xaf, 0xfb, 0xf9,
		0x24, 0x36, 0xc7, 0x94, 0xc2, 0x4f, 0x61, 0x04, 0x37, 0x4b, 0xf1, 0x31, 0x61, 0x6b, 0xcf, 0x4c,
		0xca, 0x12, 0x60, 0x8c, 0xee, 0x20, 0x3e, 0x7e, 0xb0, 0xeb, 0xa0, 0x45, 0x56, 0xa0, 0xa0, 0xac,
		0x3d, 0xea, 0x9f, 0xa3, 0x9d, 0xac, 0x80, 0x82, 0xe3, 0x9f, 0x9a, 0x73, 0x99, 0x55, 0xe0, 0x36,
		0xd0, 0x63, 0x60, 0x08, 0xf5, 0xc3, 0xc4, 0xf8, 0x23, 0xa5, 0xe6, 0xe5, 0x22, 0x9f, 0xde, 0x6b,
		0x94, 0xf9, 0x86, 0x52, 0x0d, 0xe9, 0xb9, 0xa7, 0x7c, 0xa3, 0x4c, 0xcc, 0x02, 0x36, 0x76, 0x2c,
		0x77, 0xe3, 0x3e, 0x10, 0x5a, 0x93, 0x46, 0x55, 0x3d, 0xc0, 0xe4, 0x46, 0x9d, 0x39, 0x29, 0xec,
		0x38, 0xe8, 0x81, 0x3a, 0x55, 0x1a, 0xf2, 0x6b, 0x0f, 0x7d, 0x9d, 0xbb, 0x12, 0xd4, 0x0b, 0x7d,
		0x9f, 0xe1, 0x95, 0x94, 0x8e, 0x1e, 0xa1, 0x24, 0x53, 0x62, 0xb0, 0x1f, 0xae, 0xb4, 0x15, 0x76,
		0x05, 0xa9, 0xab, 0x51, 0x58, 0xa7, 0xbc, 0x4d, 0xf6, 0x44, 0xf1, 0x21, 0x21, 0xb0, 0x3e, 0xe2,
		0x2e, 0x9f, 0x23, 0xfa, 0x5f, 0x40, 0x06, 0x7b, 0x33, 0x3b, 0x86, 0x5b, 0xf3, 0xe4, 0x12, 0x44
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xeaf989n;
	message = new Uint8Array([
		0xcd, 0x69, 0xac, 0x8d, 0x1c, 0x46, 0xf5, 0x4d, 0x46, 0xcc, 0x9a, 0xff, 0x98, 0xe0, 0x78, 0x52,
		0x13, 0x57, 0xa3, 0x61, 0x77, 0xb9, 0x13, 0x92, 0xa0, 0x45, 0x9a, 0xbe, 0x15, 0x35, 0x19, 0x93,
		0xdf, 0x43, 0xf4, 0x37, 0x97, 0x6b, 0xc3, 0x2e, 0xc3, 0xf3, 0x4b, 0x7e, 0x63, 0xa9, 0xac, 0x11,
		0xc6, 0x6c, 0xdb, 0x5a, 0xa2, 0xed, 0x53, 0x3c, 0x64, 0xb7, 0x08, 0x27, 0xc5, 0x6d, 0x9d, 0x84,
		0x9e, 0x53, 0xd6, 0x53, 0xfd, 0x10, 0x50, 0x12, 0x78, 0xb3, 0x70, 0xe1, 0xc1, 0xf3, 0x99, 0xe5,
		0x7b, 0xbb, 0xa2, 0xea, 0x4c, 0xe6, 0x87, 0x4c, 0x34, 0x47, 0x5e, 0x17, 0x1d, 0xec, 0x8d, 0x6d,
		0xb3, 0xa3, 0x3b, 0x28, 0x75, 0xbe, 0x04, 0xc1, 0x0c, 0x14, 0xf1, 0x71, 0xdc, 0x48, 0xa7, 0x95,
		0xda, 0x4e, 0xde, 0x57, 0x9d, 0x2a, 0x15, 0x8b, 0xb7, 0xfb, 0x84, 0xd7, 0x45, 0x39, 0x53, 0x17
	]);
	signature = new Uint8Array([
		0x57, 0x25, 0xc1, 0xac, 0x60, 0xb2, 0xd6, 0x10, 0x97, 0x7f, 0xae, 0x6c, 0x52, 0xa9, 0x41, 0x55,
		0xd6, 0x87, 0xd5, 0x75, 0xaa, 0x2f, 0x5c, 0xee, 0x81, 0x7d, 0xbf, 0x77, 0xe1, 0xed, 0x69, 0x22,
		0x66, 0xc0, 0xff, 0x14, 0xa2, 0x10, 0x5b, 0x34, 0x3d, 0xcb, 0xb0, 0x75, 0xc4, 0x3e, 0xe6, 0xa8,
		0x39, 0xa6, 0x4b, 0xd1, 0xd1, 0x51, 0xd3, 0x80, 0x1e, 0x62, 0xf9, 0xd7, 0x6c, 0x8d, 0x94, 0x78,
		0x7c, 0x29, 0xd1, 0xe8, 0x8c, 0xa2, 0xea, 0x7f, 0x23, 0xd7, 0xff, 0xe1, 0xaa, 0xc3, 0xd5, 0x07,
		0x2f, 0x55, 0x6a, 0x80, 0x87, 0x51, 0x6d, 0xf5, 0xdf, 0xf9, 0xfc, 0xde, 0x5b, 0x0e, 0x84, 0x9d,
		0x08, 0xf1, 0xb4, 0x27, 0x07, 0xd2, 0xcd, 0xa2, 0xea, 0xc4, 0x62, 0xbc, 0x88, 0x10, 0x73, 0x7e,
		0x03, 0xd4, 0x7d, 0xc8, 0x24, 0x0d, 0xb7, 0x3c, 0x3c, 0xcf, 0x71, 0x06, 0x88, 0x6f, 0x8a, 0xe9,
		0xc4, 0xc3, 0x64, 0x73, 0x49, 0x3c, 0xb5, 0x24, 0x2e, 0x2d, 0x70, 0xbd, 0x5c, 0x36, 0xbe, 0x35,
		0xce, 0x1e, 0x5a, 0xa5, 0x28, 0x6d, 0x64, 0x39, 0xb2, 0x47, 0xfb, 0x64, 0xba, 0x06, 0xaf, 0x22,
		0x2b, 0x13, 0x3f, 0x05, 0xd3, 0x9e, 0x6a, 0x44, 0xa1, 0xad, 0x6a, 0xd5, 0x67, 0xb9, 0xe0, 0xb5,
		0x65, 0x54, 0x86, 0xaf, 0x0b, 0x9c, 0xfe, 0xf1, 0xd7, 0x14, 0xf3, 0x11, 0xdf, 0xcd, 0x98, 0x3b,
		0xd9, 0x06, 0x74, 0xf9, 0x64, 0xf6, 0x42, 0x43, 0xbe, 0x02, 0xfe, 0xb3, 0xa2, 0x02, 0xcd, 0x5f,
		0x94, 0x55, 0x05, 0x82, 0x6f, 0xda, 0x11, 0x2b, 0xba, 0x3e, 0x5b, 0x83, 0x7b, 0xdc, 0xb9, 0xe9,
		0x74, 0x95, 0x3e, 0xe7, 0xb1, 0xad, 0x7a, 0x6e, 0x21, 0xa0, 0xa6, 0x42, 0x68, 0xd5, 0x2e, 0xab,
		0xa0, 0x83, 0xc6, 0x71, 0x96, 0x32, 0xc2, 0x1e, 0x66, 0x15, 0xfe, 0x43, 0x95, 0xce, 0x3f, 0x53
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xb29bc5n;
	message = new Uint8Array([
		0x23, 0x70, 0x8e, 0x05, 0x5e, 0x89, 0x18, 0x26, 0xf8, 0x01, 0x1b, 0x1f, 0x48, 0xa1, 0xc7, 0xad,
		0x24, 0xb5, 0xd0, 0x08, 0xf9, 0xc9, 0x1e, 0xc3, 0x1a, 0xb1, 0xc5, 0xf3, 0x58, 0xcc, 0x37, 0x93,
		0xd3, 0x89, 0xb9, 0x27, 0x10, 0x29, 0x13, 0xa0, 0x4b, 0xc7, 0x8c, 0x80, 0x0e, 0x96, 0x15, 0x3e,
		0x02, 0x6b, 0xc5, 0xec, 0x06, 0x7b, 0x85, 0x17, 0x7e, 0x65, 0x0d, 0xef, 0xed, 0x73, 0x0f, 0xa7,
		0xc7, 0x1c, 0xb1, 0x1f, 0x80, 0xce, 0x41, 0xc1, 0xe9, 0xeb, 0x24, 0xa9, 0xbc, 0x12, 0x10, 0x08,
		0x75, 0x9f, 0x7c, 0xca, 0x64, 0x75, 0x54, 0x76, 0x01, 0xfb, 0xf0, 0x56, 0x7f, 0x64, 0x47, 0xd9,
		0xa4, 0x34, 0x60, 0x35, 0xd7, 0xff, 0x0a, 0x50, 0x7b, 0x74, 0xcd, 0xe1, 0x7b, 0x9b, 0x20, 0xd2,
		0x26, 0x5b, 0xdc, 0xea, 0x3e, 0x3f, 0xf1, 0xa8, 0x4b, 0x7a, 0x58, 0x72, 0x35, 0x28, 0x49, 0xef
	]);
	signature = new Uint8Array([
		0xa8, 0xcb, 0xf3, 0x4f, 0xfe, 0xfb, 0xa9, 0x16, 0xab, 0xf4, 0x96, 0x1a, 0x6a, 0x10, 0x32, 0xc0,
		0x1b, 0xc4, 0xae, 0xb8, 0x27, 0x8b, 0xa4, 0x2a, 0x18, 0xf4, 0xf6, 0x7f, 0xdf, 0xea, 0xb4, 0x9e,
		0xbb, 0x05, 0xcc, 0x28, 0x9a, 0xba, 0x47, 0x5a, 0x96, 0x67, 0x64, 0x9c, 0x6e, 0xcf, 0x6a, 0x8c,
		0xa1, 0x7a, 0xd8, 0x1f, 0x17, 0xd5, 0x10, 0x98, 0x07, 0xc2, 0xb2, 0x60, 0xac, 0x44, 0x0e, 0x13,
		0x4e, 0x55, 0xee, 0x42, 0x92, 0x13, 0xcb, 0x8e, 0x8a, 0x23, 0x14, 0xe7, 0x04, 0x90, 0x19, 0xfe,
		0x95, 0xba, 0x36, 0xe3, 0xec, 0x1e, 0xd1, 0xe7, 0x71, 0x08, 0xe4, 0xfd, 0x84, 0xab, 0xee, 0x28,
		0x42, 0x39, 0x96, 0xe3, 0xfb, 0xba, 0x3d, 0x38, 0xb2, 0x85, 0xa0, 0x55, 0xd6, 0x39, 0x0d, 0x3d,
		0x8f, 0x5b, 0x21, 0x41, 0x5e, 0x68, 0x74, 0xab, 0x37, 0x42, 0x3e, 0xfe, 0xa5, 0x72, 0x6d, 0x47,
		0xbb, 0xfe, 0xd1, 0x25, 0x49, 0x4a, 0x21, 0x64, 0xea, 0xb1, 0x23, 0x94, 0xf8, 0x98, 0x43, 0xf8,
		0xd8, 0xa5, 0xbd, 0x3b, 0xf0, 0x5b, 0x31, 0xb5, 0x98, 0xe4, 0xca, 0xa0, 0xad, 0x2a, 0x8c, 0xad,
		0x48, 0x26, 0xd2, 0x38, 0xe4, 0xab, 0x8d, 0x00, 0x53, 0x79, 0xf1, 0x00, 0xf9, 0x73, 0x98, 0xd8,
		0x96, 0x68, 0x4b, 0x08, 0x75, 0x3c, 0x89, 0x86, 0x3c, 0x22, 0x4d, 0x65, 0xa4, 0x75, 0x44, 0x3d,
		0x51, 0xa9, 0x1e, 0xd6, 0x68, 0xca, 0xc6, 0x91, 0xea, 0x70, 0x30, 0xaa, 0x73, 0x7c, 0x3e, 0xee,
		0xb9, 0xdb, 0x33, 0xcf, 0xf1, 0x7c, 0xe9, 0xa8, 0xe3, 0x99, 0xbb, 0x2b, 0x3c, 0xdc, 0xf2, 0x44,
		0x45, 0x67, 0x39, 0x8d, 0xb1, 0x96, 0xfc, 0x86, 0xba, 0x76, 0x11, 0x4d, 0xbd, 0x13, 0x09, 0x6c,
		0xab, 0xd6, 0x92, 0xb0, 0x83, 0xfe, 0xa1, 0xc7, 0xa9, 0x4e, 0x65, 0x64, 0xc2, 0xe8, 0xc0, 0x93
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xb29bc5n;
	message = new Uint8Array([
		0x0a, 0xf6, 0x36, 0x5d, 0x60, 0x65, 0xdf, 0xc4, 0x47, 0x95, 0xd8, 0x7a, 0x81, 0x19, 0xfb, 0x44,
		0xcb, 0x82, 0x23, 0xe0, 0xfb, 0x26, 0xe1, 0xeb, 0x4b, 0x20, 0x71, 0x02, 0xf5, 0x98, 0xec, 0x28,
		0x00, 0x45, 0xbe, 0x67, 0x59, 0x2f, 0x5b, 0xba, 0x25, 0xba, 0x2e, 0x2b, 0x56, 0xe0, 0xd2, 0x39,
		0x7c, 0xbe, 0x85, 0x7c, 0xde, 0x52, 0xda, 0x8c, 0xca, 0x83, 0xae, 0x1e, 0x29, 0x61, 0x5c, 0x70,
		0x56, 0xaf, 0x35, 0xe8, 0x31, 0x9f, 0x2a, 0xf8, 0x6f, 0xdc, 0xcc, 0x44, 0x34, 0xcd, 0x77, 0x07,
		0xe3, 0x19, 0xc9, 0xb2, 0x35, 0x66, 0x59, 0xd7, 0x88, 0x67, 0xa6, 0x46, 0x7a, 0x15, 0x4e, 0x76,
		0xb7, 0x3c, 0x81, 0x26, 0x0f, 0x3a, 0xb4, 0x43, 0xcc, 0x03, 0x9a, 0x0d, 0x42, 0x69, 0x50, 0x76,
		0xa7, 0x9b, 0xd8, 0xca, 0x25, 0xeb, 0xc8, 0x95, 0x2e, 0xd4, 0x43, 0xc2, 0x10, 0x3b, 0x29, 0x00
	]);
	signature = new Uint8Array([
		0x3b, 0x32, 0xda, 0xb5, 0x65, 0xd2, 0xf0, 0xa5, 0xac, 0x26, 0x7b, 0xa8, 0xfd, 0x4c, 0x38, 0x1f,
		0x5b, 0x0c, 0x40, 0xf2, 0x0c, 0x19, 0xf0, 0xdc, 0x7b, 0x23, 0x62, 0x32, 0xa8, 0xbd, 0xb5, 0x5c,
		0x1c, 0x33, 0xf1, 0x3f, 0x4f, 0x74, 0x26, 0x6d, 0x76, 0x28, 0x76, 0x77, 0x63, 0x58, 0x2b, 0xb0,
		0xfb, 0x52, 0x62, 0x63, 0xe2, 0xa4, 0x52, 0x1e, 0x09, 0xa3, 0x20, 0x7e, 0xe5, 0xfd, 0x7c, 0xfd,
		0xcd, 0xac, 0x85, 0xcc, 0xff, 0xe3, 0xe1, 0x04, 0x8f, 0x59, 0x0d, 0xad, 0xc1, 0x90, 0x35, 0xbf,
		0x2f, 0x3b, 0x5b, 0x95, 0x4e, 0x8c, 0x78, 0x3f, 0x6b, 0xd3, 0xe9, 0x9d, 0x98, 0x93, 0x0a, 0xea,
		0x8e, 0xce, 0xd5, 0xe3, 0x11, 0x93, 0x31, 0xbe, 0x1d, 0x60, 0x64, 0x10, 0xd1, 0x6d, 0x0e, 0x5e,
		0xf0, 0x69, 0x17, 0x9c, 0xd6, 0xb5, 0x13, 0xb9, 0x4b, 0x36, 0xc1, 0xcf, 0xe6, 0xad, 0x64, 0xad,
		0x28, 0x5e, 0x81, 0x8b, 0x58, 0xc4, 0xc8, 0x9b, 0xf9, 0x33, 0x0c, 0x4b, 0xce, 0xc9, 0x6d, 0x08,
		0xba, 0x21, 0xa3, 0x5c, 0xd4, 0x85, 0x1d, 0xa1, 0xf4, 0x05, 0xd9, 0x28, 0xdf, 0x3f, 0xcf, 0xeb,
		0x85, 0x10, 0x81, 0x71, 0xbb, 0x4a, 0xe5, 0xb0, 0x31, 0x01, 0x93, 0xbd, 0x8b, 0x5b, 0x86, 0x19,
		0x83, 0xb7, 0xa2, 0x48, 0x3b, 0xa6, 0xbc, 0xcf, 0xbf, 0x2d, 0x6e, 0x15, 0xba, 0xc1, 0xe2, 0xf2,
		0xf8, 0x36, 0x3c, 0x61, 0x54, 0x54, 0x67, 0x44, 0xe3, 0x01, 0xfd, 0x26, 0x61, 0xeb, 0xb3, 0xa2,
		0x90, 0x30, 0xd2, 0x69, 0xc8, 0x95, 0x4a, 0xce, 0x99, 0x2b, 0x07, 0x5c, 0x63, 0xac, 0x12, 0xa9,
		0x92, 0xee, 0xd4, 0x95, 0x6c, 0xb2, 0xa4, 0x84, 0x95, 0xd8, 0x2c, 0x47, 0xfa, 0x68, 0xe6, 0x67,
		0x40, 0xd3, 0x8a, 0x80, 0xca, 0xa6, 0x91, 0x90, 0xb1, 0x97, 0x30, 0xed, 0x7d, 0x72, 0x83, 0x5b
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xb29bc5n;
	message = new Uint8Array([
		0x4c, 0xde, 0x2a, 0x6d, 0x9e, 0xcf, 0xde, 0xfa, 0x3c, 0x63, 0x1c, 0x95, 0xaa, 0x99, 0x33, 0x63,
		0x4a, 0xe1, 0x26, 0x68, 0xdb, 0x8b, 0x53, 0xa0, 0x3f, 0x80, 0x52, 0x4b, 0x81, 0x30, 0x20, 0x88,
		0x16, 0xcb, 0x7d, 0x25, 0x63, 0xb4, 0x92, 0xb6, 0x80, 0x33, 0xd7, 0xe4, 0x3c, 0x6a, 0x34, 0x08,
		0x61, 0x8a, 0x67, 0xf9, 0x39, 0x46, 0xa5, 0x21, 0x50, 0x88, 0x84, 0xd7, 0x7c, 0x63, 0x18, 0xe9,
		0x1b, 0x4a, 0x5c, 0x77, 0x9c, 0x7f, 0xd4, 0x08, 0x41, 0xcd, 0x71, 0xd7, 0x22, 0x7a, 0xb5, 0x6e,
		0x76, 0x78, 0x17, 0x76, 0x0e, 0xdb, 0xa9, 0xce, 0x22, 0x90, 0xf8, 0xda, 0x50, 0x4b, 0x34, 0x1e,
		0xe2, 0xc1, 0x91, 0x0b, 0x50, 0x18, 0xec, 0x18, 0x05, 0x9b, 0xb2, 0x15, 0x66, 0xb3, 0xfe, 0xbc,
		0x11, 0x12, 0x01, 0x8a, 0x62, 0x32, 0xa7, 0xcd, 0x3c, 0xfe, 0x77, 0xfd, 0x06, 0xcf, 0xbc, 0x4f
	]);
	signature = new Uint8Array([
		0x41, 0x51, 0xdb, 0xee, 0x3d, 0x48, 0x3d, 0x20, 0xb5, 0x7b, 0x51, 0xd8, 0x0b, 0xd2, 0xd3, 0x82,
		0xfc, 0x85, 0x57, 0x5f, 0xa0, 0x31, 0x58, 0x2a, 0x88, 0xa1, 0x35, 0xb2, 0x61, 0x5c, 0x0a, 0x07,
		0x9b, 0xb0, 0x8c, 0x2c, 0xb7, 0xba, 0x60, 0x20, 0xc3, 0x57, 0x06, 0xaa, 0xdf, 0xb6, 0xbc, 0x35,
		0xd6, 0x9c, 0xe4, 0xdf, 0x0b, 0x2e, 0x5f, 0xca, 0x1e, 0xa6, 0x2a, 0x80, 0x7e, 0x97, 0x65, 0x50,
		0x15, 0x71, 0xd6, 0xd1, 0x23, 0xae, 0x11, 0x4a, 0xfc, 0x19, 0xb2, 0x6b, 0xa4, 0xb5, 0xdb, 0x1b,
		0x05, 0x22, 0x85, 0x9d, 0x22, 0x69, 0x11, 0x70, 0x59, 0x65, 0x10, 0x53, 0xb9, 0xd7, 0x2c, 0xc2,
		0x53, 0xc9, 0x02, 0x85, 0x65, 0x2a, 0x7e, 0x30, 0x94, 0xdc, 0xe3, 0xeb, 0x5c, 0x9e, 0xf5, 0xfb,
		0xf3, 0x5e, 0xb2, 0x68, 0xe3, 0xb8, 0xfe, 0x69, 0x3c, 0x2b, 0xfc, 0x4b, 0xbb, 0x86, 0x82, 0xd7,
		0x09, 0xa1, 0x2f, 0x30, 0x38, 0xfd, 0x04, 0x62, 0x9b, 0xc4, 0x8a, 0xe1, 0x3e, 0xe9, 0x11, 0x12,
		0x74, 0x1d, 0xab, 0x71, 0x7c, 0x58, 0x85, 0x6c, 0xc4, 0x21, 0x5e, 0xed, 0xae, 0xed, 0xd5, 0x7e,
		0xdb, 0x29, 0x26, 0x08, 0x5e, 0xbc, 0x05, 0xd1, 0x50, 0x38, 0xf0, 0xde, 0xba, 0x90, 0xb0, 0x0e,
		0x18, 0xe7, 0x10, 0xe6, 0x4d, 0x31, 0xff, 0x56, 0x3a, 0x1a, 0xc8, 0x8e, 0xcf, 0x9c, 0xad, 0xca,
		0x28, 0x45, 0xba, 0xbe, 0x9d, 0xd2, 0x67, 0x71, 0xf0, 0xa6, 0x29, 0x97, 0x6f, 0xe1, 0x3b, 0xa1,
		0x4f, 0x7c, 0x9c, 0xa3, 0x7b, 0x98, 0xbb, 0x3a, 0x9d, 0x96, 0xca, 0x9d, 0x72, 0x27, 0x3d, 0xa7,
		0x8f, 0xf3, 0xb1, 0x7f, 0x6d, 0x7a, 0xa2, 0x64, 0x5c, 0x42, 0xe3, 0x25, 0x1e, 0x91, 0x61, 0xc9,
		0x58, 0xbd, 0x6f, 0x10, 0xd2, 0x0f, 0x08, 0xfe, 0x24, 0x37, 0xaa, 0x79, 0xd7, 0x3f, 0x90, 0x81
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	n =
		0xa47d04e7cacdba4ea26eca8a4c6e14563c2ce03b623b768c0d49868a57121301dbf783d82f4c055e73960e70550187d0af62ac3496f0a3d9103c2eb7919a72752fa7ce8c688d81e3aee99468887a15288afbb7acb845b7c522b5c64e678fcd3d22feb84b44272700be527d2b2025a3f83c2383bf6a39cf5b4e48b3cf2f56eef0dfff18555e31037b915248694876f3047814415164f2c660881e694b58c28038a032ad25634aad7b39171dee368e3d59bfb7299e4601d4587e68caaf8db457b75af42fc0cf1ae7caced286d77fac6cedb03ad94f1433d2c94d08e60bc1fdef0543cd2951e765b38230fdd18de5d2ca627ddc032fe05bbd2ff21e2db1c2f94d8bn;
	e =
		0xe43fn;
	message = new Uint8Array([
		0x75, 0x18, 0xc8, 0x5b, 0x67, 0xe7, 0xae, 0xf7, 0xf2, 0x6b, 0xf0, 0x06, 0x89, 0x9f, 0xae, 0xf7,
		0x6e, 0x07, 0x6f, 0x0c, 0x6c, 0x94, 0x6e, 0x5d, 0xc9, 0xc8, 0x35, 0x21, 0x77, 0x1a, 0x6d, 0x29,
		0x8a, 0x9c, 0xf5, 0xad, 0xef, 0xdb, 0x31, 0x4b, 0x5a, 0x07, 0xa5, 0x4d, 0x80, 0x54, 0xc2, 0x2b,
		0x87, 0x9f, 0xff, 0x50, 0xba, 0x55, 0x2c, 0x21, 0x82, 0x91, 0x03, 0x3c, 0x91, 0x84, 0x01, 0xfd,
		0x61, 0x1a, 0x74, 0x47, 0xdd, 0xda, 0xd4, 0x81, 0x5e, 0x0f, 0x56, 0xde, 0xd8, 0x25, 0xbf, 0xe2,
		0x56, 0x55, 0x76, 0x22, 0xa3, 0x85, 0xde, 0x4b, 0x4a, 0x69, 0xe2, 0x65, 0xc1, 0xef, 0xd2, 0x59,
		0xe2, 0xda, 0x6d, 0xb1, 0x9a, 0xac, 0x3f, 0xa0, 0xe5, 0xca, 0x2d, 0x42, 0xfa, 0xdb, 0x4e, 0x24,
		0xc2, 0x71, 0xfc, 0x07, 0x8f, 0xeb, 0x2b, 0xe1, 0x0b, 0x9a, 0xfa, 0x25, 0x6f, 0x22, 0x88, 0x44
	]);
	signature = new Uint8Array([
		0x99, 0x2d, 0x48, 0xb2, 0x1b, 0xb3, 0xd2, 0x21, 0x9b, 0x44, 0xe8, 0xfc, 0xc8, 0x63, 0x3c, 0xf3,
		0xae, 0xb5, 0x91, 0xde, 0x90, 0xf4, 0x38, 0x64, 0x96, 0xac, 0x7e, 0xcd, 0x28, 0x4c, 0xb6, 0x3d,
		0x7d, 0xff, 0x81, 0xa5, 0x0b, 0x8c, 0x4f, 0xed, 0x9f, 0x2e, 0xf7, 0x37, 0x69, 0x2e, 0xa6, 0xbe,
		0x05, 0x24, 0x8c, 0xa1, 0x38, 0x94, 0x7b, 0x49, 0xb4, 0xe7, 0xf3, 0xcc, 0xe6, 0x64, 0x0e, 0x04,
		0x9a, 0xc2, 0x15, 0x4c, 0x40, 0xf5, 0x7e, 0x22, 0xfa, 0x14, 0xf9, 0x7e, 0x7a, 0x95, 0x07, 0xe1,
		0xdc, 0x98, 0xb2, 0x06, 0xce, 0x6e, 0xa0, 0xe1, 0x80, 0x03, 0x91, 0x99, 0xd1, 0xbe, 0x0a, 0x15,
		0xd1, 0xf5, 0x09, 0x3a, 0x45, 0x9e, 0x51, 0x01, 0xaa, 0xca, 0x2a, 0x23, 0xcb, 0x1f, 0x59, 0xca,
		0xd2, 0xf1, 0xfb, 0x99, 0xdc, 0x95, 0x6b, 0x9d, 0x43, 0x44, 0xba, 0xd2, 0xc1, 0x12, 0x1d, 0x63,
		0xb9, 0x15, 0x00, 0x4a, 0xcb, 0xfc, 0x7a, 0xc6, 0x0a, 0xc9, 0xa7, 0xb0, 0xb1, 0xc6, 0x81, 0x2b,
		0x30, 0xbf, 0xe0, 0x87, 0xf7, 0xf0, 0xc7, 0xd1, 0x62, 0x5f, 0x9c, 0x4f, 0x45, 0x85, 0x15, 0xe1,
		0x14, 0x78, 0xe3, 0x60, 0x4a, 0xa3, 0x9d, 0x14, 0xd0, 0x8b, 0xea, 0x30, 0xb0, 0x1f, 0xcd, 0x61,
		0x89, 0xe6, 0xf9, 0xb7, 0x01, 0xd3, 0x60, 0xe4, 0x71, 0x4d, 0x45, 0x55, 0x6b, 0x29, 0x81, 0x5c,
		0x8d, 0x8f, 0xa8, 0xe4, 0x6e, 0x10, 0x74, 0x9b, 0xa5, 0xe8, 0xd4, 0x45, 0xa4, 0xc0, 0xf4, 0x87,
		0xe7, 0x0a, 0xb5, 0x89, 0x0b, 0x7c, 0xcc, 0x16, 0x51, 0x28, 0x2a, 0x54, 0xe8, 0x7e, 0x7d, 0xb4,
		0xbb, 0x2f, 0x7d, 0x4a, 0x67, 0x1e, 0x71, 0xc4, 0x3c, 0x55, 0xcf, 0x64, 0x86, 0x41, 0x6f, 0x17,
		0x1d, 0x19, 0x55, 0x03, 0x74, 0x74, 0xd0, 0x6a, 0x71, 0xdd, 0x07, 0x87, 0x67, 0x84, 0x8e, 0x5d
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xe43fn;
	message = new Uint8Array([
		0xe0, 0x02, 0x37, 0x7a, 0xff, 0xb0, 0x4f, 0x0f, 0xe4, 0x59, 0x8d, 0xe9, 0xd9, 0x2d, 0x31, 0xd6,
		0xc7, 0x86, 0x04, 0x0d, 0x57, 0x76, 0x97, 0x65, 0x56, 0xa2, 0xcf, 0xc5, 0x5e, 0x54, 0xa1, 0xdc,
		0xb3, 0xcb, 0x1b, 0x12, 0x6b, 0xd6, 0xa4, 0xbe, 0xd2, 0xa1, 0x84, 0x99, 0x0c, 0xce, 0xa7, 0x73,
		0xfc, 0xc7, 0x9d, 0x24, 0x65, 0x53, 0xe6, 0xc6, 0x4f, 0x68, 0x6d, 0x21, 0xad, 0x41, 0x52, 0x67,
		0x3c, 0xaf, 0xec, 0x22, 0xae, 0xb4, 0x0f, 0x6a, 0x08, 0x4e, 0x8a, 0x5b, 0x49, 0x91, 0xf4, 0xc6,
		0x4c, 0xf8, 0xa9, 0x27, 0xef, 0xfd, 0x0f, 0xd7, 0x75, 0xe7, 0x1e, 0x83, 0x29, 0xe4, 0x1f, 0xdd,
		0x44, 0x57, 0xb3, 0x91, 0x11, 0x73, 0x18, 0x7b, 0x4f, 0x09, 0xa8, 0x17, 0xd7, 0x9e, 0xa2, 0x39,
		0x7f, 0xc1, 0x2d, 0xfe, 0x3d, 0x9c, 0x9a, 0x02, 0x90, 0xc8, 0xea, 0xd3, 0x1b, 0x66, 0x90, 0xa6
	]);
	signature = new Uint8Array([
		0x4f, 0x9b, 0x42, 0x5c, 0x20, 0x58, 0x46, 0x0e, 0x4a, 0xb2, 0xf5, 0xc9, 0x63, 0x84, 0xda, 0x23,
		0x27, 0xfd, 0x29, 0x15, 0x0f, 0x01, 0x95, 0x5a, 0x76, 0xb4, 0xef, 0xe9, 0x56, 0xaf, 0x06, 0xdc,
		0x08, 0x77, 0x9a, 0x37, 0x4e, 0xe4, 0x60, 0x7e, 0xab, 0x61, 0xa9, 0x3a, 0xdc, 0x56, 0x08, 0xf4,
		0xec, 0x36, 0xe4, 0x7f, 0x2a, 0x0f, 0x75, 0x4e, 0x8f, 0xf8, 0x39, 0xa8, 0xa1, 0x9b, 0x1d, 0xb1,
		0xe8, 0x84, 0xea, 0x4c, 0xf3, 0x48, 0xcd, 0x45, 0x50, 0x69, 0xeb, 0x87, 0xaf, 0xd5, 0x36, 0x45,
		0xb4, 0x4e, 0x28, 0xa0, 0xa5, 0x68, 0x08, 0xf5, 0x03, 0x1d, 0xa5, 0xba, 0x91, 0x12, 0x76, 0x8d,
		0xfb, 0xfc, 0xa4, 0x4e, 0xbe, 0x63, 0xa0, 0xc0, 0x57, 0x2b, 0x73, 0x1d, 0x66, 0x12, 0x2f, 0xb7,
		0x16, 0x09, 0xbe, 0x14, 0x80, 0xfa, 0xa4, 0xe4, 0xf7, 0x5e, 0x43, 0x95, 0x51, 0x59, 0xd7, 0x0f,
		0x08, 0x1e, 0x2a, 0x32, 0xfb, 0xb1, 0x9a, 0x48, 0xb9, 0xf1, 0x62, 0xcf, 0x6b, 0x2f, 0xb4, 0x45,
		0xd2, 0xd6, 0x99, 0x4b, 0xc5, 0x89, 0x10, 0xa2, 0x6b, 0x59, 0x43, 0x47, 0x78, 0x03, 0xcd, 0xaa,
		0xa1, 0xbd, 0x74, 0xb0, 0xda, 0x0a, 0x5d, 0x05, 0x3d, 0x8b, 0x1d, 0xc5, 0x93, 0x09, 0x1d, 0xb5,
		0x38, 0x83, 0x83, 0xc2, 0x60, 0x79, 0xf3, 0x44, 0xe2, 0xae, 0xa6, 0x00, 0xd0, 0xe3, 0x24, 0x16,
		0x4b, 0x45, 0x0f, 0x7b, 0x9b, 0x46, 0x51, 0x11, 0xb7, 0x26, 0x5f, 0x3b, 0x1b, 0x06, 0x30, 0x89,
		0xae, 0x7e, 0x26, 0x23, 0xfc, 0x0f, 0xda, 0x80, 0x52, 0xcf, 0x4b, 0xf3, 0x37, 0x91, 0x02, 0xfb,
		0xf7, 0x1d, 0x7c, 0x98, 0xe8, 0x25, 0x86, 0x64, 0xce, 0xed, 0x63, 0x7d, 0x20, 0xf9, 0x5f, 0xf0,
		0x11, 0x18, 0x81, 0xe6, 0x50, 0xce, 0x61, 0xf2, 0x51, 0xd9, 0xc3, 0xa6, 0x29, 0xef, 0x22, 0x2d
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(true);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010e43fn;
	message = new Uint8Array([
		0xa3, 0xbf, 0x44, 0xca, 0xe8, 0xaa, 0x83, 0x47, 0xfd, 0x07, 0xd8, 0x4a, 0x33, 0xee, 0xc5, 0xdb,
		0xbd, 0xd7, 0xb6, 0x43, 0x13, 0x68, 0x88, 0x7c, 0x98, 0x8c, 0x4b, 0xe7, 0x79, 0xc5, 0x47, 0x3d,
		0xd8, 0xc3, 0x3e, 0xc8, 0x2a, 0x35, 0xf1, 0xd3, 0xdd, 0xdf, 0xe5, 0x5f, 0x3e, 0xed, 0x67, 0x17,
		0x9b, 0x87, 0xce, 0x86, 0xa4, 0xa5, 0x00, 0x88, 0x17, 0x25, 0x38, 0xfe, 0x9d, 0x1b, 0x06, 0xc6,
		0xef, 0x68, 0x97, 0xeb, 0x3c, 0x8e, 0x36, 0x18, 0xcf, 0xc2, 0x13, 0x53, 0xed, 0x43, 0x43, 0xe7,
		0xfc, 0xeb, 0x09, 0xa2, 0xeb, 0x03, 0x54, 0x41, 0xcd, 0x5c, 0x88, 0x29, 0xc7, 0x9b, 0x81, 0x58,
		0x2d, 0xd5, 0xd6, 0x9a, 0xe8, 0x5c, 0x5a, 0x00, 0x1b, 0xd8, 0xe9, 0x8e, 0x06, 0x99, 0x61, 0x34,
		0x2a, 0x2b, 0xee, 0x00, 0xad, 0x2b, 0x8b, 0x91, 0x01, 0x5a, 0xc5, 0xcf, 0xc1, 0xf0, 0xc2, 0xd9
	]);
	signature = new Uint8Array([
		0x87, 0x7f, 0x20, 0xee, 0xd6, 0x0f, 0x8c, 0xe2, 0x86, 0x10, 0x8a, 0x5d, 0xde, 0x9b, 0x68, 0x28,
		0xb3, 0x7e, 0x3f, 0xbd, 0xb0, 0x8f, 0xe1, 0x53, 0xe5, 0x91, 0x51, 0x38, 0x97, 0x44, 0x0f, 0x21,
		0xf8, 0x12, 0x14, 0x59, 0x8f, 0xba, 0x08, 0xea, 0x07, 0x73, 0x94, 0xba, 0x8c, 0x2a, 0x44, 0xaa,
		0x4f, 0x0d, 0x8f, 0x3a, 0x5f, 0xba, 0xec, 0x3d, 0xc6, 0x9b, 0x3b, 0xdd, 0xfb, 0xe2, 0x83, 0x97,
		0xc9, 0x0a, 0xdf, 0x35, 0xd0, 0x8e, 0xa7, 0x71, 0xc7, 0xaa, 0xa3, 0x1e, 0xb0, 0x64, 0x13, 0xc1,
		0xc6, 0x2b, 0x77, 0x61, 0x8a, 0xf9, 0x40, 0xf4, 0xc7, 0x18, 0x59, 0xfa, 0x43, 0x84, 0xd2, 0x9b,
		0x48, 0xe5, 0xcf, 0xc9, 0x41, 0xd6, 0x9b, 0xf0, 0xa3, 0x80, 0x4d, 0x20, 0x08, 0xe7, 0x58, 0x74,
		0x2b, 0x8e, 0xd6, 0x87, 0x54, 0xbc, 0x71, 0xd2, 0x31, 0x62, 0x3d, 0x18, 0x13, 0x47, 0xc3, 0x68,
		0x33, 0xa7, 0xd7, 0x16, 0x0f, 0x74, 0x2a, 0x37, 0xce, 0x7d, 0x43, 0x2d, 0x74, 0x8e, 0x51, 0x4a,
		0xa7, 0xd8, 0x15, 0x6b, 0x50, 0xc5, 0x32, 0x15, 0x13, 0x90, 0xd0, 0x86, 0xcd, 0xcf, 0x9d, 0x59,
		0xf1, 0x22, 0xc6, 0xd9, 0x7f, 0x4c, 0xcb, 0x73, 0x72, 0x89, 0xf7, 0xb0, 0x0a, 0x23, 0x7c, 0xb6,
		0xb4, 0xaa, 0xe6, 0xba, 0x79, 0xd4, 0x1f, 0xf7, 0x3d, 0x01, 0x9a, 0x26, 0xb5, 0x9a, 0xde, 0x04,
		0xc9, 0x67, 0x35, 0x6e, 0x2a, 0xad, 0x52, 0xf1, 0x15, 0x35, 0x7f, 0xfb, 0x76, 0x76, 0xf1, 0x90,
		0xdb, 0x38, 0xdc, 0xfc, 0x98, 0x66, 0x6e, 0x5b, 0x25, 0x85, 0x59, 0xc8, 0xc8, 0x5f, 0xa3, 0x29,
		0x42, 0xcb, 0xcb, 0x99, 0xd7, 0x57, 0xe8, 0x84, 0x7e, 0x56, 0xa1, 0x68, 0x7b, 0x33, 0x02, 0x41,
		0x56, 0x98, 0x70, 0x81, 0x91, 0xb1, 0x36, 0xd9, 0x23, 0x34, 0x9b, 0x02, 0xfe, 0x38, 0xb6, 0xbe
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xe43fn;
	message = new Uint8Array([
		0xe1, 0xc4, 0x6c, 0x30, 0x9b, 0x63, 0x66, 0xfb, 0x4d, 0x56, 0xac, 0x08, 0xc9, 0x39, 0x3c, 0xee,
		0x9a, 0x7c, 0x95, 0xbb, 0xe7, 0xb7, 0xc0, 0xe7, 0x9a, 0x3d, 0x91, 0x87, 0xc0, 0xf4, 0x2b, 0xc3,
		0x33, 0x64, 0xc2, 0x8a, 0x77, 0x0d, 0xa5, 0x85, 0xe3, 0xfe, 0x7b, 0x49, 0x01, 0xa3, 0xcc, 0xd0,
		0x37, 0xdf, 0xc4, 0x2a, 0xa6, 0x5a, 0x34, 0x70, 0x52, 0x1d, 0xda, 0xfa, 0x83, 0x5c, 0xe2, 0xd1,
		0x6c, 0x92, 0xac, 0x67, 0x0b, 0xd4, 0xd0, 0x86, 0x50, 0x5e, 0x60, 0x87, 0x81, 0x73, 0x6d, 0xc4,
		0xdd, 0x64, 0xcc, 0x50, 0x80, 0xee, 0x19, 0xe5, 0x86, 0xc8, 0xfd, 0x1d, 0x73, 0x7d, 0xad, 0xe5,
		0xd3, 0x78, 0xb3, 0x2f, 0x1d, 0x5d, 0xf1, 0xe8, 0xdd, 0xa0, 0xe3, 0x2a, 0x12, 0x50, 0x24, 0xb2,
		0xd5, 0x33, 0x34, 0x94, 0x3c, 0x18, 0x78, 0x2d, 0x7e, 0x69, 0x82, 0x5a, 0x58, 0x00, 0x93, 0xe7
	]);
	signature = new Uint8Array([
		0x8e, 0xd1, 0xf2, 0x8f, 0xd1, 0x6d, 0x45, 0xd4, 0x16, 0xa2, 0x15, 0x54, 0xe1, 0x04, 0xc0, 0x06,
		0xfd, 0x78, 0x68, 0xe5, 0x89, 0x5e, 0x8b, 0x99, 0x83, 0x1a, 0xe0, 0x93, 0x81, 0x35, 0xb5, 0x43,
		0x61, 0x0d, 0xf6, 0x4a, 0x8c, 0x35, 0x74, 0xd0, 0x81, 0x18, 0xbf, 0xe3, 0x96, 0xf9, 0xa5, 0x60,
		0x9a, 0x8d, 0xbd, 0xa2, 0x1b, 0x9a, 0x85, 0x30, 0xff, 0x0b, 0xa9, 0x0e, 0x62, 0x9d, 0x6a, 0xbe,
		0x30, 0xd2, 0xc1, 0xb5, 0x90, 0x60, 0x0d, 0xb9, 0x71, 0xfc, 0xda, 0x80, 0xe6, 0xea, 0xa8, 0x40,
		0x17, 0xe2, 0x09, 0xb9, 0xbd, 0x3b, 0x64, 0x1f, 0x3c, 0x81, 0xd5, 0xd2, 0x7f, 0x84, 0x2b, 0xec,
		0x80, 0x19, 0x79, 0x0e, 0xd9, 0x9a, 0x0e, 0x5d, 0xb4, 0xae, 0xdc, 0x1c, 0x07, 0x0b, 0x04, 0x7c,
		0x19, 0x41, 0x0c, 0xbc, 0x56, 0xe9, 0xa0, 0xff, 0x12, 0xd8, 0xf6, 0xe5, 0xd7, 0x37, 0x1b, 0x10,
		0x11, 0xec, 0xfe, 0xcf, 0x7b, 0xe7, 0xa7, 0x4f, 0x94, 0x40, 0x35, 0x90, 0xa5, 0x2f, 0x95, 0x23,
		0x8d, 0xd6, 0x9e, 0x0b, 0x5f, 0x4c, 0x1f, 0xcd, 0xe9, 0x7e, 0xcf, 0xdb, 0x1a, 0xcc, 0x38, 0x03,
		0xe5, 0x9a, 0xd8, 0xb3, 0x08, 0x8b, 0x2b, 0xc5, 0x09, 0xe3, 0xdd, 0x12, 0xd4, 0x0d, 0x87, 0x56,
		0x25, 0xdc, 0x83, 0x62, 0xc5, 0x79, 0x17, 0x67, 0x99, 0xc7, 0x5e, 0x4f, 0xad, 0xcd, 0xb3, 0x92,
		0xc6, 0x8f, 0x40, 0x1f, 0x68, 0xd8, 0x54, 0xe4, 0x63, 0x77, 0xf0, 0x84, 0xc0, 0x81, 0xf9, 0xd8,
		0x37, 0x43, 0x03, 0x9f, 0x69, 0x34, 0x72, 0x2e, 0x30, 0xef, 0x3f, 0x02, 0x26, 0xbc, 0x84, 0x1d,
		0x79, 0xa4, 0xeb, 0x68, 0xc5, 0xcc, 0xcb, 0xb6, 0xae, 0x0e, 0x92, 0x00, 0x44, 0x4e, 0x50, 0xff,
		0x0d, 0x09, 0x53, 0x04, 0x7e, 0xf9, 0x55, 0xd2, 0xd3, 0x9a, 0x70, 0xc3, 0xb8, 0x37, 0xc5, 0xf4
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xe43fn;
	message = new Uint8Array([
		0x92, 0x5d, 0x59, 0xf9, 0x53, 0xcb, 0x3f, 0xfb, 0x6d, 0x5a, 0x3a, 0x55, 0xc0, 0x79, 0xcb, 0x10,
		0x83, 0x99, 0x75, 0x36, 0xe3, 0x3d, 0x7c, 0x8a, 0xed, 0x50, 0xed, 0x76, 0xae, 0xbc, 0xde, 0x45,
		0x99, 0x38, 0xf7, 0x92, 0x29, 0x61, 0x32, 0x00, 0xc7, 0x0d, 0xde, 0x2c, 0xed, 0xdc, 0xea, 0xe0,
		0x8c, 0x10, 0x60, 0x8a, 0xab, 0x9e, 0x30, 0xec, 0x51, 0x84, 0x2f, 0x14, 0xa6, 0x5e, 0x5f, 0x8f,
		0x55, 0x34, 0x71, 0xda, 0x34, 0x97, 0x88, 0x19, 0x27, 0xec, 0x40, 0x0b, 0x42, 0x07, 0xef, 0x3e,
		0x2d, 0xfc, 0x2b, 0x7f, 0xcd, 0x31, 0x8c, 0x95, 0x20, 0xb8, 0xb2, 0x2f, 0x69, 0xdc, 0x8a, 0x1a,
		0x8e, 0xfa, 0xce, 0xb7, 0xbe, 0x93, 0xcb, 0xad, 0x56, 0x9e, 0x67, 0xdb, 0x06, 0x23, 0x62, 0x91,
		0x30, 0x05, 0xdc, 0xff, 0x90, 0x20, 0x18, 0xed, 0x22, 0x93, 0x7f, 0xad, 0x40, 0x5f, 0xe8, 0x4e
	]);
	signature = new Uint8Array([
		0x62, 0xb0, 0x7f, 0x6d, 0x1b, 0x8f, 0x13, 0x65, 0x1d, 0x7f, 0x22, 0xce, 0x2c, 0xe0, 0x10, 0x61,
		0x09, 0x00, 0x29, 0xdb, 0x5a, 0xf7, 0xdc, 0xec, 0xfe, 0xaf, 0xef, 0x20, 0x62, 0x1d, 0xd9, 0xe2,
		0x54, 0xa0, 0xfb, 0x91, 0x4f, 0x76, 0xa3, 0xd7, 0x96, 0x62, 0x25, 0x74, 0x89, 0xcb, 0x81, 0x22,
		0x70, 0x85, 0x83, 0xd3, 0x07, 0x78, 0x79, 0x1a, 0x77, 0xda, 0x83, 0xc7, 0xbe, 0xa8, 0x11, 0x40,
		0xc6, 0x1e, 0x4d, 0x04, 0x84, 0x80, 0x6e, 0x20, 0xfb, 0x85, 0xf2, 0x4d, 0x1b, 0xbf, 0x77, 0x4e,
		0xf2, 0xed, 0x38, 0x80, 0x9c, 0x9b, 0x14, 0xf2, 0xa5, 0x8c, 0x6e, 0x86, 0x49, 0xb7, 0x60, 0xba,
		0xa9, 0x01, 0x54, 0x45, 0x22, 0xed, 0x94, 0xbd, 0x40, 0x5c, 0x77, 0x20, 0x1d, 0x07, 0xc8, 0xd1,
		0x28, 0x64, 0xa8, 0xd1, 0xe9, 0x7a, 0x4d, 0x32, 0x2c, 0x29, 0x99, 0x4b, 0x21, 0x4f, 0xc8, 0x3c,
		0x2e, 0xcd, 0x5c, 0x95, 0x5b, 0x9b, 0xde, 0xc4, 0x24, 0xe7, 0xca, 0x5a, 0x13, 0x25, 0xec, 0x0a,
		0xae, 0x4a, 0xb0, 0xc2, 0x02, 0xb9, 0x80, 0xa2, 0x18, 0x7f, 0x09, 0x6a, 0xaa, 0xaa, 0x5e, 0x85,
		0x55, 0x0e, 0xbd, 0x32, 0x57, 0x99, 0xf4, 0xf3, 0x0e, 0xf2, 0xea, 0xd0, 0x7e, 0x79, 0xc7, 0xa4,
		0x75, 0x66, 0x7f, 0x59, 0x65, 0xe6, 0xb5, 0x02, 0x69, 0x51, 0x36, 0x59, 0xab, 0x59, 0x62, 0xa3,
		0x91, 0xc4, 0x3c, 0xbc, 0x3a, 0x3d, 0xa3, 0x4c, 0x0f, 0xdd, 0x15, 0x46, 0xc4, 0x0e, 0xa7, 0xe2,
		0xeb, 0x53, 0x52, 0xce, 0x6a, 0x06, 0xce, 0x6a, 0x63, 0x85, 0xca, 0x0d, 0xdd, 0x5d, 0x16, 0x2c,
		0x13, 0x78, 0x36, 0xdf, 0x9e, 0xa1, 0xf8, 0x9c, 0xfa, 0x00, 0xc3, 0xeb, 0x16, 0x71, 0xa4, 0x3b,
		0xd6, 0x25, 0x52, 0x6f, 0x3b, 0x6b, 0xa8, 0xe4, 0x8a, 0x7a, 0x2d, 0x56, 0xfb, 0x4f, 0x01, 0xc6
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003c6cd1n;
	message = new Uint8Array([
		0x08, 0xd3, 0xac, 0x24, 0xa5, 0x95, 0xda, 0x81, 0x1c, 0xc9, 0xbb, 0xa7, 0x88, 0x28, 0xf1, 0x45,
		0x2f, 0xf3, 0x90, 0xae, 0x65, 0x3f, 0x22, 0xd1, 0xad, 0x91, 0xef, 0x6b, 0x22, 0xaa, 0x7b, 0x7b,
		0x15, 0xa4, 0x4f, 0xf7, 0xf8, 0x3e, 0xfc, 0xbd, 0x7a, 0x75, 0x5e, 0xcc, 0xf4, 0x54, 0x1e, 0xb4,
		0x04, 0x0c, 0x7a, 0x4b, 0x77, 0x47, 0x49, 0xa2, 0x6d, 0xba, 0x39, 0x37, 0xb7, 0xf9, 0x5c, 0x6c,
		0x84, 0x90, 0xe3, 0x38, 0x3d, 0x4f, 0x29, 0x1d, 0xad, 0xe5, 0xf3, 0x5a, 0x65, 0xb1, 0xf6, 0x61,
		0x5f, 0xd4, 0x99, 0x8b, 0xe1, 0x8b, 0xfd, 0x0b, 0xa4, 0xbc, 0x3a, 0x21, 0x36, 0xce, 0xec, 0x90,
		0x9d, 0xbe, 0xef, 0x51, 0x3d, 0x6f, 0x66, 0x89, 0xfc, 0x42, 0x02, 0xb9, 0xa3, 0xe7, 0x81, 0x34,
		0x87, 0x73, 0x74, 0xd7, 0x6a, 0xb2, 0x46, 0xf4, 0x9c, 0xbe, 0x7a, 0x8f, 0x65, 0xd0, 0x34, 0xcd
	]);
	signature = new Uint8Array([
		0x72, 0xea, 0x7d, 0x66, 0x9a, 0xc6, 0x99, 0xa1, 0x49, 0xc1, 0x3a, 0xa1, 0x68, 0xeb, 0x3e, 0x14,
		0x8f, 0x59, 0x0b, 0xbc, 0x04, 0x24, 0x95, 0x1f, 0x1c, 0x31, 0x44, 0xc5, 0x41, 0x91, 0x55, 0x73,
		0xec, 0xf0, 0x5c, 0xab, 0xb5, 0x27, 0x54, 0x88, 0xc9, 0x8d, 0x0e, 0xbe, 0x55, 0xb1, 0xf1, 0xaf,
		0x49, 0xef, 0x8c, 0xc7, 0x2c, 0xf0, 0x0e, 0x84, 0x98, 0x97, 0xc6, 0xaf, 0xa5, 0x38, 0x33, 0xca,
		0xf9, 0xff, 0xc0, 0x0e, 0xb8, 0x4c, 0xfe, 0x55, 0xb8, 0x27, 0x7e, 0x93, 0xa6, 0xac, 0x3e, 0x04,
		0xb1, 0x11, 0xc9, 0xd0, 0x7a, 0xd6, 0x20, 0x82, 0xca, 0x32, 0x85, 0x4c, 0x40, 0xde, 0x1e, 0x09,
		0x56, 0xa1, 0x8f, 0x84, 0x60, 0x43, 0x84, 0x84, 0x40, 0x3a, 0xbb, 0x91, 0xe6, 0xfa, 0xd1, 0x2b,
		0x28, 0xf1, 0x14, 0x15, 0x7f, 0x1b, 0x6e, 0xf5, 0x63, 0xd2, 0xfa, 0x43, 0x8c, 0xcb, 0x8a, 0x16,
		0xaa, 0x3a, 0xfe, 0x6e, 0xc5, 0xe9, 0x83, 0x65, 0xc3, 0x0d, 0x9a, 0x35, 0x5e, 0x7e, 0x14, 0xb0,
		0x39, 0xbb, 0xde, 0xcf, 0x59, 0xf9, 0x12, 0x48, 0xd0, 0xf1, 0xe3, 0x17, 0xd2, 0xe3, 0xc8, 0x19,
		0x09, 0x6e, 0xd6, 0x8c, 0xf9, 0x83, 0x61, 0xd7, 0xf9, 0x31, 0x0b, 0x35, 0x4f, 0x4f, 0x45, 0xe2,
		0xf7, 0xc4, 0xdf, 0xb8, 0x2c, 0x21, 0x8c, 0xd4, 0x38, 0xf3, 0x17, 0x4a, 0x6f, 0x01, 0x7f, 0x0f,
		0x14, 0x8a, 0x71, 0xc4, 0x0a, 0xd5, 0xb7, 0xe2, 0xc8, 0x08, 0x1d, 0xdb, 0xae, 0xaa, 0x76, 0x4d,
		0x60, 0x1b, 0xb2, 0xe0, 0x75, 0xeb, 0x36, 0x18, 0xaa, 0xba, 0xa4, 0xb5, 0x06, 0x00, 0x22, 0xc6,
		0xd2, 0x3e, 0xf0, 0x72, 0x64, 0x36, 0x86, 0xa7, 0x59, 0x22, 0x7d, 0xae, 0xf0, 0x33, 0x1b, 0x28,
		0xee, 0x76, 0xda, 0x4a, 0xb3, 0xb5, 0xad, 0x5d, 0xda, 0x89, 0x91, 0xb9, 0x93, 0x7d, 0x1a, 0x59
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	n =
		0xcb59aae30883db678ea7b2a5e7009799066f060757525166030714a25e808482e752f04f78611b3509d6005b411530c9ada4d8fbddc85f9db3d209eccc6cf0cae9aeb902e96688d2547974b7eb3323eeaa2257cf8d5c7c97f5176e2cfd29e19d0487380e3e64338c73bd592d52e9dbcc9606ed5835758c1a112c6a004256b5c4338322695df2ba573be0e79a7b9f9afd497dd38eed39f05f88d7d399d1e984d048067596ad1847ce51221babf51873bad2d81fa91cf3d9fd307e3ebd41fc49a8b3252ed7a71fd2357330bef2f1f89f2c80f740567e2ae8d168e56f007e8fefa33d2eb92b7d830a4f978ffe842ef0697db50602b19642afc50ac1f837e476c0fdn;
	e =
		0xcbb343n;
	message = new Uint8Array([
		0x32, 0x9b, 0x42, 0x57, 0xec, 0xe3, 0x4e, 0xcc, 0x01, 0x85, 0x03, 0x1b, 0x0b, 0xc6, 0x65, 0xc9,
		0xc8, 0x7a, 0xc6, 0x6e, 0xc0, 0x1a, 0x8c, 0x69, 0x28, 0x17, 0x34, 0xd2, 0x07, 0x6e, 0x97, 0xb0,
		0x97, 0x7d, 0x6c, 0x6c, 0xee, 0x14, 0x0f, 0x86, 0xdd, 0xd0, 0x81, 0x87, 0x19, 0xa4, 0xaf, 0x37,
		0x98, 0xb9, 0xf7, 0x0f, 0x3e, 0x78, 0xe8, 0xf1, 0xb9, 0xe5, 0x49, 0x17, 0xaa, 0x2e, 0x5d, 0x4a,
		0x05, 0x83, 0x66, 0x54, 0xba, 0x29, 0x68, 0xb7, 0x95, 0xca, 0x2f, 0x9f, 0x62, 0x10, 0x93, 0x16,
		0x56, 0x72, 0xfb, 0x77, 0xaa, 0x4d, 0x20, 0x25, 0x89, 0x36, 0x14, 0x7c, 0x2c, 0x8f, 0x82, 0x08,
		0x44, 0x58, 0x37, 0xf5, 0x98, 0x48, 0xe1, 0xc7, 0xef, 0x1c, 0x17, 0x4c, 0x30, 0x30, 0x9a, 0xce,
		0xc8, 0x4c, 0xdb, 0x8c, 0x4c, 0xc0, 0xbd, 0x6c, 0x5f, 0xb3, 0x9b, 0xea, 0xd7, 0xb8, 0x8d, 0x54
	]);
	signature = new Uint8Array([
		0xbc, 0x7b, 0x06, 0x31, 0xf9, 0x2c, 0x7d, 0xfb, 0x0e, 0x3e, 0x86, 0x94, 0x65, 0x0b, 0xdc, 0x73,
		0x62, 0x3d, 0x03, 0x56, 0xad, 0x28, 0x97, 0xaa, 0xd8, 0xec, 0xa3, 0x2e, 0xf4, 0x53, 0x12, 0x63,
		0xf3, 0x21, 0x9e, 0x0a, 0xf3, 0xef, 0x2f, 0xa3, 0xb8, 0xa3, 0xeb, 0x87, 0x8b, 0x3f, 0x9c, 0x29,
		0x3c, 0x63, 0x42, 0x63, 0xba, 0xb5, 0x9b, 0x1d, 0xbd, 0xee, 0x04, 0xaf, 0xc3, 0xfe, 0x39, 0xdd,
		0x8b, 0xcf, 0x22, 0xa0, 0x05, 0x2e, 0x6a, 0x08, 0x1d, 0x3b, 0x68, 0x39, 0x92, 0x94, 0xc8, 0xc6,
		0xaa, 0xb1, 0x99, 0xbe, 0xef, 0xc4, 0x97, 0x06, 0xeb, 0x34, 0x36, 0xd9, 0x5b, 0xd3, 0xe6, 0x55,
		0xd2, 0x1c, 0xbb, 0x0f, 0xb3, 0x48, 0x80, 0x52, 0xdf, 0x88, 0x19, 0x59, 0x4a, 0xb0, 0xf9, 0x13,
		0x8f, 0xc5, 0xad, 0x4e, 0x9e, 0x35, 0x21, 0x42, 0x5e, 0x37, 0x56, 0x84, 0xd9, 0x4d, 0xd7, 0x4b,
		0x9a, 0x3a, 0x7a, 0x85, 0x8a, 0xa1, 0x02, 0x3e, 0x96, 0x75, 0x02, 0xa3, 0x8b, 0x67, 0xed, 0x3b,
		0x8b, 0x8f, 0x60, 0x86, 0x42, 0x7e, 0x8c, 0x8b, 0x4c, 0xa6, 0x08, 0xc4, 0xb3, 0x94, 0xfc, 0x8d,
		0xfb, 0x81, 0x8d, 0xaa, 0xec, 0x3d, 0x4f, 0x10, 0xe7, 0x7f, 0x51, 0xd8, 0x0c, 0x0a, 0x10, 0x35,
		0x69, 0xdc, 0x28, 0x81, 0x4a, 0x80, 0xec, 0xa6, 0x41, 0x00, 0xd9, 0xfc, 0xe5, 0xd6, 0xb9, 0x08,
		0x1f, 0x87, 0x1b, 0xf8, 0xaa, 0xe6, 0x24, 0xf1, 0x78, 0x61, 0x51, 0x29, 0x0c, 0x86, 0xdf, 0xac,
		0x76, 0x43, 0xb2, 0x1c, 0x74, 0xf4, 0xf5, 0x31, 0x3b, 0xf8, 0xb7, 0x69, 0x3d, 0xab, 0xe4, 0xc8,
		0x16, 0xd7, 0xd3, 0x09, 0xce, 0x27, 0xf4, 0xb0, 0x8b, 0x59, 0xd6, 0xa2, 0x67, 0x95, 0xa9, 0xc2,
		0x27, 0x8f, 0xfa, 0x21, 0x85, 0xa1, 0xaf, 0x12, 0x25, 0x7a, 0x5a, 0x6d, 0xe5, 0x7c, 0x1a, 0x41
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xf1bfn;
	message = new Uint8Array([
		0x3c, 0xbc, 0x49, 0xd7, 0x3a, 0xdd, 0xbe, 0x28, 0x75, 0xdd, 0xe7, 0x79, 0x68, 0x9a, 0x36, 0x3e,
		0x42, 0xcf, 0x88, 0xb3, 0xe1, 0x3a, 0xb5, 0x20, 0xfc, 0xfe, 0x65, 0x5b, 0xa2, 0x46, 0x26, 0x8f,
		0xe3, 0x2b, 0xbc, 0x3d, 0xcd, 0xd8, 0xb8, 0x80, 0x9a, 0xeb, 0x4d, 0x95, 0x27, 0x1f, 0x5e, 0x9a,
		0xa8, 0x28, 0xdb, 0x96, 0x9b, 0xdf, 0x4e, 0xba, 0xfa, 0x9f, 0xb1, 0xe7, 0xb5, 0xef, 0x83, 0x70,
		0x5f, 0x61, 0x1b, 0x20, 0x27, 0xba, 0x3b, 0x7f, 0x0b, 0x52, 0xe8, 0x51, 0x48, 0xbe, 0x79, 0x60,
		0x15, 0xad, 0xef, 0x7b, 0x90, 0x10, 0x84, 0xbf, 0xf9, 0x7e, 0x87, 0x15, 0x1e, 0xd6, 0x66, 0xfc,
		0x16, 0x26, 0x0d, 0x89, 0x32, 0xcb, 0x6e, 0xab, 0x31, 0xda, 0x61, 0xb4, 0xb3, 0xbf, 0xaf, 0x15,
		0xf1, 0x24, 0x69, 0x69, 0xaa, 0x15, 0x7f, 0xb6, 0x61, 0x61, 0x8d, 0xef, 0xc5, 0x43, 0xf8, 0xbd
	]);
	signature = new Uint8Array([
		0x37, 0xc9, 0xca, 0x33, 0x3a, 0xde, 0x42, 0x3c, 0x46, 0x41, 0x9e, 0xa1, 0x6c, 0x5d, 0x79, 0xf5,
		0x61, 0x65, 0xa0, 0x3b, 0xd5, 0xc6, 0x74, 0xfa, 0x01, 0x27, 0x50, 0x0a, 0x1b, 0xd7, 0xf5, 0xc2,
		0xd2, 0x15, 0x47, 0xd7, 0xbb, 0x45, 0xf5, 0x58, 0xb3, 0xb9, 0x86, 0x62, 0x4c, 0x8e, 0xae, 0xf4,
		0xdb, 0x10, 0x1e, 0x40, 0x92, 0xdd, 0xa2, 0xb4, 0xfe, 0x48, 0x81, 0x1e, 0xf7, 0xfa, 0x69, 0x4c,
		0x13, 0x84, 0xf4, 0x60, 0x08, 0x7f, 0x81, 0xca, 0xc1, 0x86, 0x14, 0x25, 0xe4, 0x4b, 0x86, 0xbc,
		0x2f, 0xd8, 0x25, 0xee, 0xa9, 0x4b, 0x64, 0x5a, 0xfa, 0x4a, 0xfc, 0xa2, 0x9f, 0x63, 0x2e, 0xdc,
		0xe0, 0x48, 0xae, 0xa9, 0xe1, 0x36, 0x51, 0x85, 0xa6, 0x08, 0x21, 0xe4, 0x38, 0x5d, 0xe7, 0xd7,
		0x43, 0x5e, 0xc0, 0x0d, 0x30, 0x7d, 0x47, 0x7b, 0x2e, 0x6a, 0x6e, 0x3c, 0xde, 0x0f, 0x34, 0x0c,
		0x71, 0xd2, 0xc5, 0x96, 0x24, 0xa7, 0xac, 0x8c, 0xfb, 0x83, 0x8f, 0x68, 0xb4, 0x36, 0xc4, 0x03,
		0xab, 0x3b, 0x45, 0xf9, 0xa1, 0x9a, 0x0a, 0x14, 0xea, 0x8f, 0x47, 0x40, 0x7b, 0x7e, 0x25, 0xe5,
		0x1a, 0x49, 0x8a, 0x90, 0x2e, 0xd8, 0xee, 0xfe, 0x9c, 0x49, 0x34, 0x21, 0x42, 0x16, 0x95, 0xa6,
		0xd1, 0x7a, 0x9c, 0xd5, 0xb7, 0x6e, 0xfa, 0xd7, 0xb3, 0x9b, 0x8d, 0x58, 0x4c, 0xc2, 0x90, 0x2c,
		0x03, 0x42, 0x2f, 0x06, 0xaf, 0x52, 0x8c, 0x6b, 0xc6, 0x5b, 0xce, 0xbd, 0x88, 0x76, 0xb5, 0xf4,
		0xd1, 0xeb, 0xb6, 0x8c, 0xe2, 0x2a, 0xf5, 0xde, 0x05, 0x10, 0x58, 0x37, 0xc1, 0x5f, 0x5f, 0xf5,
		0xc4, 0xd4, 0x1e, 0xd8, 0x01, 0x9d, 0x6a, 0x04, 0x48, 0xc9, 0x46, 0x75, 0xe1, 0x92, 0xa5, 0x1d,
		0x5e, 0xad, 0xe9, 0x1d, 0x22, 0x37, 0xed, 0x57, 0x77, 0x3c, 0xf3, 0xb3, 0x7b, 0xa3, 0xda, 0x71
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xf1bfn;
	message = new Uint8Array([
		0x59, 0x63, 0x29, 0x17, 0xbc, 0xef, 0x9e, 0xaa, 0x6e, 0xdb, 0x1b, 0xb6, 0x01, 0x3b, 0xef, 0x9e,
		0x5d, 0x28, 0x5f, 0xe2, 0x12, 0xc4, 0x9b, 0x44, 0xed, 0x78, 0xf1, 0x29, 0xca, 0x80, 0x41, 0x41,
		0xa8, 0xaa, 0xb1, 0x6a, 0x03, 0x5a, 0xa1, 0xd2, 0x5e, 0xd2, 0xe2, 0x5c, 0x1f, 0xb0, 0x22, 0x46,
		0x9f, 0xb8, 0xab, 0x08, 0x82, 0xd4, 0x4e, 0x7f, 0x44, 0x59, 0x99, 0x4a, 0x15, 0x8c, 0x51, 0x75,
		0xe7, 0x65, 0x1c, 0x54, 0xc5, 0x93, 0x7d, 0xb2, 0x66, 0xbf, 0x05, 0x2c, 0x02, 0x15, 0xc8, 0xd7,
		0x64, 0x01, 0x0f, 0x29, 0x41, 0x36, 0x4c, 0x16, 0xc8, 0xf5, 0x53, 0x79, 0x7a, 0x8c, 0xc6, 0xb6,
		0x3c, 0x1d, 0xd1, 0x9d, 0xaa, 0xa0, 0x18, 0x92, 0xaf, 0x2b, 0xee, 0xeb, 0x52, 0x71, 0xc8, 0x9a,
		0xd3, 0x8a, 0xf1, 0x0c, 0xf7, 0xf2, 0x7f, 0x51, 0xa0, 0xd3, 0x85, 0x7c, 0xa0, 0x87, 0x8a, 0x4d
	]);
	signature = new Uint8Array([
		0x77, 0xa6, 0x9f, 0x4f, 0xbd, 0x94, 0x56, 0xeb, 0x8c, 0xb9, 0x73, 0xe2, 0x62, 0x3d, 0x8e, 0xa8,
		0x3d, 0xf8, 0x50, 0xf3, 0xc7, 0xbc, 0x7c, 0x8f, 0x97, 0x67, 0x28, 0xf1, 0x1b, 0x2d, 0xaa, 0x62,
		0x04, 0xec, 0x45, 0xe1, 0x5c, 0xd3, 0x6d, 0xcd, 0xba, 0x5d, 0x88, 0xbc, 0xde, 0xca, 0x49, 0x0b,
		0xf4, 0x88, 0xa3, 0x2d, 0x12, 0xbe, 0x8c, 0x93, 0xd9, 0xfc, 0x63, 0xd2, 0xa9, 0x1f, 0xcb, 0xd7,
		0x9b, 0x4b, 0xed, 0x11, 0x3d, 0xd9, 0x8b, 0xf5, 0xb9, 0x36, 0x73, 0xa1, 0xc1, 0x43, 0x82, 0x8f,
		0x47, 0x93, 0x5a, 0xee, 0xad, 0xa7, 0x93, 0x8c, 0x65, 0x71, 0x7f, 0xb8, 0xb3, 0x70, 0xcf, 0x64,
		0x91, 0x34, 0xf6, 0xfd, 0xe5, 0x66, 0x02, 0xba, 0x7d, 0x6f, 0x89, 0x0b, 0xa1, 0x66, 0xd3, 0xfe,
		0x1c, 0x51, 0xe7, 0x47, 0x1c, 0x98, 0xb6, 0x61, 0xa6, 0x02, 0x2d, 0x7d, 0x1d, 0x0c, 0xaa, 0x5b,
		0xe5, 0xd1, 0x40, 0xe9, 0x4e, 0x70, 0xcd, 0x14, 0x78, 0xb9, 0xb3, 0x36, 0x22, 0xad, 0x69, 0x55,
		0x9e, 0x27, 0xcd, 0x68, 0x78, 0x92, 0x5c, 0xf0, 0x7f, 0x37, 0xf5, 0xdb, 0xd1, 0xae, 0x45, 0x7e,
		0xea, 0x78, 0x50, 0x53, 0xd0, 0x6e, 0x2e, 0x4d, 0x01, 0x0f, 0xd8, 0x85, 0xb8, 0x97, 0xf7, 0x43,
		0xec, 0x09, 0xc2, 0xb0, 0x6f, 0x77, 0x44, 0x07, 0x12, 0x3a, 0xc3, 0x0c, 0xd9, 0x1f, 0x81, 0x08,
		0x08, 0x45, 0xf8, 0x85, 0x06, 0x2f, 0xa4, 0xbe, 0x9d, 0xa3, 0x1f, 0x4e, 0x6f, 0x62, 0x6c, 0x61,
		0xa7, 0xfe, 0xfb, 0xc1, 0x23, 0xe8, 0xb7, 0xb8, 0x09, 0x78, 0x68, 0x2b, 0x77, 0x3b, 0x55, 0x37,
		0xb2, 0x36, 0x6d, 0x11, 0x18, 0xf5, 0x06, 0x46, 0x4d, 0x27, 0xdb, 0x39, 0x91, 0xfc, 0x2a, 0xf2,
		0x83, 0xab, 0xbe, 0xd6, 0xd0, 0xc5, 0x52, 0x12, 0x0f, 0x82, 0xf9, 0x06, 0xc3, 0x8c, 0x2e, 0x0b
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xf1bfn;
	message = new Uint8Array([
		0xb9, 0x40, 0x36, 0x22, 0xa6, 0x32, 0x79, 0x4f, 0x7c, 0xd7, 0x4f, 0xbb, 0xa9, 0x3a, 0xaa, 0x64,
		0xc8, 0xd9, 0x1b, 0x63, 0x14, 0x4f, 0xe7, 0xba, 0x23, 0x30, 0x5c, 0x4c, 0xd1, 0x35, 0x65, 0x2d,
		0x7a, 0x99, 0x5d, 0x1c, 0x6c, 0xc2, 0x21, 0x4e, 0x9b, 0x24, 0x69, 0x6e, 0x97, 0x63, 0x58, 0xe1,
		0xbc, 0xb7, 0x51, 0x4e, 0xa8, 0x95, 0x0d, 0x5e, 0xf3, 0x8c, 0xea, 0xc0, 0x1a, 0x6d, 0x86, 0x71,
		0xbb, 0xae, 0x8d, 0x3a, 0x08, 0x10, 0xcf, 0x7a, 0x76, 0x80, 0x96, 0x25, 0xb5, 0x3b, 0x36, 0x0d,
		0xe5, 0x36, 0xe5, 0x60, 0x07, 0xbd, 0xcd, 0x72, 0xb1, 0x5a, 0x60, 0xbd, 0x06, 0xf8, 0xec, 0x27,
		0xe6, 0x48, 0x6f, 0x83, 0x62, 0x64, 0xac, 0x59, 0x73, 0xb3, 0x7e, 0xea, 0xeb, 0x0c, 0x6d, 0x6f,
		0xab, 0x1e, 0x7f, 0xa2, 0x17, 0x0f, 0x50, 0x7f, 0xc7, 0x63, 0x65, 0x4c, 0x7f, 0x20, 0xbe, 0xd7
	]);
	signature = new Uint8Array([
		0x81, 0x51, 0x1a, 0x0c, 0x2e, 0xb3, 0x7d, 0x5c, 0x6f, 0xe2, 0xc2, 0x14, 0xc5, 0x5d, 0x6b, 0x0e,
		0x5f, 0xce, 0xa1, 0x72, 0x42, 0xd5, 0xa5, 0xa9, 0xeb, 0x45, 0x68, 0xac, 0x1f, 0x0a, 0xf9, 0xb8,
		0x91, 0x24, 0x98, 0xea, 0xd8, 0x77, 0xca, 0x43, 0xcf, 0x9e, 0x19, 0xc7, 0x43, 0xc3, 0xd8, 0xea,
		0x6f, 0x4e, 0x67, 0x30, 0x1d, 0xe5, 0x3e, 0xbb, 0x81, 0xa1, 0xa3, 0xea, 0xff, 0x67, 0xd7, 0x2e,
		0x45, 0x0f, 0xfc, 0x66, 0x46, 0xb6, 0xb4, 0x5c, 0xe8, 0x82, 0x69, 0x57, 0xb9, 0xaf, 0xbb, 0x13,
		0xf5, 0x71, 0xc3, 0x88, 0x52, 0xc3, 0xeb, 0x38, 0x4f, 0x6a, 0x59, 0x55, 0x38, 0xeb, 0xf4, 0x67,
		0x41, 0x4f, 0x35, 0x22, 0x47, 0x11, 0x47, 0xf2, 0xcc, 0xb3, 0x47, 0x28, 0x4d, 0x08, 0x73, 0x01,
		0x8b, 0xf6, 0x32, 0x9f, 0x33, 0xe0, 0xb4, 0x9f, 0x4e, 0x86, 0x33, 0x8b, 0x42, 0x3a, 0x10, 0x27,
		0xa6, 0xc4, 0x71, 0x81, 0x87, 0xd1, 0x92, 0x81, 0xaa, 0x89, 0x6a, 0x28, 0x6b, 0x6c, 0x89, 0x62,
		0x2e, 0x4c, 0xbf, 0x4c, 0xc6, 0xcf, 0x4c, 0x3a, 0xd4, 0x44, 0x35, 0x16, 0xae, 0xc8, 0x70, 0x80,
		0x06, 0xdc, 0xbc, 0xa5, 0xf4, 0x2c, 0x9b, 0x94, 0x3f, 0xc8, 0xcd, 0xce, 0xe2, 0x3d, 0x90, 0x99,
		0xed, 0xf6, 0x11, 0x85, 0x63, 0x5b, 0x53, 0xad, 0x4d, 0x88, 0x53, 0xd8, 0xa5, 0x11, 0xcd, 0xc5,
		0x0e, 0x18, 0x9c, 0xc8, 0x92, 0x9d, 0xfd, 0x32, 0xf9, 0xdc, 0xdc, 0xf2, 0x75, 0x4a, 0xdc, 0xc1,
		0x9b, 0x85, 0x5f, 0x41, 0xd2, 0x56, 0x20, 0xb6, 0x50, 0x90, 0x18, 0x0e, 0xce, 0x40, 0x74, 0x27,
		0xe9, 0xab, 0x60, 0x2a, 0x38, 0xf1, 0xf2, 0x89, 0xea, 0xf3, 0x29, 0x9d, 0xb8, 0x56, 0xcc, 0x5b,
		0xbd, 0xa1, 0x7d, 0xe1, 0x7a, 0x74, 0xba, 0xce, 0x89, 0x91, 0x38, 0x13, 0xd1, 0x47, 0xd9, 0xac
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xf1bfn;
	message = new Uint8Array([
		0xf9, 0x91, 0xa4, 0x0a, 0x6c, 0x3c, 0xda, 0x01, 0xf1, 0xa2, 0xfe, 0xd0, 0x1c, 0xa0, 0xcf, 0x42,
		0x55, 0x88, 0xa0, 0x71, 0x20, 0x5e, 0xb9, 0x97, 0xa1, 0x47, 0xfa, 0x20, 0x5f, 0x3e, 0xc1, 0x04,
		0x48, 0x09, 0x0e, 0x53, 0xf5, 0x6b, 0xe5, 0x12, 0x30, 0x9c, 0xf4, 0x45, 0xb3, 0xf6, 0x76, 0x4d,
		0x33, 0xf1, 0x57, 0x74, 0x9d, 0x51, 0x99, 0xc7, 0xa0, 0x9e, 0xf6, 0x24, 0x6b, 0xd5, 0xc7, 0x93,
		0xb8, 0x5d, 0x24, 0xd9, 0x09, 0x3c, 0x4d, 0x4b, 0x31, 0x8b, 0x48, 0xe1, 0x17, 0x27, 0xcc, 0x8b,
		0xb7, 0xaa, 0x5e, 0xc8, 0x69, 0x9a, 0xba, 0x74, 0x66, 0xe0, 0x74, 0xe1, 0x88, 0x7b, 0xdf, 0x2a,
		0x51, 0x75, 0x2e, 0xc4, 0x2f, 0x16, 0xd9, 0x56, 0xfe, 0x59, 0x43, 0xcb, 0xcf, 0x9c, 0x99, 0xa5,
		0xe8, 0x9b, 0xfd, 0x94, 0x0c, 0x9f, 0xe4, 0x47, 0xfc, 0xf3, 0xbc, 0x82, 0x3d, 0x98, 0xd3, 0x71
	]);
	signature = new Uint8Array([
		0x6b, 0x42, 0x51, 0x4e, 0x88, 0xd9, 0x30, 0x79, 0xd1, 0x58, 0x33, 0x68, 0x97, 0xdc, 0x34, 0xb4,
		0x50, 0xe4, 0x24, 0xd6, 0x1f, 0x6d, 0xdc, 0xf8, 0x6f, 0xe8, 0xc9, 0xa3, 0x68, 0xae, 0x8a, 0x22,
		0xc4, 0xee, 0x40, 0x84, 0xc9, 0x78, 0xb5, 0x16, 0x93, 0x79, 0xda, 0x10, 0xae, 0x6a, 0x6a, 0xe8,
		0xcd, 0x80, 0x02, 0x8e, 0x19, 0x8c, 0xd0, 0xa8, 0xdb, 0x53, 0x2c, 0xd7, 0x8a, 0x40, 0x9f, 0x53,
		0xba, 0xf7, 0xd2, 0x31, 0xb5, 0x45, 0x83, 0x5b, 0x0d, 0xc0, 0x6d, 0x59, 0x4d, 0x76, 0x86, 0x8d,
		0x98, 0x68, 0x89, 0x41, 0x9a, 0x95, 0x92, 0x68, 0xfd, 0x32, 0x1b, 0xbc, 0x8b, 0xad, 0x5e, 0x80,
		0x0e, 0x45, 0x2f, 0xe1, 0xa1, 0xa2, 0xa5, 0xa8, 0x51, 0xd5, 0x42, 0x49, 0x44, 0x73, 0xde, 0xb4,
		0x25, 0x17, 0x1a, 0x2f, 0x37, 0xff, 0xc4, 0xcf, 0x06, 0x00, 0xa8, 0xd5, 0x61, 0xb2, 0x0f, 0x77,
		0x74, 0x07, 0xbb, 0xef, 0x1b, 0x59, 0x6f, 0x92, 0xe5, 0x18, 0xc0, 0x92, 0x9e, 0x8b, 0xd5, 0x2b,
		0x01, 0x5c, 0x27, 0x18, 0xd1, 0x44, 0x43, 0xa5, 0x60, 0x56, 0xf6, 0x50, 0x15, 0x51, 0x56, 0x73,
		0xde, 0xef, 0x32, 0xae, 0x53, 0x99, 0xae, 0x71, 0xf9, 0x78, 0x73, 0xec, 0x15, 0x08, 0xf8, 0xc4,
		0x1d, 0x6a, 0x66, 0xa1, 0x30, 0x17, 0x68, 0x51, 0x34, 0xe5, 0x42, 0x5c, 0x4b, 0x58, 0x0a, 0x7f,
		0x69, 0x86, 0xc2, 0x6f, 0xb2, 0x72, 0xf0, 0xed, 0x21, 0x5d, 0x66, 0x98, 0xdc, 0xec, 0x9e, 0x7c,
		0x52, 0x58, 0x17, 0x3b, 0x29, 0x5b, 0x36, 0x11, 0x86, 0x92, 0x54, 0xa5, 0x38, 0x94, 0x5d, 0xe9,
		0x52, 0xde, 0xdf, 0x29, 0x18, 0x37, 0xdf, 0x0d, 0x7a, 0x20, 0x5e, 0x1b, 0x76, 0xb0, 0x11, 0x40,
		0xdf, 0x4e, 0xdc, 0xe3, 0xaf, 0xe7, 0x24, 0x5d, 0x46, 0xee, 0x3b, 0x29, 0x2b, 0xb1, 0x17, 0xb1
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(true);

	e =
		0xf1bfn;
	message = new Uint8Array([
		0xa9, 0x5e, 0xce, 0x43, 0x41, 0x21, 0x26, 0x9f, 0x4b, 0xf0, 0x36, 0x39, 0x5e, 0x54, 0x71, 0x8c,
		0x9b, 0x3b, 0x24, 0x7d, 0xe3, 0x53, 0x4f, 0xe1, 0x47, 0xb7, 0xb5, 0x40, 0xbf, 0xcd, 0x2f, 0xd8,
		0x1f, 0x6e, 0x45, 0xe5, 0x48, 0x48, 0xff, 0x20, 0x9b, 0x81, 0xf9, 0x86, 0xb4, 0x9d, 0xb6, 0x5a,
		0x54, 0xa2, 0x36, 0x6d, 0x9e, 0x7a, 0xcb, 0x9d, 0x87, 0x98, 0x28, 0x9c, 0x88, 0xdf, 0xbb, 0xf3,
		0x95, 0xbf, 0x3d, 0x46, 0x53, 0xa1, 0x87, 0xd9, 0x86, 0x85, 0xa7, 0x53, 0xc8, 0xe9, 0x33, 0xc2,
		0x81, 0xed, 0xdd, 0xe0, 0x13, 0xb6, 0x48, 0x95, 0x55, 0x10, 0x1a, 0xbc, 0x43, 0x57, 0x53, 0x2a,
		0xf4, 0x97, 0xdd, 0xec, 0xcc, 0xf2, 0x63, 0xd1, 0xf2, 0x42, 0x67, 0x29, 0x04, 0x00, 0x8f, 0xcb,
		0x0a, 0x65, 0x40, 0x5d, 0xa9, 0xce, 0x6e, 0xcf, 0x9a, 0x65, 0xb3, 0x29, 0x5a, 0xfe, 0x9e, 0x87
	]);
	signature = new Uint8Array([
		0xc8, 0x78, 0xb4, 0xb1, 0x45, 0x26, 0xef, 0xdf, 0xdb, 0x99, 0xf7, 0x28, 0x7c, 0x0e, 0x87, 0x1e,
		0xf6, 0xc0, 0xaa, 0x7b, 0x4d, 0x2e, 0xe2, 0x92, 0x99, 0xa7, 0x82, 0xc8, 0x39, 0x1e, 0xcd, 0xbb,
		0xb6, 0x0b, 0x8a, 0xea, 0xab, 0x53, 0x43, 0xdf, 0xfe, 0x7a, 0xde, 0x8a, 0xf0, 0x71, 0x56, 0xc4,
		0x5b, 0x16, 0x84, 0x27, 0x75, 0xca, 0xb5, 0x20, 0x1b, 0x34, 0x03, 0xdb, 0xd6, 0xbf, 0x07, 0x69,
		0xab, 0x55, 0x33, 0xd4, 0xc4, 0x0d, 0xed, 0xdb, 0x1e, 0xec, 0xfd, 0x8a, 0x46, 0xb9, 0x33, 0x62,
		0x7d, 0x0d, 0x25, 0x89, 0x3f, 0x03, 0x38, 0xe6, 0xda, 0xbb, 0x2a, 0x77, 0x86, 0x49, 0xeb, 0xb2,
		0x19, 0x3a, 0x9d, 0x7c, 0x99, 0xd0, 0x69, 0xc6, 0xc2, 0x09, 0xb4, 0x43, 0x6e, 0xda, 0x41, 0x11,
		0x84, 0xd9, 0x9b, 0xe0, 0xf8, 0x0e, 0x3b, 0x29, 0x3b, 0x5e, 0xde, 0x00, 0xf5, 0x8e, 0xc4, 0x92,
		0x2f, 0xe8, 0xe1, 0xc6, 0xde, 0x04, 0xe5, 0x8f, 0xd4, 0x43, 0xd1, 0xcd, 0x96, 0xfc, 0xc9, 0xca,
		0x4b, 0xfc, 0x23, 0x34, 0x35, 0x32, 0xa3, 0xeb, 0x84, 0x0f, 0xd5, 0xc1, 0x97, 0xe7, 0x79, 0x5f,
		0x2e, 0x39, 0x82, 0xa9, 0x28, 0xe6, 0x02, 0xb1, 0xe8, 0xf5, 0xcc, 0xa7, 0xea, 0x20, 0xda, 0x04,
		0x9e, 0xda, 0x31, 0x3b, 0x1e, 0xe8, 0xd4, 0xb1, 0xa8, 0xe7, 0x96, 0x0e, 0x4c, 0xfb, 0x5b, 0x16,
		0x08, 0x2b, 0xa7, 0x30, 0x60, 0xf7, 0x3c, 0x02, 0x71, 0x63, 0x24, 0x65, 0x8d, 0x3f, 0x00, 0xa3,
		0xff, 0x0a, 0x78, 0xdc, 0xba, 0xe1, 0x03, 0xd5, 0x04, 0x8e, 0x75, 0x66, 0x90, 0x53, 0x64, 0x51,
		0x56, 0xf6, 0x64, 0x0d, 0x4f, 0x6d, 0x16, 0x45, 0xd0, 0x2e, 0x77, 0x2d, 0xd8, 0xe7, 0x0f, 0xe8,
		0x86, 0x6c, 0xad, 0x5e, 0xc2, 0x87, 0x8e, 0xa6, 0xfc, 0x5c, 0x47, 0x53, 0x0b, 0xf9, 0xea, 0xf0
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	n =
		0xa677525e1a69546a96dc7b112350d5e4864f0f82e999a714fa9f43ac681517d3975910c2d806bb3ee6dbf5dba1d969b38889e113c2da76eef4412a60cbd89faf35b2bdcb0de36a2cb762cd8f2f29aed9982a9ab60886cc8fbfee9b2ae09c88161e9159d4fc833adc4f80e4bf629d5a9551acce7a3938630c2bf9956097642e3bc60ac6522017841b65c7a25197865e697753b08169853681911443a2b25f1b7c4696f946155b2664b67b40878d3b45c3e0d7034d5b5ee6f5ba8fb3cae7797e85789902cf8f9f86ed3ef25ae0736178aae260fe875bfef5bcde9ec05f11e18fc7375edcd4a5533618e6f991dd48aa3062e6031e291dfcdc6e7fc14ec60e539fcbn;
	e =
		0xeac839n;
	message = new Uint8Array([
		0x9c, 0x3d, 0x5d, 0x23, 0xd2, 0x74, 0x6d, 0x15, 0xd6, 0x16, 0xbe, 0xbf, 0x3c, 0xf7, 0x20, 0xc6,
		0xe6, 0x01, 0x2a, 0x71, 0xca, 0xe2, 0x20, 0x02, 0xf5, 0x02, 0x1a, 0x47, 0xd0, 0xb8, 0x63, 0x6c,
		0xa3, 0xbd, 0x20, 0x13, 0x57, 0xe1, 0x32, 0xa6, 0x80, 0xfc, 0x5d, 0xec, 0x9b, 0x28, 0xa9, 0xdb,
		0x93, 0x2d, 0x08, 0xae, 0x8b, 0x3d, 0x3a, 0x37, 0xd7, 0xe2, 0xee, 0x75, 0x4b, 0x34, 0x2a, 0x69,
		0xb9, 0x4f, 0xec, 0x26, 0xb5, 0x04, 0x12, 0x28, 0x9b, 0xcf, 0x77, 0xe6, 0xd4, 0x09, 0x5f, 0xaa,
		0x54, 0x5f, 0x15, 0xa1, 0x67, 0x83, 0xd2, 0x2e, 0xae, 0x21, 0xe1, 0x84, 0x64, 0x15, 0x01, 0x74,
		0xe6, 0xdb, 0x0b, 0x83, 0x73, 0x47, 0xd4, 0x40, 0x30, 0x76, 0x55, 0xd5, 0x6f, 0x04, 0x09, 0xdb,
		0x30, 0x7f, 0x97, 0x73, 0xe8, 0x1c, 0xb1, 0x92, 0x82, 0xa9, 0x3c, 0x9c, 0xa4, 0xc3, 0xb1, 0x35
	]);
	signature = new Uint8Array([
		0x98, 0x65, 0x7f, 0xd8, 0x16, 0x39, 0x67, 0xfa, 0x7d, 0x26, 0x3b, 0xd4, 0x5b, 0xb8, 0x90, 0x03,
		0x5a, 0xdb, 0xcd, 0xd1, 0x64, 0x5f, 0xd4, 0x8b, 0x28, 0xfe, 0xbf, 0xb9, 0xb4, 0xe1, 0x51, 0x72,
		0x54, 0x0e, 0x38, 0xb7, 0xc2, 0xf6, 0x73, 0xc4, 0x0a, 0x20, 0x5f, 0xd4, 0x0b, 0x08, 0xb6, 0x0b,
		0x4b, 0x81, 0xed, 0x6e, 0x23, 0x6c, 0xdf, 0x08, 0xf0, 0xd6, 0xb1, 0x1f, 0x50, 0xdc, 0x74, 0xc6,
		0x0d, 0xc4, 0x66, 0xac, 0x37, 0x2e, 0x0f, 0x46, 0x78, 0x83, 0xaa, 0x9a, 0x39, 0x8f, 0x4a, 0xee,
		0xf8, 0x7b, 0x04, 0x0e, 0x14, 0xa5, 0x15, 0x02, 0xdd, 0x46, 0x7e, 0x8e, 0x8d, 0xd8, 0x98, 0x12,
		0xdf, 0xaf, 0x6b, 0x1d, 0xc1, 0xc2, 0xf6, 0xc2, 0x84, 0x48, 0xaf, 0x08, 0x45, 0x90, 0xc0, 0x5a,
		0xec, 0x49, 0x9d, 0xd3, 0xb1, 0x48, 0xe6, 0x6f, 0x3d, 0x71, 0xcf, 0x75, 0xe2, 0x39, 0xdb, 0x6d,
		0x21, 0xf4, 0x07, 0x4b, 0x8b, 0xd9, 0xa6, 0xbd, 0xe5, 0xca, 0x66, 0x86, 0x34, 0xbd, 0x47, 0x95,
		0x32, 0x76, 0xff, 0x2d, 0x0e, 0xbb, 0xe0, 0x1a, 0xfc, 0xfe, 0x0e, 0x38, 0x19, 0x03, 0x73, 0x6d,
		0x6a, 0x6c, 0x67, 0x2a, 0x45, 0xfb, 0xa4, 0xee, 0x32, 0x6e, 0x34, 0x2d, 0xc5, 0x92, 0x51, 0x69,
		0x51, 0x7c, 0x5f, 0x57, 0xe9, 0x29, 0x07, 0x24, 0x57, 0x6a, 0x22, 0x5b, 0xa8, 0x9c, 0xb4, 0xdd,
		0x09, 0x1f, 0x4e, 0x65, 0x13, 0xbe, 0x10, 0xdd, 0x41, 0x81, 0x85, 0x5b, 0xb4, 0x04, 0x5d, 0x6e,
		0xf6, 0x43, 0x7c, 0x16, 0xd3, 0xb5, 0x58, 0x9e, 0xf9, 0xd6, 0x83, 0x66, 0x82, 0x71, 0x1c, 0x7d,
		0x66, 0x02, 0x5a, 0xe3, 0x7b, 0x52, 0x55, 0x80, 0xf0, 0xdf, 0xcf, 0x3d, 0xb7, 0xfe, 0x57, 0xd7,
		0xc6, 0xb1, 0x57, 0x77, 0xcc, 0x41, 0x60, 0x03, 0x07, 0xe5, 0x8a, 0x17, 0x21, 0xb6, 0xf7, 0xbc
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xd8853n;
	message = new Uint8Array([
		0x77, 0x59, 0x42, 0x0c, 0x8d, 0x1a, 0x39, 0xba, 0x0e, 0x3e, 0x16, 0x81, 0xd9, 0xb7, 0x57, 0xfc,
		0xf3, 0x0c, 0xb4, 0x0d, 0x84, 0x4f, 0x4a, 0x71, 0x22, 0x4f, 0xf9, 0x98, 0x52, 0x0e, 0x0b, 0xb4,
		0x4c, 0x76, 0x16, 0x11, 0xff, 0x47, 0x23, 0xa4, 0x55, 0x54, 0x0f, 0xe6, 0xb8, 0xef, 0x32, 0xe3,
		0xd5, 0xa2, 0x3f, 0x8d, 0xa0, 0x20, 0x6b, 0x57, 0x98, 0x7a, 0xd2, 0xff, 0x4c, 0x96, 0x16, 0xab,
		0x1e, 0xde, 0x49, 0x38, 0x47, 0x35, 0x0d, 0xcf, 0x1b, 0x2f, 0xf9, 0xb9, 0x8e, 0x81, 0x3f, 0x74,
		0xf8, 0xb6, 0x8c, 0x06, 0x15, 0x24, 0x30, 0x91, 0x50, 0x1f, 0x7f, 0x28, 0x41, 0x6c, 0x77, 0xe1,
		0x74, 0xf8, 0xa3, 0x2b, 0x6c, 0xca, 0x3e, 0x62, 0xe7, 0x37, 0x9c, 0xa1, 0x64, 0x55, 0xc6, 0xd8,
		0xe3, 0xb2, 0x65, 0x1e, 0xec, 0x45, 0xe1, 0x48, 0xd2, 0xa4, 0xc9, 0xba, 0x39, 0x78, 0x76, 0x7d
	]);
	signature = new Uint8Array([
		0x91, 0xce, 0x8e, 0x92, 0x1f, 0x85, 0xde, 0x84, 0x5b, 0x9b, 0xf7, 0x50, 0x3d, 0xc6, 0x5a, 0x32,
		0x82, 0x24, 0xd1, 0x5b, 0x23, 0xe8, 0xea, 0x65, 0xdc, 0x3d, 0xa6, 0xd8, 0x04, 0xfb, 0xef, 0x19,
		0x6c, 0x30, 0x5e, 0x0f, 0xba, 0x05, 0x9a, 0x7d, 0x84, 0x2c, 0x8c, 0x0f, 0x58, 0x08, 0x60, 0xcc,
		0xe7, 0x76, 0x52, 0xd4, 0xdc, 0x77, 0x90, 0x73, 0xd6, 0xa3, 0xb0, 0xa9, 0x2b, 0xf2, 0xdd, 0x3e,
		0xc6, 0xc0, 0x61, 0x8d, 0xa1, 0x48, 0x50, 0x36, 0xfd, 0x59, 0x4b, 0xd9, 0x62, 0xf7, 0xb5, 0xa1,
		0xc6, 0x1d, 0x53, 0xf1, 0x62, 0x69, 0x12, 0xc7, 0xe3, 0x12, 0xaa, 0x83, 0xeb, 0x43, 0x26, 0x28,
		0x8a, 0x52, 0x43, 0x7c, 0x73, 0x87, 0x91, 0x6b, 0xcb, 0x11, 0x08, 0x4a, 0x40, 0xc2, 0x19, 0xc8,
		0x4c, 0xab, 0x2f, 0xf6, 0x6e, 0x83, 0x14, 0x3f, 0x85, 0x86, 0x47, 0xf2, 0xdc, 0x91, 0x4d, 0xa0,
		0xc7, 0x85, 0x8b, 0xa3, 0x9a, 0xa8, 0xad, 0x81, 0x47, 0xea, 0x5c, 0x9c, 0x52, 0x06, 0x9e, 0xb2,
		0xb2, 0xca, 0x94, 0x1d, 0x8a, 0x50, 0x23, 0x74, 0x8d, 0xc4, 0x01, 0xe7, 0x66, 0x45, 0x00, 0x84,
		0x6c, 0x85, 0xca, 0xdf, 0x02, 0x87, 0xe3, 0x9b, 0x8b, 0x8b, 0x46, 0x79, 0x4a, 0x82, 0xbf, 0xff,
		0xa7, 0x52, 0x96, 0x0a, 0xb3, 0xb9, 0xea, 0xa0, 0x25, 0x30, 0xb5, 0x90, 0x3c, 0x24, 0xae, 0xfa,
		0x10, 0x8f, 0x10, 0xae, 0xe3, 0x5b, 0x6a, 0x8a, 0x3c, 0xdf, 0x87, 0x95, 0xa1, 0x82, 0xe5, 0xc0,
		0x4e, 0xd3, 0x6b, 0xb6, 0x8c, 0x18, 0x78, 0x56, 0x23, 0xb4, 0x2f, 0x09, 0x79, 0xff, 0xf3, 0x19,
		0x11, 0x2e, 0x15, 0x14, 0xce, 0xe5, 0x1d, 0xb4, 0x37, 0xee, 0x32, 0x28, 0x9f, 0x61, 0xde, 0xd6,
		0x11, 0x86, 0xc6, 0xed, 0x44, 0xad, 0x72, 0x2d, 0x18, 0xd5, 0x56, 0x82, 0x1f, 0x88, 0x82, 0x21
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xd8853n;
	message = new Uint8Array([
		0x86, 0x4f, 0x4f, 0x58, 0x90, 0xa0, 0x36, 0x53, 0xd0, 0x8d, 0xaa, 0x83, 0xd9, 0xe2, 0x99, 0x2f,
		0xab, 0x33, 0x93, 0xb7, 0xee, 0x15, 0x2d, 0x6f, 0x7b, 0x8e, 0xa3, 0xad, 0x1e, 0xc9, 0xc1, 0x21,
		0x9a, 0x0e, 0x03, 0x65, 0xee, 0xf2, 0xfb, 0xd5, 0xd7, 0xcb, 0xf3, 0xa1, 0x96, 0x67, 0xd4, 0x21,
		0xf3, 0xfe, 0x46, 0x68, 0x82, 0x64, 0x19, 0x1b, 0x25, 0x83, 0xe4, 0x84, 0xd2, 0x09, 0xeb, 0xe2,
		0x97, 0x5e, 0x46, 0x03, 0xdb, 0xd9, 0x40, 0x15, 0xe6, 0x33, 0xfe, 0xba, 0xa4, 0x3c, 0x61, 0x5a,
		0xa5, 0xcc, 0x2c, 0xbd, 0x69, 0xfd, 0x6a, 0xd9, 0xdb, 0x97, 0x0a, 0xe8, 0x1b, 0xcc, 0xcd, 0xbe,
		0x80, 0x26, 0x62, 0x5a, 0xde, 0xbd, 0xcf, 0xbb, 0x04, 0xad, 0x12, 0xf5, 0x89, 0xc7, 0x08, 0x83,
		0xc9, 0x87, 0x8f, 0xdf, 0x2a, 0x46, 0xe7, 0x50, 0xa4, 0xb1, 0x5f, 0x03, 0x80, 0x7a, 0x2d, 0x5e
	]);
	signature = new Uint8Array([
		0x24, 0x5f, 0xda, 0x2e, 0x66, 0xd2, 0xba, 0xb1, 0x02, 0xd0, 0xda, 0x40, 0x98, 0xd7, 0x51, 0x65,
		0x0f, 0x5e, 0xf4, 0x73, 0x8d, 0x14, 0xda, 0xbe, 0x86, 0x6c, 0x78, 0x20, 0x09, 0xea, 0xd9, 0xd6,
		0xd0, 0x5d, 0x43, 0xac, 0x0a, 0x30, 0x14, 0xa3, 0x82, 0xd6, 0x2a, 0xc9, 0x71, 0xee, 0x19, 0x79,
		0x8f, 0x3b, 0x8e, 0xf4, 0x9f, 0x9b, 0xc2, 0x47, 0xfa, 0x07, 0xb3, 0x68, 0xac, 0x2d, 0x0e, 0x8a,
		0x4f, 0xb2, 0x10, 0xaf, 0x5a, 0xcd, 0x87, 0xb6, 0xb5, 0x12, 0xe1, 0x35, 0x86, 0x1b, 0x30, 0x10,
		0x34, 0x03, 0x30, 0x47, 0x32, 0xa1, 0x0b, 0x75, 0xc9, 0xa1, 0x49, 0x55, 0x2d, 0x1c, 0xcf, 0x0f,
		0x99, 0x12, 0x96, 0x8c, 0x64, 0x31, 0x39, 0x8b, 0x7d, 0x48, 0xdf, 0xf4, 0x8c, 0xc7, 0xcb, 0x71,
		0x84, 0xe7, 0x6a, 0x0a, 0xb9, 0x4a, 0xc9, 0xa6, 0xb0, 0x03, 0x5b, 0x91, 0xb3, 0xee, 0xb2, 0xd1,
		0x32, 0x6e, 0xbd, 0xdf, 0xc1, 0x32, 0x50, 0x22, 0x45, 0x38, 0xc1, 0x43, 0xfc, 0x0d, 0xfa, 0x39,
		0x95, 0x92, 0x64, 0x15, 0xa6, 0x58, 0xdb, 0x8e, 0x66, 0x91, 0x50, 0x40, 0x50, 0xa1, 0xa3, 0x0e,
		0x34, 0xb2, 0x1a, 0xf8, 0xd1, 0x27, 0x07, 0xbc, 0x44, 0x54, 0xf1, 0x74, 0x38, 0x5c, 0xd8, 0x4c,
		0x72, 0x9e, 0x2d, 0xdf, 0xc5, 0xcc, 0x91, 0x78, 0x81, 0x20, 0x59, 0xb5, 0xda, 0x4a, 0x1a, 0x60,
		0x5a, 0x2a, 0x81, 0x64, 0x2c, 0xcc, 0x1b, 0xc5, 0xcf, 0x95, 0x39, 0x65, 0xf7, 0x05, 0x67, 0x3b,
		0x12, 0xc5, 0xb4, 0x6a, 0xc8, 0xc1, 0xa0, 0x3c, 0x10, 0x01, 0xae, 0x4d, 0xf1, 0xc3, 0x9c, 0xc8,
		0x3c, 0xb5, 0x4b, 0x10, 0xcb, 0x7d, 0x33, 0xcd, 0x51, 0x08, 0x03, 0x3c, 0x26, 0x8c, 0xee, 0xeb,
		0xba, 0x6c, 0x6a, 0xda, 0x92, 0x88, 0x2f, 0x46, 0x56, 0x2d, 0xc6, 0x58, 0xd3, 0x52, 0x55, 0x74
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xd8853n;
	message = new Uint8Array([
		0x71, 0xab, 0xf8, 0x95, 0xe5, 0x6b, 0xa8, 0xf6, 0xae, 0x8d, 0x0e, 0x9e, 0x66, 0x90, 0xc0, 0x9c,
		0x75, 0x92, 0x70, 0xa7, 0x3d, 0xb8, 0xc1, 0xaa, 0x95, 0xd0, 0x59, 0x80, 0x79, 0x35, 0x37, 0xfb,
		0xff, 0xf3, 0x47, 0x2c, 0x8d, 0x2c, 0x34, 0xde, 0x4a, 0xbb, 0x7e, 0x64, 0xd2, 0x16, 0xcc, 0x95,
		0x2e, 0x79, 0x83, 0x14, 0x03, 0x41, 0x97, 0xd5, 0x09, 0x96, 0xa2, 0xdc, 0xbf, 0x4c, 0x33, 0x48,
		0x5e, 0x0b, 0x68, 0x91, 0x0b, 0xae, 0xbf, 0x0e, 0x50, 0xea, 0x29, 0xba, 0xcd, 0x30, 0x60, 0x37,
		0x2b, 0xd4, 0x7b, 0x13, 0x52, 0x6e, 0xc0, 0x4b, 0xdc, 0x81, 0xb9, 0x0d, 0xc9, 0x5a, 0x8a, 0xc2,
		0x74, 0x3b, 0x81, 0x4c, 0xc5, 0xb9, 0xef, 0x8c, 0xa9, 0x63, 0x36, 0x28, 0xbf, 0xa4, 0x24, 0x8b,
		0x55, 0xeb, 0x7f, 0x2d, 0x92, 0x08, 0xe1, 0x14, 0xf4, 0xda, 0xc6, 0x9b, 0xfe, 0x27, 0xe4, 0x72
	]);
	signature = new Uint8Array([
		0x24, 0x3c, 0x57, 0x0c, 0xd1, 0xbd, 0x85, 0x52, 0x2e, 0x64, 0x81, 0x73, 0x61, 0xcb, 0xb9, 0x49,
		0xc8, 0x38, 0x76, 0xd7, 0xa3, 0x60, 0x95, 0x13, 0xae, 0xbf, 0x50, 0x6f, 0xc0, 0x67, 0x50, 0xba,
		0x38, 0xe8, 0x20, 0x23, 0x2c, 0x98, 0xac, 0xbe, 0x00, 0xff, 0xa5, 0x0b, 0x36, 0xc5, 0x38, 0x56,
		0x00, 0x69, 0xfd, 0x13, 0x99, 0x2c, 0xa0, 0xdf, 0x7d, 0x9f, 0x6d, 0x95, 0x6b, 0x88, 0x33, 0x34,
		0xf1, 0xc3, 0xaf, 0x8a, 0x74, 0xad, 0xee, 0xd5, 0xbe, 0x15, 0xb0, 0x33, 0xd8, 0x5b, 0x20, 0x7b,
		0xe2, 0xfe, 0x60, 0x0a, 0x99, 0x02, 0xd6, 0x99, 0xcc, 0xef, 0x1f, 0x4a, 0x8d, 0x58, 0x86, 0x72,
		0xc4, 0x46, 0x40, 0x1e, 0xb3, 0x90, 0xd1, 0x74, 0xd5, 0x72, 0xb9, 0x18, 0xf9, 0xb3, 0x49, 0xe2,
		0xe7, 0x04, 0x77, 0x53, 0x00, 0x02, 0x38, 0x50, 0xa5, 0x34, 0xcd, 0x14, 0xe0, 0x04, 0x6e, 0x38,
		0x51, 0x81, 0xd3, 0x45, 0xa0, 0x1d, 0xbd, 0x23, 0x0c, 0x79, 0x65, 0xff, 0xfd, 0x71, 0xd4, 0xe9,
		0xf9, 0xbd, 0x27, 0x4d, 0x2e, 0xf4, 0x6c, 0x55, 0x6c, 0x73, 0x32, 0x12, 0x13, 0x62, 0xe7, 0x17,
		0x06, 0xc3, 0x9f, 0x08, 0x91, 0x9e, 0xfa, 0x3a, 0x4f, 0x2f, 0x14, 0x21, 0x50, 0xc8, 0xce, 0xf4,
		0xb3, 0x0e, 0xf7, 0x88, 0xf6, 0xff, 0xfc, 0x2e, 0xd2, 0xac, 0xa0, 0x26, 0x2e, 0xba, 0x87, 0x3a,
		0x25, 0x17, 0x95, 0x84, 0x5d, 0xa5, 0x26, 0xb7, 0x8e, 0x2b, 0x24, 0xd6, 0x6f, 0x21, 0xd4, 0x0d,
		0x5f, 0xcb, 0xe5, 0x54, 0x2a, 0x75, 0x53, 0xa9, 0x17, 0x8b, 0xe5, 0xa9, 0x80, 0x5b, 0xb5, 0x35,
		0x79, 0xbd, 0x10, 0x8c, 0xff, 0x73, 0x3b, 0x37, 0x64, 0x07, 0x89, 0x31, 0x8d, 0xb6, 0x20, 0xa6,
		0xa9, 0x44, 0x44, 0xe9, 0x20, 0x39, 0x23, 0xae, 0x32, 0x55, 0x00, 0xb6, 0x76, 0xb1, 0x47, 0x98
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xd8853n;
	message = new Uint8Array([
		0x4b, 0x64, 0x8d, 0xe2, 0xe3, 0x90, 0x67, 0x7c, 0xe1, 0x72, 0x71, 0x91, 0x49, 0x8b, 0x76, 0xd2,
		0xd2, 0x43, 0x8d, 0x0c, 0xed, 0xdf, 0x3d, 0xb5, 0x02, 0xad, 0xe5, 0xc5, 0xfd, 0x81, 0x5b, 0xc7,
		0x09, 0x65, 0xd4, 0x2f, 0x9b, 0x8d, 0x04, 0xee, 0xb3, 0x89, 0x86, 0x44, 0x5f, 0xbe, 0x7d, 0xd5,
		0x80, 0x17, 0x7c, 0x00, 0xd0, 0xf8, 0xa3, 0x6c, 0x24, 0x74, 0x0b, 0xe3, 0xef, 0xbf, 0x65, 0x64,
		0x08, 0xe6, 0xdd, 0x73, 0xad, 0xbd, 0x45, 0xb4, 0xc7, 0x19, 0x6f, 0xb8, 0x6f, 0x40, 0xda, 0x17,
		0xb2, 0x9e, 0x91, 0xbf, 0x91, 0xba, 0x51, 0x8b, 0x4c, 0x68, 0xea, 0x18, 0xe1, 0x3f, 0xe7, 0xd4,
		0xcf, 0x4d, 0x71, 0x57, 0x1f, 0x0a, 0x71, 0xf7, 0xa5, 0x8b, 0xf5, 0x96, 0x84, 0xf8, 0xd5, 0xbf,
		0xf0, 0x40, 0x96, 0xf2, 0x38, 0x0b, 0x8e, 0x3b, 0x03, 0xf1, 0x49, 0x09, 0xd9, 0xe9, 0x2c, 0x3e
	]);
	signature = new Uint8Array([
		0x27, 0x7f, 0xe8, 0x1a, 0x15, 0x40, 0x34, 0x1c, 0x9c, 0x04, 0xfb, 0x5d, 0x3c, 0x8f, 0x70, 0xc1,
		0xe7, 0x2f, 0x87, 0xfa, 0x7d, 0x04, 0xb9, 0x3e, 0xe5, 0x4d, 0x56, 0xd1, 0x18, 0x4c, 0x14, 0x1e,
		0xc4, 0xe1, 0x25, 0xe2, 0xe5, 0xcf, 0xd0, 0xac, 0xff, 0x10, 0x55, 0xc7, 0x66, 0x97, 0xa1, 0xc3,
		0x07, 0x9c, 0x37, 0x1c, 0xce, 0x0b, 0xd8, 0x4e, 0xe4, 0x43, 0x7b, 0xfa, 0x18, 0x06, 0xaa, 0x76,
		0xdf, 0x29, 0x55, 0x93, 0x53, 0x31, 0x91, 0x5f, 0xff, 0x87, 0x9d, 0x87, 0xc7, 0x37, 0x2e, 0x75,
		0xe5, 0xe8, 0xfe, 0xcc, 0x90, 0x6f, 0x9d, 0x34, 0xa5, 0xad, 0xc0, 0xb7, 0x54, 0x09, 0xa8, 0x7f,
		0xb6, 0x41, 0x1e, 0x29, 0x90, 0xcd, 0x23, 0x7a, 0xc8, 0x22, 0x3f, 0x72, 0x23, 0x44, 0x4f, 0x5d,
		0x52, 0x7a, 0x11, 0x5c, 0x85, 0xb9, 0xba, 0x10, 0x28, 0x7f, 0x3e, 0x82, 0x5e, 0x1d, 0xc5, 0x8e,
		0xb3, 0x7c, 0x8a, 0x9c, 0xa0, 0x55, 0x15, 0x5f, 0xf6, 0xa5, 0xaa, 0xa6, 0x56, 0x56, 0x90, 0xdc,
		0xee, 0xf6, 0xf6, 0x47, 0x72, 0x9d, 0x07, 0x1c, 0xdd, 0x9f, 0x06, 0x88, 0xc7, 0xfe, 0xe8, 0xf9,
		0x29, 0x3a, 0xbe, 0x65, 0x8d, 0x0e, 0x1e, 0xf8, 0x55, 0xc8, 0x6a, 0x28, 0xd8, 0xd0, 0xf8, 0xf8,
		0x2f, 0x72, 0x17, 0x31, 0x86, 0x35, 0x30, 0x80, 0xb8, 0x4f, 0x14, 0x2f, 0x96, 0x59, 0x07, 0x37,
		0x71, 0x78, 0xfc, 0x1e, 0xa0, 0x08, 0x19, 0xd8, 0x1a, 0xfc, 0x24, 0x74, 0xbe, 0xcf, 0x79, 0xe1,
		0xe3, 0xb7, 0x0c, 0x7c, 0x2a, 0x84, 0x07, 0xd5, 0x07, 0x95, 0xc3, 0x13, 0x1b, 0xb6, 0xdf, 0x78,
		0x72, 0x0c, 0x31, 0xb2, 0xf8, 0xc4, 0x3f, 0x70, 0x54, 0x64, 0xd8, 0x98, 0x20, 0x43, 0xc4, 0x5f,
		0x04, 0xe3, 0x39, 0xaa, 0x1c, 0x6f, 0x4e, 0x26, 0xaa, 0x70, 0x92, 0xb3, 0xe6, 0x26, 0x12, 0x99
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xd8853n;
	message = new Uint8Array([
		0x78, 0x11, 0xa4, 0x07, 0xfe, 0x65, 0x3a, 0xd2, 0x34, 0x3d, 0x83, 0xc0, 0x49, 0x9f, 0xc1, 0x1e,
		0x29, 0x51, 0xef, 0x0a, 0x47, 0x91, 0xa3, 0xcd, 0x9a, 0x06, 0x39, 0x6b, 0xe5, 0xf7, 0x2e, 0x78,
		0x3c, 0xbb, 0xca, 0x2c, 0xc4, 0x70, 0x02, 0xba, 0xba, 0xf0, 0x9c, 0xde, 0xb7, 0x01, 0x94, 0xb5,
		0x32, 0xcc, 0xbf, 0xd2, 0x46, 0x91, 0xae, 0x8e, 0xb5, 0x98, 0xd5, 0x9f, 0x2e, 0x6b, 0xec, 0xed,
		0xcb, 0x42, 0x96, 0xa1, 0xde, 0xbf, 0x41, 0x7e, 0xed, 0xdb, 0x4d, 0x74, 0xfb, 0x21, 0x70, 0x72,
		0x09, 0x1a, 0x59, 0x7d, 0xdd, 0x08, 0x93, 0xff, 0x02, 0xd6, 0xad, 0x61, 0x10, 0x50, 0x98, 0xdb,
		0x2e, 0x90, 0x50, 0x8b, 0xd4, 0xb8, 0xbe, 0xc5, 0xd6, 0xe7, 0xde, 0xab, 0x9e, 0x65, 0x1d, 0xfd,
		0xb8, 0x21, 0x05, 0x32, 0x95, 0x5e, 0x1b, 0xc7, 0x88, 0xa9, 0x08, 0xd7, 0x15, 0x0e, 0xf8, 0xec
	]);
	signature = new Uint8Array([
		0x3a, 0xd1, 0xf0, 0xfa, 0xa9, 0xa3, 0x65, 0x86, 0x15, 0x4a, 0x38, 0x2a, 0x1f, 0x2c, 0x10, 0xe8,
		0x19, 0xdc, 0x31, 0x8a, 0x68, 0xbe, 0x35, 0xf5, 0x4f, 0x95, 0x40, 0x1b, 0x0e, 0xf2, 0xba, 0x5c,
		0xc8, 0x95, 0xf0, 0xd6, 0xbd, 0xe2, 0x8c, 0x8d, 0x3b, 0x36, 0x4f, 0x60, 0xde, 0x03, 0xce, 0x75,
		0xa7, 0xaf, 0x29, 0xe5, 0x80, 0x7c, 0x1e, 0xec, 0x4c, 0xd7, 0x06, 0x24, 0x75, 0x6e, 0x26, 0x31,
		0xeb, 0x46, 0xaf, 0x01, 0x0c, 0xa8, 0xcf, 0x93, 0xee, 0x7d, 0x86, 0xa4, 0xaf, 0x3c, 0xed, 0x5d,
		0xd2, 0xa8, 0xa4, 0x1c, 0x1f, 0xee, 0xe6, 0xb4, 0x57, 0x20, 0x70, 0x87, 0x39, 0x39, 0xae, 0x7a,
		0x2c, 0xe7, 0x51, 0x93, 0x94, 0x59, 0x37, 0x46, 0x1d, 0x00, 0x64, 0xee, 0xba, 0x07, 0x76, 0x0c,
		0x49, 0x5c, 0x5c, 0x70, 0xbd, 0xb0, 0x4d, 0x89, 0x95, 0x1d, 0xe3, 0xf9, 0x65, 0x25, 0xf8, 0xe4,
		0x46, 0x12, 0x49, 0x3d, 0x49, 0x07, 0x31, 0xe7, 0xef, 0x76, 0x79, 0xa2, 0x4b, 0x0b, 0x1e, 0x2b,
		0x24, 0xc8, 0x00, 0x3c, 0x2f, 0x94, 0x11, 0x4e, 0x41, 0x93, 0xd6, 0xe5, 0x4c, 0x0a, 0xf9, 0xe8,
		0x70, 0x53, 0x0b, 0x00, 0x85, 0x30, 0x21, 0x0a, 0xc0, 0xb0, 0xe4, 0xc7, 0xc7, 0x9f, 0x37, 0x93,
		0x84, 0xe1, 0xbb, 0x31, 0x9b, 0x5f, 0x2a, 0x0b, 0x62, 0x25, 0x17, 0xae, 0x5d, 0x27, 0xf0, 0xea,
		0xaf, 0x79, 0x58, 0xcb, 0x0b, 0x41, 0x84, 0x91, 0x26, 0x07, 0x50, 0x92, 0xe8, 0x6e, 0x7e, 0x7b,
		0xe5, 0xee, 0xac, 0xef, 0x9a, 0x8e, 0x3e, 0xc5, 0x95, 0x43, 0x2e, 0xf6, 0x19, 0x85, 0x8f, 0xe0,
		0xd0, 0x51, 0x78, 0x71, 0xb8, 0xb4, 0x95, 0xc0, 0x1a, 0xf6, 0xf1, 0x8d, 0x4e, 0x6d, 0x25, 0x0d,
		0xbd, 0x19, 0x28, 0x0e, 0xf4, 0xf8, 0xa3, 0x7d, 0x1b, 0x59, 0xa4, 0x8f, 0xa4, 0x1b, 0x83, 0x1d
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(true);

	n =
		0xcd2cbe024059e2c019529e157684eb1e2cf415a71b002cc643668da85f752ef64cd8cacff6bb79e246f7b8f731c9f5cedc2a879302b51273c83f81f9a377d3e450bb4f4662ce01a010a6e68b66fee35b62d9861cabe56f6d262cadbeb44a58145a0f977966ab74f662674fd92f165eab397e1a2829aa2a7b9cf7c4af5db31119741d416308f3cb5aaebbcb5309e50820e7e1482b9b3a918653d9cfda6ed1122488f435dd54a418e922147be2f6586bb9b759c66b01d0045757302ca3835a68a67f36b33738ba9f8c87b909fe1ca5e5bad207cd0273ccc3b44a6185d32b065b64e2bd42b6c61f08b268b2b7e91ced5962e3a7d553fde91b77eecbeb9ba63e0db5n;
	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f8d03n;
	message = new Uint8Array([
		0xdb, 0x14, 0x28, 0x9f, 0x55, 0x50, 0xb7, 0x70, 0xac, 0x30, 0xad, 0x0a, 0xa5, 0x31, 0x24, 0x75,
		0x37, 0x41, 0xe4, 0xa4, 0x9c, 0x7f, 0x1f, 0x54, 0xa8, 0x43, 0x5f, 0x37, 0x5a, 0x5e, 0xbc, 0x52,
		0xb1, 0xa3, 0x52, 0xa3, 0xc0, 0xa6, 0xf2, 0x08, 0x05, 0xc3, 0x18, 0x5c, 0xf7, 0x62, 0x1d, 0xe3,
		0xde, 0x7a, 0xae, 0xe8, 0xe7, 0x54, 0x7d, 0xa4, 0x78, 0x92, 0x36, 0x62, 0xc1, 0x6f, 0xb5, 0xe1,
		0x94, 0x48, 0x76, 0xfa, 0x76, 0x5c, 0x4d, 0x82, 0xf6, 0xd0, 0x57, 0x72, 0x3d, 0xf6, 0x30, 0x45,
		0xe7, 0xce, 0x66, 0xa2, 0x11, 0xcd, 0x2e, 0x3b, 0xb3, 0xde, 0x56, 0xf5, 0x31, 0xa7, 0x7b, 0x49,
		0x2c, 0x0d, 0x7c, 0xea, 0x9e, 0xfa, 0x2e, 0xa8, 0x26, 0x5d, 0x52, 0x94, 0xa0, 0x73, 0xc4, 0x65,
		0xf9, 0x46, 0xf5, 0x1a, 0x41, 0x73, 0x9a, 0xe1, 0x02, 0x2f, 0xa6, 0x38, 0xd1, 0x8c, 0x76, 0x52
	]);
	signature = new Uint8Array([
		0xaa, 0x19, 0x4e, 0xad, 0x94, 0x3a, 0x93, 0xe9, 0x0f, 0x29, 0xa3, 0xe8, 0x53, 0xf0, 0xa4, 0xd4,
		0x4b, 0x4d, 0xce, 0x8b, 0x55, 0xd7, 0xfd, 0xb1, 0xde, 0x01, 0xd2, 0xd4, 0x7b, 0xcb, 0x18, 0xb6,
		0xe6, 0xe8, 0x19, 0x96, 0xc5, 0xbb, 0xb9, 0x4c, 0x66, 0xcb, 0x27, 0x6c, 0xf3, 0xf3, 0xb3, 0x54,
		0x94, 0xcd, 0xc2, 0x29, 0x27, 0x8c, 0xe4, 0x44, 0xa0, 0x01, 0xf6, 0x16, 0x69, 0xb5, 0x7a, 0x59,
		0x75, 0x5b, 0x88, 0x14, 0x2e, 0x50, 0x33, 0x7a, 0x86, 0x53, 0xe2, 0xa4, 0x13, 0xa7, 0xaa, 0x16,
		0x02, 0xd6, 0xdb, 0xd5, 0x6d, 0x98, 0x9c, 0x21, 0x95, 0xff, 0xe8, 0x2e, 0x91, 0xfe, 0x0b, 0x08,
		0x1a, 0xc9, 0x15, 0x7a, 0x0c, 0xec, 0x6b, 0xfa, 0xf7, 0x70, 0xc1, 0x0c, 0x97, 0x1a, 0x76, 0xd1,
		0x19, 0x40, 0xc8, 0x89, 0xeb, 0x9e, 0x95, 0x9f, 0x14, 0xf4, 0x1d, 0x0b, 0x76, 0x5b, 0xab, 0xc6,
		0x55, 0x48, 0x0b, 0x3f, 0x32, 0xd4, 0xce, 0x3d, 0x66, 0x0a, 0x13, 0x4a, 0x2b, 0x34, 0xbf, 0xae,
		0x2f, 0x40, 0x96, 0x8c, 0xe3, 0x13, 0xdb, 0x34, 0xe0, 0x13, 0x8b, 0xee, 0x57, 0xc0, 0x16, 0x52,
		0xa9, 0x0f, 0x91, 0xfb, 0xf6, 0xf0, 0x05, 0x2d, 0xb4, 0x94, 0xc5, 0x14, 0xdf, 0x08, 0x7d, 0x76,
		0xac, 0xc7, 0x69, 0xa3, 0xe2, 0x20, 0xc3, 0x94, 0x76, 0x34, 0x68, 0x19, 0x4b, 0xdc, 0xc7, 0x26,
		0x21, 0x03, 0xa8, 0xa7, 0x3a, 0xb6, 0x21, 0xb0, 0x56, 0x2d, 0x2d, 0x16, 0x4c, 0x8e, 0xe1, 0xa0,
		0x0f, 0x0c, 0xc4, 0xf7, 0x84, 0x04, 0x2c, 0x14, 0x4e, 0x3d, 0x36, 0xb8, 0xc3, 0x00, 0xc7, 0x4a,
		0x1b, 0x36, 0x8f, 0x56, 0x90, 0x57, 0xda, 0x0f, 0x77, 0xb3, 0x3d, 0xae, 0xd6, 0x67, 0xc1, 0x15,
		0x41, 0x19, 0xf6, 0x86, 0x72, 0x00, 0x0d, 0x25, 0x51, 0x70, 0x46, 0x94, 0x7a, 0x8f, 0xe6, 0x44
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xf8d03n;
	message = new Uint8Array([
		0x4f, 0x9a, 0x34, 0xe9, 0x6e, 0x64, 0x9f, 0x89, 0x28, 0xa7, 0xc5, 0x8a, 0x0c, 0x84, 0xd1, 0xbb,
		0xbe, 0xe1, 0xa4, 0xc8, 0x4a, 0x69, 0xc9, 0x5d, 0xb7, 0xd4, 0xab, 0x8e, 0xe0, 0x69, 0x05, 0x77,
		0x7f, 0xc1, 0x9b, 0x1f, 0x8b, 0xcd, 0x28, 0xa3, 0xc4, 0x1b, 0x97, 0x90, 0x8c, 0x54, 0x75, 0x90,
		0xf8, 0x0a, 0xa7, 0x49, 0x27, 0xb0, 0x58, 0x82, 0xd2, 0xea, 0x36, 0x87, 0x25, 0x08, 0xde, 0xcf,
		0xcd, 0xcc, 0x94, 0xdd, 0x53, 0x74, 0x38, 0x64, 0xa8, 0xf4, 0x75, 0xae, 0x01, 0x84, 0x3c, 0x3e,
		0xe4, 0x5a, 0x71, 0xb5, 0x83, 0xb9, 0xe4, 0xf2, 0x4a, 0x2a, 0x82, 0x7d, 0xb4, 0x0a, 0xcd, 0x26,
		0x62, 0x44, 0x89, 0xe9, 0x6e, 0x60, 0xb8, 0x15, 0xfd, 0xbd, 0xc9, 0xae, 0x13, 0x1a, 0x0d, 0x0f,
		0xac, 0x5b, 0x6a, 0xd3, 0x08, 0x8a, 0x53, 0xf6, 0x46, 0x1d, 0xf7, 0x38, 0x34, 0x77, 0xb9, 0xc2
	]);
	signature = new Uint8Array([
		0x89, 0x0b, 0xce, 0x25, 0x39, 0xc7, 0xbc, 0x65, 0x79, 0x83, 0xaf, 0x81, 0xcf, 0xf8, 0x7e, 0xc7,
		0x99, 0x77, 0x14, 0x38, 0xf6, 0xdc, 0xf4, 0x17, 0xe0, 0x1e, 0xe0, 0x56, 0x27, 0x0a, 0x0d, 0xdf,
		0x60, 0x95, 0xfc, 0xb9, 0x4b, 0xac, 0x89, 0x62, 0x61, 0x01, 0xa3, 0x42, 0x09, 0xc1, 0xbb, 0xe3,
		0xd3, 0xbd, 0x30, 0x1b, 0x3e, 0x8a, 0x73, 0x03, 0xcb, 0x7d, 0x5f, 0xe1, 0x93, 0xb0, 0xd6, 0x42,
		0x2e, 0x1f, 0xeb, 0x6e, 0xb1, 0xea, 0x8f, 0x1f, 0x37, 0xb2, 0x90, 0x89, 0xb5, 0x46, 0x33, 0xfc,
		0xab, 0xf2, 0x3a, 0x28, 0xc9, 0xca, 0x42, 0x2d, 0xe4, 0xf7, 0x85, 0x1f, 0x29, 0x2d, 0xdf, 0xda,
		0x0d, 0x55, 0x06, 0x73, 0x96, 0x1b, 0x72, 0xcf, 0x2d, 0xad, 0x77, 0xb3, 0xb6, 0x6c, 0x9f, 0x3b,
		0xba, 0xb6, 0x43, 0xe8, 0x0c, 0x56, 0x9a, 0x6f, 0x65, 0x1b, 0xe3, 0xc6, 0x49, 0x6c, 0xaf, 0x72,
		0x47, 0x8c, 0xd4, 0x37, 0xfc, 0x85, 0xa5, 0x7a, 0x1c, 0xdc, 0x78, 0xd8, 0x02, 0x9b, 0x76, 0xa8,
		0x04, 0xd0, 0x40, 0x13, 0xf1, 0x6c, 0xd6, 0xb4, 0x69, 0xc6, 0x9e, 0x29, 0xd0, 0x74, 0x09, 0xac,
		0xa3, 0x0c, 0x71, 0x9c, 0x86, 0x59, 0x45, 0x4f, 0xbd, 0x9d, 0xa6, 0x0a, 0x9f, 0x62, 0x16, 0x52,
		0x47, 0xdb, 0x74, 0xd1, 0x87, 0x99, 0xeb, 0xa3, 0x35, 0x08, 0x66, 0x7d, 0x1b, 0x64, 0x52, 0x68,
		0xba, 0x39, 0xd7, 0x4d, 0x7d, 0x95, 0x4b, 0xb4, 0x1d, 0x60, 0x7f, 0xb7, 0x82, 0x09, 0x60, 0x68,
		0x7b, 0x02, 0x23, 0x20, 0xe6, 0xc9, 0xa3, 0x85, 0x3c, 0x2f, 0xae, 0x53, 0x5b, 0xdd, 0xd9, 0x15,
		0x34, 0x74, 0x05, 0xf5, 0x25, 0xc8, 0xab, 0x40, 0xed, 0xbc, 0x9b, 0x7f, 0xc6, 0xc6, 0x2d, 0x23,
		0x73, 0xc0, 0xcc, 0x7e, 0xdf, 0xcc, 0x4c, 0x95, 0x66, 0x15, 0xcc, 0x08, 0xd4, 0x9a, 0x42, 0x73
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(true);

	e =
		0xfba25n;
	message = new Uint8Array([
		0x07, 0x09, 0xdc, 0xc9, 0xff, 0xda, 0x89, 0xad, 0xd8, 0xfc, 0x52, 0xfa, 0x35, 0x5e, 0x05, 0x9f,
		0x57, 0x0a, 0x0c, 0xa4, 0x33, 0xf0, 0x2c, 0x10, 0xc8, 0xe5, 0x73, 0x0b, 0xaf, 0xeb, 0x6b, 0x40,
		0xf4, 0xb3, 0x94, 0x85, 0x24, 0x60, 0x11, 0xbe, 0xa7, 0x8e, 0xa2, 0xfe, 0x50, 0x93, 0xd2, 0xf0,
		0x33, 0x04, 0x72, 0x76, 0xb7, 0x7c, 0x45, 0x8f, 0xec, 0x98, 0xfd, 0x7e, 0x1e, 0x46, 0x66, 0x29,
		0xaa, 0x40, 0xe2, 0xbf, 0x10, 0xd3, 0x15, 0x9d, 0x4a, 0xe5, 0xe1, 0x73, 0x5c, 0x36, 0x95, 0xa2,
		0x2d, 0xe6, 0x61, 0xe9, 0x95, 0x38, 0x0e, 0x41, 0xb7, 0x95, 0xeb, 0x05, 0x91, 0xd4, 0x0b, 0x56,
		0xd1, 0xb8, 0xad, 0xbe, 0xea, 0xba, 0xfc, 0x13, 0x68, 0x09, 0xf9, 0x9f, 0x80, 0xd0, 0xb5, 0x7d,
		0xec, 0xb7, 0xc3, 0x46, 0xf6, 0xac, 0xed, 0xee, 0xd2, 0xe3, 0x26, 0xe8, 0x30, 0x1b, 0xc0, 0x91
	]);
	signature = new Uint8Array([
		0x15, 0xb8, 0x6c, 0xc6, 0x1c, 0xca, 0x52, 0xc9, 0xdd, 0xdf, 0x9d, 0x8e, 0xc4, 0xef, 0xb7, 0xdb,
		0xb8, 0xa7, 0xf0, 0x2a, 0x40, 0x12, 0xd8, 0x96, 0xfc, 0x12, 0x7c, 0xb1, 0xfc, 0x38, 0x3c, 0x30,
		0x4c, 0x88, 0x59, 0xcd, 0xb0, 0x74, 0x78, 0x71, 0x9d, 0x35, 0x54, 0xe6, 0x5b, 0x30, 0x61, 0x66,
		0x92, 0x4d, 0x11, 0xc1, 0xa1, 0x4d, 0x85, 0x69, 0x9a, 0xe6, 0x0a, 0x33, 0xf6, 0x01, 0xf7, 0xa2,
		0x4b, 0x4e, 0x51, 0x8c, 0x40, 0x6d, 0xe3, 0xcb, 0xf9, 0x2b, 0xde, 0x58, 0x92, 0x6d, 0x9d, 0x93,
		0xb2, 0x1c, 0x76, 0xe1, 0xdb, 0xff, 0x98, 0xd5, 0x67, 0x75, 0x62, 0x76, 0x9e, 0x65, 0x14, 0xef,
		0xa4, 0xbb, 0xc4, 0x0e, 0x12, 0xd1, 0x91, 0xf5, 0x4a, 0x33, 0xdc, 0x1c, 0x93, 0x61, 0xeb, 0x1f,
		0xf0, 0x36, 0x13, 0x55, 0x5e, 0x87, 0x3f, 0xcf, 0x40, 0xfe, 0x63, 0x49, 0xe1, 0x0d, 0x18, 0x8d,
		0x0d, 0x1d, 0x04, 0x30, 0x78, 0xe0, 0x2f, 0xf8, 0xf1, 0xc7, 0x36, 0xcd, 0x70, 0x90, 0x96, 0x1f,
		0xde, 0x24, 0x3c, 0x15, 0x69, 0x4c, 0x0d, 0x76, 0xb0, 0xcd, 0x1e, 0x66, 0x33, 0x53, 0x8c, 0x26,
		0x5f, 0x21, 0xb4, 0x1c, 0xd1, 0x17, 0x08, 0x61, 0x3b, 0x62, 0xb1, 0x18, 0x08, 0xd1, 0xf7, 0x4d,
		0x92, 0x7c, 0x35, 0x1a, 0x63, 0xc8, 0xc4, 0xf1, 0x8f, 0x59, 0x30, 0xf3, 0x9f, 0xca, 0x55, 0x85,
		0x0a, 0x78, 0x73, 0x01, 0xb2, 0xe4, 0xea, 0xb0, 0xf9, 0x4f, 0x57, 0x34, 0xcb, 0xa5, 0xe0, 0xeb,
		0x76, 0xbc, 0xe6, 0x0d, 0x67, 0x3f, 0xad, 0x4c, 0x51, 0x30, 0x12, 0xb4, 0xe5, 0x7a, 0x8b, 0x2c,
		0x28, 0x37, 0xe0, 0xb6, 0x35, 0x5a, 0x9a, 0x5c, 0x15, 0x77, 0x4b, 0x0d, 0xb8, 0x63, 0x6a, 0x7b,
		0x8a, 0xb2, 0x8c, 0x36, 0xc0, 0x58, 0x32, 0xa4, 0x2c, 0xe6, 0x97, 0xec, 0x58, 0x44, 0x7a, 0xb7
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xf8d03n;
	message = new Uint8Array([
		0x95, 0x52, 0x93, 0x08, 0xed, 0x9b, 0xec, 0x98, 0xa8, 0x71, 0x9b, 0x3f, 0xdd, 0x94, 0x2a, 0xe8,
		0x1c, 0x66, 0x46, 0x21, 0x0e, 0xfc, 0x7d, 0xcc, 0x59, 0x75, 0x46, 0x17, 0xc4, 0x8a, 0x42, 0xaf,
		0x9c, 0x67, 0xc1, 0x31, 0x56, 0xb9, 0x88, 0xe2, 0x75, 0x09, 0xd2, 0x9f, 0xaf, 0x48, 0x94, 0x17,
		0x4b, 0xab, 0x05, 0x37, 0xcd, 0xb9, 0x5e, 0xe6, 0xd5, 0xa2, 0xde, 0xf3, 0x45, 0xd2, 0x12, 0x4b,
		0xa2, 0xc6, 0x53, 0x70, 0xbd, 0x1e, 0x90, 0x26, 0x92, 0xf4, 0x4e, 0x70, 0x70, 0x6d, 0xec, 0xba,
		0x5a, 0x8d, 0x2c, 0x58, 0xae, 0x50, 0xef, 0x2f, 0x04, 0xf6, 0x40, 0xb2, 0x59, 0x9e, 0x94, 0x11,
		0x6d, 0x16, 0x50, 0xac, 0x69, 0xf2, 0x8c, 0xce, 0xc5, 0xdb, 0x17, 0x98, 0x69, 0x2a, 0xbb, 0x3b,
		0x12, 0xb6, 0xc2, 0x6b, 0xf8, 0xe9, 0xb8, 0x10, 0xae, 0x1a, 0x73, 0x3e, 0x49, 0x16, 0x51, 0x67
	]);
	signature = new Uint8Array([
		0x93, 0xc5, 0xb4, 0x9a, 0x30, 0x55, 0xf2, 0x34, 0x44, 0x2d, 0x6e, 0x45, 0x62, 0xc9, 0x9d, 0x22,
		0x33, 0xa8, 0x19, 0x82, 0x91, 0xad, 0xc9, 0x5e, 0x65, 0xbb, 0x76, 0xd3, 0x20, 0x20, 0x3a, 0x1a,
		0x4d, 0x79, 0x21, 0x39, 0x3c, 0xfa, 0x03, 0xae, 0xaa, 0x9c, 0x31, 0xe6, 0x27, 0x2b, 0x51, 0x92,
		0xe3, 0x05, 0x8e, 0x54, 0xdc, 0x5c, 0xdc, 0x7f, 0x46, 0x7a, 0xf1, 0xb0, 0x73, 0xe6, 0xd4, 0x92,
		0xf6, 0x14, 0x44, 0x83, 0x68, 0xa0, 0xcb, 0x03, 0x38, 0xf8, 0xe3, 0x70, 0x88, 0xe0, 0x80, 0xeb,
		0x2f, 0x66, 0x84, 0xa1, 0xf5, 0xcd, 0xc2, 0x4e, 0xd7, 0xb4, 0xe8, 0xc6, 0x2c, 0xe9, 0xe6, 0x2e,
		0x06, 0x36, 0x1c, 0x21, 0xad, 0x07, 0xfb, 0x78, 0xd8, 0x53, 0xd1, 0x6b, 0x6e, 0xcb, 0x84, 0xc6,
		0xa1, 0x58, 0xbf, 0x6c, 0x24, 0xbc, 0x48, 0x4d, 0x6a, 0xa5, 0xab, 0xd4, 0x8f, 0xb7, 0xeb, 0x22,
		0x64, 0xfa, 0xa3, 0x61, 0xca, 0xea, 0xee, 0xc7, 0x8a, 0x2c, 0xdf, 0xcd, 0xc6, 0x01, 0x14, 0x87,
		0xdc, 0xf3, 0x68, 0x2c, 0x5e, 0x07, 0xf0, 0x64, 0x0d, 0x1d, 0x88, 0xe0, 0x9b, 0xaf, 0x83, 0x8a,
		0x56, 0x71, 0x71, 0x90, 0x32, 0xaa, 0x17, 0x72, 0xfd, 0x0e, 0xc7, 0x5d, 0x61, 0x04, 0x74, 0x77,
		0x01, 0x55, 0x48, 0xaa, 0x78, 0x96, 0xe6, 0x0a, 0x29, 0x7a, 0x27, 0xa6, 0x27, 0x97, 0x60, 0x50,
		0xfa, 0x6c, 0x79, 0x78, 0xe5, 0x82, 0xb3, 0xbe, 0x3a, 0xfd, 0x70, 0x8b, 0xfc, 0xde, 0x27, 0x6b,
		0x2b, 0x3f, 0x9c, 0x18, 0x8f, 0x4b, 0x36, 0xd3, 0xec, 0xa9, 0x07, 0x07, 0xfe, 0xf7, 0x6c, 0x36,
		0x74, 0x83, 0xae, 0xa0, 0x8b, 0x6d, 0xda, 0x88, 0xd1, 0xb8, 0x5b, 0xef, 0x09, 0x8d, 0x19, 0x1b,
		0x1a, 0x68, 0x7d, 0x32, 0x2e, 0xdc, 0xb1, 0xfb, 0x5c, 0xd8, 0x60, 0x74, 0x9f, 0x69, 0xd8, 0xeb
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xf8d03n;
	message = new Uint8Array([
		0xd4, 0x20, 0x84, 0xee, 0x99, 0xce, 0xc1, 0xa5, 0x70, 0x97, 0xb8, 0x04, 0xc4, 0x8e, 0x45, 0x4b,
		0x63, 0x90, 0xdb, 0xf2, 0x79, 0x6f, 0x18, 0xea, 0xbf, 0x50, 0x9d, 0x26, 0xf0, 0x52, 0x1c, 0x5a,
		0x7d, 0x71, 0xb2, 0x03, 0x81, 0xa9, 0x78, 0xa7, 0xf7, 0x5e, 0x55, 0x5e, 0x2b, 0xfb, 0x16, 0x91,
		0x6e, 0xda, 0xc0, 0x02, 0x0e, 0x64, 0x24, 0x0c, 0x85, 0x79, 0xb5, 0x2d, 0xf1, 0x12, 0x97, 0xc1,
		0xc4, 0x24, 0xf8, 0x10, 0xbd, 0xc8, 0xa3, 0x8b, 0x17, 0x9a, 0xd2, 0x53, 0x00, 0x5e, 0x44, 0xfb,
		0x4c, 0xea, 0x90, 0x8f, 0x6b, 0x40, 0xb9, 0xd5, 0x98, 0xfa, 0x02, 0xd2, 0x54, 0xeb, 0x04, 0x90,
		0x13, 0x03, 0xfd, 0x1f, 0x35, 0x73, 0x6b, 0xda, 0x37, 0x12, 0xda, 0xeb, 0x2b, 0xff, 0xfa, 0x12,
		0x65, 0x88, 0xf4, 0xa2, 0x78, 0x4b, 0xfe, 0xcc, 0x61, 0x9b, 0x2e, 0x1f, 0x01, 0x26, 0x8b, 0x50
	]);
	signature = new Uint8Array([
		0x49, 0x3d, 0x0c, 0x02, 0xc0, 0x87, 0x14, 0x9d, 0x5f, 0x59, 0x7e, 0x97, 0x70, 0x9c, 0x55, 0xf6,
		0xaa, 0x70, 0xde, 0xfb, 0xbb, 0x86, 0x20, 0x55, 0xb3, 0x1d, 0xfe, 0xf2, 0xcd, 0x3f, 0xb1, 0xde,
		0xbe, 0x9f, 0xa9, 0xde, 0xa8, 0x1d, 0x79, 0x86, 0xec, 0x7e, 0x50, 0x73, 0x09, 0x2c, 0x93, 0xaf,
		0xd1, 0x9e, 0xa3, 0x4a, 0x26, 0x8f, 0x9e, 0x3c, 0x4f, 0xc8, 0x11, 0x4c, 0x42, 0x15, 0xc8, 0x09,
		0x2d, 0x60, 0xee, 0xdf, 0x26, 0x62, 0x0e, 0x2a, 0x79, 0xc7, 0x0d, 0xe5, 0xca, 0xf8, 0x5a, 0x7a,
		0x25, 0x6d, 0x49, 0x03, 0xe4, 0xf2, 0x24, 0xb6, 0x02, 0x75, 0x8c, 0xdd, 0xb4, 0x57, 0x35, 0x7b,
		0x14, 0x13, 0x6b, 0x5b, 0x3d, 0x75, 0x83, 0xd0, 0xd6, 0xc9, 0xe4, 0x26, 0x16, 0x18, 0x52, 0xdf,
		0x57, 0xef, 0x54, 0x7b, 0x28, 0x67, 0x97, 0xe1, 0xf2, 0xf7, 0xf6, 0x66, 0x6f, 0x6d, 0x33, 0x3d,
		0x46, 0xec, 0x59, 0xa7, 0xbd, 0x17, 0xad, 0xc4, 0x44, 0xb6, 0x63, 0x69, 0xf4, 0xbe, 0x27, 0x40,
		0x0c, 0x41, 0x42, 0xcd, 0x53, 0xee, 0xf2, 0x8b, 0x6d, 0x9f, 0xec, 0xac, 0xea, 0x6b, 0x2f, 0x2d,
		0x57, 0x41, 0xa6, 0x8d, 0x89, 0xd8, 0xde, 0x8e, 0x56, 0xcb, 0xfc, 0xe2, 0x5d, 0x22, 0x8b, 0x68,
		0x61, 0xc6, 0x41, 0x25, 0x0a, 0x26, 0x4c, 0x18, 0x2b, 0x61, 0x02, 0x5b, 0x58, 0x40, 0xae, 0xbb,
		0x92, 0xe6, 0x94, 0xd4, 0xe5, 0xc1, 0x4f, 0x00, 0x9e, 0xbe, 0x85, 0x6d, 0x27, 0x48, 0x72, 0x39,
		0x02, 0x12, 0xa1, 0xf6, 0x72, 0xf7, 0x4d, 0x24, 0x62, 0x67, 0x8f, 0x5a, 0x41, 0x6d, 0xe1, 0xca,
		0xfc, 0x3d, 0xf2, 0x40, 0xd6, 0x67, 0x39, 0x78, 0x70, 0xf2, 0xda, 0x46, 0x1b, 0xdc, 0x4c, 0x7f,
		0x2a, 0xa1, 0x0c, 0xec, 0x20, 0xe2, 0x07, 0xde, 0x1f, 0xbb, 0xb9, 0xb5, 0x24, 0x29, 0x51, 0x8c
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xf8d03n;
	message = new Uint8Array([
		0x97, 0x8a, 0x26, 0x63, 0x2c, 0x48, 0xc1, 0x5a, 0x2c, 0xd0, 0xc7, 0xaa, 0x5b, 0x31, 0x22, 0x63,
		0x0e, 0xb3, 0x04, 0xc2, 0x28, 0x03, 0x7a, 0x6b, 0x48, 0x91, 0x44, 0xf3, 0x41, 0x37, 0xe4, 0xa1,
		0xcb, 0x1b, 0xf5, 0x76, 0x78, 0xd6, 0xbe, 0x6a, 0xe9, 0xd6, 0x07, 0xf9, 0x41, 0x00, 0x2b, 0xde,
		0xda, 0x9a, 0x6f, 0x1f, 0x37, 0x69, 0x92, 0x49, 0x3a, 0x16, 0xa6, 0xfd, 0x97, 0xd7, 0x1e, 0xab,
		0x89, 0x4b, 0x27, 0x9e, 0xc4, 0xa5, 0x3c, 0x39, 0xaa, 0x0c, 0xf4, 0x80, 0xc1, 0x42, 0x1f, 0xda,
		0x65, 0x84, 0x12, 0x14, 0xba, 0xb2, 0x3f, 0xaa, 0xe5, 0xb0, 0x09, 0x42, 0x7c, 0x0c, 0xd6, 0x7a,
		0x3a, 0xe1, 0x65, 0xe3, 0xf8, 0xfb, 0x62, 0x4d, 0xd8, 0x3b, 0x37, 0x46, 0xc4, 0x3d, 0x26, 0xdd,
		0x17, 0x39, 0x94, 0xac, 0x99, 0x27, 0xa8, 0x15, 0xb1, 0x27, 0x15, 0xcb, 0xd6, 0x1f, 0x34, 0x94
	]);
	signature = new Uint8Array([
		0x30, 0x75, 0xce, 0x37, 0xca, 0xe7, 0xc5, 0x11, 0xa6, 0x4b, 0x3b, 0xc9, 0x1e, 0x21, 0x46, 0xdd,
		0x2f, 0xef, 0x25, 0xf4, 0x95, 0x5f, 0x36, 0x84, 0x8a, 0x18, 0xa9, 0x3a, 0x0f, 0xe5, 0xa1, 0x6a,
		0x2d, 0x1d, 0x6d, 0x79, 0x3c, 0x83, 0x21, 0x98, 0xca, 0x45, 0x7d, 0xc5, 0x3e, 0xa6, 0x57, 0x57,
		0x77, 0x54, 0x37, 0xef, 0xa9, 0xb7, 0xa0, 0x5c, 0xb1, 0xf5, 0xca, 0xb3, 0xc8, 0x00, 0x47, 0x46,
		0x39, 0xa3, 0x33, 0xd2, 0x29, 0x30, 0xaa, 0xd7, 0x0a, 0x34, 0x35, 0xd2, 0x44, 0x6a, 0x4e, 0x3c,
		0xc3, 0x8d, 0x61, 0x16, 0x70, 0x04, 0xb8, 0xb1, 0x42, 0x6a, 0x28, 0x10, 0xe6, 0x98, 0x15, 0x3d,
		0xbc, 0x48, 0x47, 0xe4, 0x5a, 0xa9, 0x84, 0x25, 0x74, 0x6a, 0xb4, 0x3a, 0x24, 0xf9, 0x19, 0xee,
		0x84, 0x18, 0x42, 0x89, 0x3d, 0xce, 0xac, 0xd9, 0x6f, 0x70, 0x5a, 0xed, 0xa8, 0xf8, 0x59, 0x1f,
		0x27, 0xf0, 0x10, 0x8a, 0xb4, 0xe3, 0x6a, 0x57, 0x00, 0x54, 0xa0, 0x49, 0x8c, 0xe2, 0xc2, 0xad,
		0xe3, 0xd4, 0x57, 0x73, 0x38, 0x90, 0xe2, 0x80, 0xc2, 0x36, 0xa4, 0x93, 0x1f, 0xa8, 0xfb, 0x70,
		0x8c, 0xf2, 0xc8, 0xab, 0x20, 0x2b, 0x0e, 0xf0, 0x9e, 0x35, 0xad, 0x42, 0x50, 0x73, 0xd2, 0xc0,
		0xba, 0x69, 0x70, 0xc5, 0xc4, 0x59, 0x12, 0xd0, 0xc2, 0xb1, 0x20, 0x11, 0xa9, 0xd9, 0xfb, 0x13,
		0x1a, 0x4d, 0x7c, 0x35, 0xd1, 0x7b, 0xf7, 0xfb, 0xb2, 0x32, 0xf4, 0xfe, 0x69, 0xce, 0xf8, 0x77,
		0x9a, 0x20, 0x31, 0xaa, 0x42, 0x8c, 0xe4, 0xe2, 0xa9, 0x34, 0x79, 0xe3, 0x18, 0x57, 0x3f, 0xba,
		0x43, 0x26, 0x71, 0x9d, 0xc8, 0xac, 0x3a, 0x86, 0x41, 0x2d, 0x4c, 0xd8, 0xee, 0x4f, 0xa5, 0x82,
		0x82, 0xd4, 0xf6, 0xac, 0xc3, 0x58, 0x11, 0x98, 0xeb, 0x72, 0x84, 0xda, 0x3f, 0x5b, 0xfb, 0x92
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	n =
		0x9e88e71138328da718c664b03685764881aa0145e8b23d2fe8cff47658334196ba8df505a8002d7692434625cfd29130ca11efa90102ac5690b083585ea3bcdaba216eabf0ce83e831db6b74c91105afb5edb4935691c656e24e3e4a6cd20d0a8cfb61f5509a08364b1db31a93eaaad4db58670bf7e8c8b259474f3d58a94c0ee7fd7c173e0f2ab7946dac5fa81c6046035a494fd430d0ed6719f21eccb57d09654a8ff28104eb8db4f56329324692509e8352127fe7ce230dca3bdb074063488f8282a70c1397a2ac18dffaddfd97c884421a7b3116b5936013bfd3d47f008c0864ea14f2141e57b753020044462b114ab05f121c7c5c4ecde64d0d0f9b58afn;
	e =
		0xce5fd9n;
	message = new Uint8Array([
		0xdc, 0x0d, 0x4e, 0xfd, 0xc9, 0x4c, 0xbf, 0x64, 0xab, 0xa6, 0xf1, 0x46, 0xd6, 0xed, 0x04, 0x98,
		0x80, 0x4f, 0xf9, 0xa6, 0xd3, 0x21, 0x67, 0xfa, 0x41, 0xdb, 0x6f, 0x7f, 0x18, 0x63, 0xf1, 0xe6,
		0x56, 0x8e, 0x00, 0x49, 0xbe, 0xe4, 0x94, 0x0e, 0x2b, 0xa3, 0x7f, 0x0f, 0x25, 0x07, 0xa3, 0xf7,
		0xb2, 0xc9, 0x61, 0xef, 0x6e, 0xe5, 0x55, 0x7b, 0xde, 0xa1, 0x40, 0x9e, 0x02, 0xcb, 0x45, 0x45,
		0x29, 0x42, 0x59, 0xe3, 0x09, 0xb8, 0xf5, 0x58, 0x0f, 0xb5, 0x0d, 0x17, 0xf4, 0xdf, 0x46, 0x88,
		0x91, 0x7a, 0x64, 0xab, 0xf4, 0x2b, 0x01, 0xff, 0xb3, 0x01, 0x85, 0xa2, 0x80, 0xb5, 0x52, 0xb9,
		0xfe, 0x31, 0x3f, 0x12, 0xd4, 0x50, 0x48, 0x08, 0xff, 0xe5, 0x84, 0xa7, 0x6c, 0xfe, 0x57, 0x11,
		0xc6, 0x6a, 0xe8, 0x20, 0x8d, 0x78, 0xd5, 0x4d, 0x68, 0x02, 0x26, 0xd1, 0xbc, 0xaa, 0x80, 0x0a
	]);
	signature = new Uint8Array([
		0x8c, 0xa4, 0x1d, 0xe9, 0x99, 0xfa, 0xd3, 0x70, 0x4a, 0x73, 0x0c, 0x95, 0x41, 0x43, 0x03, 0x32,
		0x71, 0x91, 0x27, 0xa5, 0x89, 0x21, 0x84, 0x01, 0xdc, 0xbf, 0x2e, 0x5a, 0x8c, 0x86, 0x30, 0x27,
		0xd4, 0xcf, 0x35, 0x33, 0xcd, 0x63, 0x3d, 0xc8, 0xc3, 0x94, 0xc5, 0xb9, 0x91, 0x5b, 0x54, 0x83,
		0xc3, 0x51, 0xe3, 0xed, 0x26, 0x22, 0xba, 0xbb, 0x66, 0x45, 0x8a, 0xfa, 0xb9, 0xf1, 0x02, 0x36,
		0x6c, 0xc7, 0xe0, 0xb3, 0x4d, 0xca, 0xd3, 0x51, 0x43, 0x15, 0x71, 0xdf, 0x42, 0xb6, 0xef, 0x28,
		0xb0, 0x5c, 0x5a, 0x57, 0x5a, 0x81, 0x3f, 0x9e, 0x44, 0xb4, 0x9e, 0x8a, 0xca, 0x9d, 0x1b, 0x12,
		0x97, 0x11, 0xa1, 0xfe, 0x31, 0x87, 0x88, 0xbb, 0x1c, 0x34, 0x9c, 0x8b, 0xb6, 0xfd, 0xcd, 0x5a,
		0x6c, 0x0e, 0x97, 0xe1, 0x08, 0x51, 0x18, 0xb2, 0x8c, 0x2c, 0x9d, 0x06, 0xb3, 0x5a, 0xa8, 0x33,
		0x85, 0x5e, 0x18, 0x1e, 0x41, 0xd7, 0x26, 0x93, 0x5d, 0x58, 0x73, 0x90, 0xd8, 0x16, 0xe3, 0x77,
		0x71, 0x8a, 0xef, 0x9d, 0x05, 0xe5, 0xdb, 0x52, 0xe0, 0xed, 0x50, 0xdd, 0x39, 0x63, 0xcf, 0xac,
		0x39, 0x96, 0xd6, 0x60, 0xea, 0x2f, 0x15, 0x0f, 0x0a, 0x1a, 0xa1, 0x73, 0x1e, 0x7a, 0xb9, 0x1d,
		0x0a, 0x6c, 0x0f, 0xb9, 0xd5, 0xf1, 0x51, 0x03, 0x48, 0x3a, 0x31, 0x3a, 0xe7, 0x65, 0xc0, 0x9f,
		0xd6, 0x75, 0x8f, 0xf7, 0x96, 0xd4, 0xc0, 0xee, 0x19, 0x7b, 0x3c, 0xdb, 0xf3, 0x5e, 0xf7, 0x1b,
		0x60, 0xb3, 0x3f, 0xaa, 0x44, 0x00, 0x65, 0x7b, 0x2b, 0xf9, 0x10, 0x01, 0x0a, 0xfe, 0xf3, 0x4b,
		0x08, 0x0c, 0x29, 0xcd, 0x9f, 0x57, 0x9d, 0x86, 0xf5, 0x89, 0x58, 0x23, 0xd8, 0xe3, 0x53, 0xda,
		0x50, 0xb6, 0x4c, 0x68, 0xac, 0xfd, 0xca, 0x4a, 0xb2, 0x79, 0x39, 0x35, 0x88, 0xc6, 0xb5, 0xad
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xce5fd9n;
	message = new Uint8Array([
		0x17, 0xfc, 0xb2, 0x0e, 0x72, 0x09, 0x6d, 0x78, 0xa0, 0x7c, 0x5d, 0x09, 0x0a, 0x29, 0xdc, 0x43,
		0x7b, 0xbc, 0xaf, 0x65, 0x84, 0x94, 0x8b, 0xe1, 0x1f, 0xd5, 0xd7, 0x10, 0x92, 0xb8, 0xb4, 0x25,
		0x96, 0x26, 0x3b, 0x60, 0xb9, 0x86, 0x05, 0x84, 0x01, 0xd3, 0xf1, 0x8a, 0xd2, 0xf1, 0x21, 0x97,
		0x11, 0x41, 0x46, 0x2c, 0x8a, 0x73, 0x1e, 0x9c, 0x8f, 0x9b, 0x3b, 0xc4, 0xe2, 0x87, 0x05, 0xf6,
		0xd6, 0x50, 0x02, 0x36, 0xb0, 0x30, 0x55, 0xa9, 0x53, 0x93, 0x85, 0x4a, 0x1d, 0x71, 0x80, 0xdf,
		0x0c, 0xda, 0xe0, 0x2c, 0x25, 0xd3, 0x6c, 0x66, 0x16, 0x60, 0xe2, 0xea, 0x1a, 0xe2, 0xf4, 0x2f,
		0x1d, 0xa3, 0x90, 0xf9, 0x21, 0xb0, 0x64, 0xd0, 0xe0, 0xe7, 0xa2, 0xb1, 0xb2, 0x50, 0x00, 0x03,
		0xb2, 0xb1, 0x04, 0xcc, 0x1c, 0x5c, 0x7e, 0x25, 0xfa, 0x4c, 0x56, 0xec, 0x00, 0x70, 0x87, 0xb8
	]);
	signature = new Uint8Array([
		0x63, 0xb9, 0x9f, 0x6a, 0x1c, 0x89, 0x56, 0xf7, 0x94, 0x94, 0xc9, 0xdd, 0x30, 0xfd, 0x1b, 0x0a,
		0x6b, 0x7d, 0x76, 0x12, 0x26, 0xc2, 0xf1, 0xec, 0x44, 0xbb, 0x23, 0xa3, 0xe2, 0x25, 0xa7, 0x78,
		0x0f, 0xfd, 0x19, 0xf9, 0x9f, 0x95, 0x17, 0x99, 0x14, 0x5c, 0xf4, 0x29, 0xa7, 0x8e, 0x99, 0xa9,
		0xf9, 0x44, 0x4d, 0x3f, 0x56, 0xc5, 0xd3, 0xbb, 0xa3, 0x48, 0x98, 0x40, 0xcc, 0xe1, 0x56, 0xa1,
		0x20, 0x56, 0xfe, 0xdf, 0x21, 0x1e, 0x8a, 0x5c, 0xa2, 0xf6, 0x0f, 0x27, 0xda, 0xe0, 0x88, 0x8d,
		0x06, 0x32, 0x87, 0x73, 0x95, 0x6e, 0x87, 0xc3, 0x67, 0x31, 0xc0, 0x94, 0xae, 0xc6, 0x45, 0xeb,
		0x89, 0x34, 0xb0, 0xf6, 0xbd, 0xba, 0x17, 0xab, 0x1b, 0x5c, 0xfe, 0x3e, 0x6c, 0xa6, 0x66, 0x28,
		0xb0, 0x18, 0x57, 0x4f, 0xc0, 0xee, 0x4c, 0x8b, 0xc7, 0xa2, 0x57, 0x26, 0x6f, 0x7b, 0x53, 0xa0,
		0xa1, 0x52, 0xdc, 0x9e, 0xc6, 0x40, 0xc8, 0x44, 0xc0, 0x58, 0x06, 0x85, 0xb3, 0xf0, 0xd5, 0x48,
		0x84, 0xe0, 0xc3, 0xcf, 0xdf, 0x40, 0x56, 0xfa, 0xd1, 0xe2, 0x79, 0xdc, 0x21, 0x9f, 0xf1, 0x42,
		0x9b, 0x8d, 0xfa, 0x43, 0x60, 0x69, 0xb6, 0xb3, 0xd3, 0xf6, 0x00, 0x54, 0x4b, 0x80, 0x14, 0x4c,
		0xc3, 0xfc, 0x06, 0x2b, 0x3e, 0x9c, 0x15, 0xd8, 0x64, 0xa6, 0xe9, 0x1e, 0xca, 0xb4, 0x24, 0xd3,
		0x20, 0xd3, 0x9a, 0xe7, 0x54, 0x4f, 0x34, 0xb8, 0xa6, 0x9b, 0x1c, 0xa4, 0xe3, 0x68, 0x88, 0x70,
		0xc6, 0xd1, 0xd2, 0x59, 0x39, 0x97, 0xb6, 0xf0, 0x0b, 0xaf, 0x72, 0x68, 0xc7, 0x6d, 0x10, 0xab,
		0x4d, 0x2f, 0xf0, 0x13, 0xef, 0x3d, 0x65, 0xa9, 0xe8, 0xc2, 0x8e, 0x19, 0x9b, 0xc1, 0xa4, 0x02,
		0xa0, 0xaa, 0x71, 0xcd, 0xc0, 0x3f, 0x72, 0xe7, 0x0f, 0x64, 0xb9, 0x67, 0x41, 0x1e, 0x99, 0x7a
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xce5fd9n;
	message = new Uint8Array([
		0x2a, 0xea, 0x50, 0x5e, 0xe5, 0xea, 0xfc, 0x92, 0xdb, 0x8e, 0xbe, 0x83, 0xa6, 0x9a, 0x9a, 0x32,
		0x0d, 0x43, 0x3e, 0xa7, 0xce, 0xe6, 0xe5, 0x40, 0x9b, 0xfa, 0x7b, 0x48, 0x62, 0x44, 0x02, 0xcb,
		0xd1, 0x49, 0x34, 0xa9, 0x1a, 0x09, 0x6a, 0xea, 0xf3, 0xea, 0xbc, 0x51, 0xe1, 0xf3, 0x6a, 0x34,
		0xb7, 0x3a, 0x7b, 0x8b, 0x59, 0xa0, 0xa3, 0x46, 0xc6, 0xbb, 0x6a, 0xe4, 0x56, 0x14, 0x8b, 0x41,
		0x40, 0x93, 0x9a, 0xaf, 0x5e, 0x37, 0xea, 0x49, 0x35, 0x0a, 0xae, 0x84, 0x30, 0x55, 0x5e, 0x07,
		0x2c, 0x10, 0x5d, 0xbd, 0x39, 0x9c, 0xd8, 0x28, 0x9f, 0xb5, 0xf1, 0xf8, 0x20, 0xa2, 0x1d, 0xdc,
		0x7d, 0xae, 0xca, 0x98, 0x3c, 0xdc, 0x46, 0x58, 0xa7, 0xd7, 0xdc, 0x43, 0x18, 0x28, 0x40, 0x54,
		0x74, 0xab, 0x2d, 0x65, 0xf6, 0x44, 0x4c, 0x8d, 0x2e, 0xce, 0x58, 0xac, 0x49, 0x54, 0x80, 0x44
	]);
	signature = new Uint8Array([
		0x7a, 0x3c, 0x88, 0xd7, 0x0e, 0x8b, 0x6b, 0x4e, 0x21, 0x9d, 0x36, 0x09, 0x2d, 0x2b, 0xe7, 0x1a,
		0x3c, 0x55, 0x2e, 0x4e, 0xbe, 0x60, 0xb9, 0x75, 0x50, 0xae, 0x55, 0xf4, 0xe3, 0x10, 0x86, 0xe9,
		0xbc, 0x95, 0x2c, 0x21, 0xf1, 0x74, 0x4d, 0xdb, 0x88, 0x92, 0x69, 0xeb, 0x68, 0xea, 0xa3, 0x2a,
		0xf6, 0x9c, 0x49, 0x3b, 0x40, 0xd4, 0x8e, 0xc8, 0x7e, 0x45, 0x8d, 0xd1, 0xa2, 0x38, 0x37, 0xb2,
		0x58, 0x84, 0x41, 0xad, 0x74, 0xf3, 0x49, 0x06, 0xcd, 0xec, 0xaf, 0x83, 0x07, 0xa2, 0x36, 0xb0,
		0x3c, 0xdd, 0x26, 0xbd, 0x6e, 0x3b, 0x90, 0x64, 0x68, 0x07, 0xc4, 0xaa, 0x18, 0x47, 0x01, 0xa2,
		0x59, 0x35, 0x6c, 0x62, 0xae, 0xab, 0x3c, 0x32, 0xa5, 0x1b, 0x8c, 0xc7, 0xb1, 0x72, 0x1d, 0xb8,
		0xb5, 0x91, 0xe9, 0x45, 0xae, 0xec, 0x05, 0xac, 0xa5, 0xc4, 0x5b, 0x05, 0x4f, 0x06, 0x58, 0xcb,
		0x31, 0x02, 0xee, 0xdb, 0x79, 0x19, 0xc6, 0x57, 0x55, 0x4e, 0x2a, 0x2e, 0xa7, 0xa0, 0x74, 0xbb,
		0xe0, 0xd2, 0xec, 0x7a, 0xa7, 0x78, 0x2f, 0x9d, 0x4d, 0xcd, 0x13, 0x46, 0xc3, 0x6b, 0xc7, 0xa2,
		0xc7, 0xce, 0x56, 0x82, 0xfc, 0x98, 0xb2, 0x7f, 0x03, 0x12, 0x1a, 0x5f, 0x72, 0xe9, 0x1b, 0x7f,
		0x58, 0x16, 0xbb, 0xa8, 0xdd, 0x0d, 0xd2, 0x71, 0xa1, 0x88, 0x1c, 0xe4, 0x44, 0x5b, 0xe7, 0x19,
		0xf1, 0x1e, 0x8b, 0xcd, 0xb5, 0x63, 0x63, 0xc0, 0x01, 0x89, 0x50, 0x39, 0x06, 0x45, 0x93, 0x74,
		0x2c, 0x6e, 0x52, 0xba, 0xcf, 0x99, 0x3c, 0x07, 0x50, 0x9f, 0x9d, 0x1b, 0x32, 0x95, 0x67, 0x57,
		0x09, 0x8e, 0xf3, 0xf7, 0x97, 0x4e, 0x65, 0x46, 0xf9, 0xcc, 0xeb, 0x9b, 0x83, 0x25, 0x6c, 0x01,
		0x13, 0x46, 0x39, 0xaf, 0xc7, 0xf6, 0x90, 0x12, 0xfb, 0x99, 0x71, 0x23, 0xa5, 0x34, 0x2d, 0x5d
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xce5fd9n;
	message = new Uint8Array([
		0xad, 0xa0, 0x41, 0x0f, 0x05, 0xb7, 0xcf, 0x29, 0xa8, 0x38, 0x53, 0xcf, 0x60, 0x4d, 0x9a, 0xaa,
		0x05, 0x00, 0xd6, 0x31, 0xfe, 0xae, 0x43, 0xc1, 0x04, 0xb9, 0x0b, 0xef, 0x28, 0x7e, 0x68, 0x1d,
		0x18, 0x87, 0x08, 0x4b, 0x9e, 0x01, 0xb5, 0x30, 0x69, 0x70, 0x35, 0x89, 0x10, 0xa1, 0x6f, 0xb2,
		0x54, 0xe0, 0xd0, 0x73, 0xa6, 0x6c, 0xed, 0x1c, 0xe9, 0x28, 0x6a, 0xd4, 0x78, 0x93, 0x1a, 0x2e,
		0x6b, 0xfa, 0x67, 0xfd, 0x16, 0xed, 0xf5, 0x6a, 0xd3, 0xef, 0x82, 0x43, 0x02, 0x71, 0x11, 0x96,
		0x4d, 0x02, 0x47, 0x7f, 0x31, 0xc0, 0x15, 0x3e, 0xb9, 0x12, 0x97, 0x8c, 0x8d, 0x99, 0x3c, 0x30,
		0x2c, 0x63, 0x28, 0xcd, 0x76, 0x62, 0xd6, 0xfe, 0x6d, 0x1d, 0x02, 0xa4, 0x3c, 0xa6, 0xc6, 0x7f,
		0x79, 0xcc, 0x03, 0xfc, 0xa7, 0x91, 0x02, 0x4e, 0xff, 0xdf, 0x5b, 0xc0, 0x70, 0x76, 0x16, 0x4a
	]);
	signature = new Uint8Array([
		0x65, 0x52, 0x3c, 0x77, 0xea, 0x6d, 0xb3, 0x20, 0xcd, 0x0a, 0x74, 0x46, 0xcd, 0xbf, 0xbe, 0x99,
		0x8d, 0x60, 0x3d, 0xb4, 0xab, 0x46, 0x0f, 0x17, 0x25, 0xc4, 0x94, 0xea, 0x7b, 0xeb, 0xca, 0x92,
		0x9c, 0xf6, 0xcd, 0x7e, 0x45, 0x0f, 0x60, 0x62, 0x49, 0xaf, 0xe3, 0x26, 0xae, 0x09, 0xe6, 0xb0,
		0xf5, 0x24, 0x9c, 0xfd, 0x9d, 0x73, 0xee, 0xe0, 0x07, 0x39, 0xd9, 0x69, 0xcf, 0x35, 0xa2, 0xea,
		0xde, 0x7f, 0x31, 0xc5, 0x41, 0xbb, 0xd4, 0xb6, 0x63, 0x2f, 0xef, 0x95, 0xf1, 0xa1, 0xca, 0x0d,
		0x90, 0xfd, 0xb0, 0xc4, 0x87, 0x0b, 0xb9, 0x7c, 0x2f, 0xb9, 0x2d, 0x1a, 0xe0, 0x9c, 0xb7, 0x00,
		0xce, 0xb2, 0xe6, 0x33, 0xc6, 0xe0, 0x8a, 0x7c, 0x43, 0xe7, 0xf5, 0xff, 0xe7, 0x7a, 0x22, 0x93,
		0xe9, 0x59, 0xb2, 0x80, 0xd9, 0xd6, 0xb3, 0x77, 0x16, 0xe8, 0x5e, 0x21, 0x4f, 0x8d, 0x0f, 0x3c,
		0xd7, 0x19, 0xa3, 0xeb, 0xe6, 0x52, 0xd6, 0x2d, 0x9f, 0xbe, 0xc1, 0xa5, 0xdb, 0xce, 0x47, 0x91,
		0x19, 0xe4, 0x02, 0x8f, 0x68, 0xd2, 0x61, 0x22, 0xd2, 0xeb, 0x44, 0xd9, 0x54, 0x6f, 0x5a, 0x71,
		0xdf, 0x22, 0xdd, 0x03, 0xe3, 0xf9, 0xdb, 0x6c, 0x47, 0x0c, 0x8d, 0x9b, 0x96, 0xb4, 0x60, 0xcd,
		0xf9, 0xac, 0x2c, 0x94, 0x8d, 0x7e, 0xc1, 0x99, 0x9a, 0x9b, 0x6d, 0x96, 0x5e, 0x4e, 0x8b, 0x5c,
		0xe4, 0x0f, 0x64, 0x3e, 0xd3, 0x12, 0x4f, 0x2f, 0xc6, 0x50, 0x1b, 0x2c, 0x7d, 0xd4, 0x80, 0x2d,
		0xf3, 0xa1, 0x82, 0x45, 0xfd, 0xef, 0x25, 0x3d, 0x27, 0xfc, 0xda, 0x8f, 0x8c, 0xda, 0xce, 0x6a,
		0xf4, 0x1d, 0x4d, 0x4f, 0xc3, 0x14, 0xef, 0x33, 0x68, 0x81, 0x04, 0x7c, 0xe5, 0xab, 0xe0, 0xab,
		0x69, 0x9a, 0x9f, 0x1c, 0x89, 0x53, 0x3b, 0xaf, 0x45, 0xbc, 0x7b, 0xf9, 0xb2, 0xef, 0xf6, 0xe4
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xce5fd9n;
	message = new Uint8Array([
		0x7a, 0x27, 0xb3, 0x08, 0x0a, 0x30, 0xaa, 0x2a, 0xd2, 0x90, 0xa7, 0x1e, 0x76, 0x68, 0x13, 0x39,
		0x43, 0xe0, 0x4a, 0xf9, 0x16, 0x76, 0xa0, 0xf3, 0x79, 0x96, 0xa2, 0x0c, 0x10, 0x6a, 0x9e, 0xec,
		0x34, 0xf3, 0x65, 0xb0, 0xdd, 0x59, 0x4f, 0xdf, 0xc5, 0x7f, 0x80, 0xa0, 0xca, 0xdb, 0x6a, 0x2a,
		0x94, 0x85, 0x93, 0x7b, 0x79, 0x8d, 0x98, 0x4d, 0x9d, 0x92, 0x73, 0x46, 0x5e, 0x90, 0xf9, 0x6f,
		0xef, 0xfa, 0xa6, 0xe7, 0x42, 0x09, 0x9d, 0xd9, 0x2c, 0x53, 0xeb, 0xab, 0xc4, 0x9f, 0x0c, 0x78,
		0x0c, 0xf8, 0xb0, 0xc1, 0xd3, 0x00, 0xbf, 0x5f, 0xd9, 0x87, 0x9a, 0xbc, 0x35, 0x5c, 0xa4, 0x43,
		0xf4, 0x63, 0x01, 0x15, 0x03, 0xe8, 0x9d, 0xfe, 0x4f, 0x33, 0x70, 0xa7, 0x2a, 0x5d, 0x01, 0x0d,
		0xf1, 0x62, 0x29, 0x31, 0xeb, 0x76, 0x1a, 0x12, 0x75, 0x9d, 0x9f, 0xd8, 0x5c, 0x76, 0xa6, 0x52
	]);
	signature = new Uint8Array([
		0x08, 0x5c, 0x59, 0x53, 0xfb, 0xdf, 0x20, 0x78, 0x04, 0x04, 0x47, 0xeb, 0xf7, 0xe3, 0x51, 0xfa,
		0x05, 0x16, 0xa4, 0x03, 0x06, 0x75, 0x70, 0xee, 0xb0, 0x72, 0xd5, 0xa2, 0x60, 0x1d, 0xb2, 0xe5,
		0x50, 0x39, 0x9e, 0xb8, 0xd1, 0xf5, 0xa5, 0xd3, 0x51, 0x74, 0x46, 0x84, 0x90, 0xa1, 0xce, 0x55,
		0x44, 0x22, 0xd0, 0x96, 0x6b, 0xcc, 0x3d, 0xc4, 0x2d, 0x8e, 0xca, 0xa4, 0xa3, 0x80, 0x5d, 0x2d,
		0x64, 0x2c, 0x92, 0x79, 0xa4, 0xa3, 0x06, 0x73, 0xcf, 0x49, 0x5a, 0x15, 0xfc, 0xfd, 0xf0, 0x4d,
		0x40, 0x86, 0x31, 0xa7, 0x2a, 0xcc, 0x94, 0xff, 0x85, 0xc8, 0x00, 0x2b, 0xc0, 0x84, 0xf5, 0xd3,
		0x5c, 0x6a, 0x2b, 0xaa, 0x67, 0x34, 0xe6, 0xc4, 0x11, 0xe1, 0xb8, 0x9d, 0x4b, 0xe6, 0xaa, 0xcd,
		0x6f, 0x42, 0x77, 0xb3, 0x7b, 0x17, 0x9b, 0x50, 0x3e, 0x02, 0x3e, 0x95, 0xba, 0xbb, 0x1e, 0x42,
		0x54, 0xb7, 0x02, 0x70, 0x39, 0x03, 0xe3, 0x15, 0x7e, 0xd1, 0xff, 0x8b, 0x7f, 0x8e, 0xdd, 0x49,
		0x8b, 0xf9, 0x5b, 0x50, 0xba, 0x4b, 0x10, 0xf2, 0x44, 0x73, 0x8e, 0x25, 0x93, 0x15, 0xa7, 0x4f,
		0xb4, 0x79, 0xc2, 0xac, 0xcb, 0x01, 0x63, 0x4a, 0x85, 0x6b, 0x34, 0x15, 0xb8, 0x80, 0xa2, 0x44,
		0x1a, 0xb6, 0xf9, 0xf5, 0xf8, 0x10, 0x24, 0x8c, 0x0b, 0x1a, 0x74, 0x31, 0x66, 0x00, 0xf0, 0x13,
		0xa8, 0x5d, 0x52, 0xa8, 0x70, 0xf8, 0xc9, 0x26, 0x68, 0x0a, 0x45, 0xf8, 0xf7, 0xfc, 0x11, 0x7e,
		0x62, 0x98, 0xc8, 0x78, 0x66, 0x7b, 0x10, 0x59, 0x28, 0x0b, 0xc5, 0x2e, 0x12, 0x9c, 0x6a, 0xe5,
		0x1f, 0x96, 0xc0, 0xeb, 0x33, 0x48, 0xae, 0xf9, 0xc4, 0xc8, 0x03, 0x9e, 0x76, 0x84, 0x29, 0x4c,
		0xec, 0x13, 0x92, 0xca, 0x1d, 0x9f, 0x1d, 0x1a, 0x67, 0x82, 0x2e, 0xa9, 0x36, 0xe3, 0x60, 0xab
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(true);

	e =
		0xb62585n;
	message = new Uint8Array([
		0x8e, 0xc0, 0x38, 0x15, 0x66, 0xab, 0x63, 0x12, 0x2b, 0x5c, 0x86, 0x43, 0x0e, 0x98, 0x68, 0x1f,
		0x33, 0x3d, 0x7a, 0x27, 0xaa, 0x6e, 0x66, 0x25, 0xa1, 0xf0, 0xea, 0xb6, 0xd8, 0xd4, 0xe7, 0x06,
		0x55, 0x57, 0xb5, 0xdb, 0x58, 0x06, 0xba, 0xd5, 0x91, 0x26, 0x3b, 0xf4, 0x91, 0x52, 0x71, 0x5a,
		0x7f, 0x66, 0xe0, 0x52, 0x0c, 0x9c, 0xe4, 0x92, 0xa8, 0xf5, 0x8d, 0xbd, 0xf7, 0xdb, 0xac, 0x2c,
		0x7e, 0x04, 0x2e, 0xee, 0xa3, 0x99, 0xa9, 0x0d, 0xd4, 0x98, 0x35, 0x13, 0x06, 0x77, 0x7d, 0xcd,
		0x61, 0x0a, 0x16, 0x4f, 0x39, 0xa6, 0x0f, 0x38, 0x41, 0x87, 0xc9, 0x38, 0xfb, 0x6f, 0x08, 0xcf,
		0x73, 0x90, 0x4b, 0x57, 0x2d, 0xac, 0x59, 0x44, 0x5c, 0x7b, 0x1d, 0xab, 0x54, 0x4d, 0xb3, 0x01,
		0x42, 0xf0, 0xc3, 0x26, 0x1b, 0xd4, 0x0e, 0xa1, 0xd2, 0x6d, 0x46, 0x2e, 0xce, 0xd9, 0x23, 0x76
	]);
	signature = new Uint8Array([
		0x46, 0xf7, 0x1a, 0xaf, 0xa2, 0x01, 0x7f, 0x61, 0x03, 0xd0, 0x36, 0xca, 0x3b, 0x4a, 0xdf, 0xb8,
		0x1e, 0xb2, 0x5f, 0xee, 0x2c, 0xce, 0xbf, 0xf2, 0xf4, 0x9d, 0xd9, 0xec, 0x7f, 0x7a, 0x3b, 0xf7,
		0x5b, 0x92, 0x78, 0x19, 0xb6, 0x84, 0x52, 0xa2, 0xe8, 0xc2, 0xa0, 0x8e, 0x96, 0x0c, 0x44, 0xd6,
		0x95, 0xb1, 0xe4, 0x43, 0xba, 0xbb, 0x4a, 0x27, 0x16, 0x99, 0x31, 0x9f, 0x2a, 0xe8, 0x05, 0xe1,
		0xbc, 0xb7, 0x21, 0x48, 0x2e, 0x00, 0x4f, 0x2a, 0x28, 0x10, 0x15, 0x68, 0x26, 0x38, 0x67, 0x3f,
		0x57, 0x59, 0xf6, 0xbb, 0xde, 0x92, 0x17, 0x1f, 0xe5, 0xf1, 0x01, 0x7e, 0x6e, 0x9d, 0x06, 0x40,
		0x3b, 0xfd, 0xa8, 0x2d, 0x63, 0xd2, 0xf3, 0x1f, 0x59, 0x7d, 0x2b, 0xf8, 0xce, 0x51, 0x2a, 0x0e,
		0x6c, 0x9c, 0xb3, 0xaf, 0xcc, 0x7a, 0xb6, 0x58, 0xbd, 0xc2, 0x38, 0xda, 0x59, 0x80, 0xd1, 0x75,
		0xb2, 0xa7, 0x61, 0x6a, 0xac, 0x43, 0xb3, 0x17, 0x27, 0x2c, 0xe3, 0x77, 0x9a, 0x56, 0xda, 0x46,
		0xae, 0x1c, 0xa7, 0x36, 0x66, 0x84, 0x3e, 0x06, 0xb7, 0xd2, 0x10, 0x8e, 0x3b, 0x3d, 0xab, 0x6a,
		0x19, 0xd1, 0x48, 0x62, 0x27, 0xab, 0xe8, 0x53, 0x57, 0x3e, 0xff, 0xce, 0xc8, 0xcf, 0x4a, 0x7b,
		0xf9, 0xce, 0x07, 0xb6, 0xc6, 0x17, 0x01, 0x78, 0x77, 0xb5, 0xc8, 0x39, 0x61, 0x8d, 0x59, 0x52,
		0x27, 0xaf, 0x59, 0x46, 0x49, 0xb4, 0x08, 0xa4, 0x23, 0x99, 0xbb, 0x80, 0xf4, 0xf7, 0xe8, 0x72,
		0xc2, 0xeb, 0xd3, 0x94, 0xd1, 0x05, 0xab, 0x64, 0xae, 0x60, 0x47, 0x18, 0x0e, 0xf1, 0x6a, 0x6d,
		0xb3, 0xb2, 0x22, 0x6c, 0x48, 0x94, 0x7b, 0xa2, 0xe0, 0x29, 0xa3, 0xda, 0x43, 0xf2, 0xaf, 0x4d,
		0x35, 0xaa, 0xad, 0x42, 0xf7, 0x90, 0x9d, 0x11, 0x01, 0x7e, 0xdf, 0x50, 0x6e, 0x06, 0x6a, 0x07
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	n =
		0x9c003978e1f71731e2d1128e1be81bd6c99cd3251672b9c4186497243b17ce523ab113bd4fe397178e6fb5f3090b0680e42cfe78b3928c22da53ef43595b1c5792a2794f86622bc4a997932dc20df9cc429b5010e18d73c71796df877fb66e72d372081260fe7760d46ff916ac74292ee6e1659c2480a22c9522bdfa1beaa71ae2a5581eb0045bbfb7b1d687553cf3cfb061bd2e811e6085d9e4849f30735bb95b34ae40aef5a5eb399331704907b67094b8f418deb76b6ff419031a5b2cbc7b64487b49d418d67747f1609040f08adc42b1b0724869d838bb932511a580ac9d872d5a053f3b61b3f51c43fb2b3d510a696a9068e093eea0670e55e58571904fn;
	e =
		0xe58fn;
	message = new Uint8Array([
		0xc3, 0x23, 0x2d, 0x80, 0x60, 0xa3, 0xe3, 0xf8, 0x68, 0x7d, 0xc0, 0x5d, 0x88, 0x79, 0x00, 0x4b,
		0xf5, 0xc3, 0xa7, 0x03, 0x03, 0x36, 0xba, 0xca, 0xf4, 0xd9, 0xae, 0x8c, 0x0d, 0xaa, 0x21, 0xc5,
		0xf0, 0x9b, 0xc8, 0xa2, 0x25, 0xdb, 0xa9, 0x63, 0xfa, 0x56, 0x8a, 0x03, 0x8d, 0x7f, 0xa9, 0x1b,
		0x27, 0x4d, 0xad, 0x04, 0xcb, 0x83, 0xdd, 0x3b, 0x0f, 0x35, 0x90, 0x0a, 0x2b, 0x88, 0xe4, 0x65,
		0x50, 0xb9, 0xb3, 0x13, 0x3b, 0x61, 0xc3, 0x0e, 0x09, 0xf7, 0x3d, 0x2b, 0x4d, 0x96, 0x61, 0xfd,
		0x60, 0x00, 0x77, 0xf7, 0xf8, 0xe4, 0x09, 0xd2, 0xfc, 0x5c, 0x4f, 0x2e, 0x97, 0xba, 0xeb, 0x7c,
		0x8c, 0x84, 0xd7, 0x1b, 0xc9, 0xbd, 0x9b, 0xc1, 0x3e, 0x66, 0xc3, 0x1d, 0xef, 0x45, 0x90, 0xbb,
		0x48, 0xe5, 0xee, 0x27, 0xb1, 0xde, 0xa6, 0x55, 0x63, 0x56, 0xd5, 0x40, 0x7a, 0xc8, 0x9d, 0xd2
	]);
	signature = new Uint8Array([
		0x21, 0xbf, 0xdd, 0x61, 0x0a, 0x56, 0xfb, 0x8b, 0x3f, 0xba, 0x9f, 0x38, 0x41, 0xe7, 0xab, 0x9c,
		0xb2, 0xb9, 0x1d, 0x16, 0xc7, 0xbc, 0x3e, 0xba, 0xcc, 0x26, 0x62, 0x71, 0xe0, 0x5e, 0xad, 0xb6,
		0xd2, 0x09, 0xa0, 0x43, 0xa2, 0x9d, 0x54, 0x2b, 0x57, 0xad, 0x83, 0x2a, 0x3e, 0xd0, 0x39, 0x33,
		0x08, 0x8a, 0xbd, 0x7b, 0x56, 0xb8, 0x6f, 0xcc, 0x29, 0x5a, 0x95, 0xfa, 0x66, 0xe2, 0x7f, 0x5b,
		0x9b, 0x2c, 0x91, 0x9b, 0x82, 0xd4, 0x16, 0x5e, 0x2b, 0xc4, 0x2b, 0x9e, 0x46, 0xee, 0xbd, 0xc7,
		0xcd, 0xdb, 0x29, 0x88, 0x82, 0x81, 0x25, 0x0e, 0x69, 0x54, 0x19, 0x0f, 0x8e, 0x13, 0xb6, 0xd9,
		0xed, 0x69, 0x06, 0xe8, 0xd6, 0x03, 0x52, 0x0d, 0xee, 0xeb, 0x5c, 0xfe, 0x4f, 0x7e, 0x93, 0x2c,
		0x88, 0xec, 0x1e, 0xe2, 0xdc, 0x9b, 0x97, 0x1a, 0x02, 0x88, 0xbd, 0x71, 0xa4, 0x5c, 0xe6, 0x03,
		0x7d, 0x8d, 0x7e, 0xf2, 0x32, 0x5e, 0xca, 0xa5, 0x73, 0xc5, 0x7e, 0xc7, 0x53, 0x91, 0x6f, 0xbb,
		0x63, 0x35, 0xe9, 0xab, 0x5c, 0xb6, 0x95, 0xec, 0x05, 0x79, 0xb5, 0x11, 0x07, 0x4a, 0x6c, 0xac,
		0x3b, 0x21, 0x58, 0x4e, 0x5e, 0x45, 0x32, 0x62, 0x14, 0x51, 0x64, 0x1a, 0x4a, 0x09, 0x49, 0x1c,
		0x77, 0x55, 0x59, 0x72, 0xa5, 0xd4, 0x2a, 0x62, 0x7f, 0x50, 0xff, 0xd4, 0x90, 0xc7, 0x9e, 0x32,
		0xc8, 0x55, 0xae, 0xf0, 0xe2, 0x85, 0x9c, 0x93, 0x33, 0x21, 0x34, 0x17, 0x31, 0xe7, 0x96, 0xb2,
		0xed, 0x4c, 0x6c, 0x50, 0xa9, 0x8a, 0x3f, 0x3c, 0x69, 0x95, 0xbb, 0x6b, 0xd5, 0x3e, 0x52, 0xc5,
		0x31, 0xb1, 0x5d, 0x04, 0x20, 0x61, 0x18, 0x66, 0x77, 0xf9, 0x15, 0x8e, 0xea, 0xab, 0xcf, 0x30,
		0x26, 0x26, 0xc8, 0xee, 0x63, 0x96, 0x85, 0xc8, 0x32, 0xcf, 0x3b, 0xc4, 0x35, 0x7c, 0xbc, 0xa7
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033e58fn;
	message = new Uint8Array([
		0x0d, 0x82, 0x35, 0x88, 0x3f, 0x37, 0x65, 0x4b, 0x35, 0xd3, 0x56, 0x61, 0x74, 0xcf, 0x73, 0x1b,
		0x5b, 0x22, 0xa5, 0x4a, 0xc1, 0x57, 0x18, 0xf9, 0xd8, 0xe2, 0x41, 0x5c, 0x57, 0xb4, 0x20, 0x03,
		0xd8, 0x0d, 0xc2, 0x53, 0x7e, 0x92, 0x0b, 0x37, 0xdc, 0x9f, 0xb2, 0x13, 0x12, 0xde, 0x8d, 0xfa,
		0x39, 0x19, 0x0f, 0x20, 0x02, 0x4c, 0x0f, 0x92, 0x99, 0xff, 0xca, 0x24, 0xd0, 0xd2, 0x2c, 0xab,
		0x79, 0x5a, 0x4b, 0x6d, 0x13, 0x2b, 0x35, 0xd6, 0xaa, 0x36, 0xeb, 0x6d, 0xf8, 0x56, 0xad, 0x06,
		0xd0, 0x25, 0x78, 0x38, 0xbd, 0x14, 0xce, 0x11, 0xe6, 0xbb, 0xb5, 0x09, 0x34, 0x6d, 0x02, 0x35,
		0xb7, 0x10, 0xd7, 0xbd, 0x46, 0x2b, 0x6b, 0x90, 0x66, 0x41, 0x09, 0x56, 0x6e, 0x5e, 0x5c, 0xa7,
		0xe8, 0xef, 0xe9, 0x7a, 0x39, 0xd6, 0xdd, 0xe0, 0x85, 0xbe, 0x09, 0xf2, 0xcd, 0xac, 0x2b, 0x07
	]);
	signature = new Uint8Array([
		0x65, 0x30, 0xd4, 0x56, 0xe1, 0x42, 0x69, 0xbf, 0x37, 0xa9, 0x5a, 0xb7, 0xb2, 0xca, 0x4f, 0x53,
		0x4a, 0x47, 0x13, 0x50, 0x52, 0x66, 0x5a, 0x2b, 0x64, 0xe9, 0xef, 0xf9, 0x70, 0xa9, 0x56, 0x6f,
		0xf0, 0x30, 0x40, 0x29, 0xd2, 0x84, 0x4d, 0x56, 0x49, 0xe6, 0x43, 0x21, 0x2a, 0xaa, 0x7f, 0x1f,
		0x91, 0x03, 0xbd, 0x52, 0x88, 0xb1, 0xbe, 0xbb, 0x77, 0x97, 0xcd, 0x8d, 0xf3, 0x39, 0x33, 0x73,
		0x85, 0x2c, 0xfc, 0x70, 0x01, 0xa4, 0x25, 0x74, 0x99, 0xfb, 0xc9, 0x24, 0x44, 0x60, 0x9e, 0x0a,
		0xfe, 0xa0, 0x95, 0x92, 0x7e, 0xbb, 0x77, 0x3b, 0x7b, 0x66, 0x69, 0x62, 0xfa, 0xf0, 0x68, 0x6a,
		0x8b, 0x17, 0x3f, 0x44, 0x6f, 0xa5, 0x62, 0xe8, 0x2b, 0xe1, 0x46, 0x71, 0x11, 0xec, 0xc3, 0x86,
		0x97, 0x10, 0x3c, 0xdc, 0x1e, 0x70, 0x08, 0x90, 0xb6, 0x01, 0x04, 0xeb, 0x35, 0x57, 0x5d, 0x25,
		0xb9, 0x56, 0x50, 0x98, 0x54, 0x4a, 0x2e, 0x26, 0x00, 0x3b, 0x31, 0x50, 0xc9, 0xa5, 0x79, 0xc5,
		0x34, 0xa4, 0x4b, 0xd0, 0xc1, 0x56, 0x9b, 0x58, 0xd8, 0x71, 0xd6, 0xa5, 0xaf, 0x51, 0xb5, 0xec,
		0xf3, 0xcb, 0x2b, 0x06, 0x50, 0x79, 0x3a, 0xc9, 0x5a, 0x44, 0x59, 0x6f, 0x86, 0x72, 0x3c, 0x31,
		0xce, 0x4b, 0x3b, 0x13, 0x65, 0xdd, 0x61, 0xd2, 0xbb, 0xad, 0xf3, 0x94, 0xb1, 0x6f, 0x73, 0x46,
		0x08, 0xdd, 0xdf, 0x99, 0x15, 0x95, 0xac, 0xfd, 0x0a, 0xba, 0x42, 0xa1, 0x20, 0x95, 0x96, 0x6b,
		0xc0, 0x05, 0xc6, 0x7b, 0x60, 0x77, 0x6b, 0xa1, 0x04, 0xc9, 0x68, 0x1e, 0xfd, 0x38, 0xd2, 0xe9,
		0x1f, 0xd3, 0x99, 0x55, 0x88, 0xd9, 0xce, 0x24, 0x4c, 0x6b, 0xdf, 0xff, 0xb8, 0xe0, 0x08, 0x68,
		0x37, 0x94, 0x6c, 0x35, 0x62, 0x7a, 0x09, 0xa2, 0xf8, 0x3b, 0x32, 0x5a, 0xf7, 0x1f, 0x47, 0x4b
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xbaa86bn;
	message = new Uint8Array([
		0x84, 0xb1, 0xe3, 0xcd, 0x7c, 0x5d, 0x60, 0x11, 0xc5, 0x81, 0x30, 0x2e, 0x03, 0x48, 0x9f, 0xd3,
		0x7a, 0xef, 0xc8, 0x41, 0xba, 0xd6, 0x59, 0xfc, 0x81, 0xd7, 0x96, 0xc6, 0xdd, 0xd6, 0xa1, 0xcd,
		0x91, 0x99, 0xf8, 0x24, 0xba, 0xda, 0x3f, 0x70, 0xb2, 0x9b, 0x40, 0xe4, 0x35, 0xba, 0x30, 0x6f,
		0xc2, 0xc5, 0x33, 0x33, 0x44, 0x0f, 0x23, 0x3a, 0xf2, 0x04, 0x8d, 0x64, 0x74, 0xb9, 0xfd, 0xa4,
		0x47, 0xc8, 0x7c, 0x6c, 0x62, 0x5a, 0x56, 0x66, 0x1a, 0x85, 0x21, 0x65, 0x43, 0xd9, 0xfa, 0x9b,
		0x98, 0x35, 0x12, 0x0c, 0x5d, 0xdf, 0x6a, 0x42, 0x42, 0xd4, 0xda, 0x43, 0x8b, 0x5d, 0x58, 0xc0,
		0x6e, 0xe3, 0x77, 0x8f, 0xbc, 0x04, 0x2e, 0x5c, 0xc4, 0xe7, 0xdb, 0x9b, 0x75, 0xcc, 0x87, 0xc0,
		0xc2, 0xe7, 0x6c, 0xb3, 0x4b, 0x6e, 0xb4, 0x7e, 0x39, 0xf1, 0x84, 0x49, 0x69, 0xea, 0x39, 0x89
	]);
	signature = new Uint8Array([
		0x18, 0x64, 0xeb, 0x61, 0x9e, 0x35, 0x8d, 0x7e, 0x03, 0x40, 0xb5, 0x82, 0x28, 0x8e, 0x32, 0x90,
		0xd5, 0xf8, 0xca, 0xf1, 0xb6, 0x83, 0x1b, 0xfe, 0x59, 0x78, 0xf4, 0xea, 0x56, 0xd1, 0x57, 0x62,
		0x24, 0x7b, 0xfc, 0xec, 0x56, 0xe2, 0xa4, 0x4f, 0xe1, 0x15, 0x07, 0xe5, 0xeb, 0x6f, 0xda, 0x07,
		0x06, 0xb7, 0x28, 0x7b, 0x09, 0xea, 0x77, 0x0d, 0x57, 0x7c, 0xdf, 0x66, 0x0c, 0x52, 0x3a, 0x76,
		0xe2, 0xe7, 0x09, 0x52, 0x17, 0x7f, 0x02, 0x60, 0xcd, 0xba, 0x51, 0xef, 0xca, 0x71, 0x14, 0x8e,
		0x06, 0x9a, 0xe6, 0x54, 0x0f, 0x5c, 0x47, 0x22, 0xa4, 0xb4, 0xdb, 0x63, 0x36, 0x16, 0x8e, 0xea,
		0x86, 0x61, 0x2b, 0x6b, 0x4e, 0xcf, 0x8b, 0x5b, 0x2e, 0x1a, 0xdf, 0x3d, 0x4f, 0x79, 0xc3, 0x89,
		0x4c, 0x61, 0x7a, 0xe0, 0xba, 0x56, 0xa9, 0x30, 0xc6, 0x58, 0xf0, 0xf5, 0x5c, 0x0e, 0x5f, 0x27,
		0x19, 0xb4, 0xb5, 0x2b, 0x77, 0x85, 0xc3, 0x04, 0x89, 0xca, 0x13, 0xc9, 0x79, 0x9d, 0xed, 0x91,
		0x44, 0x40, 0x44, 0x09, 0xf2, 0x84, 0xc4, 0x15, 0x30, 0xfe, 0x35, 0x96, 0x7c, 0x2d, 0x84, 0x4d,
		0xcb, 0x1d, 0x2d, 0x80, 0xc1, 0x0a, 0x98, 0x51, 0x64, 0x46, 0x6c, 0xed, 0x3a, 0x4d, 0x74, 0x57,
		0x3b, 0x17, 0x5c, 0xe7, 0x28, 0x84, 0x18, 0xb3, 0x99, 0x62, 0xd4, 0xa3, 0x4c, 0xfb, 0xdd, 0x43,
		0xba, 0x5a, 0x6b, 0x73, 0xaf, 0x0f, 0x9e, 0xf5, 0x59, 0x46, 0xb6, 0x1b, 0xc7, 0xd5, 0xc0, 0xaf,
		0x9a, 0xb0, 0xe9, 0x9b, 0xc0, 0x84, 0x2e, 0xdf, 0xed, 0xfc, 0x91, 0xe2, 0x13, 0xf0, 0x21, 0x84,
		0x2c, 0xcc, 0x78, 0x5c, 0xd7, 0x3a, 0x5f, 0x85, 0xd8, 0xaa, 0x83, 0x71, 0xc8, 0x01, 0x51, 0xb8,
		0x36, 0x65, 0x10, 0x20, 0xe7, 0x1c, 0x52, 0x4f, 0x92, 0xd3, 0xc6, 0x54, 0xfe, 0xf0, 0xb3, 0x7a
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xe58fn;
	message = new Uint8Array([
		0xfc, 0xef, 0x06, 0x5e, 0x29, 0x3e, 0xcd, 0x29, 0xab, 0x52, 0x04, 0x6c, 0x68, 0xc6, 0xe9, 0x40,
		0xaa, 0x0e, 0x2d, 0x5f, 0xce, 0x5d, 0x4a, 0x2b, 0x40, 0xc5, 0x16, 0xf2, 0xa7, 0xa1, 0x98, 0x70,
		0x5c, 0x30, 0x1b, 0x95, 0x21, 0x82, 0x82, 0x89, 0x10, 0x98, 0xdb, 0xee, 0xd1, 0xc7, 0x37, 0x65,
		0x10, 0x5d, 0xb8, 0x53, 0x2e, 0x87, 0xeb, 0xe5, 0x37, 0x72, 0x58, 0x51, 0x15, 0xb1, 0x58, 0x5f,
		0x03, 0xdf, 0x27, 0x29, 0x44, 0x85, 0x3a, 0x1e, 0x14, 0x3d, 0xd3, 0x4d, 0xdf, 0x18, 0xd2, 0xe1,
		0xb1, 0x3e, 0xce, 0xe7, 0xee, 0xd4, 0x64, 0x58, 0x43, 0x23, 0xcf, 0x53, 0xdc, 0xf6, 0xb9, 0xaa,
		0xd7, 0x43, 0x51, 0xa0, 0xf9, 0x0e, 0x9e, 0xf1, 0xa0, 0x8b, 0x13, 0x13, 0xf9, 0x83, 0x63, 0xbc,
		0x73, 0xf8, 0x97, 0xa4, 0x74, 0x0c, 0x5d, 0x8c, 0x4a, 0x1f, 0xa3, 0x7f, 0x64, 0x38, 0x64, 0x58
	]);
	signature = new Uint8Array([
		0x00, 0xac, 0xfc, 0x93, 0xe4, 0x1f, 0xaf, 0x50, 0x04, 0xcb, 0xcc, 0x25, 0x2d, 0xa2, 0x90, 0xb9,
		0xcf, 0x66, 0xb5, 0x6a, 0x6a, 0x48, 0x49, 0xc5, 0x72, 0x46, 0x1d, 0x32, 0x12, 0xcc, 0x4c, 0xf1,
		0x02, 0x1e, 0xb9, 0x6e, 0x86, 0x51, 0x47, 0x5f, 0xac, 0x7d, 0xc8, 0x7f, 0xaf, 0x3a, 0x5b, 0x52,
		0x92, 0x31, 0x23, 0x37, 0x8c, 0x18, 0xcb, 0x83, 0x90, 0x6d, 0x1e, 0xe6, 0xe5, 0x35, 0x02, 0xbf,
		0x0e, 0x89, 0xce, 0x66, 0xf3, 0xcf, 0x5a, 0x4b, 0x7c, 0xaf, 0xa1, 0x3f, 0x2d, 0x97, 0xf9, 0x94,
		0x98, 0xc0, 0x05, 0x2f, 0xcd, 0x64, 0x05, 0x70, 0xe5, 0xe1, 0xda, 0xcd, 0xc6, 0x6e, 0x24, 0xc2,
		0xa5, 0x4f, 0x02, 0xbe, 0xd3, 0x38, 0xa2, 0x67, 0x48, 0xfd, 0x17, 0xc0, 0x7b, 0xfe, 0xe5, 0x49,
		0x2c, 0x4d, 0xbe, 0x4d, 0xfe, 0x11, 0x19, 0x32, 0xe3, 0x15, 0x33, 0x94, 0x72, 0x1b, 0x05, 0x56,
		0xa4, 0x40, 0x78, 0x8a, 0x2b, 0xce, 0xfa, 0xa2, 0x76, 0x5a, 0xde, 0x91, 0x66, 0x53, 0xf4, 0xaa,
		0xc2, 0x0d, 0x5e, 0xa5, 0x87, 0xfd, 0xe0, 0xfd, 0xc2, 0x55, 0xdc, 0x32, 0xc5, 0xaa, 0x52, 0xb0,
		0x5e, 0x3a, 0xc2, 0xdb, 0x4d, 0x7c, 0x3a, 0x8b, 0x02, 0xee, 0x17, 0x33, 0xfd, 0x30, 0x08, 0x01,
		0xd1, 0xbb, 0x8e, 0x86, 0x13, 0x38, 0x6f, 0x3d, 0xee, 0xf8, 0xdd, 0x49, 0x7b, 0xfe, 0x80, 0x35,
		0x23, 0x49, 0x1a, 0xb8, 0x85, 0x53, 0xdb, 0x60, 0xb0, 0x3d, 0x29, 0xc5, 0x5f, 0xf5, 0x2e, 0x71,
		0xc5, 0x46, 0x87, 0x3c, 0xb1, 0xb5, 0x2b, 0xea, 0x18, 0x53, 0xc8, 0xf0, 0x07, 0x0d, 0x17, 0x76,
		0x54, 0x55, 0x57, 0xbe, 0xcb, 0x6a, 0x11, 0x31, 0x0a, 0xcf, 0xe1, 0xbe, 0x06, 0x0d, 0xeb, 0x53,
		0xd1, 0x6f, 0x0d, 0xcb, 0xc3, 0x96, 0xc1, 0xd3, 0x0e, 0x03, 0xc4, 0xc0, 0x69, 0xc3, 0xad, 0x48
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xe58fn;
	message = new Uint8Array([
		0xa6, 0xa2, 0xc5, 0xc8, 0x71, 0x8c, 0x64, 0x10, 0x5f, 0xab, 0x8d, 0x44, 0xfc, 0x69, 0xd3, 0x34,
		0x27, 0x3a, 0xa7, 0x1e, 0x74, 0x75, 0xd9, 0x24, 0xce, 0x62, 0x5c, 0xfc, 0x61, 0x94, 0x4a, 0xea,
		0xb7, 0x79, 0x27, 0xeb, 0x20, 0x2f, 0x6a, 0x33, 0x58, 0x99, 0x39, 0xda, 0x64, 0xb3, 0x75, 0xd3,
		0xbd, 0x22, 0xf6, 0x1d, 0xb0, 0x10, 0x18, 0x3d, 0x05, 0x36, 0x76, 0xeb, 0xdf, 0x3a, 0xf5, 0x0c,
		0xe3, 0x3c, 0x05, 0xe0, 0x9c, 0xac, 0x23, 0x7d, 0x1e, 0x5e, 0xa2, 0x7c, 0xea, 0xe0, 0xac, 0xf2,
		0x12, 0x0b, 0x84, 0xa2, 0x9e, 0xd8, 0x0d, 0x70, 0x2d, 0x75, 0x90, 0x19, 0xe0, 0x98, 0xba, 0x22,
		0x73, 0x14, 0xe4, 0x0e, 0xad, 0xaa, 0x98, 0xd4, 0xfb, 0x21, 0x50, 0x90, 0x58, 0x98, 0x80, 0x79,
		0x6f, 0x1c, 0xd7, 0x13, 0x04, 0x76, 0xc2, 0xa6, 0x90, 0x46, 0x33, 0xee, 0x2b, 0x56, 0xa0, 0x14
	]);
	signature = new Uint8Array([
		0x8e, 0xc5, 0xb4, 0xe7, 0x67, 0x19, 0x75, 0x68, 0x6b, 0x72, 0xeb, 0x39, 0x30, 0xf7, 0x7e, 0xf3,
		0x62, 0x21, 0x19, 0xd0, 0xb2, 0xae, 0x06, 0x18, 0xfa, 0x52, 0xc7, 0x41, 0x05, 0x19, 0xc4, 0xf8,
		0x46, 0xc9, 0x86, 0x00, 0x1d, 0x3d, 0x82, 0x84, 0x4a, 0xe4, 0xc1, 0x3e, 0x99, 0xde, 0xe4, 0x63,
		0x44, 0x8a, 0x49, 0x8a, 0x65, 0x2e, 0x9b, 0x72, 0x5d, 0xde, 0xb6, 0x32, 0x3b, 0x83, 0xd5, 0x52,
		0x16, 0x37, 0xbe, 0x0d, 0xee, 0x7b, 0x22, 0x4c, 0x50, 0xdc, 0xaf, 0x6c, 0x7b, 0x9a, 0x2d, 0x26,
		0xf9, 0xb0, 0xaa, 0xd8, 0x1a, 0xc6, 0xe4, 0x65, 0x1f, 0x24, 0x1d, 0x7a, 0x86, 0x0b, 0x51, 0xc9,
		0x6e, 0xbf, 0xc3, 0xdf, 0x97, 0x8c, 0x53, 0x73, 0xb7, 0x84, 0x6d, 0x31, 0x39, 0xf5, 0x09, 0xdc,
		0x16, 0x72, 0x6f, 0x71, 0x2c, 0x0e, 0x61, 0xaf, 0x62, 0x0b, 0x2c, 0x6d, 0xb0, 0x95, 0x5d, 0x0a,
		0xe9, 0xcd, 0x47, 0x60, 0xbb, 0x9d, 0xe6, 0x15, 0x1e, 0x04, 0xbf, 0xa1, 0x9d, 0xf4, 0xd5, 0xac,
		0xa2, 0x57, 0x6f, 0x91, 0xee, 0x7a, 0xba, 0x9e, 0xb4, 0x46, 0xfe, 0xe7, 0x7c, 0x60, 0x4f, 0xaa,
		0x5a, 0xf8, 0x75, 0x36, 0xf2, 0x2f, 0xa6, 0xe2, 0x39, 0xe8, 0x98, 0xde, 0x90, 0x66, 0x42, 0xfc,
		0x65, 0x94, 0xbe, 0x93, 0x28, 0x57, 0x1b, 0x35, 0xa3, 0xa8, 0x42, 0x0a, 0xc6, 0x97, 0xef, 0x99,
		0x30, 0x16, 0xf7, 0x8d, 0xef, 0x8a, 0x17, 0xd1, 0x36, 0x98, 0xcc, 0x4c, 0x18, 0x76, 0xee, 0x10,
		0x06, 0xd8, 0x14, 0xdc, 0x60, 0x16, 0x12, 0x14, 0xa8, 0xf8, 0xb6, 0xf2, 0xa3, 0x45, 0xc8, 0xb0,
		0xc0, 0xfc, 0x64, 0x58, 0x73, 0xb6, 0xbf, 0x9d, 0x2f, 0xba, 0xce, 0x22, 0x46, 0xf6, 0x43, 0xa6,
		0xd3, 0xa2, 0xe0, 0xb8, 0x89, 0x29, 0x62, 0x3a, 0x2e, 0x2a, 0x73, 0x82, 0x3f, 0x6e, 0x32, 0x5a
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(true);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033e58fn;
	message = new Uint8Array([
		0x79, 0x22, 0x0b, 0x8d, 0x86, 0x94, 0x2a, 0x13, 0x86, 0x15, 0x60, 0x88, 0x2a, 0x66, 0xfb, 0x4c,
		0x5c, 0x92, 0x6a, 0x66, 0x1b, 0x74, 0xad, 0x25, 0x86, 0x79, 0x0a, 0x06, 0x36, 0xa8, 0x02, 0xd9,
		0xd1, 0xdf, 0x83, 0x20, 0xdc, 0x5f, 0x5f, 0xb8, 0xd1, 0x8a, 0xfd, 0xbb, 0x72, 0xec, 0x4f, 0xa4,
		0x5c, 0x79, 0x03, 0xb4, 0xdf, 0x15, 0xfe, 0x95, 0x0d, 0x5a, 0x06, 0x3e, 0x11, 0x95, 0xbe, 0x16,
		0xc3, 0x11, 0xd8, 0x5c, 0x79, 0x99, 0x86, 0xc6, 0x1f, 0x38, 0x31, 0x68, 0x8a, 0x43, 0x6e, 0xd8,
		0x09, 0x99, 0x2e, 0x90, 0x3d, 0x2a, 0x34, 0x93, 0x2b, 0xb6, 0xcd, 0x54, 0x90, 0xd7, 0xbb, 0xd3,
		0x74, 0x42, 0x72, 0x09, 0x02, 0x4a, 0x87, 0x86, 0x97, 0xa6, 0x65, 0x59, 0x19, 0x73, 0x42, 0x30,
		0x8a, 0x7d, 0x51, 0xc0, 0xdd, 0xba, 0x39, 0x67, 0x08, 0x17, 0xc7, 0x10, 0x5a, 0x77, 0xdf, 0x58
	]);
	signature = new Uint8Array([
		0x54, 0x83, 0x54, 0x66, 0x39, 0x77, 0x84, 0xe6, 0x22, 0x92, 0x28, 0xea, 0x1e, 0x46, 0x2b, 0x37,
		0xd7, 0x77, 0x57, 0xba, 0x17, 0xa6, 0x62, 0x4f, 0xbd, 0x32, 0x79, 0x40, 0x8e, 0x89, 0xfd, 0xda,
		0xb2, 0x23, 0x4f, 0x5e, 0xe2, 0x0b, 0x56, 0xcc, 0x70, 0x95, 0xdc, 0xee, 0x3c, 0xf0, 0x33, 0xe4,
		0xb0, 0x4c, 0xeb, 0xb9, 0x77, 0x19, 0x97, 0xe3, 0xb9, 0xf5, 0x0d, 0xde, 0xa2, 0x90, 0x08, 0x08,
		0x88, 0xfb, 0x40, 0x6c, 0xf1, 0xaf, 0x4b, 0x2d, 0x14, 0xc1, 0x2b, 0xe7, 0x88, 0xcb, 0xbc, 0x64,
		0x54, 0xc5, 0x22, 0x76, 0xbf, 0x64, 0xac, 0x3b, 0x31, 0x58, 0x04, 0x9c, 0xc7, 0x89, 0x86, 0xe3,
		0x84, 0x13, 0xbb, 0x09, 0xd4, 0x08, 0xf0, 0x4e, 0x82, 0x34, 0x22, 0x8a, 0x94, 0x03, 0xeb, 0x90,
		0x1d, 0x6f, 0x2f, 0xb2, 0x18, 0x87, 0x99, 0x6f, 0xb2, 0x28, 0xc2, 0x92, 0xa2, 0xaa, 0x99, 0xfe,
		0x84, 0x56, 0x17, 0x21, 0x45, 0x93, 0x96, 0x06, 0xeb, 0xa9, 0xcf, 0xaa, 0xe6, 0x94, 0xe5, 0xfe,
		0x82, 0x4f, 0xfc, 0x3a, 0x55, 0x47, 0x19, 0x5e, 0x24, 0xaf, 0x50, 0x39, 0xaa, 0x1f, 0x1d, 0xca,
		0xc9, 0xa9, 0xcf, 0x54, 0xc5, 0x10, 0x99, 0xf8, 0x2c, 0xb1, 0xa5, 0xaa, 0xcd, 0x8c, 0x94, 0x19,
		0xd1, 0xc7, 0xce, 0x88, 0x03, 0x66, 0xf1, 0x27, 0x6f, 0xae, 0x7b, 0x9e, 0x18, 0x48, 0xe9, 0xce,
		0xaa, 0x7e, 0xf7, 0x24, 0x4e, 0x5c, 0xb7, 0x88, 0xf5, 0x24, 0xbb, 0x50, 0x23, 0x1e, 0xf4, 0xd8,
		0x1e, 0x14, 0xd5, 0x9d, 0x3f, 0x88, 0x4d, 0xbf, 0xf5, 0x75, 0xe9, 0x53, 0xa1, 0x45, 0xfc, 0x45,
		0xf7, 0x66, 0x10, 0x25, 0xe1, 0xf6, 0xfd, 0x95, 0x87, 0x4e, 0xba, 0x80, 0x3d, 0xe0, 0x3b, 0x5f,
		0xb0, 0xa8, 0xf5, 0xea, 0xbd, 0xc7, 0x39, 0xfb, 0xb9, 0x1c, 0x45, 0xad, 0x1c, 0x29, 0x12, 0x8f
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	n =
		0x95a31458ca41cf7a280fd060660fbecec18b6242b72cf99d8039a890ce07aa5acf432d9b400160374b3626a46c6107cdf51f1e8b519ac26ef169cd75d3c5e43267ff391dd0a93730c39c166fb77c4c5409c19ea252bfc8e990d873368607c8ce032bc0a6968a0a6a5a918d49d35a3fab9a3e69632816026d433d65bf765cda3738e8c12f43e869089296b36ee84704dadc37db62fd18f380ef76334d882809881d6a6dc8a8f49c4595cca6f85e9dd8ad616cd984a27f4938fb9aacfca473f1a4f00b0db47b471f04b4170ea909cced5960d4a3d269de9ad4b2a63e8ab712f1f0f7c3e9ad471e15bcef3614eb4dce291eae0785ccf2399b16b51a84d1df8ab395n;
	e =
		0xcfdb6fn;
	message = new Uint8Array([
		0xd5, 0xf5, 0xd5, 0x67, 0x51, 0x2a, 0x89, 0x9c, 0x01, 0x68, 0x24, 0x0b, 0x31, 0x9e, 0x6a, 0xbc,
		0xd8, 0xb9, 0x2a, 0x8d, 0x6e, 0x20, 0xb9, 0xd3, 0xff, 0x80, 0xa0, 0x44, 0x7e, 0xcf, 0x92, 0x15,
		0x5b, 0x8b, 0xa1, 0x5f, 0x57, 0x43, 0xb1, 0xc7, 0x98, 0x59, 0x2c, 0x5e, 0xf8, 0x06, 0xf7, 0xc6,
		0xa3, 0x9e, 0xa5, 0x97, 0xe1, 0x16, 0xeb, 0x00, 0x30, 0xc3, 0x54, 0xb2, 0x96, 0x64, 0x36, 0xf9,
		0x35, 0x63, 0xe5, 0x2c, 0x20, 0x58, 0x26, 0x48, 0x6d, 0xcf, 0xe7, 0xd8, 0x8c, 0x4b, 0x2d, 0x18,
		0xd7, 0x8b, 0x4d, 0x59, 0x69, 0x0b, 0x5f, 0xa7, 0x34, 0xce, 0xf0, 0xaa, 0x4e, 0x5b, 0xf7, 0xca,
		0x8c, 0x06, 0x0a, 0x96, 0x52, 0x70, 0xd2, 0x67, 0xa9, 0x51, 0xbd, 0x40, 0x92, 0x75, 0xf2, 0xf9,
		0x9b, 0x05, 0x8a, 0x9d, 0xaf, 0x08, 0xfd, 0x10, 0x32, 0x29, 0xda, 0xf5, 0x4e, 0xbb, 0xbc, 0xce
	]);
	signature = new Uint8Array([
		0x67, 0x24, 0x03, 0xce, 0x06, 0xf1, 0xab, 0x0e, 0xa4, 0x2f, 0xd0, 0x43, 0x66, 0x6e, 0x46, 0x23,
		0x29, 0x9f, 0xce, 0xfe, 0xad, 0x6c, 0xd2, 0x04, 0x59, 0x91, 0x02, 0xfc, 0x8d, 0x54, 0x3d, 0x3b,
		0xc9, 0x33, 0x42, 0xfc, 0xaa, 0x12, 0x62, 0xd5, 0x2e, 0x6f, 0xf3, 0x44, 0xfe, 0xbd, 0xa6, 0xfa,
		0xa5, 0x71, 0x19, 0xee, 0x74, 0x18, 0xcb, 0x78, 0xa8, 0x93, 0xae, 0xb2, 0x45, 0xf6, 0x18, 0xc0,
		0x72, 0x21, 0x4e, 0x97, 0x40, 0xab, 0xfa, 0xb9, 0x98, 0xa0, 0x89, 0x6a, 0x1c, 0x90, 0x66, 0xa8,
		0x23, 0xdd, 0x62, 0xb5, 0xdd, 0xf9, 0xe9, 0xfb, 0xd7, 0xbd, 0x6b, 0x68, 0x43, 0x7e, 0xef, 0x59,
		0x5e, 0x90, 0xe7, 0x25, 0x18, 0x0b, 0x3c, 0xb1, 0x23, 0x01, 0xa9, 0x89, 0xcb, 0x78, 0xea, 0x2d,
		0xd4, 0x87, 0x30, 0x52, 0x1c, 0xaf, 0x4b, 0x27, 0x54, 0x67, 0x9c, 0x4d, 0xf2, 0xd8, 0xe2, 0xc1,
		0x2b, 0x8c, 0x8e, 0x55, 0xf1, 0x32, 0x7f, 0xc6, 0x62, 0x4d, 0x85, 0x55, 0x55, 0x58, 0xfa, 0xd1,
		0x98, 0xdb, 0x69, 0x73, 0xab, 0x15, 0x5d, 0xeb, 0x56, 0xcb, 0xcf, 0xcd, 0x44, 0xd8, 0xa6, 0x1f,
		0x90, 0x40, 0x0d, 0xd3, 0x76, 0x0b, 0x19, 0xaa, 0xba, 0x4d, 0xc1, 0x67, 0x74, 0x2b, 0xfe, 0x1d,
		0xa0, 0xd9, 0xce, 0x20, 0x03, 0x6c, 0x28, 0x47, 0x29, 0xe1, 0x6b, 0x8a, 0xff, 0x5b, 0x6a, 0xc3,
		0x12, 0x1f, 0xba, 0xe8, 0xcd, 0x55, 0xfc, 0x07, 0x79, 0xfd, 0x0e, 0xf7, 0xb3, 0x82, 0xc8, 0x5d,
		0xb8, 0x8b, 0x2a, 0xe7, 0x92, 0x70, 0xb1, 0x11, 0x08, 0x75, 0x92, 0x3b, 0x2d, 0x72, 0xd8, 0xed,
		0x7d, 0x37, 0xe2, 0xbd, 0xf5, 0x39, 0x6b, 0x15, 0x8a, 0x89, 0xfd, 0x1a, 0xe9, 0x5c, 0x14, 0x67,
		0x37, 0xdb, 0x02, 0x8a, 0xd6, 0xcb, 0xeb, 0x0e, 0xd4, 0x3e, 0xdd, 0x42, 0x11, 0x97, 0xd2, 0x3a
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xe91n;
	message = new Uint8Array([
		0x6b, 0xa3, 0xf3, 0x4b, 0xde, 0x03, 0xe4, 0x82, 0x59, 0x72, 0x3b, 0xd5, 0x99, 0x46, 0x42, 0x74,
		0xdf, 0x4d, 0xe2, 0xb6, 0xf3, 0xbf, 0xc3, 0xb0, 0x69, 0x70, 0xb5, 0x07, 0x23, 0x4a, 0x4f, 0x02,
		0x17, 0xfb, 0xd5, 0xe3, 0x52, 0xeb, 0x5f, 0x78, 0x3d, 0x71, 0x38, 0xed, 0x20, 0x46, 0x85, 0xe4,
		0xe4, 0x3a, 0x27, 0xc7, 0x1d, 0x25, 0xe2, 0x5d, 0x48, 0x21, 0xbe, 0x9c, 0x50, 0xf6, 0xad, 0xbf,
		0x58, 0xd6, 0x6f, 0x98, 0xb4, 0x4b, 0xb3, 0x26, 0x38, 0x6d, 0x7f, 0x6a, 0xb6, 0x58, 0xd1, 0x77,
		0xc2, 0xdd, 0x87, 0xc9, 0xb8, 0x78, 0x7c, 0xd7, 0x01, 0x82, 0xf4, 0xeb, 0x91, 0xa8, 0x3a, 0x32,
		0xb4, 0x9c, 0x87, 0x0f, 0x0b, 0x0a, 0x26, 0xb5, 0xd1, 0xce, 0xd6, 0xf5, 0x63, 0x64, 0x70, 0x54,
		0x00, 0xa0, 0xc9, 0x61, 0xcd, 0x9f, 0xda, 0x46, 0x1c, 0xfd, 0x1e, 0x9c, 0xed, 0x48, 0x3c, 0x84
	]);
	signature = new Uint8Array([
		0x23, 0x6f, 0x23, 0xde, 0x25, 0xbb, 0x36, 0x94, 0xf5, 0xad, 0x9f, 0x09, 0x22, 0x4f, 0x5e, 0xc1,
		0xe7, 0x8c, 0xd7, 0xf3, 0x71, 0xec, 0x50, 0x09, 0x73, 0x27, 0x02, 0x6f, 0xa5, 0x3b, 0x16, 0x89,
		0xa9, 0x5e, 0xaf, 0x54, 0x73, 0x8c, 0xb7, 0x5e, 0x5a, 0xbb, 0xa8, 0x7a, 0x96, 0x4d, 0x32, 0x81,
		0x7f, 0xd5, 0x07, 0x1f, 0xeb, 0xd8, 0x4d, 0x60, 0xc7, 0xb1, 0x1d, 0x95, 0xe3, 0x3a, 0x7f, 0x90,
		0xf2, 0x22, 0x59, 0xbc, 0xaf, 0xb9, 0x42, 0x5c, 0xc1, 0xa7, 0x93, 0x05, 0xa0, 0x0a, 0x1b, 0x8e,
		0xcf, 0xc3, 0xbf, 0xab, 0x32, 0x6b, 0x64, 0x63, 0xee, 0x57, 0xd1, 0xe4, 0x35, 0xdb, 0x91, 0xf4,
		0x5c, 0xf4, 0xed, 0xad, 0x0f, 0x9e, 0xe5, 0x0d, 0xbe, 0x42, 0x13, 0x0c, 0xfd, 0x1b, 0xc4, 0x24,
		0x90, 0x6d, 0xea, 0xb4, 0x90, 0x65, 0x71, 0x68, 0x8d, 0x1a, 0x51, 0x4d, 0x98, 0xdd, 0x07, 0x41,
		0x39, 0xd5, 0x73, 0x04, 0xc0, 0xc2, 0xd8, 0xa8, 0x7e, 0xf5, 0xf8, 0x76, 0x64, 0x86, 0xda, 0x8d,
		0xf8, 0x27, 0xf9, 0xe0, 0xc8, 0x1f, 0xe3, 0x46, 0x5e, 0xa5, 0x2d, 0x19, 0x84, 0xd7, 0x38, 0xb9,
		0xfe, 0x93, 0x68, 0xa0, 0xd0, 0x53, 0x84, 0xe9, 0xcb, 0x29, 0x83, 0x30, 0x67, 0x1f, 0x65, 0xfe,
		0x52, 0x06, 0x2a, 0x0d, 0x3c, 0x4a, 0xf2, 0x10, 0xad, 0x47, 0x1b, 0xd5, 0xdd, 0xf9, 0xd7, 0x27,
		0x87, 0xf4, 0x0e, 0xde, 0x3b, 0x77, 0x29, 0x7c, 0x1d, 0x3a, 0x5b, 0x29, 0xcc, 0xad, 0xc5, 0x74,
		0xe9, 0x00, 0x1b, 0xef, 0x89, 0xe4, 0xac, 0x09, 0x39, 0x86, 0xbb, 0xdf, 0x04, 0x8d, 0x7b, 0x63,
		0xbc, 0xc0, 0x72, 0xa3, 0xcd, 0xe8, 0x00, 0xed, 0xa6, 0x3b, 0xfa, 0x8e, 0x06, 0x8f, 0xff, 0x4c,
		0xb9, 0xf1, 0x5b, 0x5f, 0x98, 0xc2, 0x55, 0xfc, 0xde, 0x6d, 0x46, 0xf1, 0x39, 0xe4, 0xd3, 0x0b
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000646e91n;
	message = new Uint8Array([
		0xf3, 0x16, 0x9d, 0xe4, 0x6a, 0xf8, 0x5c, 0xb5, 0x10, 0xfb, 0xb4, 0xcf, 0x9c, 0x0a, 0xad, 0xa9,
		0xf8, 0x75, 0x30, 0x1c, 0xea, 0xfb, 0xc8, 0x18, 0xf4, 0x28, 0xa5, 0x96, 0x79, 0xe1, 0xe6, 0xcd,
		0x20, 0x3d, 0x18, 0xa9, 0x7e, 0x96, 0xf9, 0x79, 0xef, 0xe0, 0x82, 0xe8, 0xc4, 0x3a, 0x25, 0x2e,
		0xa4, 0xc3, 0x54, 0x87, 0x2c, 0xaf, 0x42, 0xe4, 0xd9, 0x9a, 0xed, 0xe1, 0x28, 0x1b, 0x5c, 0xf8,
		0xfb, 0x9d, 0x25, 0xf4, 0x3f, 0x6a, 0x33, 0xa8, 0xcc, 0x09, 0xc6, 0xe0, 0x8c, 0xca, 0xbb, 0x98,
		0xe0, 0x9f, 0x0e, 0x6c, 0x3f, 0x2d, 0x9d, 0x50, 0x21, 0x23, 0x2f, 0x81, 0x1b, 0xcb, 0xb4, 0xbc,
		0x4b, 0xdf, 0xcf, 0xad, 0xf6, 0x9d, 0x91, 0xaa, 0x70, 0x1d, 0x88, 0xa1, 0x3c, 0xe3, 0xf8, 0x4f,
		0x75, 0xb1, 0x68, 0xb3, 0x6c, 0x9e, 0x60, 0xc3, 0x93, 0x6c, 0x72, 0x5d, 0x9a, 0x17, 0x77, 0x80
	]);
	signature = new Uint8Array([
		0x47, 0xb7, 0x4a, 0xb9, 0x6c, 0x33, 0x3f, 0x1b, 0x60, 0x31, 0x39, 0x98, 0xe9, 0xbd, 0xf5, 0xe3,
		0x13, 0x53, 0x4c, 0x96, 0xc2, 0xf7, 0xb1, 0x39, 0xf4, 0xfd, 0xc8, 0x29, 0x5c, 0x8e, 0x53, 0xa1,
		0xae, 0x27, 0x5b, 0x23, 0x5a, 0x69, 0x31, 0xc6, 0x96, 0x90, 0xba, 0x8f, 0x1c, 0xd5, 0xbf, 0x9d,
		0x3e, 0x1a, 0x6f, 0x8a, 0x23, 0xc9, 0xf0, 0x26, 0xa5, 0x92, 0xdd, 0xcf, 0xe3, 0x5d, 0xc4, 0x98,
		0xeb, 0xef, 0x29, 0x2e, 0xd4, 0x9a, 0x87, 0xb4, 0x81, 0x3d, 0xdc, 0xf0, 0x4c, 0xfa, 0xe8, 0xaa,
		0xa6, 0x97, 0x8f, 0x62, 0x9f, 0xf5, 0x8f, 0x24, 0x96, 0x09, 0x85, 0xa4, 0x52, 0xa0, 0x94, 0x39,
		0xa3, 0xaa, 0x02, 0x76, 0x68, 0x05, 0x5a, 0xc5, 0x90, 0x0d, 0x62, 0xf5, 0xf5, 0x84, 0xf8, 0xbd,
		0xfa, 0xaa, 0x72, 0x48, 0x97, 0x92, 0xfc, 0x32, 0xb6, 0xad, 0xc9, 0xd2, 0x89, 0xdc, 0xbf, 0x5b,
		0xb9, 0xa2, 0x78, 0xad, 0xa1, 0x39, 0x2b, 0x42, 0xa4, 0xe5, 0xb9, 0x71, 0x4a, 0x1c, 0x3a, 0xf0,
		0x0f, 0x93, 0x79, 0x62, 0x47, 0x7f, 0xe7, 0x2b, 0x82, 0x0d, 0xd4, 0xfc, 0xe5, 0xcd, 0x2e, 0x25,
		0xe6, 0xa5, 0x60, 0x81, 0xd6, 0x11, 0x9d, 0xf4, 0x74, 0xb7, 0xb7, 0x58, 0x6b, 0x80, 0x16, 0x80,
		0xc4, 0xec, 0xf9, 0xd0, 0x67, 0xf5, 0x84, 0xd7, 0x9a, 0x9c, 0xd0, 0xf4, 0x51, 0xaa, 0x90, 0x64,
		0x40, 0x96, 0xbf, 0x9e, 0x80, 0xbd, 0x46, 0x97, 0x27, 0xad, 0x7b, 0x7c, 0xee, 0xb9, 0xcb, 0xa6,
		0x3d, 0xe2, 0xab, 0xd4, 0x23, 0xea, 0x96, 0x67, 0x5d, 0x8f, 0xef, 0x64, 0x13, 0x0e, 0x35, 0x7a,
		0x5d, 0x2f, 0x67, 0xda, 0x0f, 0xa5, 0x28, 0xfb, 0x3d, 0xdb, 0xe2, 0xfd, 0x55, 0x30, 0x33, 0xe5,
		0x17, 0x53, 0x3c, 0x6d, 0x1c, 0x30, 0x1c, 0x09, 0x4c, 0xe0, 0x89, 0x9b, 0xcb, 0xbc, 0xd4, 0xf2
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(true);

	e =
		0xe91n;
	message = new Uint8Array([
		0x59, 0x9d, 0x4c, 0xeb, 0x77, 0x4e, 0x49, 0x06, 0x33, 0x2e, 0xaa, 0x21, 0x6b, 0x2f, 0xe8, 0xe1,
		0xfa, 0x52, 0x50, 0x6f, 0x38, 0x1b, 0xaa, 0x87, 0xc3, 0x43, 0x19, 0xcc, 0x80, 0xac, 0x42, 0x5f,
		0xdc, 0x9a, 0xb0, 0xaf, 0x58, 0x1f, 0x77, 0x93, 0x44, 0xd7, 0x18, 0x96, 0xca, 0xd6, 0xa5, 0x91,
		0x2f, 0xdf, 0x26, 0x80, 0x56, 0xd6, 0x3a, 0x8e, 0x86, 0x78, 0x02, 0x72, 0x6c, 0x4a, 0x3a, 0xfe,
		0x64, 0xcf, 0xa9, 0xf5, 0xf4, 0xfe, 0xbc, 0x1e, 0x99, 0xf3, 0x6e, 0x96, 0xc7, 0xe5, 0x6a, 0x6a,
		0x2b, 0x58, 0x74, 0x65, 0x33, 0x94, 0x05, 0x27, 0xd0, 0x55, 0x35, 0x77, 0x7b, 0xc4, 0xde, 0xdb,
		0x76, 0xa6, 0xff, 0x65, 0x54, 0xd4, 0x5e, 0xcf, 0xbb, 0xeb, 0x72, 0xcb, 0x69, 0x44, 0x7f, 0x94,
		0x75, 0x27, 0x03, 0xc9, 0xd7, 0x3b, 0x51, 0x7b, 0x2b, 0x41, 0x7c, 0x85, 0xb2, 0x02, 0x76, 0x1b
	]);
	signature = new Uint8Array([
		0x07, 0x45, 0x45, 0x7a, 0xf5, 0x2f, 0xca, 0x56, 0xab, 0xd8, 0x08, 0xf0, 0x94, 0x95, 0x1d, 0x3e,
		0xec, 0xab, 0x89, 0xec, 0x10, 0xb7, 0x4d, 0xd4, 0x9d, 0x51, 0xa9, 0x24, 0x1c, 0x3b, 0x85, 0x97,
		0x27, 0x55, 0xa1, 0xf8, 0x0b, 0xda, 0x2c, 0xc9, 0x6c, 0xda, 0x7c, 0xfd, 0x54, 0x9e, 0xec, 0x82,
		0x0b, 0xd2, 0xf9, 0x99, 0x20, 0xeb, 0xef, 0x1d, 0x10, 0x72, 0x29, 0x18, 0xad, 0xca, 0x8d, 0x40,
		0x8c, 0x3c, 0x88, 0x3d, 0x7c, 0x25, 0x7b, 0x11, 0x78, 0x42, 0x42, 0x0a, 0xfb, 0xce, 0x88, 0x15,
		0x9c, 0x7a, 0xc4, 0xf4, 0xbf, 0x27, 0xf0, 0x39, 0xc2, 0x4c, 0x19, 0xdd, 0x27, 0x56, 0x43, 0xd0,
		0xea, 0xd1, 0x11, 0xd5, 0xf0, 0x49, 0x12, 0x57, 0x1c, 0xd3, 0xa7, 0xd4, 0x0e, 0x3f, 0x83, 0xc3,
		0x2b, 0x44, 0x76, 0x2e, 0xb6, 0xd2, 0xe2, 0xde, 0x22, 0xac, 0x00, 0x66, 0x43, 0xc4, 0x98, 0xce,
		0x55, 0xf6, 0x11, 0x64, 0x63, 0x33, 0x6c, 0xfc, 0xfd, 0x0c, 0xcd, 0xab, 0x25, 0x0e, 0x99, 0x31,
		0xfd, 0xe6, 0x8c, 0x97, 0x96, 0xe0, 0x5b, 0x01, 0x2a, 0xdf, 0xb7, 0x63, 0x59, 0x49, 0x1f, 0x26,
		0xf6, 0x9c, 0xa9, 0xd0, 0x6b, 0x43, 0x84, 0x3a, 0x49, 0x76, 0xf2, 0xb0, 0x17, 0x64, 0x3e, 0x6c,
		0xb8, 0x0b, 0x8d, 0xba, 0x2a, 0x01, 0xf1, 0xb0, 0x12, 0x31, 0xac, 0xe0, 0x75, 0xab, 0x31, 0xd4,
		0x03, 0x19, 0xb3, 0x0a, 0xd7, 0x38, 0xf6, 0x2d, 0x2b, 0x8a, 0x1f, 0x43, 0xff, 0x1b, 0xf6, 0x7f,
		0x83, 0x33, 0x0f, 0xad, 0x67, 0xf9, 0x4a, 0x39, 0xc2, 0xc5, 0x1d, 0xb2, 0x3a, 0xa7, 0x75, 0xaa,
		0x43, 0xb7, 0x08, 0xef, 0x25, 0xc9, 0xc6, 0x2e, 0xb5, 0x65, 0x60, 0x6e, 0x4f, 0x50, 0x02, 0xab,
		0x15, 0xb0, 0x0d, 0xfa, 0x82, 0x9c, 0x99, 0xe3, 0xdd, 0x96, 0xb4, 0x54, 0xc7, 0x44, 0x81, 0x74
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xe91n;
	message = new Uint8Array([
		0x73, 0xa1, 0x25, 0xe5, 0x70, 0x5e, 0x14, 0xe1, 0x5f, 0x24, 0x46, 0xfe, 0x32, 0x6f, 0x56, 0x37,
		0x85, 0xbc, 0xde, 0x93, 0xd2, 0xee, 0x46, 0xab, 0xe4, 0xef, 0xd9, 0x66, 0x8e, 0x9a, 0x1e, 0x08,
		0x9c, 0xd9, 0x65, 0x6b, 0x0a, 0x0a, 0xa0, 0x8b, 0x74, 0xa8, 0x74, 0x49, 0xce, 0x27, 0x90, 0x68,
		0x55, 0x1f, 0x3e, 0xdc, 0xc5, 0xad, 0x37, 0x44, 0xcd, 0x17, 0xbc, 0xb5, 0xc0, 0xae, 0xe2, 0xb9,
		0x8d, 0xf9, 0x2e, 0x97, 0xf1, 0x0f, 0x61, 0xd5, 0xeb, 0x45, 0x95, 0xfc, 0x71, 0x09, 0x89, 0x9b,
		0x61, 0x0e, 0x3a, 0x8e, 0xba, 0xaa, 0xb3, 0x80, 0x0c, 0x7c, 0x25, 0xaf, 0x2d, 0x51, 0x3a, 0xef,
		0x2e, 0x48, 0xa7, 0xf2, 0x8d, 0x35, 0x01, 0xc6, 0xac, 0x44, 0xd1, 0x9f, 0x82, 0xdf, 0xea, 0xd7,
		0x91, 0xd1, 0xfa, 0x33, 0x18, 0xab, 0x60, 0x68, 0x89, 0x66, 0x3d, 0xde, 0x3d, 0x4b, 0xce, 0xb3
	]);
	signature = new Uint8Array([
		0x7a, 0x7a, 0x4e, 0x5b, 0x34, 0x9a, 0x06, 0xdf, 0xdb, 0xc9, 0xab, 0x95, 0x8d, 0x5f, 0xb7, 0x0b,
		0x65, 0x0b, 0x1e, 0xb2, 0xf7, 0xeb, 0x43, 0xcf, 0xdd, 0x75, 0x08, 0x06, 0x2e, 0xfc, 0x9a, 0xda,
		0x3e, 0xc0, 0x73, 0x9a, 0xd9, 0x5b, 0x20, 0x66, 0x00, 0x9f, 0x76, 0x0c, 0x8c, 0x50, 0x30, 0xe9,
		0x09, 0x18, 0x9f, 0x36, 0xb0, 0xf7, 0x75, 0x6a, 0x67, 0xa6, 0x9a, 0x38, 0xd2, 0xdb, 0x57, 0xd0,
		0x70, 0x8a, 0x4a, 0x2e, 0x29, 0x5b, 0x16, 0x54, 0x11, 0xb2, 0xeb, 0xce, 0x13, 0x72, 0x3b, 0xdd,
		0x91, 0x94, 0xaf, 0xb2, 0x88, 0x45, 0x2d, 0x49, 0xc5, 0x85, 0xcf, 0xaa, 0x31, 0x48, 0xf5, 0xf5,
		0x46, 0x41, 0x45, 0xd2, 0xd6, 0x73, 0xcb, 0x18, 0x03, 0xb6, 0xad, 0xe6, 0x00, 0x3a, 0x9f, 0x25,
		0xbf, 0x27, 0x32, 0x5f, 0x8b, 0xc4, 0xb8, 0x83, 0xec, 0x7c, 0xad, 0x37, 0xee, 0xec, 0xde, 0x9e,
		0xa1, 0xa6, 0x2d, 0x0b, 0x30, 0xda, 0x84, 0x1e, 0x24, 0x46, 0x70, 0x6e, 0x72, 0xac, 0x25, 0x88,
		0x94, 0x8b, 0x15, 0xfd, 0x9c, 0xe0, 0x9e, 0xca, 0xf1, 0x05, 0xbe, 0xe8, 0xbe, 0xa7, 0x16, 0x22,
		0xe2, 0xc5, 0x8f, 0xfb, 0x9e, 0xae, 0x9b, 0xce, 0x35, 0xe9, 0xca, 0xea, 0x8c, 0xcc, 0x7e, 0x0c,
		0x85, 0x93, 0x12, 0x8a, 0x66, 0x56, 0x26, 0x7e, 0xd0, 0x88, 0xbc, 0x26, 0x34, 0x7b, 0x7b, 0x24,
		0x9a, 0xc4, 0x5e, 0x06, 0xf6, 0x80, 0x34, 0xb6, 0xd3, 0x9a, 0x4e, 0x2e, 0xba, 0x8c, 0x6f, 0x5c,
		0x87, 0x84, 0x50, 0x65, 0x4b, 0xf3, 0x6e, 0x5e, 0x73, 0x46, 0x84, 0x13, 0x51, 0x0e, 0x7b, 0x50,
		0xd0, 0xe6, 0x3d, 0xe6, 0x7c, 0xd7, 0xba, 0x35, 0xd4, 0xf2, 0xaf, 0xca, 0x5b, 0x46, 0x0c, 0xc7,
		0x27, 0x7f, 0x04, 0xfa, 0xf2, 0xfb, 0x03, 0xfd, 0x7c, 0x89, 0x95, 0xc2, 0xfc, 0x9b, 0x7e, 0x6c
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xe91n;
	message = new Uint8Array([
		0x86, 0x84, 0x3b, 0x31, 0x70, 0x03, 0x4a, 0x9f, 0x8e, 0xa7, 0x9a, 0x39, 0x65, 0x7a, 0x5e, 0x74,
		0x60, 0xc5, 0x0e, 0xf7, 0x5c, 0x80, 0x0d, 0xad, 0x69, 0x0c, 0x88, 0x18, 0xcf, 0x25, 0xa1, 0xe8,
		0x50, 0x12, 0xcd, 0xcc, 0xad, 0x1e, 0x7a, 0x88, 0x6c, 0x4c, 0xf6, 0x48, 0xd7, 0x47, 0x8c, 0x33,
		0x48, 0x98, 0xf0, 0x44, 0xa4, 0x1b, 0xdd, 0x55, 0x26, 0xb4, 0xfc, 0x7d, 0x5e, 0x3e, 0x08, 0x9c,
		0x79, 0xc4, 0x30, 0x34, 0xc2, 0xf4, 0xbc, 0x7b, 0x69, 0xd0, 0xf4, 0xae, 0x83, 0xa7, 0x3d, 0xa7,
		0x53, 0x44, 0x86, 0xb2, 0xc8, 0x65, 0xe2, 0x9d, 0x46, 0x6f, 0x76, 0x0e, 0xaa, 0x5f, 0x96, 0x19,
		0x88, 0x04, 0x2b, 0x12, 0xb6, 0x6c, 0x58, 0xa0, 0x0f, 0x9c, 0x5d, 0x13, 0x71, 0x83, 0xbb, 0xf8,
		0x08, 0x31, 0x99, 0xea, 0xcf, 0x45, 0x66, 0xab, 0x53, 0xa4, 0xc0, 0x73, 0xbb, 0x71, 0x94, 0x87
	]);
	signature = new Uint8Array([
		0x45, 0xdd, 0x07, 0xf0, 0x0a, 0x17, 0x27, 0xf2, 0xe9, 0x92, 0xcf, 0x0f, 0xda, 0xff, 0x0c, 0x23,
		0x3e, 0x6a, 0x68, 0x66, 0x12, 0x84, 0x16, 0x45, 0x6f, 0xcd, 0x2d, 0xb6, 0x03, 0x0a, 0x4f, 0x3c,
		0xd2, 0x16, 0xdb, 0x9c, 0x4c, 0xc2, 0xbc, 0x74, 0x40, 0xe0, 0x60, 0x81, 0x59, 0x5e, 0x9c, 0x51,
		0xf3, 0xc8, 0x1a, 0xf6, 0x81, 0x66, 0xf6, 0xb9, 0xcf, 0xc0, 0xba, 0x44, 0x91, 0xbf, 0x18, 0x35,
		0xb1, 0xc9, 0x46, 0xd6, 0x9d, 0x0a, 0x6b, 0x8c, 0x39, 0xe1, 0xec, 0xa8, 0x4a, 0x3b, 0xf9, 0x1f,
		0x7a, 0x29, 0x9c, 0xec, 0xc1, 0xd9, 0x8e, 0x6f, 0xa2, 0xec, 0x56, 0xcd, 0x01, 0xff, 0xa0, 0x4d,
		0x37, 0x42, 0x39, 0x33, 0xd7, 0x46, 0x29, 0x5c, 0xe6, 0x69, 0xcd, 0x89, 0x74, 0xca, 0xed, 0x44,
		0xf4, 0x5b, 0x88, 0xcd, 0x7e, 0xaf, 0xfb, 0xfc, 0xbc, 0x70, 0x35, 0x3a, 0x3b, 0x45, 0xc5, 0x38,
		0x95, 0xed, 0xb4, 0xe6, 0xb1, 0x9a, 0x65, 0x56, 0x4e, 0xa3, 0xed, 0x40, 0x45, 0x06, 0xa4, 0xb8,
		0xdc, 0xed, 0x83, 0x1c, 0x21, 0x74, 0x99, 0x5b, 0x44, 0x55, 0x79, 0x7d, 0xd2, 0xfa, 0x34, 0x30,
		0xf5, 0x75, 0xc6, 0xee, 0x80, 0xb7, 0xd7, 0x41, 0x49, 0x74, 0x6b, 0x41, 0x5f, 0xfa, 0x66, 0x13,
		0xfc, 0x84, 0x04, 0xae, 0x9e, 0x56, 0x25, 0xe1, 0xb8, 0xe2, 0xb7, 0x41, 0x25, 0xb3, 0x41, 0xbd,
		0x1c, 0xd8, 0xce, 0x2e, 0x87, 0xc0, 0x61, 0x14, 0xf1, 0x62, 0xfe, 0x46, 0x4d, 0x29, 0x9a, 0xee,
		0x6e, 0xd0, 0xfe, 0x70, 0xcb, 0x4d, 0xe5, 0x23, 0xc5, 0xb0, 0xe1, 0x0f, 0x1f, 0x89, 0x96, 0xf3,
		0xfd, 0xfc, 0x93, 0x79, 0xc3, 0x26, 0x7c, 0x26, 0x8c, 0xf2, 0x98, 0x23, 0xaf, 0x84, 0xfa, 0x75,
		0x6b, 0x99, 0xee, 0x42, 0xf4, 0xe0, 0xab, 0x8b, 0x69, 0x1e, 0x51, 0x45, 0xf4, 0x3e, 0x38, 0xe2
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	n =
		0xa93cbcd5c69a8e24b6be4f078652e6c8bf6d516b1316e842d5c8e757e387243c4905b37a66a30967ebc6ed6da56f690f60bec090652ee1926526a78317d41cdff392111fba8a6a91109953fe102c8a51e56b3b6f8087dc53e38d57ac31cd7bbc46f6d14bdf488852db296de27200d11dcd067d776af73c10cd044636aa4d9ea5609c75691aa164eb8abe0f187c0286dfa4d1f5f4332e7664c3c572671b757667e221cc2f0a3944926331ef73bcfc58d1ef8595a2bffd240f2397c4bcb69826ec26fadb3a154e58e86fea883d516d21cde6c162ab55fad9c52df547ef0e6b946d368daa97585084e43a32e029908910c6f99b4131c3961d0543fd583608e8a3e3n;
	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000452b3fn;
	message = new Uint8Array([
		0xbd, 0xd8, 0x71, 0x98, 0x41, 0x15, 0x9a, 0xba, 0x3f, 0x35, 0x34, 0x40, 0xef, 0x98, 0xef, 0xa9,
		0x2c, 0xc5, 0x03, 0xda, 0x8d, 0x00, 0x74, 0x5b, 0xd1, 0x20, 0x94, 0xc3, 0x80, 0x9b, 0xc9, 0x71,
		0xcf, 0xe3, 0x90, 0x7d, 0xc4, 0xf5, 0xc2, 0xee, 0x9c, 0x2e, 0x17, 0x2e, 0x6a, 0x61, 0xe8, 0xbb,
		0x00, 0x28, 0x39, 0x1e, 0x12, 0x77, 0xf6, 0x21, 0x99, 0x77, 0x7d, 0x3d, 0x76, 0x91, 0x5d, 0x52,
		0x58, 0xc8, 0x5d, 0x9b, 0xdf, 0x4d, 0xc1, 0xe0, 0x02, 0x4d, 0xc8, 0xed, 0xae, 0x0e, 0x79, 0x44,
		0xaf, 0x3a, 0x9f, 0x0f, 0xd4, 0x7b, 0x13, 0x58, 0x4e, 0x47, 0x39, 0x7c, 0x5a, 0xfe, 0xcd, 0xdd,
		0x20, 0x32, 0xe0, 0xd8, 0xda, 0x45, 0x1d, 0xf7, 0x38, 0x3a, 0x51, 0x67, 0x03, 0xc5, 0x2b, 0xac,
		0x02, 0xa4, 0x40, 0x93, 0x1a, 0x32, 0x51, 0x68, 0xb8, 0x3a, 0xd1, 0x6a, 0x74, 0x09, 0xa2, 0x7c
	]);
	signature = new Uint8Array([
		0x2e, 0x7b, 0x28, 0x80, 0x3b, 0xbf, 0x9d, 0x58, 0xbe, 0x82, 0x19, 0xac, 0xe6, 0x8c, 0x02, 0x0a,
		0x42, 0xa4, 0xb4, 0x2e, 0x59, 0xc2, 0xc2, 0xe0, 0xfa, 0xf5, 0x6c, 0xa1, 0x7f, 0x7c, 0x6f, 0x3a,
		0x42, 0x76, 0x88, 0xf1, 0x24, 0x48, 0x13, 0x08, 0xe2, 0x49, 0xe4, 0xd5, 0x79, 0xf5, 0x76, 0xda,
		0xe5, 0x74, 0x3b, 0xae, 0x68, 0xb3, 0x49, 0xf4, 0xd0, 0x4b, 0xfc, 0x21, 0xd6, 0x0a, 0x96, 0x9b,
		0x96, 0x58, 0x27, 0xa6, 0x70, 0x25, 0xbd, 0x82, 0x20, 0x60, 0x37, 0x63, 0xcd, 0xe9, 0x0a, 0x42,
		0xb4, 0x30, 0x8f, 0x2c, 0x84, 0xbc, 0x2c, 0x4c, 0x8f, 0xd5, 0xde, 0x0e, 0xfd, 0xa3, 0x49, 0xe9,
		0xca, 0xd1, 0xf4, 0x71, 0x40, 0xd0, 0x1f, 0xd2, 0x70, 0x21, 0xdd, 0xfe, 0x16, 0x87, 0x30, 0x67,
		0x21, 0x36, 0x36, 0xad, 0x96, 0x1c, 0xc8, 0x5d, 0x79, 0xa8, 0x72, 0x31, 0xe1, 0x01, 0x9a, 0xc4,
		0xbe, 0xdf, 0x96, 0x30, 0xe2, 0xc3, 0x1f, 0x4b, 0x41, 0x3d, 0x98, 0xff, 0xee, 0xe5, 0x3f, 0xd4,
		0x6c, 0xa6, 0xd6, 0x24, 0x49, 0xe8, 0x6f, 0xe7, 0x69, 0x2b, 0x59, 0xfe, 0xb1, 0x8b, 0xd9, 0x29,
		0x62, 0x91, 0xd1, 0xbd, 0xa7, 0x7b, 0xb9, 0xc7, 0xcb, 0xf1, 0x5b, 0xce, 0x21, 0xaf, 0xf1, 0xc6,
		0xf1, 0xed, 0x9c, 0xc9, 0x5a, 0x87, 0x37, 0x8b, 0x13, 0xee, 0xd5, 0x4d, 0x7b, 0x54, 0x83, 0x51,
		0x60, 0xf8, 0x8f, 0x7e, 0xc7, 0x10, 0xc8, 0x7e, 0xec, 0x07, 0xc2, 0x23, 0x9b, 0x70, 0x01, 0xbc,
		0xd4, 0xa8, 0x42, 0x8a, 0x1a, 0x27, 0x4d, 0x1c, 0x78, 0xd8, 0x9c, 0x21, 0x53, 0xc4, 0x6f, 0x4e,
		0xc9, 0x97, 0xdf, 0x9a, 0x19, 0x83, 0x88, 0x13, 0xce, 0xf1, 0x38, 0x1d, 0xca, 0xf9, 0x7b, 0xcc,
		0xac, 0x39, 0x73, 0x9a, 0x31, 0x42, 0xaa, 0xd2, 0x1a, 0x96, 0x6d, 0xa1, 0xbe, 0x5c, 0x47, 0x1c
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xb3fn;
	message = new Uint8Array([
		0x38, 0x58, 0x01, 0x1a, 0x05, 0x4c, 0x52, 0xe3, 0xb6, 0x59, 0x06, 0x6f, 0x55, 0xf2, 0x19, 0xdd,
		0x58, 0x46, 0x4b, 0xfb, 0x22, 0xb8, 0xc5, 0x5d, 0xcc, 0x90, 0xff, 0xac, 0x24, 0xf0, 0xe1, 0x41,
		0xf6, 0x09, 0x29, 0xf2, 0x8b, 0x8e, 0x0c, 0x2c, 0x70, 0x69, 0x20, 0x43, 0x78, 0xae, 0x79, 0x05,
		0x04, 0xcd, 0x12, 0x95, 0x82, 0x0b, 0x6f, 0x77, 0x34, 0x33, 0x81, 0xe7, 0x33, 0x88, 0xca, 0x6f,
		0xb3, 0xff, 0xc2, 0xb8, 0x88, 0xab, 0x78, 0xa1, 0xea, 0x79, 0x7c, 0x8e, 0x75, 0x1d, 0xfd, 0x02,
		0x73, 0x4c, 0x2f, 0x71, 0x5e, 0x2c, 0xef, 0x4f, 0xa1, 0x09, 0xaa, 0x6d, 0x9f, 0x49, 0x7b, 0x85,
		0xf6, 0xa2, 0x93, 0x14, 0x05, 0x8a, 0xde, 0x67, 0xac, 0xef, 0xe4, 0xf9, 0x52, 0x29, 0xed, 0xfc,
		0x2d, 0x2d, 0x68, 0x36, 0xbd, 0x03, 0x8d, 0x0e, 0x9a, 0x7a, 0x42, 0xe7, 0x70, 0x1a, 0x3b, 0xac
	]);
	signature = new Uint8Array([
		0x31, 0x1e, 0x10, 0x25, 0xe0, 0xa8, 0x82, 0x0a, 0x5d, 0xdc, 0x4f, 0x63, 0x26, 0x28, 0xba, 0xc2,
		0x18, 0xba, 0xa9, 0x4f, 0xb3, 0x2c, 0x70, 0x9f, 0xf7, 0x0d, 0xb3, 0xec, 0xb3, 0xa1, 0x95, 0x7e,
		0x31, 0x51, 0x3f, 0xdb, 0xcf, 0x15, 0xd8, 0x39, 0x27, 0xf5, 0x84, 0x05, 0x84, 0xaf, 0x5e, 0xd9,
		0x0b, 0x35, 0x08, 0x33, 0xf5, 0x0c, 0xbe, 0xb7, 0x18, 0xb1, 0x2c, 0x56, 0xfc, 0x26, 0x0b, 0x41,
		0xef, 0x62, 0x77, 0x76, 0xbf, 0x1c, 0x0a, 0x67, 0xf3, 0x9b, 0xe2, 0x6c, 0xb0, 0x04, 0x5e, 0x6c,
		0x2b, 0x60, 0x21, 0x63, 0x38, 0xa0, 0x85, 0xcd, 0x86, 0x7b, 0xc5, 0xd9, 0xe7, 0x44, 0xa2, 0x7f,
		0xf7, 0x7b, 0xae, 0xa1, 0x99, 0xee, 0xb6, 0x69, 0xa2, 0xe0, 0x09, 0x62, 0x56, 0xd0, 0x81, 0xb2,
		0x31, 0x3f, 0x3b, 0x79, 0xed, 0x18, 0x07, 0x12, 0xef, 0x56, 0xa0, 0xb5, 0x49, 0xeb, 0x29, 0x9b,
		0x96, 0x02, 0x9f, 0xd9, 0x3e, 0x4f, 0x68, 0xbe, 0xe5, 0xa0, 0xe6, 0xc8, 0xee, 0x44, 0xdd, 0xbb,
		0x06, 0xb8, 0x84, 0x3f, 0xd4, 0x36, 0x5c, 0xba, 0xbb, 0x22, 0x9d, 0x2f, 0x8f, 0x2a, 0x98, 0x81,
		0x97, 0x4a, 0xdb, 0x40, 0x6e, 0x6f, 0xfb, 0x39, 0xeb, 0xa8, 0xf2, 0x0d, 0xa3, 0x8b, 0x55, 0x8d,
		0x00, 0x69, 0xf4, 0x5f, 0x91, 0xc8, 0x5d, 0xeb, 0xf6, 0x87, 0x2a, 0x4f, 0xf3, 0x6d, 0x5a, 0x79,
		0x28, 0x40, 0x50, 0xfa, 0xf4, 0x2b, 0x78, 0xb1, 0x77, 0x0b, 0x17, 0x6c, 0x88, 0xb7, 0xfa, 0xba,
		0xca, 0x91, 0x11, 0xe5, 0x11, 0xdc, 0x73, 0xa2, 0xba, 0xcb, 0x30, 0xab, 0xc3, 0xa8, 0x41, 0xbb,
		0x5b, 0x0f, 0x0b, 0x84, 0x4e, 0x75, 0x6d, 0xbf, 0xd3, 0xf5, 0xdb, 0x45, 0x8c, 0x47, 0x86, 0x1d,
		0xf0, 0x0b, 0x08, 0x5a, 0x06, 0xe0, 0x7a, 0xb4, 0xe7, 0x88, 0xa0, 0x80, 0x48, 0x3c, 0xcb, 0xe4
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xb3fn;
	message = new Uint8Array([
		0x68, 0x83, 0xa0, 0x18, 0xb4, 0x8a, 0xf7, 0x0d, 0x28, 0x75, 0xa7, 0xf5, 0xcb, 0xb5, 0xa3, 0x03,
		0xd7, 0x33, 0x8b, 0x6d, 0x76, 0xf9, 0x88, 0xc3, 0xcd, 0x2f, 0x78, 0x7f, 0x39, 0x4a, 0x4b, 0xdd,
		0xd8, 0x80, 0xac, 0xed, 0x4c, 0x7f, 0xe4, 0xe6, 0xbb, 0x5e, 0xfc, 0xbd, 0x1a, 0xd4, 0x22, 0xf6,
		0xac, 0xa8, 0x4f, 0xbb, 0xc5, 0x68, 0x26, 0x2b, 0xd4, 0x5e, 0x1e, 0xf4, 0xa0, 0xc0, 0xe3, 0x24,
		0xd2, 0x27, 0xfa, 0x3c, 0xb4, 0x42, 0xa4, 0x86, 0x38, 0xcc, 0x06, 0xa9, 0x3c, 0xbb, 0x86, 0x7b,
		0x0c, 0xbb, 0x78, 0x16, 0x29, 0xda, 0xfa, 0x2e, 0x49, 0x85, 0x1c, 0xa2, 0x9e, 0xb3, 0x45, 0x50,
		0x5b, 0x60, 0xd2, 0x2e, 0x75, 0x3d, 0xff, 0x97, 0xa6, 0xa6, 0x0b, 0xe2, 0xb8, 0xd4, 0x97, 0x39,
		0x00, 0x54, 0x50, 0xa8, 0x29, 0xb7, 0xcd, 0x75, 0x33, 0x8c, 0xba, 0xb0, 0xba, 0x8b, 0x37, 0x0a
	]);
	signature = new Uint8Array([
		0x15, 0xbe, 0x3f, 0xb2, 0x00, 0x85, 0x8d, 0x24, 0xdd, 0xb7, 0x58, 0x64, 0x70, 0xff, 0xe7, 0x06,
		0xeb, 0x29, 0x9d, 0xa1, 0x57, 0x88, 0x0a, 0x68, 0xaa, 0xe7, 0x9f, 0xf2, 0x0a, 0xa9, 0x2e, 0xca,
		0x29, 0x8e, 0xec, 0x75, 0xac, 0x4a, 0xda, 0x28, 0x5e, 0xca, 0xbb, 0x10, 0x47, 0x9f, 0xa5, 0x93,
		0xee, 0x72, 0xc5, 0x85, 0xab, 0xa7, 0x07, 0xf4, 0x55, 0x99, 0xde, 0x0d, 0xc7, 0x92, 0xc6, 0xe3,
		0x39, 0x0d, 0xa5, 0x72, 0x9a, 0xe5, 0x50, 0x61, 0x00, 0xb3, 0x1c, 0x61, 0x7e, 0xe1, 0x24, 0x45,
		0x09, 0x3a, 0x75, 0x93, 0xbb, 0xcd, 0x0e, 0x5a, 0x15, 0x5f, 0xb9, 0xa4, 0x1c, 0xf3, 0x32, 0xc9,
		0xd6, 0x5b, 0x0d, 0x8f, 0x07, 0x7f, 0xb4, 0x17, 0xf0, 0x27, 0xea, 0xf7, 0x28, 0xc5, 0xc3, 0x26,
		0xbd, 0xdd, 0x7b, 0xe7, 0xbf, 0x3e, 0x69, 0xa1, 0x65, 0xc5, 0x77, 0x59, 0x33, 0x71, 0x05, 0xb9,
		0x46, 0x23, 0xee, 0x20, 0x36, 0x41, 0xed, 0x2b, 0xf5, 0x8f, 0x19, 0x07, 0xe3, 0x41, 0x3b, 0x00,
		0xe0, 0x8d, 0x54, 0xa1, 0x0b, 0xb6, 0x45, 0x17, 0x54, 0x49, 0xf0, 0x2d, 0xa9, 0x36, 0x6b, 0x11,
		0x95, 0x23, 0x64, 0xc0, 0x32, 0x8f, 0xff, 0x01, 0x87, 0x23, 0xc3, 0x06, 0x25, 0x83, 0x6a, 0x0c,
		0xdc, 0x7a, 0x13, 0xc2, 0x20, 0x42, 0x8d, 0x03, 0xef, 0xd6, 0x25, 0xfc, 0xe6, 0x3f, 0x02, 0x2b,
		0x59, 0x50, 0x8f, 0xc6, 0x8e, 0xd4, 0xd1, 0x62, 0x94, 0x11, 0x1f, 0xc3, 0x91, 0x05, 0x27, 0x05,
		0xec, 0x11, 0x5d, 0xa4, 0xea, 0xd8, 0xca, 0xf5, 0xc5, 0x0a, 0xf5, 0x86, 0xba, 0x4d, 0xbe, 0x1b,
		0x29, 0xd0, 0x44, 0x52, 0xf9, 0x47, 0xb5, 0xfe, 0x9e, 0x16, 0xa7, 0x98, 0xf5, 0xd0, 0x00, 0x94,
		0xdf, 0xe2, 0xba, 0x91, 0x0e, 0x64, 0x49, 0xbd, 0x52, 0xd3, 0xf9, 0x38, 0xc0, 0x45, 0xca, 0x9b
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xddb5n;
	message = new Uint8Array([
		0x20, 0x07, 0x5f, 0xe0, 0xb2, 0x68, 0x32, 0xc2, 0x34, 0xa8, 0x61, 0xa7, 0x70, 0x78, 0xa8, 0xe9,
		0xa4, 0x2b, 0xe3, 0x86, 0x2a, 0xc4, 0xd0, 0xd0, 0x58, 0x54, 0x15, 0x66, 0xa6, 0x83, 0x85, 0x62,
		0x0e, 0x6c, 0x9f, 0xd4, 0xb9, 0xae, 0x57, 0x70, 0xd7, 0xbf, 0x1a, 0x83, 0xcf, 0x84, 0x0c, 0x2c,
		0x98, 0x1f, 0x94, 0xc8, 0x66, 0x09, 0x1a, 0xae, 0x8a, 0x60, 0x0f, 0x1d, 0x93, 0x82, 0x2e, 0x72,
		0xba, 0xda, 0x02, 0x9e, 0x7d, 0xfa, 0xa9, 0xd8, 0x89, 0xea, 0xd7, 0x8f, 0xdd, 0xc0, 0x1e, 0xa3,
		0x2d, 0x71, 0x6c, 0xd4, 0x84, 0xe7, 0xd5, 0x7b, 0x2e, 0x54, 0x92, 0x78, 0xd5, 0xc5, 0x4a, 0x6b,
		0xea, 0xfa, 0x91, 0x27, 0x47, 0x75, 0xaf, 0x63, 0x12, 0xd1, 0xa2, 0xb3, 0xe4, 0x55, 0x66, 0xb7,
		0x2a, 0xc9, 0x73, 0x92, 0xcc, 0x88, 0x88, 0x9e, 0x0d, 0xd7, 0xa7, 0x5f, 0xb3, 0x75, 0x60, 0xb5
	]);
	signature = new Uint8Array([
		0x91, 0x66, 0xe9, 0x1b, 0x18, 0xc8, 0x51, 0x87, 0x60, 0x13, 0x1e, 0xa0, 0xee, 0xec, 0xc4, 0x43,
		0x02, 0x3b, 0x61, 0x14, 0x8a, 0x1d, 0x42, 0x03, 0x0e, 0xd0, 0x9d, 0x50, 0x9d, 0x4c, 0x02, 0xcd,
		0x00, 0x68, 0x14, 0x2f, 0xdb, 0xc6, 0xe5, 0x60, 0x73, 0xa6, 0x8f, 0x5a, 0x94, 0x2c, 0x0c, 0x93,
		0xa7, 0xf9, 0x08, 0x82, 0xf1, 0x60, 0x52, 0x2e, 0xa0, 0x05, 0xf4, 0xaf, 0xd3, 0x44, 0x53, 0xc8,
		0xc1, 0xb1, 0xd3, 0xa4, 0xe5, 0x20, 0x4d, 0x0f, 0x9b, 0x79, 0x7b, 0xc0, 0x0b, 0x84, 0xd0, 0xdd,
		0x96, 0xe3, 0x11, 0x39, 0x4f, 0x08, 0x95, 0x67, 0xe4, 0x5e, 0xcd, 0x0c, 0x79, 0x5b, 0xe0, 0x10,
		0xe7, 0xfb, 0x24, 0xe4, 0x6a, 0x28, 0x42, 0xe8, 0xc7, 0xda, 0xe9, 0xd2, 0xc7, 0x60, 0xfa, 0x09,
		0xe2, 0x0a, 0x29, 0xa6, 0x23, 0xe6, 0xc5, 0x3e, 0x3c, 0x43, 0x6d, 0x80, 0x90, 0x32, 0xb9, 0x9a,
		0xc4, 0xa8, 0x1e, 0x63, 0xba, 0x95, 0xa3, 0x56, 0xf8, 0x6a, 0x62, 0xdd, 0x6a, 0xbb, 0xb0, 0xaa,
		0xc1, 0xd0, 0x75, 0x9e, 0x44, 0xcc, 0xbf, 0xe2, 0x25, 0xf5, 0xd2, 0x06, 0xab, 0xa8, 0xdc, 0x72,
		0x61, 0xda, 0xa9, 0x45, 0x1e, 0xe1, 0xba, 0x04, 0xde, 0x11, 0x72, 0xad, 0x80, 0xc0, 0x8f, 0x07,
		0x09, 0xd2, 0x01, 0x2a, 0xd8, 0xff, 0xc8, 0xc5, 0x15, 0x25, 0x08, 0xbc, 0x1e, 0x18, 0xab, 0x53,
		0xcd, 0xe7, 0x9c, 0xa5, 0x0d, 0xa9, 0xee, 0xe9, 0xb3, 0xb5, 0x22, 0x9d, 0x38, 0x01, 0x5f, 0x7e,
		0x18, 0xf0, 0x36, 0x12, 0xad, 0x62, 0x70, 0x72, 0x7b, 0xe1, 0x6f, 0xec, 0x06, 0xa5, 0xd9, 0x23,
		0x0e, 0xce, 0x77, 0x7f, 0xf6, 0x93, 0x6a, 0x3a, 0xe8, 0xf3, 0xa6, 0x31, 0xe3, 0xe1, 0x3f, 0x93,
		0x02, 0x56, 0xc3, 0x90, 0x3d, 0x96, 0x3e, 0xce, 0x49, 0xc5, 0xa1, 0x0b, 0x5a, 0x6d, 0xa4, 0x7a
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xb3fn;
	message = new Uint8Array([
		0x46, 0xc4, 0xbe, 0xa2, 0xea, 0xe6, 0x6b, 0xa4, 0x0f, 0x3a, 0x62, 0x23, 0xa2, 0x8a, 0x97, 0x56,
		0xd7, 0xc9, 0x80, 0xea, 0x6e, 0x49, 0x76, 0xe2, 0x34, 0x2e, 0x5f, 0xa1, 0xcc, 0x23, 0x8a, 0x45,
		0xaf, 0x4b, 0xda, 0x37, 0x72, 0x7a, 0x27, 0x00, 0x48, 0xa6, 0xe1, 0x5f, 0xc7, 0x98, 0xf6, 0x98,
		0xef, 0xe7, 0xf6, 0x0e, 0x68, 0x27, 0x76, 0x14, 0x0b, 0x5e, 0xb2, 0x01, 0xa4, 0xb7, 0x76, 0x82,
		0xf6, 0x7b, 0x3e, 0x35, 0x00, 0x3c, 0x9c, 0x73, 0x7f, 0x54, 0xda, 0x6d, 0xb4, 0x8e, 0xe0, 0x7a,
		0x67, 0x22, 0x59, 0xaf, 0x2c, 0xe7, 0x12, 0xb1, 0xe5, 0xc4, 0xa2, 0xc7, 0x88, 0x67, 0x50, 0x33,
		0x23, 0x3a, 0x31, 0xc3, 0x1d, 0x93, 0x91, 0xa3, 0xbe, 0x2c, 0x94, 0x75, 0xf1, 0xd2, 0x1d, 0xa3,
		0x49, 0x61, 0xef, 0xf4, 0x43, 0xef, 0x13, 0x5e, 0xcb, 0x48, 0x79, 0x1c, 0x01, 0x9b, 0xe2, 0x00
	]);
	signature = new Uint8Array([
		0x85, 0xf3, 0x3d, 0x22, 0xd9, 0x2f, 0x3e, 0x4f, 0x31, 0xc5, 0xfc, 0x0f, 0x17, 0xdf, 0x91, 0x6e,
		0xc7, 0x70, 0x90, 0x34, 0x45, 0xf7, 0x35, 0x36, 0xbe, 0xf6, 0x19, 0x66, 0x91, 0x8e, 0xfd, 0x0b,
		0x38, 0x0b, 0x99, 0x33, 0xd2, 0x86, 0x4d, 0xfa, 0x10, 0xf5, 0x61, 0x3d, 0x8a, 0x23, 0x24, 0x12,
		0xe5, 0xb3, 0xdb, 0x44, 0x71, 0x7e, 0xb5, 0x76, 0xfc, 0x18, 0x08, 0x91, 0x80, 0x0c, 0x5d, 0x11,
		0x59, 0x7d, 0x2d, 0x09, 0xe4, 0x77, 0xd0, 0x39, 0x27, 0x40, 0xd7, 0x00, 0x40, 0x8f, 0x34, 0x82,
		0xda, 0x6f, 0x8d, 0x9b, 0xac, 0x4d, 0xa6, 0xfa, 0xa2, 0x20, 0xca, 0x3c, 0xfd, 0x22, 0x87, 0xf5,
		0xed, 0x86, 0x54, 0xbb, 0x8d, 0xc8, 0xac, 0x45, 0xe0, 0x9e, 0x52, 0xe9, 0x3b, 0xc7, 0x8d, 0x8c,
		0xb4, 0xe0, 0x8d, 0x76, 0xe1, 0x5c, 0xfa, 0x78, 0xc5, 0x18, 0x52, 0xc9, 0x3d, 0x31, 0xd6, 0x44,
		0x17, 0xc2, 0x9a, 0xa7, 0xe2, 0x24, 0x11, 0x74, 0x6c, 0x28, 0x0e, 0x3e, 0x27, 0x5f, 0x71, 0xc4,
		0x74, 0x2f, 0xaa, 0x0c, 0xec, 0xe8, 0xe5, 0x40, 0xd1, 0xb8, 0xbc, 0x39, 0x3d, 0xb1, 0x20, 0xfc,
		0x14, 0x24, 0x4a, 0x25, 0x77, 0x65, 0x0b, 0x51, 0x4c, 0x73, 0xdd, 0x1e, 0x53, 0x91, 0xda, 0x76,
		0xaa, 0xad, 0x37, 0x5f, 0x56, 0xa3, 0xcb, 0x4e, 0x0c, 0xa9, 0x42, 0xbb, 0xbb, 0x54, 0x22, 0x13,
		0xb5, 0xa3, 0x84, 0x45, 0xcd, 0xe0, 0xdd, 0x9e, 0xed, 0x4f, 0x75, 0x15, 0xc6, 0xc5, 0x82, 0x51,
		0xdc, 0x94, 0xc2, 0x5f, 0x7d, 0xd9, 0x29, 0xd7, 0x14, 0xb2, 0x06, 0x0d, 0xa2, 0x52, 0x58, 0x4a,
		0xf8, 0x4b, 0x82, 0x01, 0x3f, 0x92, 0x4f, 0xa9, 0x17, 0x00, 0xd9, 0x25, 0x23, 0xd6, 0x9c, 0x96,
		0xe0, 0xb0, 0xf6, 0x82, 0x03, 0xa9, 0x77, 0xaf, 0xfa, 0x92, 0x57, 0x4c, 0xb2, 0x41, 0xc0, 0xc4
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xb3fn;
	message = new Uint8Array([
		0x25, 0xe9, 0xe6, 0xc3, 0x9e, 0xe6, 0xf5, 0xc4, 0x55, 0xd8, 0x1f, 0x86, 0x87, 0x13, 0x36, 0x29,
		0x29, 0xcd, 0x68, 0xae, 0x87, 0x30, 0x0a, 0xac, 0x2b, 0xae, 0x94, 0x44, 0x00, 0x95, 0xec, 0x56,
		0xb7, 0xe3, 0xe7, 0xf5, 0x6a, 0x5b, 0x0d, 0x19, 0x7f, 0xd8, 0x9c, 0x94, 0xd0, 0xe2, 0xd0, 0x48,
		0x08, 0x7f, 0x62, 0x96, 0x50, 0x4b, 0x4e, 0x1a, 0x2c, 0xcb, 0xda, 0x95, 0x9f, 0xff, 0xd4, 0x2a,
		0x96, 0x36, 0x1b, 0xce, 0x84, 0x26, 0x61, 0xfa, 0x49, 0x3c, 0x2e, 0xa2, 0x58, 0x31, 0x28, 0x6b,
		0x19, 0xde, 0x93, 0x19, 0x8c, 0x51, 0x14, 0x46, 0x30, 0x20, 0xba, 0x5a, 0x23, 0xfd, 0x3e, 0xb7,
		0x8a, 0x8b, 0x8a, 0x34, 0x33, 0x71, 0x79, 0xcd, 0x79, 0xac, 0xde, 0x99, 0x68, 0x29, 0xc7, 0xfc,
		0x22, 0x93, 0x03, 0x1d, 0x81, 0x6a, 0xe1, 0x9a, 0xfe, 0x55, 0x3b, 0x7b, 0xd2, 0xb9, 0xb3, 0x65
	]);
	signature = new Uint8Array([
		0x2e, 0x0b, 0x30, 0xae, 0x35, 0x77, 0x7c, 0x9f, 0x95, 0x1b, 0x22, 0x74, 0x0f, 0xcc, 0xb8, 0x8f,
		0xdf, 0xa9, 0x4e, 0x7d, 0x13, 0x9c, 0x9e, 0xb1, 0x05, 0xbe, 0x1a, 0x1c, 0xe5, 0x42, 0xf6, 0xef,
		0xdf, 0x4e, 0xb3, 0xd1, 0xab, 0x0b, 0x23, 0x42, 0xf8, 0xe3, 0x54, 0xa0, 0x87, 0x8e, 0x31, 0xf0,
		0xbd, 0xec, 0x1e, 0xb6, 0x7e, 0xd1, 0x94, 0x91, 0xa0, 0x86, 0x06, 0x5a, 0xf7, 0xe5, 0x18, 0x8e,
		0xd0, 0xb9, 0x5e, 0x0d, 0xc8, 0x88, 0x12, 0xf6, 0x6d, 0x6c, 0x72, 0x6f, 0xd6, 0x72, 0xe0, 0x36,
		0x52, 0x43, 0x2f, 0x85, 0xa9, 0xfe, 0x47, 0x66, 0xa7, 0xc3, 0x15, 0xc0, 0xc6, 0x95, 0xfc, 0x37,
		0xc4, 0x5f, 0xf5, 0x44, 0x1d, 0x31, 0x77, 0xc4, 0x18, 0x1f, 0x01, 0xc2, 0x43, 0xad, 0x3c, 0x96,
		0x14, 0xe4, 0xc6, 0xf4, 0xf8, 0xb8, 0x79, 0xca, 0x81, 0x67, 0xa7, 0x79, 0x0a, 0xca, 0x6b, 0x34,
		0xc7, 0x49, 0x36, 0xcb, 0xa5, 0x8e, 0x64, 0xcc, 0x4e, 0x32, 0xff, 0xc8, 0xad, 0x6c, 0x09, 0xc4,
		0x8a, 0xc5, 0x9f, 0x1e, 0xb1, 0x8d, 0xd1, 0x18, 0x71, 0xff, 0xcc, 0xae, 0x98, 0xc4, 0x65, 0xab,
		0xd5, 0x88, 0x5b, 0xdd, 0xf5, 0x9d, 0xce, 0xc5, 0xdd, 0xb3, 0x1c, 0xe4, 0xec, 0xd8, 0x6b, 0xf6,
		0xaf, 0x20, 0x73, 0x73, 0xa9, 0x12, 0xb2, 0x71, 0x7e, 0x72, 0x6c, 0xe9, 0xff, 0x55, 0x5f, 0x35,
		0x02, 0xe8, 0xcb, 0x83, 0xe2, 0x87, 0xcf, 0x0f, 0x7c, 0x93, 0x8c, 0xd4, 0xb2, 0x6f, 0x07, 0x5f,
		0xd5, 0x0e, 0x41, 0x27, 0x55, 0x5a, 0xde, 0x94, 0xc9, 0x74, 0xa4, 0xcf, 0x60, 0x4e, 0xa5, 0xc5,
		0xd9, 0xe9, 0x4c, 0xe9, 0x1f, 0xcb, 0x9a, 0x2b, 0xfc, 0x87, 0x43, 0xc0, 0x6e, 0x69, 0xca, 0x41,
		0xef, 0x02, 0x98, 0x81, 0xc3, 0xd6, 0x40, 0x78, 0xcc, 0x63, 0x11, 0xc6, 0x94, 0xde, 0xe6, 0x27
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(true);

	n =
		0xe3db9f81f57c99898c867221eb20449ed8b05c1c7d6d0388cd5bc691b84cbf9301b52b60f34be1ea5be12b87cc185d92451037ac2b2f79d1bc43d0736108b1eac5f5a52b4037825385df38966d15562cebd09d27c8fdd3c9bb09c0b3d77b0c05a1fc40b1d9d26bcc8ad35b321ad5866f500bb9196237a4f4f2f282f9091fe99e39c37b862dfc8a22ec487d6e36be1ef8276629b60d845d92524e97d6d52689924ff354a594ccafe9087f5ec6a988c2dae41d2a400d2c8c039e3d77ce5450ccd826468fcfe65718d292e7765f0185df94d5fa79c1e99a8b4f823b19475c6004c62c0f7db056fbe167df368ab8019d58b89d7d3790d427844684b147f962ae37ffn;
	e =
		0xe29dn;
	message = new Uint8Array([
		0x70, 0xb6, 0xc4, 0x65, 0xd2, 0x89, 0x9b, 0x32, 0xb7, 0x36, 0xc1, 0x7a, 0xf2, 0x93, 0xc5, 0x62,
		0xa0, 0x96, 0xd0, 0x3c, 0x5d, 0xbe, 0x7e, 0x08, 0xb8, 0xae, 0xec, 0x3b, 0xe4, 0x1c, 0x13, 0xc0,
		0xb0, 0xe9, 0x54, 0x3d, 0xb8, 0x91, 0x53, 0x97, 0xdd, 0xc6, 0x09, 0xb8, 0xf4, 0x58, 0x15, 0x90,
		0xbb, 0x58, 0x53, 0x59, 0x11, 0x7d, 0xb0, 0x20, 0x66, 0xc6, 0x3d, 0x81, 0x70, 0x61, 0x82, 0xb2,
		0x1f, 0xcc, 0x14, 0xc3, 0xd4, 0x3a, 0x6a, 0x23, 0xce, 0x38, 0xec, 0x67, 0xe4, 0x90, 0x4d, 0x47,
		0x7a, 0x6e, 0x1b, 0xe9, 0xae, 0xc1, 0x94, 0x63, 0xd2, 0xe4, 0xbc, 0x7b, 0x1f, 0x7e, 0xac, 0xb0,
		0xa7, 0xa7, 0x2d, 0x7f, 0x8c, 0x4c, 0x85, 0xdf, 0x70, 0xd4, 0x91, 0x0e, 0x2c, 0x03, 0x14, 0x8f,
		0xc5, 0x1f, 0x4f, 0x74, 0x9c, 0x52, 0xd2, 0xd9, 0xe4, 0x50, 0x91, 0xb1, 0x59, 0x39, 0x3a, 0xc5
	]);
	signature = new Uint8Array([
		0xa2, 0x31, 0xe2, 0x20, 0x53, 0x8d, 0x59, 0xcd, 0xaf, 0x54, 0xf6, 0xea, 0xe7, 0xc9, 0x6f, 0x83,
		0xa3, 0xd9, 0x5b, 0x55, 0xbe, 0x54, 0x98, 0x9c, 0x1a, 0x20, 0xce, 0x18, 0xf7, 0xff, 0xa7, 0x60,
		0xba, 0x26, 0x87, 0x91, 0x20, 0xa2, 0xe6, 0x17, 0xb5, 0x60, 0xbd, 0x08, 0x36, 0x62, 0xd9, 0xe9,
		0x56, 0x36, 0xf1, 0xa6, 0x39, 0xf7, 0xdb, 0x31, 0xf4, 0xdd, 0x74, 0xdd, 0xd8, 0x91, 0xee, 0x63,
		0x65, 0xd5, 0xea, 0xd0, 0x06, 0xa7, 0x46, 0xa9, 0x04, 0x57, 0xcb, 0xd4, 0xa1, 0xb7, 0xe9, 0xc5,
		0xdf, 0x71, 0x0c, 0x81, 0x45, 0x4f, 0x68, 0xbf, 0xe8, 0x42, 0x1c, 0xf4, 0x46, 0x8f, 0xac, 0xd8,
		0x54, 0x13, 0xfc, 0x3d, 0xb9, 0x70, 0xa7, 0xa0, 0x68, 0x2f, 0xf1, 0x37, 0x7e, 0x94, 0x2c, 0x5e,
		0x5e, 0xd4, 0xb6, 0xb3, 0x1d, 0xe3, 0xf6, 0x3a, 0x05, 0xa8, 0xa2, 0x6f, 0x36, 0x5a, 0x35, 0x5f,
		0x02, 0x13, 0x80, 0x68, 0x41, 0x79, 0xaa, 0x99, 0x99, 0x6d, 0xe9, 0x9e, 0x7c, 0xc2, 0x2a, 0x5a,
		0x37, 0x0c, 0x3f, 0xff, 0x56, 0x64, 0x7f, 0x33, 0xd1, 0xbd, 0x1b, 0x29, 0x48, 0xca, 0xc2, 0x97,
		0xbd, 0x62, 0x22, 0x89, 0xc1, 0x79, 0x7f, 0x2d, 0xe3, 0xbe, 0x45, 0x98, 0x59, 0x3c, 0xa4, 0x74,
		0x8e, 0xb8, 0xf7, 0x4d, 0x0b, 0x71, 0x99, 0xa7, 0x63, 0xeb, 0x18, 0x01, 0xd6, 0x0d, 0x09, 0xf2,
		0x8b, 0xad, 0x1c, 0xa1, 0xb6, 0xa3, 0x24, 0x4a, 0x7b, 0xbf, 0x9a, 0x12, 0x70, 0xec, 0xea, 0xed,
		0x23, 0x24, 0xf6, 0x04, 0x13, 0x4f, 0x40, 0x4b, 0x6c, 0xaf, 0x3c, 0x96, 0x9d, 0xaa, 0xbe, 0xf4,
		0xe2, 0x94, 0xfc, 0xf1, 0x60, 0x3e, 0x08, 0x13, 0xfe, 0x20, 0xb8, 0x8a, 0xa3, 0x6b, 0x53, 0x4a,
		0xd6, 0xe7, 0x9d, 0x19, 0x67, 0xab, 0x2f, 0xf4, 0xe7, 0x0b, 0x67, 0x2c, 0x64, 0x2f, 0xce, 0x46
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xdb7c7n;
	message = new Uint8Array([
		0x47, 0x09, 0x1e, 0xc1, 0x61, 0x55, 0xb1, 0xe4, 0xaa, 0xac, 0x58, 0x2b, 0x5f, 0x25, 0x5e, 0x06,
		0x48, 0x3e, 0xd8, 0x84, 0x46, 0x21, 0xdc, 0xb9, 0x2c, 0x26, 0xee, 0x62, 0xcf, 0x98, 0xbb, 0xcc,
		0x61, 0xbc, 0x0a, 0xf1, 0xfa, 0x0f, 0xef, 0xe4, 0x78, 0xd0, 0x41, 0x70, 0x89, 0xbe, 0x4f, 0xfc,
		0x06, 0x23, 0xcf, 0xb2, 0x83, 0x11, 0x17, 0xe1, 0x24, 0xec, 0x90, 0x9f, 0xb2, 0x28, 0x67, 0xb2,
		0xed, 0x54, 0x85, 0xb1, 0x24, 0x58, 0xc2, 0x66, 0x04, 0xfb, 0x55, 0x77, 0xae, 0xa8, 0x8f, 0x45,
		0x0c, 0x71, 0xca, 0x15, 0x64, 0x54, 0x9c, 0x6e, 0x2d, 0xbd, 0x50, 0xc1, 0x22, 0x4d, 0x96, 0x50,
		0x96, 0xda, 0x79, 0x48, 0x07, 0xb7, 0x92, 0x30, 0xf5, 0x35, 0x7b, 0x87, 0xf4, 0x69, 0x87, 0xa9,
		0x01, 0x30, 0xb0, 0xf3, 0x12, 0x71, 0xd1, 0x27, 0xf1, 0xa2, 0x16, 0x12, 0x49, 0x8e, 0xb0, 0x6c
	]);
	signature = new Uint8Array([
		0xb3, 0x1a, 0x31, 0x34, 0xc6, 0xff, 0x70, 0x0b, 0x8c, 0x93, 0x90, 0xf1, 0xed, 0xe0, 0x10, 0xa1,
		0x40, 0x4d, 0x0f, 0x29, 0x7f, 0xf5, 0xd3, 0x22, 0xdb, 0xc3, 0xe3, 0xe9, 0xbe, 0x54, 0x1f, 0x1a,
		0xa4, 0x66, 0x7a, 0xab, 0x8e, 0xb5, 0x91, 0x38, 0xbd, 0xcd, 0x1d, 0x4e, 0x06, 0x4e, 0x9a, 0x28,
		0x4c, 0x50, 0x3d, 0xb8, 0x6b, 0xde, 0x9d, 0x27, 0x0d, 0x41, 0x7d, 0x3c, 0x98, 0xd1, 0xbf, 0xe6,
		0x7c, 0xbb, 0xbb, 0xf7, 0xaf, 0x40, 0x21, 0x87, 0x9e, 0x02, 0x60, 0x95, 0x73, 0x07, 0x0f, 0x6c,
		0x5d, 0x59, 0x30, 0xe6, 0x5d, 0x87, 0x1d, 0x72, 0x19, 0x7e, 0x57, 0xac, 0xc9, 0xfb, 0x69, 0xd0,
		0x9b, 0x9d, 0x41, 0x32, 0x49, 0x59, 0xc2, 0x91, 0xcf, 0x49, 0xc5, 0x81, 0xf4, 0x96, 0x81, 0xc3,
		0xce, 0x6e, 0x3d, 0x22, 0xf0, 0xc2, 0x7a, 0xa5, 0xb1, 0xca, 0x39, 0x79, 0xc9, 0x30, 0x58, 0x72,
		0x80, 0x41, 0x5a, 0xc3, 0x8c, 0xa6, 0x6b, 0xa2, 0x95, 0xab, 0x5b, 0x8b, 0x78, 0xb4, 0xcd, 0xf7,
		0x19, 0xc8, 0x1c, 0x8b, 0x76, 0x29, 0x35, 0xbe, 0x38, 0x45, 0x12, 0x4a, 0x55, 0x06, 0x81, 0x5a,
		0xdf, 0x7d, 0x28, 0x9a, 0xd0, 0x30, 0x96, 0x2a, 0x4b, 0x16, 0xcd, 0x53, 0x37, 0x68, 0x88, 0xa2,
		0x66, 0xe3, 0x5d, 0xeb, 0x00, 0x12, 0x61, 0x27, 0x31, 0xb8, 0xc2, 0x84, 0xcf, 0xf2, 0xe7, 0x1c,
		0x8d, 0x09, 0xb2, 0xc7, 0xb2, 0x29, 0x48, 0x81, 0xd4, 0xb7, 0xdf, 0x45, 0x96, 0x08, 0x77, 0x8d,
		0xd3, 0x1a, 0xf8, 0xeb, 0x74, 0xdd, 0x58, 0x7c, 0x68, 0x7c, 0x1a, 0x35, 0x48, 0xc0, 0xaa, 0xa0,
		0x03, 0x86, 0x7d, 0xb0, 0x53, 0xad, 0xd6, 0x78, 0xf6, 0xc1, 0x50, 0x0f, 0x9f, 0x9a, 0x51, 0x32,
		0xc4, 0x10, 0xf7, 0x72, 0x19, 0xb1, 0xcf, 0xb7, 0x30, 0x23, 0x65, 0xeb, 0x6f, 0xc1, 0x94, 0xe3
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xdb7c7n;
	message = new Uint8Array([
		0x36, 0xaf, 0x13, 0x6c, 0x05, 0xbb, 0xc4, 0x1e, 0xe5, 0x7e, 0x94, 0xa1, 0xbe, 0x10, 0xcc, 0x6e,
		0x33, 0x55, 0x52, 0x25, 0x79, 0x7e, 0x1c, 0x2d, 0x6a, 0xd3, 0xea, 0x9b, 0xd5, 0xb0, 0x35, 0x56,
		0x19, 0xce, 0x62, 0x78, 0xf2, 0xc4, 0x3c, 0xf7, 0x92, 0xce, 0xa1, 0x84, 0xf4, 0xcc, 0x7b, 0xb3,
		0x6d, 0x8e, 0xf3, 0x5d, 0x84, 0x4e, 0xe1, 0x43, 0x03, 0x7e, 0x86, 0xf3, 0x4e, 0xc5, 0x7d, 0xf0,
		0xf4, 0x44, 0xef, 0x0d, 0x84, 0x1d, 0x07, 0x1a, 0xa2, 0x36, 0xa5, 0xc2, 0x59, 0x3a, 0x57, 0xb4,
		0xb3, 0xe1, 0x85, 0x01, 0x87, 0x72, 0xeb, 0xc5, 0x93, 0x86, 0x4c, 0x0a, 0xca, 0x0e, 0x65, 0xe9,
		0xef, 0x97, 0x21, 0xf2, 0x63, 0xcd, 0x0b, 0xcf, 0x3c, 0x3e, 0x08, 0x23, 0x96, 0x61, 0x46, 0xb8,
		0x2e, 0xd7, 0x70, 0xda, 0x2d, 0xf0, 0x24, 0xfe, 0x41, 0x71, 0xa6, 0xa8, 0xf2, 0x95, 0xd6, 0x8b
	]);
	signature = new Uint8Array([
		0x7f, 0x37, 0x15, 0xdb, 0xa7, 0x89, 0xc2, 0x33, 0x99, 0x6d, 0xab, 0xef, 0xac, 0x36, 0xc3, 0xd8,
		0x60, 0xc9, 0xdb, 0xe6, 0x4e, 0x58, 0xf9, 0x40, 0xd5, 0xd3, 0xea, 0xaf, 0xc6, 0x68, 0xcf, 0x97,
		0x61, 0xe2, 0x34, 0x1d, 0x9b, 0xf2, 0x8a, 0x3c, 0x3a, 0xd6, 0x70, 0x71, 0xfa, 0x2d, 0x87, 0x5a,
		0x44, 0x0d, 0xf5, 0xfa, 0xa2, 0x50, 0xa8, 0x9c, 0xd9, 0xc9, 0xea, 0xa5, 0xcb, 0xde, 0x31, 0x15,
		0x89, 0xd4, 0xa4, 0x43, 0xc4, 0x14, 0x89, 0x09, 0xd6, 0xcf, 0x69, 0xca, 0x0b, 0x15, 0x0d, 0x7c,
		0xe4, 0x6e, 0x7e, 0x50, 0x12, 0x8b, 0x94, 0x2d, 0x89, 0x6f, 0x9f, 0xd5, 0x36, 0xe3, 0x11, 0xe5,
		0x69, 0x41, 0x5b, 0x40, 0xe4, 0x05, 0xc3, 0xd3, 0x6c, 0x89, 0x46, 0x40, 0x06, 0x30, 0x58, 0x42,
		0xf9, 0xe9, 0xac, 0x24, 0xbc, 0x9a, 0x54, 0x3e, 0xbc, 0x69, 0x3c, 0xdc, 0x99, 0xdc, 0x1e, 0xa4,
		0xd8, 0x8b, 0x33, 0x87, 0xac, 0x8e, 0xc8, 0x99, 0xa8, 0xb7, 0x47, 0x12, 0x59, 0xbf, 0x1d, 0x62,
		0xfb, 0x1f, 0x15, 0xe6, 0xfb, 0x29, 0xa0, 0x8b, 0x30, 0x69, 0x6c, 0x4d, 0x07, 0xe2, 0x75, 0x17,
		0xbc, 0xa5, 0xbf, 0xd2, 0x2c, 0x3b, 0x1c, 0x7c, 0x37, 0xd0, 0xb5, 0xb2, 0x4b, 0x4a, 0x79, 0x6e,
		0xf4, 0xd6, 0x58, 0x9f, 0x9b, 0x8a, 0x0a, 0x48, 0x1d, 0xb4, 0xfc, 0x66, 0xb4, 0x4a, 0xdb, 0xa4,
		0xd8, 0x3b, 0xf1, 0xcf, 0xf3, 0x77, 0xea, 0xd4, 0x41, 0x09, 0x47, 0x6d, 0x71, 0xf3, 0x4a, 0x8a,
		0xc6, 0x33, 0x03, 0xb3, 0xbf, 0xee, 0xa1, 0x71, 0xaa, 0xda, 0xc8, 0x4c, 0x0c, 0xcd, 0x59, 0xad,
		0xdb, 0x5a, 0xa9, 0x23, 0x21, 0x34, 0x22, 0xd5, 0x8d, 0x91, 0x4b, 0x65, 0xa1, 0x70, 0x5f, 0xb8,
		0x84, 0xe5, 0x6e, 0xf5, 0x14, 0x72, 0xae, 0xd1, 0x50, 0x50, 0xbe, 0xe2, 0x68, 0x72, 0x0c, 0x55
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xdb7c7n;
	message = new Uint8Array([
		0xf5, 0x35, 0x3b, 0xc9, 0x71, 0xef, 0xc5, 0x42, 0xfe, 0x9d, 0xf9, 0x30, 0xdb, 0x58, 0x1a, 0x15,
		0x8f, 0x54, 0x1d, 0x68, 0xc4, 0x65, 0x15, 0x3b, 0x58, 0xc2, 0xef, 0x1b, 0xb2, 0x0a, 0x5f, 0x38,
		0x52, 0x84, 0x1a, 0xc6, 0xac, 0xab, 0x46, 0xa2, 0x37, 0xea, 0x2e, 0x39, 0xc1, 0xa4, 0x3b, 0xa6,
		0x05, 0x77, 0x20, 0x1a, 0x7f, 0xc2, 0x54, 0x81, 0x7f, 0x64, 0xc5, 0x62, 0x7d, 0xc7, 0xcb, 0x07,
		0xac, 0x1e, 0x5a, 0xdf, 0xd1, 0xea, 0x7d, 0x20, 0x56, 0xc3, 0xff, 0xb0, 0x9a, 0x55, 0x6b, 0x46,
		0x8c, 0xa9, 0x38, 0xcd, 0x78, 0xa6, 0x3d, 0x09, 0x21, 0xd7, 0x6b, 0x7c, 0x0f, 0x6e, 0xba, 0x8b,
		0x2a, 0x89, 0x64, 0xdd, 0x88, 0xb5, 0x52, 0x04, 0x84, 0xb0, 0xd3, 0x5f, 0x10, 0x74, 0x94, 0x3e,
		0x4c, 0x70, 0xcd, 0x48, 0x57, 0x19, 0xb8, 0x1a, 0x64, 0xa1, 0x47, 0x31, 0x11, 0x06, 0x16, 0x0a
	]);
	signature = new Uint8Array([
		0x5f, 0x96, 0x03, 0xf7, 0xe5, 0x64, 0x51, 0x95, 0x97, 0x54, 0x87, 0x87, 0xa7, 0x4e, 0x66, 0x63,
		0x52, 0x67, 0xd3, 0xcb, 0xf5, 0xc2, 0x6d, 0xd9, 0xdf, 0x7a, 0xc1, 0x06, 0x9a, 0x71, 0x2b, 0xae,
		0x0c, 0x1d, 0xdc, 0x15, 0x23, 0xd1, 0x75, 0x16, 0x10, 0xae, 0x85, 0xb1, 0xf5, 0x91, 0x92, 0x67,
		0x4a, 0x46, 0xbd, 0x72, 0x7b, 0xbf, 0x0a, 0xf9, 0x02, 0xf2, 0x04, 0xc7, 0xeb, 0xa4, 0xc6, 0xfd,
		0xae, 0x5f, 0x84, 0xc0, 0xd1, 0x6e, 0xd0, 0xb8, 0xc0, 0x00, 0x51, 0x7b, 0x44, 0x64, 0x73, 0xfb,
		0xdc, 0x07, 0xc7, 0x4a, 0xf0, 0xac, 0x6a, 0x66, 0xac, 0x64, 0x8c, 0x13, 0x97, 0xc4, 0x2b, 0xb9,
		0xa7, 0x4d, 0xb2, 0x7d, 0xc5, 0x60, 0x5c, 0x62, 0xe4, 0x0e, 0x5e, 0xee, 0x1c, 0x90, 0x21, 0xea,
		0xa3, 0x0a, 0x76, 0x52, 0x3a, 0x35, 0xe6, 0xec, 0xf5, 0x13, 0x37, 0x9c, 0x0e, 0x6e, 0x2d, 0xd2,
		0xfa, 0x38, 0x61, 0x1e, 0x91, 0x00, 0x7f, 0x82, 0xa3, 0xb3, 0x7d, 0x84, 0xa6, 0xfb, 0xaf, 0x93,
		0x62, 0x86, 0xf1, 0x95, 0xe8, 0x06, 0x4e, 0x17, 0x2e, 0x8b, 0xbb, 0xc2, 0x2d, 0x4c, 0x15, 0x54,
		0x8d, 0x0e, 0x39, 0xb1, 0xef, 0xf1, 0x4d, 0x1b, 0x0b, 0xa7, 0x5c, 0x4e, 0x1d, 0x0a, 0xcd, 0x16,
		0xfb, 0x85, 0x66, 0x74, 0x20, 0x91, 0xdd, 0xeb, 0x63, 0x7a, 0xa2, 0x76, 0x7e, 0x5b, 0xd8, 0x59,
		0xf1, 0x45, 0xc1, 0x35, 0xcd, 0x60, 0x25, 0x7a, 0x8c, 0x84, 0xef, 0x58, 0x7d, 0xaf, 0xca, 0x0d,
		0x97, 0x42, 0x5a, 0x10, 0x16, 0xd6, 0xdc, 0x8c, 0x3f, 0x7e, 0xaa, 0xaf, 0x8d, 0x74, 0xfe, 0x42,
		0xfb, 0xb6, 0x49, 0x58, 0xbd, 0x00, 0xad, 0xf0, 0x3d, 0xb4, 0x39, 0x20, 0xd9, 0x83, 0x1a, 0xc4,
		0x9d, 0xec, 0x2c, 0xf5, 0x34, 0xd3, 0xcc, 0xe2, 0xdc, 0xae, 0x9a, 0x10, 0x2a, 0x60, 0x8c, 0x5f
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xdb7c7n;
	message = new Uint8Array([
		0x36, 0x72, 0x47, 0x17, 0xec, 0x13, 0x58, 0x4b, 0x5a, 0xe5, 0xc9, 0x81, 0x61, 0x18, 0xa0, 0xf5,
		0x59, 0x6e, 0x1d, 0x37, 0xa8, 0x8a, 0xf0, 0x88, 0x93, 0x6b, 0xaa, 0x87, 0x54, 0x34, 0x72, 0x0d,
		0x6c, 0x2e, 0xf9, 0x55, 0x3a, 0x0f, 0xb0, 0x60, 0xcd, 0x7d, 0x38, 0x97, 0xf7, 0xce, 0x19, 0xb3,
		0xa2, 0x12, 0xb8, 0xda, 0x67, 0x53, 0x83, 0x0a, 0x5d, 0x1b, 0x6f, 0xbb, 0x2f, 0x37, 0xa4, 0xc0,
		0x72, 0xbb, 0x76, 0x6f, 0x35, 0x46, 0x98, 0x01, 0xd9, 0x87, 0x8c, 0x3c, 0x23, 0x00, 0x5e, 0x4f,
		0x8f, 0x0a, 0x92, 0xfd, 0xe7, 0x1a, 0x5b, 0xfd, 0x15, 0x42, 0x0e, 0xa1, 0x36, 0xfb, 0xd5, 0xb7,
		0xef, 0x21, 0xa8, 0xad, 0x04, 0x3f, 0x79, 0xf8, 0x26, 0x0d, 0xaf, 0xb5, 0x0d, 0x37, 0xd6, 0x91,
		0xc7, 0x60, 0x95, 0xe7, 0x50, 0x67, 0xe0, 0x29, 0x62, 0xe9, 0x6e, 0x81, 0x8e, 0x07, 0x6e, 0xb8
	]);
	signature = new Uint8Array([
		0x74, 0x8b, 0x86, 0xaa, 0x56, 0x8f, 0xd9, 0xdb, 0x1c, 0x80, 0x4f, 0xf3, 0x92, 0x13, 0x50, 0x35,
		0x3a, 0x4e, 0x68, 0xf3, 0x2a, 0x06, 0x06, 0x6b, 0xbb, 0xb3, 0x93, 0x3e, 0x63, 0x0f, 0xb5, 0x7d,
		0xb6, 0xae, 0x09, 0x7d, 0x26, 0xe1, 0x67, 0xe9, 0xe7, 0xa7, 0xe5, 0x94, 0xd3, 0x0e, 0x5c, 0xf1,
		0x83, 0x34, 0x7b, 0x69, 0x1b, 0xb9, 0x91, 0xe6, 0x24, 0x9e, 0xa9, 0xf3, 0xb6, 0xb3, 0xee, 0x98,
		0x30, 0xb5, 0x7e, 0x20, 0x8b, 0x4f, 0x69, 0xb8, 0x61, 0xfe, 0xbe, 0x5b, 0xf2, 0xa5, 0x6c, 0x0f,
		0x88, 0x6c, 0xa7, 0x15, 0xfc, 0x79, 0x0e, 0x01, 0x12, 0x34, 0x84, 0x36, 0xaf, 0x22, 0xf5, 0x6a,
		0xae, 0xd6, 0x9b, 0x98, 0x54, 0xac, 0x1b, 0x4c, 0xdf, 0xb8, 0x4f, 0xbe, 0x29, 0xa3, 0xfa, 0xa7,
		0xdf, 0x95, 0x70, 0xe7, 0x19, 0x50, 0xff, 0xf8, 0xd9, 0xc6, 0xd5, 0x13, 0x8c, 0xb4, 0xae, 0x7c,
		0x6a, 0xa5, 0x8e, 0x61, 0x6a, 0x85, 0x8e, 0xbc, 0x36, 0x7a, 0x3b, 0x2f, 0xa8, 0x13, 0xa9, 0x59,
		0x56, 0xbd, 0xf7, 0x5d, 0x4d, 0xb0, 0xd1, 0xca, 0x37, 0x04, 0xfc, 0xd4, 0x9a, 0x23, 0x4f, 0xb6,
		0xf0, 0xe9, 0xc5, 0xd1, 0x7e, 0x22, 0x09, 0x05, 0xc8, 0x60, 0xda, 0x62, 0xee, 0xec, 0xdf, 0xdd,
		0x9b, 0xee, 0xcc, 0xb3, 0xa4, 0x3e, 0x86, 0xf5, 0xaf, 0xd9, 0x8e, 0x30, 0x03, 0xd5, 0x23, 0xcd,
		0x49, 0x18, 0x97, 0xd3, 0x62, 0x9c, 0x39, 0xcc, 0xd1, 0x5f, 0x15, 0x45, 0x54, 0xc3, 0x69, 0xe6,
		0xf0, 0x3b, 0xd0, 0xaf, 0xb9, 0x2e, 0x56, 0x12, 0xd8, 0x74, 0x18, 0xef, 0x18, 0x44, 0xe8, 0x12,
		0xb1, 0x2f, 0x71, 0x8c, 0xed, 0xac, 0xe1, 0x1d, 0x61, 0x87, 0x1f, 0x63, 0x37, 0xf6, 0x06, 0x3a,
		0xa4, 0x1f, 0x54, 0x2c, 0xd3, 0xb9, 0xff, 0xf2, 0xdd, 0xd8, 0xc4, 0x2a, 0x9c, 0x9b, 0xe7, 0x92
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(true);

	e =
		0xdb7c7n;
	message = new Uint8Array([
		0x1b, 0xb0, 0x27, 0xc0, 0xe5, 0xd6, 0x54, 0x99, 0x7d, 0xe7, 0xdc, 0x16, 0x0b, 0x71, 0xe0, 0x63,
		0x58, 0x2c, 0x08, 0x19, 0xec, 0x8e, 0xc7, 0x6d, 0x77, 0x9a, 0xe1, 0xa8, 0x6f, 0xf9, 0x2b, 0xd7,
		0xfb, 0x4b, 0x92, 0xc3, 0x10, 0xbf, 0x5f, 0x23, 0xd9, 0xe1, 0xba, 0x11, 0x5d, 0xb4, 0x6c, 0xbb,
		0x5c, 0x01, 0xe9, 0x5b, 0x79, 0xee, 0x8d, 0x69, 0x9f, 0xd2, 0x26, 0x0e, 0x9d, 0x48, 0xb3, 0xdd,
		0x13, 0x83, 0x6b, 0xbe, 0x92, 0xe1, 0x01, 0x2a, 0xff, 0xc2, 0x27, 0x9e, 0x38, 0x9a, 0x51, 0x49,
		0xfa, 0x45, 0xbb, 0x08, 0x03, 0x9b, 0xad, 0x95, 0x73, 0x45, 0xfe, 0xfc, 0x78, 0xcf, 0xd7, 0x4e,
		0x2a, 0xfd, 0xb9, 0x98, 0xb4, 0x63, 0xc1, 0x16, 0xb5, 0x30, 0x2b, 0xa5, 0xe6, 0x4b, 0x16, 0x77,
		0xfc, 0xa1, 0x86, 0x0a, 0xd0, 0xbd, 0xaf, 0x5b, 0xbd, 0x99, 0x71, 0x57, 0x49, 0xb3, 0x1f, 0x92
	]);
	signature = new Uint8Array([
		0x9d, 0x40, 0x6f, 0x9d, 0xa2, 0xfd, 0x0e, 0x20, 0x3c, 0x09, 0x43, 0x42, 0x7d, 0xfe, 0x10, 0x74,
		0x25, 0x8b, 0x28, 0x82, 0x66, 0xdd, 0x3d, 0x85, 0xb1, 0xac, 0x5f, 0x10, 0x4d, 0x50, 0xf3, 0x03,
		0xf3, 0x44, 0x2c, 0xad, 0x82, 0xb9, 0xde, 0x40, 0x18, 0x8e, 0x97, 0x2a, 0x08, 0x95, 0xd9, 0x1d,
		0xb3, 0xd5, 0xa8, 0xb9, 0x58, 0x8d, 0xa7, 0xf6, 0x3b, 0xfa, 0x99, 0xd7, 0x9f, 0x98, 0xa0, 0x3a,
		0x3b, 0xab, 0x50, 0x2a, 0x7c, 0x26, 0x9a, 0x9b, 0x85, 0xd9, 0xd5, 0x7c, 0xff, 0x86, 0x90, 0x8e,
		0x7d, 0x04, 0xf5, 0xac, 0x27, 0x57, 0xe6, 0x49, 0x2c, 0xdb, 0x3f, 0x76, 0xea, 0x9e, 0x5f, 0xd8,
		0xc9, 0xb3, 0x8b, 0xf0, 0x82, 0x8a, 0xce, 0x69, 0xec, 0x8e, 0xbc, 0x79, 0x6f, 0x0c, 0xb9, 0xdf,
		0x24, 0x71, 0x4a, 0x16, 0x03, 0xfc, 0xcc, 0x04, 0x19, 0x55, 0x12, 0x19, 0x47, 0x05, 0xce, 0x21,
		0x44, 0xf6, 0x36, 0xef, 0x56, 0x60, 0x0d, 0xf4, 0x0d, 0x6f, 0x47, 0x25, 0x70, 0xcc, 0xdd, 0x57,
		0xbb, 0xe0, 0xb5, 0x50, 0xc1, 0x37, 0x82, 0x02, 0x18, 0x5c, 0x87, 0x1d, 0x03, 0xfe, 0x22, 0xdc,
		0x0b, 0x26, 0x59, 0x10, 0xf6, 0x3c, 0xb8, 0x9b, 0xc3, 0x4b, 0x4d, 0x71, 0xeb, 0x43, 0x79, 0xff,
		0x32, 0xc6, 0xe8, 0xae, 0xc0, 0x07, 0x93, 0x15, 0xb8, 0x96, 0xcf, 0x01, 0x5e, 0xff, 0x97, 0x99,
		0xfc, 0xd2, 0x85, 0xca, 0xfc, 0x50, 0xd1, 0x5b, 0x8b, 0x35, 0xb0, 0x21, 0x6c, 0x53, 0x5d, 0xf9,
		0xb5, 0xb3, 0x90, 0x67, 0x27, 0x30, 0x37, 0x44, 0x4f, 0xb4, 0xce, 0x65, 0x96, 0x7a, 0xde, 0x4d,
		0xf3, 0x0d, 0x3a, 0xed, 0xcd, 0xee, 0x30, 0xa7, 0x49, 0x70, 0x13, 0x05, 0x5b, 0xf6, 0x3b, 0x62,
		0x71, 0xd3, 0x0b, 0x10, 0x56, 0x6d, 0x2a, 0x76, 0x7f, 0x35, 0x74, 0xf9, 0xc2, 0x44, 0x6e, 0xcf
	]);
	saltLength = 20;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	n =
		0xbc97958f980fc043630735e36aef0f278be381655bc6a4940864e6925d31ff1c9392ac5fa44b06af295818f03948a117bc7f0fe8f2f5dc0c1cbd9d1819913f13c0765f41c17a62a9fa70422578c86305c0e67c56b2d555fcc12a84c45ca00502b692d8790a26bb73a8f2df1fa44cf910ca45e8ea2c665a9b6d266c2c4c6075c55e686511683cf75bbca9573e8b79f01583d57bb21b6e8f46215962b9b3cb1e57ea56221f6ab61cf33f969babe3b5a1a98a76387144cd617751ffa012d8e7d1471b264c274228e2bcd549468a57316f392c75625435ddbe7dd3dc40544f4a9bb9cf5385b255ba57769897203a7a3d0f2808e05492b69a58483f5fc396e6523da3n;
	e =
		0xf3e453n;
	message = new Uint8Array([
		0x2e, 0x90, 0x05, 0x06, 0x55, 0x24, 0x72, 0x89, 0xb2, 0x9a, 0xa7, 0x5e, 0x12, 0x1c, 0x7c, 0x12,
		0x9e, 0xc0, 0xfc, 0x93, 0x5d, 0xff, 0x0b, 0x42, 0xfa, 0x68, 0x4c, 0x49, 0xc8, 0x95, 0x41, 0x2f,
		0x03, 0x5f, 0xb4, 0xaa, 0x59, 0x4e, 0x56, 0xb4, 0xa8, 0x53, 0xa7, 0xe0, 0x0a, 0xba, 0x15, 0xef,
		0x0f, 0x5a, 0x68, 0x9e, 0x49, 0x0f, 0x5d, 0xc3, 0x0e, 0x6a, 0x91, 0x98, 0x79, 0xa6, 0xa1, 0x57,
		0xb2, 0xde, 0x90, 0x07, 0x6f, 0x7e, 0x69, 0x95, 0xbb, 0xf8, 0x25, 0x26, 0xf7, 0xb8, 0xce, 0xac,
		0x1e, 0x59, 0xe5, 0xb7, 0x4d, 0x19, 0x02, 0x8f, 0x82, 0x8a, 0xba, 0x7f, 0xa3, 0x8b, 0xc5, 0x73,
		0xc3, 0x77, 0x60, 0xc6, 0xa2, 0x9c, 0xf1, 0x55, 0x72, 0xef, 0xea, 0xd8, 0xe1, 0xfd, 0xef, 0x72,
		0x53, 0x25, 0x3b, 0x86, 0x6f, 0x05, 0x40, 0xcd, 0xde, 0x32, 0x8d, 0xa5, 0x4f, 0x2c, 0xf5, 0xac
	]);
	signature = new Uint8Array([
		0xbb, 0xf5, 0x35, 0x43, 0xa9, 0xdc, 0x4a, 0x94, 0x40, 0x18, 0x80, 0xf3, 0x90, 0x6d, 0x0c, 0x33,
		0xa6, 0x43, 0x37, 0xfe, 0xee, 0x11, 0xdf, 0xde, 0xc2, 0xef, 0x8d, 0x2e, 0x6e, 0xac, 0xad, 0x08,
		0x24, 0x38, 0xf9, 0xbb, 0x75, 0x49, 0xa9, 0xfd, 0x26, 0xc5, 0x32, 0x31, 0xa6, 0xed, 0x6d, 0xca,
		0xa8, 0x8c, 0xf1, 0xe5, 0xec, 0x87, 0x30, 0x54, 0x25, 0xff, 0xb3, 0xca, 0x10, 0x3e, 0x82, 0x55,
		0x46, 0xb5, 0x3b, 0x37, 0x9d, 0x8e, 0xf5, 0xa1, 0xf3, 0x6b, 0x99, 0x86, 0x20, 0xef, 0x90, 0x9a,
		0x63, 0x06, 0xed, 0x09, 0x1f, 0xa2, 0x8f, 0xed, 0x1c, 0xa6, 0x45, 0x9a, 0x58, 0x84, 0xca, 0xfa,
		0x1a, 0xb7, 0x40, 0x86, 0xf7, 0x58, 0x9d, 0x74, 0x76, 0xf8, 0xcf, 0xa2, 0xb4, 0xb9, 0x13, 0x68,
		0x30, 0x13, 0x57, 0x11, 0x0e, 0x48, 0x86, 0x3a, 0x2b, 0x45, 0x2b, 0x6d, 0x76, 0xb3, 0x07, 0x32,
		0x53, 0xea, 0x49, 0x5d, 0xd6, 0xc9, 0x97, 0x8b, 0xec, 0x85, 0x1e, 0x4c, 0x63, 0x5a, 0x37, 0xe6,
		0xdc, 0xf7, 0x14, 0xd0, 0x9d, 0x38, 0x36, 0xe8, 0x71, 0x93, 0x40, 0x5e, 0x60, 0xdb, 0x26, 0x12,
		0xd4, 0x50, 0x2a, 0x68, 0x5e, 0x66, 0x71, 0xeb, 0x03, 0xfe, 0x43, 0xb1, 0x29, 0x93, 0xe8, 0xae,
		0x1c, 0x96, 0x5a, 0x1f, 0x25, 0x59, 0xd3, 0x56, 0x6e, 0x6d, 0x69, 0xcd, 0xec, 0x42, 0xcc, 0xd5,
		0xa3, 0x04, 0x6f, 0xd1, 0x06, 0xe1, 0x56, 0xde, 0x5f, 0x68, 0xad, 0xba, 0x7d, 0x66, 0x4a, 0xf8,
		0x97, 0x28, 0x77, 0x5b, 0x9a, 0xc9, 0xec, 0x89, 0xe8, 0xec, 0x11, 0x85, 0xea, 0x28, 0x2f, 0x8f,
		0x97, 0xd7, 0x2c, 0xa8, 0xcb, 0x0d, 0xd7, 0x39, 0x38, 0x6d, 0x0c, 0xf6, 0xca, 0xa0, 0x6a, 0x4c,
		0x07, 0x4a, 0x27, 0x08, 0x63, 0xba, 0xaf, 0xa9, 0x18, 0x52, 0x6a, 0xa5, 0x4c, 0x11, 0xcd, 0x67
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xf3e453n;
	message = new Uint8Array([
		0x1f, 0xfb, 0xdd, 0xc2, 0xa2, 0xc8, 0xbb, 0x9f, 0xe7, 0xa4, 0x5e, 0x4d, 0x55, 0x32, 0x71, 0x1f,
		0x07, 0xeb, 0x17, 0xf5, 0x67, 0x64, 0x25, 0xa8, 0xfe, 0xcf, 0x8e, 0xa8, 0x8a, 0xc5, 0x1f, 0xe3,
		0x51, 0x43, 0x6c, 0xe9, 0xb6, 0xf2, 0x0a, 0x4e, 0x0a, 0xab, 0xfe, 0x50, 0xa4, 0x3a, 0x76, 0xba,
		0x34, 0x62, 0xb7, 0x09, 0x54, 0x22, 0x57, 0xcc, 0x60, 0x37, 0xac, 0x51, 0x88, 0xe2, 0x84, 0x7d,
		0x23, 0xeb, 0x16, 0xfc, 0x46, 0xe6, 0x39, 0x9b, 0x96, 0xb5, 0xd4, 0xf1, 0x5a, 0x4e, 0x96, 0x45,
		0xd5, 0xbf, 0xe7, 0xac, 0xd2, 0x6f, 0x1e, 0x72, 0x80, 0xa6, 0xf4, 0xbb, 0x80, 0x4f, 0x38, 0x6a,
		0x3d, 0xfd, 0xc5, 0x42, 0x7c, 0x2d, 0xb2, 0x4b, 0x34, 0xcb, 0xc8, 0x78, 0x9f, 0xf7, 0x39, 0x86,
		0x91, 0x08, 0x8e, 0x27, 0x09, 0xd1, 0xe2, 0x60, 0x05, 0x24, 0x4e, 0x30, 0x9b, 0x95, 0xa4, 0x72
	]);
	signature = new Uint8Array([
		0x82, 0xfb, 0xd5, 0xa6, 0xd9, 0x37, 0xfa, 0x94, 0xef, 0xf1, 0xc0, 0xd9, 0xab, 0xcc, 0xd9, 0x22,
		0x3b, 0xc6, 0x3a, 0x60, 0x00, 0x23, 0xb1, 0x8c, 0x3b, 0xe0, 0x59, 0xd1, 0xe7, 0x3f, 0xa6, 0x2f,
		0x15, 0x38, 0xdd, 0xf4, 0x56, 0x43, 0xdf, 0xf8, 0x9a, 0x2d, 0x8f, 0x04, 0x10, 0xc1, 0x07, 0x61,
		0x93, 0x3c, 0xb2, 0xd8, 0xd7, 0x02, 0xa4, 0xb6, 0x58, 0x2f, 0xe3, 0x49, 0x48, 0x1d, 0xfd, 0x18,
		0x5f, 0x79, 0xa3, 0x6f, 0x52, 0xa7, 0xce, 0x77, 0x6d, 0xe5, 0x8d, 0xad, 0x1e, 0xda, 0xf0, 0x32,
		0xed, 0xfe, 0xb7, 0xc1, 0x65, 0x40, 0xec, 0xa6, 0x4b, 0xc5, 0xdf, 0x62, 0x2c, 0x05, 0xdd, 0x62,
		0x9b, 0xe3, 0x40, 0x4b, 0x9b, 0x4d, 0x26, 0x3e, 0xcf, 0x70, 0x6c, 0x36, 0x4b, 0x0b, 0xc7, 0xb1,
		0x4d, 0xd0, 0x34, 0x6b, 0x8d, 0x25, 0x15, 0xf8, 0x1b, 0x1f, 0x50, 0xef, 0x88, 0x71, 0xac, 0x11,
		0xed, 0x33, 0x97, 0x3b, 0x99, 0x2d, 0xee, 0xb6, 0x01, 0xb2, 0xf3, 0x4a, 0xf3, 0x81, 0xe1, 0xd7,
		0x40, 0x91, 0xb6, 0xac, 0x5d, 0x7b, 0x20, 0x9d, 0x72, 0x8b, 0xbe, 0x17, 0x04, 0x6f, 0x21, 0x69,
		0x2a, 0xf8, 0x94, 0x8b, 0x3b, 0xb1, 0x94, 0x34, 0x9d, 0xca, 0xfb, 0x2a, 0x58, 0x0a, 0x5e, 0xc1,
		0x20, 0xaf, 0x99, 0x9a, 0x3e, 0xce, 0xd9, 0xc1, 0xed, 0xd2, 0xe8, 0x1c, 0xe7, 0x5c, 0xee, 0x9f,
		0x16, 0x36, 0x35, 0x1a, 0x04, 0x02, 0x8a, 0x5d, 0x61, 0x5c, 0xd9, 0x92, 0xc4, 0x67, 0xb6, 0x07,
		0xc1, 0xd9, 0x29, 0xdb, 0x0c, 0x88, 0x4f, 0x1f, 0xd0, 0x68, 0x81, 0x07, 0xbf, 0xec, 0x24, 0x28,
		0xad, 0xc9, 0xd3, 0xb4, 0x0b, 0x13, 0xd9, 0xf4, 0xf2, 0x40, 0x89, 0x3a, 0x54, 0x77, 0xf1, 0xde,
		0x62, 0x61, 0x30, 0xfb, 0xac, 0x9a, 0xf3, 0xba, 0x92, 0x07, 0xbc, 0x85, 0x7f, 0xd2, 0x06, 0xc2
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xf3e453n;
	message = new Uint8Array([
		0xeb, 0xcc, 0x2b, 0xa9, 0x4d, 0x3b, 0x4e, 0x30, 0x2a, 0x8c, 0xe3, 0x15, 0xce, 0xe4, 0x4f, 0xb9,
		0x66, 0xcd, 0xbf, 0x28, 0x20, 0xd0, 0x6a, 0x4c, 0x8c, 0x46, 0x16, 0x60, 0x48, 0x6b, 0xdd, 0xa6,
		0xdc, 0xb4, 0x31, 0x5d, 0xe3, 0x63, 0x1e, 0xee, 0x6c, 0x58, 0xcf, 0x66, 0x9f, 0x2a, 0x54, 0x28,
		0xa4, 0x76, 0xa2, 0xe4, 0xc0, 0x77, 0xdb, 0xc3, 0xc1, 0xd7, 0xd0, 0xe4, 0x9d, 0xc5, 0xc5, 0x0c,
		0x56, 0x48, 0x74, 0x99, 0x20, 0xd3, 0x54, 0xb8, 0xc6, 0x19, 0x1a, 0xd8, 0x4a, 0x22, 0x80, 0x5f,
		0xcc, 0x9f, 0x46, 0x9b, 0xac, 0x7b, 0x77, 0xfb, 0xf3, 0xb2, 0xee, 0x7f, 0xef, 0x66, 0x18, 0x6d,
		0x1e, 0x30, 0xfc, 0x46, 0x4e, 0xb4, 0x78, 0xf8, 0x01, 0x78, 0xcd, 0x55, 0x16, 0xf6, 0x5e, 0xc4,
		0xa6, 0xef, 0xb4, 0x36, 0x2d, 0x03, 0xc6, 0x5c, 0xea, 0x7f, 0x77, 0x18, 0x88, 0x76, 0x61, 0x31
	]);
	signature = new Uint8Array([
		0xa2, 0xa1, 0x19, 0xed, 0xb1, 0xf0, 0xe2, 0xc9, 0x61, 0xfb, 0x42, 0x37, 0x17, 0xbe, 0x75, 0xcb,
		0x4f, 0x9a, 0x94, 0x43, 0x16, 0xce, 0x35, 0xcc, 0x7e, 0xad, 0xde, 0x72, 0x5a, 0xdd, 0x50, 0x22,
		0xee, 0x9e, 0x09, 0xab, 0x57, 0xa7, 0x84, 0xc1, 0x3b, 0xb6, 0xf9, 0xa4, 0x2e, 0xe8, 0x23, 0x79,
		0xff, 0xac, 0x28, 0x6c, 0xb4, 0x4e, 0xf4, 0x35, 0x76, 0xb6, 0x9e, 0xd5, 0x32, 0xa6, 0x7c, 0x3a,
		0x32, 0xf2, 0x56, 0xac, 0xad, 0x41, 0x52, 0x78, 0xfb, 0x3a, 0x9b, 0x33, 0x16, 0x95, 0x91, 0x5a,
		0x70, 0xe7, 0xed, 0x56, 0xb4, 0x28, 0xcb, 0x13, 0x28, 0xcb, 0xeb, 0x2a, 0xc6, 0xa7, 0xad, 0x62,
		0xba, 0x52, 0x9b, 0xc8, 0xe4, 0x21, 0x16, 0x76, 0xb7, 0x7b, 0x88, 0x28, 0x97, 0x26, 0x1f, 0xb6,
		0x1c, 0x03, 0x56, 0xb3, 0xf1, 0x2b, 0x25, 0x83, 0xa0, 0xe9, 0x00, 0x09, 0x18, 0x5c, 0x48, 0x46,
		0x6c, 0xe5, 0x36, 0x3e, 0xa3, 0xb0, 0x11, 0xb3, 0xf5, 0xbf, 0x5e, 0x5f, 0x48, 0x09, 0x9d, 0x37,
		0x6e, 0x5b, 0x3f, 0x91, 0x84, 0x84, 0x7b, 0x2d, 0x6f, 0xe7, 0x37, 0xfb, 0xfb, 0x7a, 0x9a, 0xff,
		0x12, 0x8d, 0xae, 0x37, 0xd4, 0xbd, 0xd1, 0x33, 0xee, 0xf0, 0x84, 0xf9, 0xdc, 0x96, 0x46, 0x55,
		0x58, 0x3b, 0xe8, 0x59, 0x55, 0x15, 0x26, 0x8c, 0x5d, 0x8e, 0x91, 0x19, 0x8e, 0xf9, 0x46, 0x40,
		0x93, 0xb8, 0xc1, 0x56, 0x17, 0x3f, 0xd1, 0x9e, 0xe0, 0xa2, 0x86, 0x61, 0xbc, 0xbd, 0xb5, 0xc1,
		0x63, 0xe1, 0xbe, 0x90, 0x64, 0xc9, 0x25, 0x81, 0x3a, 0x7d, 0x18, 0xe4, 0x3c, 0x6e, 0xb8, 0xa3,
		0xde, 0xde, 0xfc, 0x82, 0xdf, 0x45, 0x44, 0x66, 0x37, 0x80, 0xc5, 0x80, 0x57, 0x2a, 0x08, 0xe6,
		0x07, 0xf2, 0x12, 0x35, 0xd3, 0x27, 0xf9, 0x89, 0x84, 0x7d, 0xf9, 0x8d, 0x17, 0x15, 0xc1, 0xcc
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xf3e453n;
	message = new Uint8Array([
		0x03, 0x80, 0x16, 0x9f, 0xd5, 0xb1, 0xda, 0x96, 0x6b, 0xc2, 0x68, 0xe6, 0xc7, 0x05, 0xdd, 0x0d,
		0x05, 0x71, 0x64, 0x55, 0xd6, 0x46, 0x4f, 0x9b, 0x30, 0xf0, 0x66, 0x55, 0x44, 0x2e, 0x7e, 0xd4,
		0xb1, 0x73, 0x4e, 0xc6, 0xf7, 0x8d, 0x7f, 0xfe, 0x2e, 0x84, 0x02, 0x78, 0xf8, 0xc5, 0xa6, 0x97,
		0xb4, 0x7f, 0xea, 0xb2, 0xf4, 0x4e, 0x0f, 0xcf, 0x31, 0x17, 0x72, 0xae, 0xbe, 0x33, 0x19, 0x0a,
		0xfb, 0xcf, 0x8c, 0x1b, 0xcb, 0x92, 0xe6, 0x5f, 0x48, 0x81, 0x2b, 0x9a, 0xb5, 0x20, 0xdc, 0x1c,
		0xb3, 0xda, 0xc9, 0x42, 0xb8, 0xa3, 0x27, 0x3f, 0xbe, 0xdc, 0xe2, 0x1c, 0x38, 0x77, 0x35, 0xfe,
		0x4a, 0x5b, 0x77, 0xa8, 0x39, 0x0a, 0x38, 0x40, 0x21, 0x81, 0x8c, 0x56, 0xe6, 0x60, 0xa7, 0x22,
		0x6c, 0x4a, 0xaa, 0x0d, 0x0b, 0x8f, 0xbd, 0x74, 0x3d, 0x08, 0x5e, 0xa8, 0x9a, 0x43, 0xf8, 0x39
	]);
	signature = new Uint8Array([
		0x32, 0x9e, 0xb5, 0xbc, 0xe7, 0xe4, 0x99, 0xc7, 0x89, 0x50, 0x49, 0x48, 0xfc, 0x2a, 0x7d, 0x71,
		0xbc, 0x5e, 0xd2, 0xff, 0x9c, 0x40, 0x8e, 0x52, 0x3d, 0x97, 0xbb, 0xed, 0x77, 0x56, 0x02, 0x4f,
		0x58, 0x7c, 0xf4, 0x87, 0x5f, 0x58, 0x49, 0xe7, 0x57, 0x10, 0x15, 0xa2, 0xab, 0xe6, 0x54, 0x7c,
		0xee, 0x2a, 0xf4, 0xa0, 0x1e, 0xc0, 0xb8, 0x1e, 0xb8, 0x14, 0x43, 0x15, 0xaa, 0x31, 0x6d, 0xfb,
		0xa3, 0x5b, 0x67, 0x63, 0x70, 0x14, 0x84, 0xbb, 0x08, 0x15, 0x96, 0xd2, 0x50, 0xd8, 0x54, 0x8f,
		0xa2, 0xfc, 0x56, 0x2e, 0x12, 0xe8, 0x23, 0xbf, 0xa5, 0x8c, 0x31, 0xa6, 0x6e, 0x91, 0x43, 0x07,
		0xff, 0x88, 0x6c, 0xaa, 0xe2, 0x81, 0xee, 0xed, 0x92, 0x32, 0xb6, 0x8f, 0xe4, 0x71, 0x64, 0xa8,
		0x7c, 0x0c, 0xd2, 0x33, 0x3c, 0xf6, 0x9d, 0x41, 0x62, 0x12, 0xaf, 0x17, 0xf2, 0xaa, 0xf8, 0x69,
		0xb2, 0x2d, 0x45, 0x25, 0x45, 0x6d, 0x29, 0xb4, 0x37, 0x80, 0x23, 0x48, 0xc2, 0x58, 0xe7, 0x77,
		0x87, 0x74, 0xa9, 0xf8, 0x84, 0x51, 0x45, 0x25, 0x19, 0xcf, 0xeb, 0x36, 0xc8, 0xc9, 0x5a, 0x6e,
		0xde, 0xb7, 0xb0, 0xd4, 0x72, 0x98, 0x1e, 0x34, 0xf4, 0xaa, 0x31, 0xee, 0xa1, 0xe7, 0xe1, 0x3c,
		0xac, 0x78, 0xcc, 0xeb, 0x21, 0x33, 0xfa, 0x29, 0xe0, 0x35, 0x07, 0xb4, 0x00, 0x15, 0x4f, 0xaf,
		0xb5, 0x5f, 0x6a, 0x86, 0xc8, 0x5d, 0x4b, 0x8f, 0xc4, 0x67, 0xca, 0xee, 0x0c, 0x75, 0xe5, 0x40,
		0x2b, 0xde, 0x71, 0x8d, 0x37, 0x73, 0xa3, 0x27, 0x3e, 0x59, 0xc1, 0xf1, 0xf3, 0xa9, 0xc6, 0xd5,
		0x7f, 0x0b, 0x46, 0x90, 0x2c, 0xd3, 0x46, 0xe9, 0xf2, 0xaa, 0xa2, 0x0b, 0x85, 0x81, 0x13, 0x40,
		0x10, 0x7c, 0x5c, 0x97, 0x45, 0xd7, 0x3a, 0xbf, 0x4a, 0x74, 0xed, 0x3a, 0x35, 0xee, 0x8b, 0x47
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(true);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f71807n;
	message = new Uint8Array([
		0xec, 0xaf, 0xf1, 0x78, 0x2b, 0xac, 0x0b, 0x38, 0x04, 0x16, 0x34, 0xcc, 0x60, 0xfe, 0xc7, 0x6f,
		0x9a, 0x24, 0x15, 0x87, 0x91, 0xbd, 0x0f, 0x88, 0xfc, 0x73, 0x46, 0x16, 0xfe, 0xae, 0x16, 0x6a,
		0xfb, 0x12, 0x1d, 0xf6, 0xa9, 0x49, 0xf2, 0x4c, 0x6a, 0x02, 0x14, 0x3c, 0xd9, 0x39, 0x21, 0x3c,
		0xa2, 0xb9, 0x49, 0x0e, 0x98, 0xe0, 0x01, 0x9c, 0x01, 0xa3, 0xfc, 0x27, 0x34, 0xd1, 0x57, 0xa0,
		0x67, 0x9c, 0x14, 0x56, 0xc2, 0x55, 0xc9, 0xd2, 0xb8, 0x77, 0x99, 0xff, 0x96, 0xe7, 0x64, 0x8f,
		0x5c, 0x7a, 0x3b, 0x99, 0xcd, 0xb8, 0x17, 0x87, 0xc2, 0xe0, 0xca, 0x2f, 0xc3, 0x2c, 0x35, 0x40,
		0xd8, 0x55, 0xbc, 0xe0, 0x9d, 0x5a, 0xf7, 0x93, 0x95, 0x7e, 0xaa, 0x5f, 0xc0, 0x8f, 0xf8, 0x2e,
		0x70, 0x6e, 0xd3, 0x73, 0x58, 0xcc, 0xb7, 0x10, 0xe6, 0x32, 0x98, 0x78, 0xd3, 0x44, 0x19, 0x10
	]);
	signature = new Uint8Array([
		0x14, 0xd8, 0x8e, 0x52, 0x8c, 0x39, 0xff, 0xa8, 0xe3, 0xe1, 0xd6, 0x0e, 0x24, 0x15, 0x9b, 0xf0,
		0x3e, 0x6e, 0x76, 0x87, 0x40, 0x44, 0x23, 0x60, 0xd1, 0x90, 0x70, 0xb0, 0x36, 0x44, 0x82, 0x64,
		0x49, 0x6a, 0xe1, 0xfa, 0xbf, 0x81, 0xb3, 0x70, 0x42, 0xca, 0xd4, 0x42, 0x0e, 0x49, 0x5c, 0xc7,
		0x4b, 0x8f, 0xe4, 0xb2, 0x8c, 0x09, 0xd0, 0x7d, 0xf1, 0xbd, 0x55, 0xcf, 0x88, 0xaa, 0x24, 0x26,
		0x2e, 0xc4, 0x9f, 0x9f, 0x92, 0x85, 0xc0, 0x2a, 0x33, 0xc6, 0x4d, 0x86, 0xbd, 0xec, 0xa1, 0x58,
		0x43, 0xc9, 0xc6, 0x5a, 0x67, 0x45, 0xf6, 0xbf, 0x7a, 0x82, 0x16, 0x29, 0x56, 0x42, 0x23, 0x2c,
		0x30, 0x5b, 0x18, 0x3e, 0xb5, 0xd6, 0xb0, 0xac, 0x0e, 0x37, 0x30, 0x94, 0x81, 0xf1, 0x94, 0xc6,
		0x68, 0x28, 0xee, 0x14, 0xf6, 0xa6, 0x26, 0xda, 0xa9, 0x1c, 0x6f, 0x62, 0x8e, 0xa1, 0x34, 0xd2,
		0x7b, 0xa7, 0xe9, 0x6c, 0x41, 0x46, 0xdb, 0xca, 0xc9, 0x9b, 0x34, 0xfa, 0x70, 0x8a, 0x82, 0xc5,
		0x1c, 0x1d, 0x66, 0x9f, 0x93, 0xda, 0xdf, 0xe9, 0x26, 0xcf, 0xf2, 0x4c, 0x25, 0x77, 0x55, 0x67,
		0xd9, 0x4f, 0x06, 0xc6, 0x11, 0x10, 0x67, 0x6a, 0x65, 0x16, 0x55, 0xe6, 0x7f, 0x3f, 0xd8, 0xd2,
		0x0e, 0xf0, 0x88, 0x4e, 0x11, 0x26, 0x38, 0x11, 0x3f, 0x06, 0x00, 0x24, 0x54, 0xe3, 0xb8, 0x89,
		0x71, 0x75, 0x8e, 0x74, 0xe5, 0x6d, 0x70, 0xbd, 0xd6, 0xb3, 0x88, 0x4a, 0xa6, 0x33, 0x96, 0x8a,
		0x45, 0xbf, 0x17, 0x50, 0xfc, 0xc2, 0x03, 0x62, 0x3f, 0x59, 0xb0, 0x14, 0x60, 0xf3, 0x50, 0xf2,
		0xbf, 0xd3, 0x6d, 0x92, 0x80, 0xc1, 0xb9, 0xeb, 0x99, 0xb7, 0x65, 0x5e, 0xc2, 0xfb, 0xca, 0xfc,
		0x1a, 0xc5, 0x68, 0x36, 0x1a, 0xb3, 0xde, 0x1c, 0x18, 0xcf, 0x99, 0xaa, 0x6b, 0xa3, 0x03, 0x2a
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xf3e453n;
	message = new Uint8Array([
		0xa3, 0x06, 0x9d, 0x04, 0xfc, 0x7e, 0xe8, 0x4f, 0xd9, 0xee, 0xc5, 0x6d, 0xa2, 0x6a, 0x0c, 0xa4,
		0x13, 0x0e, 0x7a, 0x8f, 0xef, 0xe1, 0x05, 0x1f, 0xf3, 0xff, 0x6d, 0xdf, 0x09, 0xf8, 0x14, 0x7c,
		0xbf, 0x73, 0x0f, 0x84, 0xf7, 0x17, 0x7d, 0x6e, 0xe0, 0xab, 0x17, 0xdb, 0x25, 0x7b, 0x09, 0x1b,
		0x64, 0xfe, 0x01, 0xf3, 0xe1, 0xb7, 0x85, 0x9d, 0x7c, 0x59, 0x89, 0x11, 0xe0, 0x2e, 0x41, 0x83,
		0xfe, 0xb9, 0x34, 0x2d, 0xba, 0x9b, 0x92, 0x4e, 0xe3, 0xb3, 0xc7, 0x73, 0x69, 0x89, 0x50, 0xf5,
		0xca, 0xed, 0xcd, 0xc3, 0xce, 0xdb, 0x58, 0x61, 0x74, 0xa2, 0x16, 0x31, 0x2c, 0x45, 0x0b, 0xf2,
		0x46, 0x22, 0x33, 0x86, 0xab, 0xd1, 0xce, 0xf8, 0xcb, 0x4f, 0xfb, 0xbd, 0xd6, 0x5c, 0x88, 0x3a,
		0x2f, 0x21, 0x09, 0x87, 0x1e, 0x16, 0x27, 0x73, 0xc5, 0x23, 0x3b, 0xc8, 0x55, 0x06, 0x1c, 0xd0
	]);
	signature = new Uint8Array([
		0x1b, 0xdb, 0x61, 0x49, 0xe6, 0x8a, 0x7c, 0xd3, 0xa0, 0x3c, 0x9c, 0x81, 0x57, 0xea, 0xec, 0x11,
		0x7d, 0xda, 0x19, 0x41, 0x31, 0x00, 0x6f, 0xaf, 0x90, 0xe3, 0xe5, 0x2f, 0x9b, 0xa4, 0xfd, 0x51,
		0x81, 0x74, 0x0f, 0xb5, 0x93, 0x43, 0xeb, 0xaf, 0xd2, 0x79, 0x2a, 0xb4, 0xc0, 0x4f, 0xfb, 0x32,
		0x21, 0x54, 0x8b, 0x20, 0x3b, 0x81, 0x73, 0xaf, 0xc7, 0x7e, 0x59, 0x92, 0x27, 0x34, 0x96, 0x0e,
		0x2e, 0x89, 0x86, 0xc5, 0x98, 0xa8, 0x72, 0xbd, 0x47, 0x31, 0x24, 0x35, 0x00, 0x1c, 0xc8, 0xd2,
		0xd9, 0x12, 0x3b, 0x01, 0x0e, 0x09, 0x42, 0x0a, 0x28, 0xfc, 0x66, 0xef, 0x69, 0x57, 0xc3, 0x19,
		0xfc, 0xfb, 0x0d, 0x77, 0x0b, 0xb1, 0x55, 0xab, 0x2f, 0xf3, 0xb1, 0x3b, 0x63, 0x4b, 0x91, 0xa9,
		0xc0, 0xbd, 0xc1, 0x83, 0xa6, 0x39, 0xec, 0xfb, 0xc2, 0xf3, 0x26, 0x86, 0x5e, 0x4e, 0xcb, 0xd0,
		0xa1, 0x5e, 0xc5, 0x95, 0xe2, 0xc1, 0x5e, 0xe9, 0x6c, 0xee, 0x81, 0x54, 0xc9, 0x6e, 0x0c, 0x5f,
		0x42, 0x96, 0xc5, 0xd1, 0x68, 0x21, 0xe7, 0x9d, 0xa8, 0x90, 0xc0, 0xba, 0xb3, 0x35, 0x42, 0x4c,
		0x7c, 0x5e, 0x85, 0x63, 0x81, 0x19, 0x42, 0x79, 0x26, 0x6d, 0x0f, 0x13, 0xa4, 0xc6, 0x08, 0x79,
		0x2f, 0x2e, 0x42, 0xed, 0xe2, 0xe1, 0xaa, 0x05, 0xb7, 0x18, 0x62, 0x57, 0x0a, 0x39, 0x78, 0x0a,
		0x49, 0x0b, 0x4e, 0x66, 0x01, 0x1f, 0x10, 0xa2, 0x71, 0x76, 0x69, 0x9c, 0x16, 0x9b, 0x28, 0x78,
		0xd7, 0xe9, 0x7b, 0x41, 0x66, 0x47, 0xdd, 0x79, 0x8a, 0xc8, 0x85, 0xc6, 0x14, 0xd9, 0x25, 0x54,
		0x97, 0x31, 0xbe, 0x52, 0xe0, 0x59, 0xe1, 0x94, 0xa2, 0x38, 0x4e, 0x96, 0x86, 0xd0, 0xf3, 0x72,
		0xa6, 0xcf, 0x33, 0x8b, 0xdf, 0x13, 0xfd, 0x45, 0x25, 0xf4, 0xd5, 0x60, 0x68, 0xa8, 0xfc, 0xa8
	]);
	saltLength = 28;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	n =
		0xa6754738bdf94dbc846ceb937a3896e747d5c6222453a83f6c86310e5819129613f9857d5e4a06bc5d927bdb011d23d8219549ced82c20592bdc419deb67fe43da87fcdfd01ac1acb07e513170c45d1e058fb56d8cb090a7f2565381785c4478362b253d47e056053516be15f448878d01c9dac06be45957882ccffc5ddaf06bc131c866349668de950e9121b134e5ae1c29815473a20028b9b7ea64d9dd8253a518b766dea714f7b37185a1d707a21cfa526a7d76f55119af728626b77e5b66328c2b37ec78be56380a4cd3900fe6a757f21b5728d31e5f1344aca933042b99240f89dc09e76a03678b402780bf64813c339e79893a3355674ff4807b200775n;
	e =
		0xa54611n;
	message = new Uint8Array([
		0xdc, 0x4c, 0x13, 0x6c, 0x80, 0x58, 0x49, 0xfe, 0x77, 0xb4, 0xb3, 0x81, 0xe4, 0xc6, 0xb2, 0x2a,
		0x3f, 0xf6, 0x99, 0x47, 0xa9, 0xb5, 0xaa, 0x6b, 0x7c, 0xbe, 0x42, 0xcb, 0x27, 0x9c, 0x50, 0xe8,
		0x39, 0x6d, 0x0b, 0x6e, 0xbb, 0xe5, 0xe5, 0x5c, 0xc3, 0x96, 0xba, 0x66, 0x46, 0x6e, 0x4e, 0x98,
		0x2e, 0x81, 0xf6, 0x3b, 0xac, 0x08, 0x95, 0xfc, 0xd0, 0xaa, 0xca, 0x4b, 0x57, 0xfb, 0x68, 0x02,
		0xc4, 0x43, 0x27, 0x47, 0xb2, 0x80, 0x99, 0xb3, 0x68, 0xae, 0x5f, 0xb4, 0xae, 0x45, 0x9c, 0x2f,
		0xdf, 0x04, 0xaa, 0x6a, 0x40, 0xed, 0x0c, 0x2a, 0x90, 0x91, 0xa4, 0x18, 0xe0, 0x8d, 0x26, 0x69,
		0xa5, 0x55, 0xcd, 0xbe, 0x0c, 0x30, 0x4d, 0x49, 0x8d, 0x84, 0x08, 0x32, 0xc3, 0x54, 0x84, 0x39,
		0x7b, 0x07, 0x1d, 0x9c, 0x0b, 0x6b, 0xf7, 0x3b, 0xe5, 0xf9, 0x37, 0xfa, 0x6b, 0x5b, 0x73, 0x67
	]);
	signature = new Uint8Array([
		0x72, 0x3f, 0x89, 0x42, 0x9e, 0x5f, 0x84, 0x43, 0xde, 0xfd, 0x52, 0x8d, 0x57, 0x79, 0x8d, 0x67,
		0x54, 0x82, 0x79, 0xcd, 0x16, 0x9d, 0x18, 0x5a, 0x00, 0x52, 0xe0, 0x94, 0x72, 0xe1, 0xb3, 0x7c,
		0x31, 0x32, 0x50, 0x13, 0x6b, 0x2a, 0x5f, 0x89, 0x10, 0xe3, 0x12, 0x29, 0x36, 0x35, 0x15, 0xad,
		0x67, 0x4c, 0xa9, 0x48, 0x9d, 0x6c, 0x7c, 0xa7, 0x97, 0x42, 0x77, 0xba, 0x32, 0x31, 0x10, 0xc1,
		0x52, 0xf6, 0x64, 0xa7, 0x9c, 0xfd, 0xb3, 0x45, 0x3d, 0x4c, 0xfa, 0x6e, 0xdd, 0x12, 0x4f, 0x81,
		0x38, 0x4d, 0xaa, 0xe9, 0xb0, 0x6f, 0x24, 0xf3, 0x59, 0x98, 0x84, 0xe1, 0x3d, 0xb0, 0x24, 0x39,
		0x3b, 0x5e, 0x21, 0x1c, 0xa3, 0x52, 0x14, 0x95, 0x21, 0xeb, 0x37, 0xd2, 0x99, 0x02, 0xde, 0x0c,
		0x43, 0x92, 0xb4, 0x4b, 0xcd, 0xf7, 0x9d, 0x2f, 0x37, 0x92, 0xcc, 0x0a, 0x7e, 0xdc, 0x39, 0x95,
		0xaf, 0xf9, 0x62, 0x97, 0x19, 0x50, 0x7a, 0x2b, 0xb3, 0x5e, 0xaf, 0x2b, 0xe9, 0xa8, 0x8b, 0x74,
		0x55, 0x1a, 0x06, 0x8e, 0x6e, 0x55, 0x6d, 0x78, 0xf1, 0x66, 0x2f, 0x0a, 0x78, 0xcc, 0x29, 0xbe,
		0x00, 0xac, 0xf9, 0xaf, 0x7b, 0xa4, 0x91, 0x94, 0x0b, 0x8a, 0x73, 0x1a, 0x3a, 0xf7, 0x00, 0x36,
		0x54, 0xf1, 0x52, 0x05, 0xc6, 0x17, 0x1d, 0x00, 0x9a, 0x01, 0x5b, 0x68, 0xd4, 0x23, 0x16, 0x6e,
		0x97, 0x1c, 0xfc, 0xe1, 0x13, 0xbf, 0x2c, 0x7e, 0xda, 0xe6, 0xaf, 0x28, 0xa5, 0x00, 0xd4, 0x3e,
		0x2f, 0x3b, 0xcb, 0x3b, 0x8d, 0xbe, 0x94, 0x0e, 0xb0, 0xf8, 0xbb, 0x1a, 0x07, 0x7b, 0xbf, 0xea,
		0xc4, 0xcd, 0x20, 0xdb, 0xfe, 0x05, 0x86, 0x05, 0xc3, 0x1b, 0x3d, 0x1b, 0xe7, 0x9a, 0xaf, 0x1d,
		0x05, 0x1e, 0x27, 0xda, 0xab, 0x45, 0x59, 0x7a, 0xc2, 0x83, 0x87, 0x63, 0xe4, 0x9c, 0xae, 0xbe
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(true);

	e =
		0xa54611n;
	message = new Uint8Array([
		0xba, 0x85, 0xe1, 0xf4, 0xf9, 0x20, 0x3b, 0xa8, 0xd3, 0xee, 0xf6, 0x45, 0xd7, 0x92, 0x3e, 0x10,
		0xc6, 0x14, 0x08, 0x01, 0x49, 0xcc, 0x5e, 0xc6, 0xe2, 0x82, 0xf7, 0x0b, 0x23, 0xd3, 0x0b, 0xf9,
		0x1e, 0xd6, 0x65, 0xfc, 0x1c, 0x00, 0xba, 0xca, 0x92, 0x45, 0x39, 0xa1, 0x50, 0x80, 0x63, 0xcf,
		0xfc, 0x15, 0x1d, 0x78, 0xbf, 0xd5, 0x04, 0x94, 0x3e, 0x22, 0x00, 0x37, 0xcc, 0x53, 0x1c, 0x15,
		0xdd, 0x5a, 0x95, 0x45, 0xbe, 0xa3, 0x30, 0x45, 0x84, 0x40, 0xd1, 0x3f, 0x43, 0x44, 0x4a, 0x8a,
		0x80, 0x6c, 0x71, 0x74, 0xe8, 0x05, 0x75, 0x3f, 0x42, 0x09, 0x72, 0x69, 0xa2, 0x8c, 0x42, 0x31,
		0xdf, 0x56, 0x97, 0x56, 0x48, 0xd2, 0x46, 0x22, 0x93, 0x27, 0xe6, 0xa7, 0x16, 0xa4, 0x9a, 0x49,
		0x3a, 0x61, 0x2b, 0x7c, 0x2c, 0x23, 0x5a, 0xcf, 0xd5, 0x81, 0x74, 0x2a, 0x0d, 0x45, 0x26, 0x53
	]);
	signature = new Uint8Array([
		0x90, 0xbb, 0x73, 0xe7, 0x61, 0xda, 0xfd, 0xac, 0x0b, 0x38, 0xe4, 0xad, 0xa5, 0xde, 0xb5, 0xf7,
		0x13, 0xff, 0xcb, 0xe1, 0x19, 0xee, 0x7a, 0xf2, 0x15, 0x2f, 0xfb, 0x36, 0x64, 0xed, 0x8b, 0x7d,
		0xc1, 0x18, 0x15, 0xfd, 0xd3, 0x9f, 0x39, 0x80, 0x50, 0xef, 0x8d, 0x90, 0x1f, 0x83, 0x69, 0x45,
		0xa8, 0x9d, 0xd0, 0xc7, 0x1a, 0xce, 0x4b, 0x60, 0x97, 0x9c, 0xa7, 0xe4, 0x26, 0xf6, 0x76, 0xef,
		0x36, 0x53, 0xd7, 0xf5, 0x04, 0x5a, 0xfb, 0xf7, 0xf3, 0x8a, 0xf3, 0xee, 0xfe, 0xa2, 0xbb, 0x2a,
		0x34, 0xeb, 0xad, 0x8b, 0xa0, 0x29, 0x87, 0x49, 0x95, 0xd2, 0x4e, 0x98, 0x92, 0x6f, 0xaf, 0xfc,
		0xc7, 0x9f, 0x11, 0x0b, 0xa8, 0xf9, 0xde, 0x35, 0xb4, 0x88, 0x29, 0x19, 0x76, 0x34, 0xf0, 0xd8,
		0x42, 0xa8, 0xef, 0x0d, 0xed, 0xda, 0x72, 0x80, 0x7d, 0xf0, 0x67, 0x6e, 0x08, 0xc6, 0xb8, 0xf7,
		0x61, 0x24, 0xae, 0x29, 0x94, 0x15, 0x1c, 0x03, 0x79, 0xc2, 0x1d, 0xcf, 0x3e, 0xe3, 0x32, 0x97,
		0xd8, 0xb1, 0x3e, 0xaa, 0x74, 0x51, 0x1e, 0xc7, 0xed, 0xf8, 0x05, 0x8d, 0xea, 0x5d, 0x5e, 0xe4,
		0xa6, 0xd6, 0x70, 0x1d, 0x07, 0x00, 0xae, 0xd6, 0x2e, 0xbe, 0x6d, 0x69, 0xde, 0xa7, 0xd0, 0xb7,
		0x9d, 0x01, 0xfb, 0x5f, 0xed, 0xb4, 0xe2, 0x91, 0x54, 0x25, 0x92, 0xe9, 0x77, 0xfd, 0x13, 0xad,
		0x1d, 0x49, 0xd3, 0xc9, 0xce, 0xa4, 0xab, 0xaa, 0xf0, 0x03, 0x76, 0x4a, 0xd0, 0xd3, 0xcf, 0xd7,
		0x5c, 0xae, 0x41, 0xfd, 0xd7, 0x40, 0xe6, 0xc1, 0x7b, 0x36, 0x83, 0x1a, 0x8f, 0x88, 0xfd, 0x8f,
		0x94, 0x32, 0xf4, 0x5d, 0x2b, 0xd5, 0x29, 0x29, 0x1c, 0x58, 0x21, 0x5c, 0x22, 0x1d, 0x54, 0x6d,
		0x71, 0xe7, 0x8a, 0x4a, 0x47, 0x87, 0x63, 0x0a, 0xf5, 0x69, 0x2a, 0x43, 0xe1, 0xc8, 0x3a, 0xf7
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xa54611n;
	message = new Uint8Array([
		0x28, 0x47, 0x48, 0x18, 0x5c, 0xe9, 0xe8, 0xeb, 0x0f, 0x87, 0x26, 0x23, 0xd4, 0x39, 0x50, 0x27,
		0x7e, 0x53, 0xf5, 0x9b, 0x36, 0x2f, 0x9b, 0x40, 0xca, 0x2d, 0xb0, 0x15, 0x48, 0xf7, 0xc3, 0xc3,
		0xcc, 0x0a, 0xf4, 0x37, 0x96, 0x72, 0xa9, 0x91, 0x5f, 0xd4, 0x83, 0x3d, 0xed, 0xb2, 0x91, 0x5f,
		0xe6, 0xeb, 0xc3, 0x75, 0xe2, 0x81, 0xa1, 0x38, 0xc3, 0x9f, 0x3c, 0xc2, 0x49, 0xdb, 0x65, 0xf6,
		0xe1, 0xb8, 0x1e, 0x1d, 0xbe, 0x6f, 0x4e, 0xcd, 0x2b, 0xef, 0xb9, 0x0f, 0x20, 0x22, 0x2e, 0xc0,
		0x13, 0x72, 0x02, 0x38, 0x10, 0x8c, 0xbe, 0x2a, 0x0c, 0x63, 0x15, 0xcb, 0x77, 0x78, 0x19, 0x37,
		0x10, 0x5a, 0xae, 0x10, 0xfd, 0x68, 0x3e, 0x68, 0x1b, 0xde, 0xae, 0xe1, 0x93, 0x10, 0x91, 0x12,
		0xae, 0xf0, 0x9c, 0x2d, 0xea, 0xd6, 0x5a, 0xdf, 0x4d, 0x81, 0x21, 0x78, 0xf9, 0x59, 0x45, 0x4c
	]);
	signature = new Uint8Array([
		0x49, 0x19, 0x3e, 0xb4, 0x5d, 0x4d, 0x35, 0x55, 0x37, 0xd9, 0xbd, 0xf3, 0xbd, 0x2b, 0xf0, 0xfa,
		0xd9, 0xd7, 0xe3, 0x32, 0x41, 0x17, 0x2d, 0x23, 0x1d, 0xea, 0x6c, 0xa7, 0xc9, 0xd7, 0xbd, 0x2b,
		0xc3, 0xed, 0x85, 0x28, 0x5b, 0xf0, 0x1b, 0xf3, 0x79, 0xda, 0x0d, 0xb4, 0xfc, 0x04, 0xcb, 0x7e,
		0x53, 0xcb, 0xbb, 0x38, 0x69, 0x5f, 0xd6, 0x89, 0xbb, 0x73, 0xf8, 0x18, 0xbd, 0x4e, 0x3f, 0xbc,
		0x04, 0x20, 0x13, 0xf8, 0xe0, 0x02, 0xbe, 0xb9, 0x28, 0x47, 0xdd, 0x0d, 0x5f, 0xee, 0x98, 0x67,
		0xcf, 0xa3, 0xfc, 0xf7, 0x6f, 0x3f, 0x64, 0x8c, 0xc3, 0x6f, 0x4a, 0x67, 0xe2, 0x95, 0xaf, 0xf9,
		0x14, 0xf7, 0x96, 0xcc, 0x0c, 0xab, 0xfd, 0x43, 0x96, 0xfc, 0x6c, 0xf1, 0x71, 0xf4, 0x68, 0x36,
		0x1a, 0xd6, 0xec, 0xef, 0x20, 0x23, 0xb0, 0xa2, 0x38, 0x84, 0x88, 0x0a, 0x17, 0xad, 0xa5, 0x37,
		0x2c, 0x7c, 0xda, 0x32, 0xcc, 0x1e, 0x3b, 0x98, 0x64, 0x51, 0x21, 0x9d, 0x7a, 0x17, 0x1e, 0x6c,
		0x6d, 0x56, 0x08, 0xc3, 0xdb, 0xe5, 0x54, 0x03, 0xb4, 0xb4, 0x2f, 0x6e, 0xb3, 0xf8, 0x79, 0x48,
		0xd0, 0xd7, 0x2f, 0x51, 0xde, 0x96, 0x3e, 0xd8, 0x00, 0x33, 0xb4, 0x2b, 0x5e, 0x7b, 0xa7, 0x6c,
		0x6f, 0xc5, 0xf7, 0x4b, 0x9a, 0x52, 0x49, 0xb6, 0x0b, 0xb5, 0x07, 0xdc, 0x86, 0xad, 0x53, 0xf5,
		0xb9, 0xb7, 0x10, 0x65, 0x2a, 0x24, 0x86, 0xa3, 0xcd, 0xed, 0x83, 0xe4, 0x47, 0xa4, 0xc1, 0x14,
		0xc4, 0xdc, 0xca, 0xbd, 0xdc, 0x51, 0x78, 0x7c, 0x19, 0x68, 0x75, 0x48, 0xc4, 0xff, 0x15, 0x7d,
		0x88, 0x7c, 0x78, 0x86, 0xb1, 0x9f, 0xf8, 0x55, 0x43, 0xc7, 0xf8, 0x34, 0x0a, 0x6f, 0xee, 0x32,
		0x0b, 0xa4, 0x9e, 0x02, 0xc4, 0x63, 0xc8, 0xbb, 0xe1, 0x0d, 0x45, 0x80, 0x5c, 0x67, 0xcb, 0x6b
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xbb217n;
	message = new Uint8Array([
		0xa3, 0xc2, 0xec, 0x4c, 0x47, 0xf4, 0x44, 0xbe, 0xc3, 0x4c, 0x15, 0xff, 0x25, 0xf2, 0xf8, 0x11,
		0xfa, 0x94, 0xf9, 0xa5, 0xbf, 0x05, 0xa5, 0xde, 0x98, 0x2a, 0x64, 0x58, 0x45, 0x16, 0x09, 0x69,
		0x51, 0x74, 0xa8, 0xa6, 0x8c, 0x25, 0xa7, 0xa9, 0xbc, 0x2b, 0x18, 0x12, 0x90, 0xc6, 0x46, 0xcc,
		0xd5, 0xdc, 0x8e, 0x92, 0xec, 0x9e, 0x71, 0xb1, 0x7c, 0x69, 0xe7, 0x0f, 0x64, 0xea, 0xf5, 0x6c,
		0xf4, 0x86, 0x81, 0xe8, 0x5c, 0xf9, 0x66, 0xc5, 0x64, 0x3d, 0xc4, 0x6f, 0x5e, 0xad, 0x99, 0xb9,
		0x59, 0x6a, 0x96, 0x6a, 0x98, 0xfe, 0x2b, 0xf8, 0x43, 0x3f, 0xe5, 0x93, 0x5b, 0x76, 0xf9, 0x65,
		0xf3, 0xc1, 0x21, 0x19, 0x9e, 0xb6, 0xa6, 0x9a, 0x24, 0x49, 0xbe, 0x1d, 0x79, 0xf0, 0x19, 0x61,
		0xef, 0x05, 0xb7, 0x35, 0xaa, 0x6b, 0xfc, 0x3c, 0x54, 0x74, 0x06, 0xed, 0x13, 0x02, 0x3e, 0xdd
	]);
	signature = new Uint8Array([
		0x03, 0x9c, 0x1d, 0xe6, 0x47, 0x20, 0x20, 0x7c, 0x40, 0x8e, 0xa9, 0x88, 0x94, 0x71, 0xfd, 0xa2,
		0x97, 0xc7, 0xb3, 0x82, 0x8e, 0x46, 0x83, 0x1c, 0xa5, 0xee, 0x60, 0xa9, 0x38, 0xba, 0x13, 0xa7,
		0xac, 0x52, 0x4c, 0xc3, 0x94, 0xd5, 0xea, 0x12, 0xd8, 0x9c, 0x2c, 0xec, 0xfb, 0x06, 0xdd, 0xcc,
		0x6d, 0x86, 0x99, 0x4e, 0xbf, 0xaf, 0x84, 0xeb, 0x91, 0xf3, 0x9e, 0xc4, 0x70, 0x89, 0x8d, 0x89,
		0xcb, 0xc5, 0x5a, 0x12, 0xdc, 0x47, 0xe7, 0xbe, 0x7e, 0x0f, 0x38, 0x9d, 0xd1, 0x2c, 0x5e, 0x59,
		0xa3, 0x2d, 0x5c, 0xa6, 0xa3, 0x7a, 0x3e, 0x64, 0x56, 0xfb, 0xb8, 0xc8, 0xc8, 0x10, 0x17, 0x25,
		0xcc, 0x3d, 0x52, 0x9f, 0x5d, 0x1b, 0xe1, 0x2d, 0xe7, 0x65, 0x75, 0x0e, 0x5e, 0xe6, 0x32, 0xe4,
		0x30, 0x31, 0x65, 0x64, 0x42, 0xab, 0x0e, 0x49, 0xf9, 0x47, 0x1c, 0xae, 0x87, 0xde, 0xc5, 0x75,
		0x11, 0x30, 0xa2, 0x62, 0x2e, 0xca, 0xeb, 0xa8, 0x5e, 0xf3, 0x37, 0xfa, 0x31, 0xc4, 0x72, 0xd6,
		0xa9, 0x69, 0x62, 0x31, 0x12, 0x3d, 0xb3, 0x50, 0xf5, 0xa3, 0x90, 0xc8, 0xd7, 0xce, 0x1f, 0x1a,
		0x83, 0x9a, 0x4c, 0x67, 0x4a, 0xee, 0x4e, 0x7a, 0xf6, 0x0e, 0xf6, 0x2e, 0x68, 0x91, 0x17, 0xfe,
		0x64, 0x5e, 0x4c, 0x32, 0x2f, 0x20, 0x37, 0x3b, 0x9f, 0xd7, 0x5d, 0xc8, 0x60, 0x6e, 0x70, 0xd6,
		0x59, 0x09, 0x4f, 0x2d, 0x2c, 0x98, 0x10, 0x8c, 0x6c, 0x32, 0x57, 0x6a, 0xdd, 0xa5, 0x7a, 0xc0,
		0xb3, 0x0c, 0x47, 0xdf, 0xf4, 0x42, 0xb0, 0x90, 0x14, 0x48, 0xc6, 0x8a, 0xa1, 0xaf, 0xee, 0x48,
		0x79, 0xed, 0xdd, 0x84, 0xd9, 0xf2, 0xf9, 0x54, 0x97, 0x12, 0x49, 0xd8, 0x78, 0x11, 0x21, 0x9e,
		0x43, 0x3f, 0x3d, 0x0d, 0x5a, 0xdf, 0xf5, 0x71, 0x33, 0xd0, 0xe9, 0xc1, 0x2f, 0x82, 0xde, 0xec
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xa54611n;
	message = new Uint8Array([
		0xa1, 0x4e, 0x35, 0x29, 0x03, 0x44, 0x46, 0x5d, 0x6d, 0x2f, 0x43, 0x68, 0x8a, 0x66, 0x3e, 0xe4,
		0x18, 0xf8, 0x0f, 0x13, 0xe1, 0xdb, 0xee, 0x22, 0xed, 0x46, 0x41, 0xaf, 0xf6, 0x5b, 0xb2, 0x8a,
		0x1c, 0x09, 0x85, 0xb8, 0xda, 0x31, 0x28, 0xbe, 0x39, 0x07, 0x0c, 0x1c, 0x43, 0xbc, 0xb4, 0x17,
		0xbb, 0x5a, 0x0c, 0xbb, 0x0b, 0xef, 0xfb, 0x21, 0x7e, 0xed, 0x3b, 0xee, 0xaf, 0xd1, 0x69, 0x1c,
		0x42, 0x03, 0x58, 0xfd, 0xd1, 0xfd, 0xab, 0x7c, 0x29, 0xb0, 0xa3, 0xa7, 0xb7, 0x23, 0x35, 0x6a,
		0x3d, 0x5e, 0x60, 0x9d, 0xc9, 0x86, 0xbd, 0x42, 0xe8, 0x49, 0x58, 0x07, 0x17, 0x7d, 0xbe, 0x13,
		0x7a, 0x03, 0x57, 0xfe, 0xd1, 0xf2, 0xf6, 0x21, 0xa7, 0xf1, 0xaf, 0x11, 0xcc, 0xe5, 0xe9, 0x66,
		0x06, 0xcd, 0xb3, 0xc1, 0x04, 0xe9, 0x5c, 0x0d, 0x93, 0x22, 0x3d, 0x04, 0x15, 0xa6, 0xda, 0xf5
	]);
	signature = new Uint8Array([
		0x93, 0x77, 0x5f, 0xe8, 0x67, 0x6f, 0x4e, 0x6e, 0xd5, 0x80, 0xf3, 0xdb, 0x99, 0xe0, 0x69, 0x7e,
		0x15, 0xf8, 0xe0, 0xad, 0x16, 0x8a, 0x93, 0x21, 0xcf, 0xd0, 0x04, 0xe6, 0xd0, 0xbd, 0x55, 0x5b,
		0xda, 0x64, 0x83, 0xf5, 0x1b, 0x1d, 0xf6, 0x3a, 0xd7, 0x8f, 0x28, 0xa3, 0x63, 0x8e, 0x70, 0xd2,
		0x30, 0xc5, 0xe6, 0x54, 0xeb, 0x4c, 0x86, 0xc2, 0xc1, 0x88, 0x9a, 0x06, 0xe2, 0x8e, 0x2a, 0x64,
		0x02, 0x10, 0x52, 0x3b, 0x90, 0xfe, 0x14, 0x01, 0x9d, 0x03, 0xd0, 0xa3, 0xb1, 0x4c, 0x76, 0x08,
		0x61, 0x4f, 0xd8, 0x8a, 0x84, 0xba, 0x2c, 0x68, 0xf7, 0xc0, 0xe0, 0x1f, 0x95, 0x02, 0x26, 0x93,
		0x82, 0x36, 0x7a, 0x07, 0xf2, 0xd9, 0x0e, 0xe5, 0x3e, 0x15, 0xab, 0xcd, 0x58, 0x4c, 0x56, 0xde,
		0x46, 0x02, 0xf7, 0x57, 0x3f, 0x49, 0x3e, 0x41, 0x67, 0x00, 0x26, 0xfe, 0xfa, 0xa6, 0xe1, 0x2c,
		0x61, 0x5d, 0x19, 0xd1, 0xb2, 0xba, 0x25, 0xcd, 0x0f, 0x48, 0xb6, 0xab, 0x20, 0xa8, 0xbf, 0x80,
		0x9d, 0xd1, 0x5a, 0xd9, 0x17, 0x2b, 0xc8, 0x82, 0x33, 0x02, 0x99, 0x3b, 0x51, 0xf0, 0xae, 0x5f,
		0x89, 0xe5, 0xc0, 0x5e, 0xe0, 0xdf, 0xd9, 0x1f, 0x89, 0x26, 0xab, 0xe7, 0xfc, 0x64, 0xc7, 0x69,
		0x46, 0x13, 0xa9, 0x96, 0xbe, 0x57, 0x28, 0xba, 0x3c, 0x6a, 0x4d, 0x23, 0x87, 0x33, 0x1c, 0x5d,
		0x3b, 0x21, 0x37, 0x7f, 0x97, 0x34, 0xb5, 0x87, 0xfb, 0xa1, 0x80, 0x57, 0x7a, 0xa6, 0xcb, 0xba,
		0x1f, 0x4a, 0x24, 0x83, 0xe4, 0xe4, 0x6a, 0x5d, 0x7c, 0x35, 0x5b, 0x40, 0x88, 0x06, 0x3d, 0x32,
		0xa1, 0x0c, 0x99, 0xbc, 0x65, 0x46, 0x77, 0xeb, 0x08, 0xa9, 0xb5, 0x7a, 0xd4, 0x0d, 0x88, 0xd3,
		0x78, 0xa8, 0x11, 0x16, 0x78, 0xe8, 0xdc, 0x60, 0xbe, 0x3c, 0x78, 0x9a, 0x06, 0x39, 0xc0, 0x56
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a54611n;
	message = new Uint8Array([
		0x55, 0x54, 0x00, 0x78, 0x4d, 0x05, 0x66, 0x10, 0x5b, 0x91, 0xdc, 0xa7, 0xf4, 0xf0, 0x84, 0x9d,
		0x83, 0x2d, 0x51, 0xf0, 0xa3, 0xc7, 0xd3, 0xb9, 0x92, 0x56, 0x51, 0xfa, 0xe2, 0x71, 0x19, 0x96,
		0x72, 0xd0, 0x14, 0xa1, 0x9d, 0xae, 0x9d, 0xda, 0xb1, 0x71, 0x93, 0x76, 0xa3, 0x8d, 0xad, 0x20,
		0x01, 0xa6, 0x0e, 0x3d, 0x27, 0xf5, 0x1a, 0x74, 0xb6, 0xec, 0x87, 0x6e, 0x42, 0x1d, 0xb7, 0xda,
		0x4b, 0x58, 0x45, 0xb5, 0x6f, 0x13, 0xde, 0xc8, 0xdd, 0x0f, 0x52, 0x72, 0x0d, 0x39, 0xea, 0xa7,
		0xaf, 0xcf, 0xfd, 0x39, 0xe1, 0xc3, 0xbe, 0x56, 0xa4, 0x64, 0x58, 0x53, 0x91, 0x3b, 0x3d, 0xa7,
		0xc8, 0x33, 0xba, 0x3b, 0x2a, 0xfe, 0xd0, 0xe1, 0xc8, 0xb3, 0x3f, 0x21, 0x9a, 0xbc, 0xe3, 0x3c,
		0x75, 0xef, 0x43, 0x6b, 0x37, 0xfb, 0x68, 0x68, 0x45, 0x06, 0xeb, 0x2f, 0x37, 0x94, 0x52, 0x06
	]);
	signature = new Uint8Array([
		0x6d, 0xbc, 0x30, 0x49, 0x60, 0x3a, 0xbc, 0x46, 0x77, 0xbf, 0xce, 0x12, 0x92, 0x9b, 0xcc, 0xa6,
		0x0b, 0xff, 0x53, 0x50, 0x80, 0x9c, 0xe3, 0xf9, 0x82, 0x59, 0xdd, 0xb7, 0x29, 0x67, 0xfa, 0xa0,
		0x76, 0xbf, 0x02, 0x20, 0x6c, 0x9b, 0xfc, 0xec, 0xda, 0xe3, 0x42, 0x1c, 0x66, 0xf2, 0xea, 0xf8,
		0x46, 0xb4, 0xef, 0xfb, 0xb5, 0xe6, 0xd7, 0x74, 0xe0, 0x00, 0xc1, 0xf1, 0xf7, 0xc1, 0xcf, 0x40,
		0x9b, 0x98, 0xf5, 0xe0, 0xca, 0x13, 0xcb, 0x2d, 0xbc, 0x5b, 0x16, 0x92, 0xc6, 0xbf, 0x7e, 0x54,
		0xa7, 0x43, 0xe4, 0xb2, 0x4c, 0x53, 0x45, 0x13, 0x87, 0xf2, 0x77, 0xaa, 0x66, 0xe1, 0x6d, 0xa8,
		0x72, 0x46, 0xd3, 0xab, 0x7b, 0xa1, 0xfc, 0x5a, 0xb1, 0xa9, 0x02, 0x95, 0x46, 0x09, 0x8d, 0x12,
		0xd1, 0xa4, 0x52, 0x93, 0x86, 0x0e, 0x2c, 0x8f, 0x48, 0x38, 0x14, 0x8c, 0x89, 0x92, 0x14, 0x67,
		0x28, 0x5b, 0x0f, 0x6c, 0x91, 0x6f, 0x3b, 0x0b, 0xca, 0xb9, 0x8d, 0xd0, 0x11, 0x20, 0x05, 0x5a,
		0xd1, 0xac, 0xf9, 0xce, 0x18, 0xa2, 0xf2, 0x76, 0xeb, 0x15, 0xaa, 0x6f, 0x9a, 0x0f, 0xe0, 0x56,
		0x52, 0xae, 0xc7, 0x28, 0xf8, 0x31, 0x06, 0x3f, 0xe6, 0xc7, 0x98, 0x5c, 0xe3, 0xbe, 0x11, 0x37,
		0x77, 0x03, 0xf7, 0x6b, 0x49, 0x04, 0xd2, 0x92, 0x59, 0x8a, 0xba, 0xc7, 0xbe, 0x35, 0xbd, 0x14,
		0x09, 0xdd, 0x70, 0x96, 0xfd, 0xc8, 0x51, 0xab, 0xd2, 0xb2, 0x0a, 0x18, 0x83, 0xf4, 0xf9, 0x15,
		0x30, 0x9e, 0xcf, 0x50, 0x7c, 0xe7, 0x6d, 0xc9, 0xa7, 0x5b, 0x36, 0x39, 0x4c, 0x6f, 0x1f, 0xa6,
		0x68, 0x58, 0x57, 0x53, 0x8f, 0xf3, 0xb8, 0x47, 0xaf, 0xfb, 0x48, 0x3a, 0x67, 0x09, 0x69, 0xff,
		0x59, 0xc8, 0xde, 0x03, 0x91, 0xce, 0x73, 0xbf, 0x1e, 0x85, 0x60, 0x1d, 0x6b, 0xce, 0x92, 0xc1
	]);
	saltLength = 32;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	n =
		0xc5c92cfbb60bff3e7f9499847e869a4bc37250994789c2958ac2f6a168bce2a1915d38725d8596cbcddbd463c2a46a52561a551f8f49d527eecfbef5589030891d9d90090fb35e43e8620c7fed4a056cd1c4a56e6134433030fe8027d1819c09638e43e359c7c389ccd1986457ff5e21673808cb436608d550d62120d9bdabac419cd6249fec945f10711874f10267c66320c701da90d7354b23e1646b89b22cea44d9e67c706ffc04a57927a5c9157cb049b1090e0f86d6cdaff29570cc629fef0646f9e5f8a7dc67c24052a34b91ab08b2e83b141cd0c098e35cbbb9fd408e7e107932128f6eb58e604764a7fe00acecb9b03203a24c9a760ca0d8a5886023n;
	e =
		0xa26a2bn;
	message = new Uint8Array([
		0xfb, 0xf1, 0xf9, 0x92, 0x65, 0x06, 0x0a, 0xb8, 0x2e, 0x3c, 0xf1, 0xa3, 0xcb, 0x86, 0xea, 0x71,
		0x74, 0x8f, 0x05, 0xc4, 0xd6, 0x9e, 0x79, 0xc2, 0x09, 0xbd, 0x3b, 0x61, 0xc1, 0x1a, 0xcf, 0xe1,
		0xc8, 0xad, 0x5f, 0x9a, 0xac, 0x1b, 0x0a, 0xf7, 0xb5, 0xdb, 0x7e, 0xc3, 0x19, 0x97, 0xc9, 0xa3,
		0x73, 0xd5, 0x6c, 0xe4, 0x72, 0xd6, 0xb1, 0x77, 0xce, 0xbe, 0x3f, 0x3a, 0x81, 0xf6, 0xec, 0x7a,
		0x33, 0xcf, 0xd2, 0xb5, 0xf6, 0x68, 0xa5, 0xa4, 0x33, 0xd1, 0x44, 0x78, 0xe4, 0x70, 0x8d, 0x65,
		0x04, 0xa4, 0x76, 0x5d, 0x44, 0xa9, 0x59, 0x1e, 0x00, 0xbc, 0x90, 0x6e, 0x71, 0x7f, 0x42, 0xa5,
		0x24, 0x9e, 0x7c, 0x6d, 0xab, 0xb3, 0x84, 0xc6, 0x92, 0x67, 0x6a, 0x4d, 0x95, 0xda, 0xdf, 0xbd,
		0x0f, 0x46, 0x4a, 0xb6, 0xb6, 0xdf, 0x19, 0xbd, 0x86, 0xfd, 0x55, 0x85, 0xfb, 0x7c, 0x7a, 0x6c
	]);
	signature = new Uint8Array([
		0x89, 0xe1, 0x52, 0x37, 0x4e, 0xe9, 0x53, 0xc4, 0xd9, 0xe6, 0x9e, 0x29, 0xc3, 0x10, 0x0f, 0x01,
		0x68, 0xeb, 0x71, 0xd0, 0xf5, 0xad, 0x31, 0xf6, 0xee, 0xb5, 0x2a, 0xb6, 0xca, 0xa4, 0x65, 0xac,
		0x02, 0x8b, 0x81, 0x47, 0x89, 0x47, 0xfe, 0x08, 0x76, 0x5d, 0x77, 0xdc, 0x9d, 0x4e, 0x75, 0xbb,
		0xe2, 0xcf, 0xd1, 0x4f, 0x25, 0x12, 0x4e, 0x42, 0xf7, 0xbc, 0xff, 0x65, 0x12, 0x19, 0x3c, 0xfe,
		0x3e, 0xf9, 0xdf, 0xfb, 0xf0, 0x70, 0x20, 0xcc, 0x5e, 0x4a, 0xb0, 0xb0, 0xc4, 0x4f, 0xcc, 0x4b,
		0x2b, 0xc8, 0x28, 0x5f, 0x16, 0xfe, 0x08, 0xbe, 0x89, 0xb4, 0x32, 0xfd, 0xe2, 0x6b, 0x04, 0x98,
		0xc9, 0xad, 0x46, 0xbe, 0x8b, 0xca, 0x8e, 0x13, 0x54, 0xc3, 0x9b, 0x57, 0x1a, 0x8e, 0x30, 0xf0,
		0x7a, 0xec, 0x84, 0xa1, 0xfc, 0x9d, 0x1a, 0x8e, 0x23, 0x9d, 0x79, 0x22, 0x3a, 0x6a, 0xf2, 0x2b,
		0x4a, 0xbf, 0xe3, 0x6a, 0xc1, 0x08, 0x29, 0x15, 0x03, 0xa4, 0xf5, 0x57, 0xa7, 0xba, 0xe2, 0x8b,
		0x25, 0xce, 0xed, 0x47, 0xfd, 0x5b, 0x81, 0x18, 0x2c, 0xf3, 0x91, 0xea, 0x40, 0x9d, 0xe7, 0xba,
		0x1e, 0xb2, 0xb4, 0x04, 0xd4, 0x46, 0x8e, 0xb2, 0xb4, 0x7c, 0x29, 0x30, 0x84, 0x5e, 0x2e, 0x91,
		0x99, 0xff, 0xf4, 0xf0, 0xc8, 0x38, 0xe3, 0xbd, 0x5f, 0x3a, 0x0b, 0xc7, 0x98, 0xfd, 0x6f, 0xa4,
		0xbe, 0x5e, 0x96, 0x20, 0x70, 0xcb, 0x45, 0xd0, 0x1a, 0x84, 0x17, 0x06, 0x38, 0xfe, 0x22, 0x34,
		0xe8, 0xdf, 0x92, 0x87, 0x77, 0x21, 0x3a, 0x87, 0xbe, 0x0a, 0xde, 0xe5, 0x6b, 0x8a, 0xe5, 0x14,
		0xcc, 0x05, 0xc5, 0xd5, 0x2f, 0x87, 0x24, 0x16, 0xb1, 0xea, 0x21, 0x12, 0xe7, 0x6c, 0x36, 0x4c,
		0xe8, 0x2c, 0xa3, 0x30, 0x27, 0xe0, 0xfd, 0x1f, 0x8c, 0x04, 0x24, 0x27, 0x66, 0x59, 0xc0, 0x8c
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xb2b5c1n;
	message = new Uint8Array([
		0xf2, 0x28, 0x05, 0x64, 0x17, 0x7a, 0x0b, 0x97, 0xe8, 0x08, 0x9b, 0x77, 0xd7, 0xd0, 0xcc, 0x8e,
		0xd5, 0x48, 0x49, 0xa9, 0x0d, 0x44, 0xa7, 0xdc, 0xd3, 0x19, 0xf5, 0xc6, 0xd7, 0x03, 0x94, 0x16,
		0x9f, 0xc4, 0x49, 0x4e, 0x34, 0x8e, 0x90, 0xc8, 0x1b, 0x23, 0x33, 0xf6, 0x86, 0x3b, 0x1c, 0xed,
		0xcc, 0x26, 0x67, 0x25, 0x17, 0xb2, 0xbc, 0x7a, 0x5c, 0x4f, 0xdc, 0x77, 0x91, 0x71, 0x79, 0xd4,
		0x1a, 0x36, 0x4b, 0x3d, 0x84, 0x49, 0x60, 0x56, 0x75, 0x06, 0xb4, 0xfb, 0xe3, 0xdf, 0x01, 0xcc,
		0x85, 0xfe, 0xd8, 0xe9, 0x87, 0x2b, 0xf1, 0xfa, 0x82, 0xf1, 0xc0, 0x73, 0xab, 0xfc, 0x48, 0x16,
		0x4b, 0xc6, 0x34, 0xb9, 0x6f, 0x73, 0x24, 0x49, 0xe0, 0xf9, 0x45, 0x0f, 0x55, 0x83, 0x24, 0x32,
		0xe8, 0x18, 0xc4, 0x7d, 0xc7, 0x77, 0xee, 0x63, 0x2c, 0x46, 0xc8, 0x40, 0x8f, 0x6c, 0xa9, 0xe2
	]);
	signature = new Uint8Array([
		0x7f, 0x65, 0xda, 0x24, 0x94, 0x23, 0xb1, 0x40, 0x6a, 0xeb, 0xe4, 0xca, 0x12, 0x53, 0x07, 0x55,
		0x88, 0xb1, 0x01, 0xd4, 0x72, 0x07, 0xac, 0xc5, 0xdf, 0xb7, 0x19, 0x8d, 0xd4, 0x55, 0x48, 0xee,
		0x71, 0xff, 0xbc, 0x1b, 0xce, 0x87, 0xe7, 0xbe, 0xfd, 0x25, 0x6a, 0xe2, 0x02, 0x50, 0x20, 0x8c,
		0x45, 0x1b, 0xb3, 0xa4, 0xda, 0xbe, 0x87, 0xc0, 0xdd, 0x67, 0x60, 0x1c, 0xe2, 0x1a, 0x49, 0xb1,
		0xfe, 0x72, 0x3b, 0x22, 0x4d, 0x02, 0xc7, 0x30, 0x48, 0x76, 0xe5, 0xb2, 0xf6, 0x80, 0x4f, 0x76,
		0xd1, 0xd5, 0x7f, 0xea, 0x8e, 0xdb, 0x95, 0x1b, 0x53, 0x6c, 0x37, 0x29, 0x29, 0x86, 0x3c, 0xca,
		0x98, 0x83, 0x80, 0x37, 0x3a, 0xf6, 0x14, 0x02, 0xe7, 0x46, 0xf7, 0x11, 0x03, 0xa9, 0xd0, 0x12,
		0xd0, 0xdb, 0x12, 0x1c, 0x4e, 0x2f, 0x63, 0x6e, 0x44, 0xb6, 0x45, 0x7d, 0x16, 0xd1, 0x2e, 0x8b,
		0x49, 0x3b, 0xde, 0xc5, 0xd0, 0x5f, 0xd3, 0x11, 0xb5, 0x02, 0xe5, 0x6a, 0xe9, 0x90, 0x71, 0xd9,
		0xbc, 0x62, 0xdc, 0xae, 0x68, 0xb2, 0x7f, 0x8d, 0xb5, 0x0d, 0x03, 0x09, 0x63, 0xe2, 0xda, 0xb4,
		0x4e, 0x42, 0x15, 0xbe, 0x69, 0x69, 0x4a, 0x55, 0xbb, 0x11, 0x3a, 0x8c, 0x43, 0xd3, 0xc2, 0x41,
		0x2a, 0xf0, 0xba, 0x05, 0x5c, 0xa7, 0x40, 0xca, 0x62, 0x8a, 0x62, 0x54, 0xad, 0xd0, 0xe0, 0xcc,
		0x51, 0x59, 0x3c, 0xd9, 0xa2, 0x83, 0xcc, 0x70, 0x30, 0x3c, 0xaa, 0xf8, 0xe5, 0x43, 0xac, 0x71,
		0xba, 0xe1, 0x96, 0xf2, 0x08, 0xcd, 0x4c, 0x93, 0x73, 0xe2, 0x81, 0x0c, 0x94, 0x02, 0x9d, 0xa4,
		0x6b, 0x78, 0xb4, 0x21, 0xd6, 0xaa, 0x8b, 0xb0, 0x0b, 0xd8, 0x3c, 0x47, 0x45, 0x34, 0xbb, 0xaf,
		0x96, 0x29, 0xf5, 0x3b, 0xd2, 0xdf, 0x33, 0x46, 0x20, 0x06, 0x31, 0xf7, 0xcb, 0x9e, 0xd4, 0xa6
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xb2b5c1n;
	message = new Uint8Array([
		0x55, 0xc5, 0x08, 0x39, 0xaa, 0x7d, 0x03, 0x21, 0xa6, 0xa8, 0x5c, 0xc3, 0xf5, 0x5b, 0xa7, 0xf6,
		0x64, 0x3b, 0xc6, 0xa1, 0x8a, 0x8f, 0xaf, 0x73, 0xae, 0x9a, 0x70, 0xd4, 0xe5, 0x27, 0x70, 0x1b,
		0x7b, 0x65, 0xf7, 0x01, 0x94, 0xf5, 0xf0, 0x55, 0x13, 0x42, 0xee, 0xf2, 0xbb, 0x11, 0x6e, 0xef,
		0x94, 0x59, 0x5c, 0x15, 0x91, 0x54, 0xd8, 0x96, 0x6f, 0xd6, 0x39, 0xfb, 0xe0, 0xde, 0x52, 0x5f,
		0xe9, 0x6a, 0xf5, 0xdb, 0x89, 0x90, 0xb6, 0x41, 0x9b, 0xcb, 0xf1, 0x0d, 0xfd, 0x93, 0x0f, 0x98,
		0xf2, 0x30, 0x04, 0x8f, 0xc5, 0xcf, 0x1c, 0xa4, 0xb0, 0xd6, 0xf8, 0x83, 0xfb, 0x75, 0xd3, 0x08,
		0x68, 0x7d, 0x0b, 0xaf, 0xcf, 0x76, 0xdc, 0x4c, 0x06, 0xec, 0x6e, 0xfc, 0x03, 0x09, 0x12, 0x5b,
		0x45, 0x69, 0xc8, 0xf7, 0x70, 0x29, 0x06, 0x05, 0x37, 0x41, 0xb4, 0x53, 0x7e, 0x14, 0x7b, 0x7e
	]);
	signature = new Uint8Array([
		0x0b, 0x85, 0x38, 0x28, 0xfa, 0x20, 0x89, 0xce, 0x0d, 0x19, 0x55, 0xd5, 0x2b, 0x20, 0x42, 0x47,
		0x48, 0xa4, 0xb2, 0x27, 0xb5, 0x6c, 0x55, 0x7a, 0xd6, 0x37, 0x82, 0x47, 0x1c, 0xd0, 0x46, 0x22,
		0x95, 0xca, 0xdd, 0x80, 0x8c, 0x52, 0x50, 0xed, 0x2f, 0x11, 0xe7, 0xd2, 0x75, 0x4c, 0x87, 0x34,
		0xfa, 0x9d, 0x13, 0xc8, 0xb9, 0x64, 0x96, 0xee, 0xfa, 0x51, 0x5f, 0x3f, 0x12, 0x78, 0x69, 0xbf,
		0x42, 0xfc, 0x8c, 0x6b, 0xd0, 0xea, 0x02, 0x47, 0x86, 0x3b, 0x9c, 0x56, 0x74, 0x7d, 0x15, 0xb1,
		0x6d, 0xa3, 0x22, 0x06, 0x4f, 0x7c, 0xb7, 0x23, 0xe2, 0xea, 0xcb, 0x44, 0x57, 0xc2, 0x41, 0xb3,
		0xf8, 0x4a, 0x63, 0xb7, 0xbc, 0x30, 0x7d, 0xbd, 0xd6, 0x3b, 0x4d, 0x75, 0x5b, 0x9b, 0x4a, 0x6c,
		0x0b, 0x75, 0x90, 0xe5, 0xc1, 0xc7, 0xc5, 0xdb, 0xf9, 0xba, 0x61, 0xea, 0xbf, 0xc2, 0x9a, 0x21,
		0x94, 0x4c, 0xa6, 0x16, 0x6e, 0x56, 0xe0, 0x1a, 0x42, 0xa9, 0x4b, 0x5d, 0x8b, 0x89, 0x8c, 0x0f,
		0xd0, 0x73, 0xb0, 0x3e, 0xa9, 0x98, 0xf3, 0x5e, 0x26, 0x28, 0x94, 0x54, 0x01, 0x2e, 0x62, 0xbb,
		0x58, 0x22, 0x2f, 0xe9, 0xa0, 0x3c, 0x9b, 0x0a, 0x56, 0x2b, 0x9b, 0x16, 0x60, 0x2c, 0x77, 0x94,
		0xba, 0x83, 0x52, 0x45, 0xa1, 0x40, 0x1b, 0x8e, 0x3a, 0xe2, 0x8e, 0x00, 0x54, 0x1c, 0xb7, 0xa9,
		0xaa, 0x83, 0x35, 0xde, 0x46, 0xd0, 0x63, 0x73, 0x9e, 0x8c, 0x71, 0x99, 0x9b, 0x65, 0xf7, 0xc8,
		0xfe, 0xc3, 0x70, 0x1a, 0x46, 0xbf, 0x3c, 0x60, 0x13, 0x9b, 0x5b, 0x78, 0x0b, 0xdd, 0x08, 0xc6,
		0x79, 0x11, 0x7e, 0x14, 0x13, 0x6c, 0x84, 0xc9, 0x3f, 0xe4, 0x03, 0xef, 0xbf, 0x34, 0x62, 0x13,
		0xef, 0x4c, 0x85, 0xbc, 0xf3, 0xe2, 0xdf, 0xd4, 0x4a, 0x6b, 0x61, 0x60, 0x09, 0xff, 0x47, 0xb4
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xb2b5c1n;
	message = new Uint8Array([
		0xe4, 0xce, 0xaf, 0x62, 0xba, 0x10, 0xe3, 0x17, 0xe1, 0x00, 0x1d, 0x8a, 0x6a, 0x00, 0x88, 0x43,
		0x88, 0x07, 0x90, 0x15, 0x95, 0x97, 0xff, 0xaf, 0x56, 0xef, 0x66, 0x6d, 0x80, 0x81, 0xbf, 0x74,
		0x7b, 0xa6, 0x50, 0xfd, 0x65, 0x91, 0xd3, 0xf1, 0x5a, 0x81, 0xd3, 0xb7, 0xf3, 0x3b, 0x59, 0x49,
		0x0c, 0xb8, 0xc8, 0x8e, 0xcb, 0x1b, 0x06, 0xe4, 0xde, 0xe6, 0xdc, 0xfb, 0x03, 0x6c, 0xa0, 0xea,
		0xce, 0x8a, 0x11, 0x7c, 0xa7, 0x92, 0x82, 0xcb, 0x12, 0x88, 0x3b, 0x11, 0x33, 0x91, 0x1c, 0xba,
		0x91, 0xa8, 0x83, 0xbe, 0x1a, 0x93, 0x70, 0x2d, 0x67, 0x15, 0xe7, 0x0c, 0x42, 0x66, 0x96, 0x5f,
		0x65, 0xe0, 0xb8, 0x87, 0x85, 0xfb, 0x39, 0xce, 0x8f, 0x7b, 0x1b, 0x41, 0x32, 0xe8, 0x18, 0xbe,
		0x9d, 0x3f, 0x89, 0x4d, 0x8a, 0xe7, 0x86, 0xb3, 0x7b, 0xe6, 0x4f, 0x45, 0x43, 0x55, 0xea, 0xfb
	]);
	signature = new Uint8Array([
		0xc2, 0x69, 0xb6, 0x1d, 0x34, 0xcb, 0x98, 0x14, 0x93, 0x4a, 0xa8, 0xd2, 0xea, 0xc3, 0x8f, 0x5d,
		0x94, 0x1d, 0x7b, 0x69, 0xe1, 0xe0, 0xcd, 0xeb, 0xea, 0x5f, 0x27, 0x5f, 0x9f, 0xc4, 0xa9, 0x40,
		0x07, 0xcf, 0xde, 0x1b, 0x33, 0xa0, 0xf9, 0xce, 0xc3, 0xd2, 0xb6, 0x0c, 0x6b, 0x66, 0x75, 0xd8,
		0xa9, 0x1e, 0x7a, 0x32, 0x51, 0xd7, 0x8c, 0x31, 0x94, 0x35, 0x24, 0xba, 0x75, 0x82, 0x4c, 0xff,
		0x10, 0xde, 0xe0, 0x98, 0x20, 0x5f, 0x0c, 0x84, 0xd0, 0xf9, 0x41, 0xbf, 0x10, 0x98, 0x78, 0x55,
		0x97, 0xa8, 0x8c, 0x10, 0x05, 0x8f, 0x2c, 0x85, 0x7f, 0x85, 0xe5, 0x3a, 0x20, 0x5d, 0xe7, 0xce,
		0xdc, 0x10, 0xad, 0x3f, 0x1d, 0x2a, 0xbe, 0x3c, 0xf7, 0xc6, 0x13, 0x82, 0xc1, 0x4e, 0xeb, 0x6d,
		0x7b, 0x40, 0x9f, 0x69, 0x0f, 0x96, 0x90, 0xfe, 0x9b, 0x72, 0xeb, 0x84, 0x61, 0x9f, 0xc1, 0xf9,
		0x5a, 0x8f, 0xab, 0x7b, 0xf9, 0xa3, 0x52, 0x48, 0xd7, 0xe1, 0xc8, 0x95, 0x59, 0x79, 0x8c, 0x09,
		0x58, 0xa7, 0x5b, 0x85, 0xfc, 0xaf, 0x14, 0x3b, 0x41, 0xc3, 0xa2, 0x38, 0x64, 0xa5, 0x48, 0x02,
		0x6d, 0x57, 0x20, 0x9e, 0xf6, 0x4c, 0x2d, 0x6d, 0x61, 0xbf, 0x9a, 0xc1, 0x52, 0x57, 0xa5, 0x31,
		0xb1, 0x0f, 0xcc, 0x06, 0xfa, 0x97, 0xfd, 0x6e, 0x3f, 0xe1, 0xa8, 0x82, 0xbc, 0xe6, 0xfd, 0x2b,
		0x8e, 0xb5, 0xa6, 0x26, 0x78, 0x35, 0xdd, 0x8e, 0xb0, 0xb5, 0xe3, 0xe2, 0x13, 0x50, 0xf6, 0x65,
		0x0d, 0xe6, 0x6d, 0x27, 0xc7, 0x19, 0x98, 0x0e, 0x98, 0xed, 0x96, 0x00, 0x61, 0x15, 0xca, 0xf9,
		0x4c, 0x06, 0x1f, 0xd3, 0x66, 0x9d, 0xc6, 0x46, 0x53, 0x84, 0x38, 0x53, 0x26, 0x9b, 0x1b, 0x6d,
		0xf0, 0x51, 0x5c, 0xf6, 0x7f, 0x31, 0x61, 0x02, 0x4a, 0xb3, 0xcd, 0x99, 0xa4, 0xff, 0x5f, 0x16
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(true);

	e =
		0xb2b5c1n;
	message = new Uint8Array([
		0x71, 0xff, 0x5c, 0x8b, 0xd9, 0x50, 0xfa, 0x41, 0x4c, 0x77, 0x40, 0x75, 0xda, 0x8e, 0xf7, 0xa1,
		0xa5, 0x81, 0x65, 0xbf, 0x4f, 0xb7, 0x67, 0x0c, 0xb1, 0xf5, 0xc0, 0x0c, 0xd0, 0x7f, 0xb1, 0xce,
		0x0c, 0x80, 0xca, 0x71, 0x9b, 0xab, 0xff, 0xe7, 0x36, 0x23, 0xfe, 0xf9, 0x12, 0x98, 0xc0, 0x8b,
		0x12, 0xb3, 0x5e, 0x22, 0x3b, 0xb5, 0x27, 0xa3, 0x68, 0x5b, 0xef, 0x5e, 0x3f, 0x04, 0xa9, 0x4a,
		0x63, 0x15, 0x39, 0x92, 0xeb, 0x9d, 0x83, 0x51, 0x14, 0x35, 0xc8, 0x9a, 0x32, 0x2b, 0x32, 0xbc,
		0xed, 0xdf, 0xad, 0xc4, 0xa9, 0x6c, 0xf9, 0x43, 0x46, 0x8b, 0xfd, 0x51, 0x0a, 0xb5, 0x5f, 0xd1,
		0xdb, 0x88, 0x51, 0xf7, 0xb2, 0x6c, 0xae, 0x08, 0x4c, 0x76, 0x45, 0x61, 0x23, 0x8d, 0x75, 0xbb,
		0x9c, 0xcb, 0xfa, 0xad, 0x82, 0x25, 0x06, 0x72, 0xb3, 0x4f, 0x93, 0xed, 0x19, 0xda, 0xf8, 0xea
	]);
	signature = new Uint8Array([
		0x77, 0xb8, 0x29, 0x98, 0xfa, 0xc6, 0x1f, 0x38, 0x7b, 0x1a, 0x32, 0x64, 0xbd, 0x69, 0x5e, 0xa3,
		0xff, 0xf6, 0x05, 0xbd, 0xca, 0xf4, 0xc2, 0xd3, 0xa5, 0x7f, 0x87, 0xf3, 0xf4, 0x25, 0x13, 0x4b,
		0x16, 0x71, 0x1c, 0x78, 0x12, 0xef, 0x1a, 0x6c, 0x7a, 0x5d, 0x19, 0x1f, 0xed, 0x83, 0x5b, 0x90,
		0x76, 0x98, 0x83, 0xda, 0x3e, 0x7d, 0xbc, 0x81, 0xe1, 0x41, 0xe3, 0xa4, 0x77, 0xce, 0xe0, 0x0b,
		0x12, 0x83, 0xe8, 0x0d, 0xca, 0x67, 0x99, 0x88, 0x35, 0xef, 0x33, 0x48, 0x0c, 0xae, 0xb1, 0x0f,
		0x5e, 0xb0, 0x23, 0x74, 0xcc, 0x38, 0x12, 0x91, 0x56, 0x19, 0x7e, 0x81, 0xff, 0xdf, 0x36, 0xa0,
		0x9e, 0x4c, 0x22, 0xba, 0x30, 0xad, 0xf9, 0x76, 0x0c, 0x44, 0x1b, 0x96, 0x91, 0x92, 0x5a, 0x22,
		0x33, 0x13, 0x8f, 0x93, 0xbb, 0x02, 0x83, 0xbe, 0x4a, 0xff, 0xec, 0x35, 0x09, 0x4f, 0x98, 0x66,
		0xe1, 0xde, 0x3b, 0xa4, 0xa7, 0xc3, 0xeb, 0xac, 0xf8, 0x8a, 0xbd, 0xd8, 0xa1, 0x03, 0x4e, 0x96,
		0x8d, 0x10, 0x42, 0x35, 0xa8, 0x05, 0xc3, 0x72, 0xda, 0xeb, 0x7b, 0x78, 0x44, 0xff, 0x29, 0x2b,
		0xf1, 0xe0, 0x2f, 0x3f, 0xe8, 0x91, 0x2a, 0x28, 0xd9, 0x2e, 0x07, 0x24, 0xf2, 0x85, 0x41, 0x01,
		0x61, 0xf4, 0xfc, 0x8c, 0x9f, 0xf8, 0xe0, 0xae, 0x91, 0xfe, 0xaf, 0xb8, 0x90, 0xde, 0x77, 0x5f,
		0x87, 0x4d, 0xe9, 0xc8, 0xfd, 0x99, 0x0f, 0xe7, 0x7c, 0x21, 0x52, 0x5d, 0x55, 0xf8, 0x82, 0xc4,
		0x32, 0x06, 0x0d, 0xa5, 0x65, 0x61, 0x81, 0x1c, 0xb7, 0xfa, 0x2a, 0x7b, 0xa4, 0xad, 0x90, 0x7f,
		0xaa, 0x54, 0x53, 0xd1, 0xc2, 0xa8, 0x83, 0x4e, 0xee, 0xb7, 0x40, 0x0f, 0x17, 0x44, 0x5d, 0x59,
		0xa3, 0x34, 0x4f, 0xa6, 0x4d, 0xb8, 0xee, 0x9e, 0x97, 0x02, 0x0c, 0x51, 0x58, 0xde, 0xf0, 0x4a
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xb2b5c1n;
	message = new Uint8Array([
		0xcb, 0x25, 0x4c, 0x69, 0xcb, 0x29, 0x6e, 0xae, 0x32, 0x8f, 0xaf, 0xd8, 0x35, 0x43, 0x96, 0x59,
		0x4c, 0x74, 0xe8, 0xf9, 0xee, 0x47, 0x83, 0x28, 0x9b, 0xcc, 0x8a, 0x92, 0x20, 0x31, 0xc2, 0xf5,
		0x17, 0x35, 0x3c, 0x2f, 0xad, 0xe0, 0x35, 0x9c, 0xa8, 0x71, 0x3a, 0x9e, 0xa8, 0x99, 0x90, 0x7d,
		0xac, 0xe6, 0xd2, 0x72, 0xd9, 0x82, 0xdc, 0xfe, 0x77, 0x1d, 0xe8, 0x80, 0x3d, 0x28, 0xf7, 0x07,
		0xce, 0x44, 0x73, 0x65, 0x83, 0xfa, 0x12, 0x85, 0x6b, 0xac, 0xfd, 0xfe, 0x90, 0xcb, 0x32, 0xe7,
		0x7c, 0x4b, 0x26, 0xee, 0xfc, 0x54, 0xaf, 0xa4, 0x24, 0x3b, 0x22, 0x1b, 0x93, 0xb0, 0xb8, 0xb3,
		0xf9, 0x39, 0x37, 0x31, 0xd6, 0xdf, 0xce, 0x11, 0x84, 0x26, 0x40, 0x1e, 0x77, 0x43, 0x45, 0x3f,
		0xc4, 0x8a, 0x2d, 0x94, 0xe0, 0x26, 0xc6, 0xc1, 0xaa, 0x0c, 0x80, 0x8a, 0xac, 0x32, 0xcf, 0xa1
	]);
	signature = new Uint8Array([
		0xba, 0xb3, 0x1e, 0x3b, 0x71, 0x98, 0x8c, 0xd3, 0xf2, 0xa7, 0x72, 0xcd, 0x0e, 0x33, 0xb9, 0xdb,
		0x6d, 0x7a, 0xea, 0x6b, 0x6b, 0x99, 0xf6, 0x31, 0xa0, 0x25, 0x9d, 0xdf, 0xe9, 0x48, 0x9b, 0xc6,
		0x62, 0xd9, 0xc6, 0xc9, 0xe0, 0x39, 0x16, 0x59, 0x2f, 0x21, 0x2b, 0xd4, 0xe9, 0x61, 0x91, 0x48,
		0xdc, 0xea, 0x0b, 0x58, 0xb4, 0x75, 0xc7, 0x2d, 0xff, 0x88, 0x15, 0xaa, 0x3f, 0x27, 0x4a, 0xd1,
		0x9d, 0x19, 0x12, 0x6d, 0x67, 0xdc, 0x6d, 0x12, 0x0e, 0x98, 0x5c, 0xe1, 0x6a, 0x3a, 0xeb, 0x64,
		0xaa, 0xdd, 0x78, 0x56, 0x57, 0xfc, 0x03, 0x70, 0xc7, 0x01, 0xff, 0xeb, 0xf7, 0x1d, 0x83, 0x26,
		0x0c, 0xcd, 0xd9, 0xda, 0x04, 0xa8, 0xf2, 0x9a, 0x69, 0xa0, 0x1c, 0x3a, 0x9a, 0x6d, 0x2b, 0xd9,
		0x42, 0xc4, 0x4d, 0x5c, 0xb9, 0x1f, 0xcb, 0x44, 0xaf, 0x60, 0xa2, 0xb8, 0xe2, 0xc9, 0x4c, 0xab,
		0xc2, 0x3c, 0xa0, 0x4e, 0xc6, 0xd3, 0x00, 0x5a, 0x82, 0xcb, 0xe0, 0x65, 0x46, 0xc3, 0x8d, 0x4f,
		0xed, 0xfc, 0x56, 0xd5, 0x49, 0xc7, 0x85, 0xa2, 0xe2, 0x3b, 0x04, 0xae, 0x01, 0x35, 0xb0, 0x3a,
		0x17, 0xd6, 0x3e, 0xa5, 0x04, 0xc5, 0x1a, 0x0d, 0x12, 0x9c, 0x17, 0x2b, 0xa2, 0xec, 0xea, 0x5d,
		0xc6, 0xb8, 0xdb, 0x4c, 0xec, 0x7b, 0x7a, 0x4d, 0x02, 0x1d, 0xa0, 0x3e, 0xbe, 0x8c, 0xf6, 0xcc,
		0xe6, 0x7b, 0x8e, 0x03, 0x2b, 0x4c, 0xe7, 0x80, 0x13, 0x6a, 0xfb, 0x14, 0x4e, 0x5d, 0x80, 0x19,
		0xe7, 0x91, 0x69, 0x32, 0xba, 0x87, 0xc7, 0xd9, 0xc9, 0x63, 0xc0, 0xf5, 0x1d, 0x62, 0xc8, 0x73,
		0xaf, 0x41, 0x39, 0x6d, 0x87, 0x87, 0x7c, 0xa5, 0xae, 0x88, 0x8e, 0xa7, 0xd3, 0x22, 0xfa, 0xa7,
		0x93, 0x45, 0x08, 0x0f, 0xb9, 0xd2, 0xe6, 0xdd, 0x98, 0xb7, 0xb2, 0x19, 0xb6, 0x66, 0x21, 0x14
	]);
	saltLength = 48;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	n =
		0x9d19bc62c9c1989df660e259e9c3b1fb805cff7546d2ea5a479d29ccc4e18f1ffc4f78a9af924e04001850d3c56a91c8738f047ae12c89fab3dec2ed1dd7a207ae635f587c101fbd2c542e86726f7f72aa47497162dffad87eb321426e8929afaedf4a94c132ffb2966c22aaca737550feada9f92c07c2095739c3ee524be18c1a34dfbd2e210868c7c25a2fa222c65353dd28008ceb10a570206a59d2a23b22cfd9f38daa0db78c4843bfe1ed1a366dc128ab4d5dd45a28586ca4c8b0ffdd90759028ae29eab9c56cb0da94ec13d3d9fa69333c6065f3ec4c6392259e1c2f761eed8f8aca57354c76c2a0aa6b9045e5182a95ebd332494d642ef07c1e3617d7n;
	e =
		0xaf8e8fn;
	message = new Uint8Array([
		0xe7, 0x4d, 0xed, 0x82, 0x96, 0x4f, 0xf8, 0x74, 0xc9, 0xe1, 0x05, 0x40, 0xc9, 0xf1, 0xde, 0xda,
		0xcc, 0xb3, 0x76, 0xb8, 0x82, 0xe6, 0x1f, 0x33, 0xeb, 0x5a, 0xfd, 0x31, 0x6b, 0xaf, 0xbb, 0x01,
		0x20, 0x5f, 0x7c, 0x86, 0x73, 0xff, 0x15, 0x98, 0xed, 0xc1, 0x79, 0xa7, 0x4d, 0x3e, 0x74, 0xa1,
		0xd7, 0x72, 0x9d, 0x16, 0xee, 0x08, 0x86, 0x9b, 0xe5, 0xd8, 0x35, 0x6c, 0x13, 0xaf, 0xd8, 0x55,
		0x25, 0x4e, 0xb4, 0xd2, 0xb8, 0xb5, 0x5f, 0x75, 0x28, 0xa1, 0x2f, 0x88, 0xa2, 0x53, 0xf2, 0xf4,
		0x81, 0x93, 0xdf, 0x61, 0xd7, 0xf5, 0xcd, 0x9f, 0x49, 0x5b, 0xa3, 0x44, 0x21, 0xbb, 0x10, 0x97,
		0x9e, 0x22, 0x7c, 0xad, 0x8e, 0xf9, 0x3e, 0xd2, 0x1f, 0x88, 0x0f, 0x2b, 0xf3, 0xb8, 0xbe, 0x99,
		0x72, 0x1d, 0x26, 0xdf, 0x64, 0x33, 0x5e, 0x08, 0xbf, 0xe8, 0x2f, 0x03, 0xbd, 0x5b, 0xcb, 0x91
	]);
	signature = new Uint8Array([
		0x23, 0xcf, 0xae, 0x51, 0x8d, 0xad, 0x78, 0xff, 0x65, 0x40, 0xe6, 0x4f, 0x54, 0xec, 0xb5, 0x71,
		0xae, 0x4f, 0xa3, 0x3f, 0xcc, 0x57, 0x73, 0x2d, 0x85, 0x55, 0xcd, 0x25, 0xb4, 0x4b, 0x46, 0xf4,
		0x6e, 0xeb, 0x10, 0x9f, 0x91, 0xaf, 0x7d, 0x08, 0xc8, 0x9e, 0x16, 0xf4, 0xcf, 0x6a, 0xa1, 0x19,
		0xcd, 0x96, 0x33, 0x51, 0x5c, 0x55, 0xab, 0x3f, 0xad, 0x64, 0xc8, 0x93, 0x24, 0x17, 0xca, 0x94,
		0x5b, 0xe3, 0xe2, 0x60, 0x28, 0xb7, 0x52, 0xbc, 0xa8, 0x85, 0x15, 0x67, 0xda, 0x64, 0x08, 0xe2,
		0x11, 0xdf, 0x8f, 0xa2, 0x15, 0xa8, 0xec, 0x07, 0xfb, 0x6f, 0xaa, 0xc5, 0xcf, 0xf2, 0x6d, 0x17,
		0x4a, 0x1b, 0x5b, 0x7f, 0xec, 0x9a, 0xb1, 0x2c, 0x12, 0x84, 0x89, 0xc4, 0xcc, 0xae, 0xa6, 0x0c,
		0x13, 0x47, 0xb8, 0x45, 0x1b, 0xce, 0x07, 0xcc, 0xc9, 0xc2, 0x1e, 0x90, 0xc2, 0xe5, 0xdc, 0xbe,
		0xa4, 0xa2, 0x92, 0xc1, 0x6d, 0x60, 0xba, 0x66, 0xca, 0x4e, 0x5f, 0xfd, 0x6c, 0x9c, 0xc3, 0xb8,
		0xce, 0x4e, 0xbe, 0x39, 0xdf, 0x41, 0x85, 0x73, 0xe0, 0xe9, 0xf4, 0x2a, 0xe0, 0x98, 0x75, 0xa1,
		0x10, 0x50, 0xa4, 0x34, 0x53, 0x87, 0x90, 0xc5, 0xc7, 0x00, 0xb5, 0xad, 0xbb, 0xf7, 0x00, 0xdb,
		0x2a, 0x93, 0xf3, 0xe5, 0xac, 0x4c, 0x57, 0x0f, 0x85, 0x43, 0xf0, 0xa1, 0xc1, 0xd6, 0x64, 0xf2,
		0x9d, 0x16, 0x1b, 0x06, 0x4a, 0x08, 0x92, 0xdb, 0x49, 0x5b, 0x68, 0xda, 0x24, 0x54, 0xeb, 0x98,
		0x3d, 0xb0, 0xfb, 0x3d, 0xef, 0xb0, 0xf6, 0x88, 0xb6, 0x7c, 0x85, 0x06, 0xc2, 0x0d, 0xc7, 0x99,
		0x7e, 0x0b, 0xb5, 0x18, 0x54, 0xa8, 0x5a, 0xf6, 0x13, 0xa3, 0xb9, 0xa0, 0xca, 0x3e, 0x74, 0x6f,
		0x3d, 0x83, 0x93, 0xb6, 0x21, 0x06, 0xc5, 0x8f, 0x8e, 0xce, 0xcb, 0x50, 0x28, 0x24, 0xc4, 0x78
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000af8e8fn;
	message = new Uint8Array([
		0x19, 0xdc, 0x8b, 0x8a, 0x9d, 0xa1, 0x8d, 0xcb, 0x3c, 0xdc, 0xd5, 0x4f, 0xe1, 0x9f, 0xb7, 0x66,
		0xa8, 0x63, 0x5e, 0xde, 0x39, 0x04, 0xbf, 0x27, 0x55, 0x0d, 0xcf, 0xb5, 0xae, 0x36, 0xf4, 0xa6,
		0xfc, 0x2b, 0xba, 0xa5, 0x4d, 0x8f, 0xc8, 0x0e, 0x9c, 0x41, 0x12, 0x52, 0xa6, 0xde, 0x50, 0x9e,
		0xf9, 0x87, 0xae, 0xb7, 0x4e, 0xe4, 0xc5, 0x29, 0x18, 0x68, 0xca, 0xa0, 0x5d, 0xd7, 0x05, 0x96,
		0xc5, 0x06, 0x85, 0x2e, 0xf1, 0xe3, 0x13, 0x60, 0x0d, 0xb4, 0x64, 0x57, 0xa9, 0xa4, 0x93, 0x17,
		0xc4, 0x7b, 0xce, 0x63, 0x2a, 0xad, 0x4f, 0xde, 0x01, 0x96, 0x8d, 0x70, 0x9e, 0x04, 0xb4, 0xeb,
		0x9d, 0xf6, 0x53, 0xef, 0x30, 0xa3, 0x55, 0x0b, 0xb7, 0xbe, 0x33, 0x24, 0x91, 0xf9, 0x68, 0x1b,
		0x32, 0xc8, 0x24, 0xaa, 0x76, 0x67, 0x44, 0x8f, 0x35, 0x1e, 0x82, 0xed, 0x18, 0xc4, 0xe9, 0xef
	]);
	signature = new Uint8Array([
		0x69, 0x46, 0x78, 0x41, 0x30, 0x19, 0x40, 0x5b, 0x46, 0x50, 0xf7, 0x38, 0x97, 0x38, 0x7d, 0xf0,
		0xa9, 0xa0, 0x74, 0x4c, 0x34, 0x5e, 0x52, 0xc0, 0x2d, 0xbb, 0xc7, 0xd0, 0x08, 0x3c, 0x71, 0xe0,
		0x30, 0x4d, 0x0d, 0x8c, 0xb4, 0x7e, 0x08, 0xac, 0x78, 0xca, 0x34, 0xbc, 0xac, 0x20, 0x96, 0x79,
		0x67, 0x1a, 0x03, 0x6e, 0x12, 0x62, 0x28, 0x5b, 0xdd, 0xcf, 0x8d, 0x65, 0x08, 0x2d, 0x8f, 0x49,
		0xdb, 0x66, 0x37, 0xbc, 0x27, 0x11, 0xf2, 0xff, 0xcb, 0xeb, 0xc8, 0x4b, 0x0a, 0x96, 0xf5, 0x81,
		0xbd, 0x2d, 0xe0, 0xe5, 0x3c, 0xa2, 0x4c, 0x71, 0x5e, 0x41, 0x6c, 0xb4, 0xf4, 0xda, 0x2e, 0xb4,
		0xa4, 0xd0, 0xdf, 0x89, 0x38, 0x95, 0x91, 0x0c, 0xfa, 0x4c, 0x34, 0x6e, 0xe0, 0x02, 0xf3, 0x57,
		0x92, 0xcf, 0xc0, 0x66, 0xf2, 0x5f, 0x04, 0x89, 0x34, 0xb9, 0x11, 0xdc, 0x74, 0x8e, 0xcc, 0x88,
		0xf7, 0x09, 0xba, 0x96, 0xf3, 0x20, 0xb3, 0xf4, 0xac, 0x84, 0xb7, 0x40, 0xd7, 0xec, 0xd3, 0x2a,
		0xf6, 0x3a, 0x83, 0x36, 0x12, 0xa6, 0xb1, 0x53, 0xe0, 0x6f, 0x08, 0x2e, 0x25, 0xb1, 0x95, 0xfb,
		0x04, 0x98, 0xe5, 0x7c, 0x0e, 0x28, 0x4a, 0xe0, 0x3f, 0xdb, 0x27, 0x12, 0x4f, 0x3a, 0xf3, 0x4b,
		0x46, 0x8e, 0xc0, 0x3c, 0x8f, 0x9e, 0x2e, 0x41, 0x82, 0xa8, 0xd0, 0xd1, 0x8f, 0x10, 0x22, 0x1f,
		0x79, 0xc1, 0x37, 0x15, 0xbe, 0x8c, 0xa7, 0x7c, 0xe3, 0x22, 0xf8, 0x1f, 0x75, 0x55, 0xa5, 0x7f,
		0xe2, 0xe7, 0x59, 0xf2, 0x80, 0xd2, 0xa0, 0x95, 0xd3, 0x3c, 0xcc, 0x89, 0xae, 0x16, 0x29, 0xb6,
		0x38, 0x60, 0x14, 0xdf, 0x12, 0x15, 0xbc, 0x21, 0xcd, 0x83, 0x85, 0x54, 0x8b, 0x1a, 0x14, 0x9f,
		0x57, 0xf2, 0xcf, 0x84, 0x87, 0xa6, 0x86, 0x7a, 0x1b, 0xce, 0x84, 0x22, 0x40, 0x05, 0x07, 0x63
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(true);

	e =
		0xaf8e8fn;
	message = new Uint8Array([
		0xd1, 0x22, 0xc9, 0xb5, 0x39, 0x02, 0x1a, 0x26, 0xf4, 0xe6, 0x6a, 0x82, 0x3f, 0x29, 0x79, 0x17,
		0x80, 0xa8, 0x79, 0xda, 0x29, 0x1b, 0x18, 0x58, 0xde, 0xa5, 0xba, 0xf0, 0xda, 0xa9, 0x06, 0x40,
		0x8f, 0xe0, 0xa5, 0xdd, 0x8c, 0xa8, 0x46, 0x47, 0xa4, 0x9f, 0xe6, 0x1c, 0x4d, 0x71, 0x4e, 0x8b,
		0x46, 0xee, 0xdd, 0x0c, 0x7d, 0x60, 0x87, 0x4e, 0x2f, 0x1b, 0x1e, 0x71, 0x51, 0x55, 0xd0, 0x76,
		0x2f, 0x38, 0xf2, 0xf4, 0x53, 0x36, 0xfc, 0x0c, 0xa8, 0x9d, 0xd4, 0x9e, 0xdf, 0x6b, 0x4f, 0xbd,
		0x12, 0x63, 0xf5, 0x61, 0xa7, 0x60, 0x04, 0x5c, 0x78, 0xea, 0xb8, 0x90, 0x30, 0x07, 0xca, 0x5e,
		0xf8, 0x53, 0x36, 0x62, 0x54, 0x53, 0x42, 0x5d, 0x47, 0x07, 0xbc, 0x72, 0xbe, 0xbe, 0x83, 0x96,
		0x2c, 0x2e, 0x49, 0x42, 0x71, 0xc4, 0x96, 0x6a, 0x00, 0x39, 0x10, 0xb3, 0x41, 0x66, 0xfb, 0xe1
	]);
	signature = new Uint8Array([
		0x57, 0x61, 0x9b, 0xb8, 0x64, 0x86, 0x5b, 0x00, 0x5f, 0xae, 0x1c, 0xb3, 0x34, 0xfc, 0x5e, 0x60,
		0xa2, 0x3c, 0xb1, 0x48, 0xe7, 0x22, 0xa7, 0x81, 0xb1, 0xda, 0x7e, 0x82, 0x2b, 0x84, 0x9b, 0x93,
		0xfc, 0x50, 0x29, 0x27, 0xce, 0x9d, 0x72, 0xbf, 0x8d, 0x2f, 0x80, 0x9c, 0xa6, 0xaf, 0xaa, 0xf2,
		0x68, 0x13, 0x3a, 0x78, 0x20, 0xcc, 0xb1, 0xe6, 0xc5, 0xe8, 0xa7, 0x25, 0x2f, 0x67, 0xf4, 0x1c,
		0x8c, 0x67, 0xf9, 0x7d, 0x19, 0xc7, 0x18, 0xb1, 0x5c, 0x32, 0xa2, 0xfd, 0x4a, 0x98, 0xc6, 0x9e,
		0xa5, 0x35, 0xb3, 0x7d, 0x6a, 0x1c, 0x88, 0x44, 0x09, 0x60, 0x3c, 0x80, 0xe1, 0xaa, 0xc8, 0xca,
		0x32, 0xc4, 0x8a, 0xd5, 0x48, 0x1a, 0xb5, 0x6a, 0x02, 0x52, 0x6a, 0x8f, 0x37, 0xb8, 0x84, 0xf1,
		0x55, 0x85, 0xa4, 0x98, 0x9f, 0x0a, 0x7c, 0x7f, 0x3a, 0xfb, 0x20, 0x71, 0x8f, 0x14, 0x3c, 0x4d,
		0x49, 0xfd, 0xaf, 0xdd, 0x33, 0x94, 0x44, 0x45, 0xd3, 0x9b, 0xf8, 0x57, 0xf8, 0xc0, 0x3e, 0x41,
		0x32, 0xb1, 0xa0, 0x0d, 0x52, 0x06, 0x4f, 0x60, 0x17, 0x2b, 0x44, 0xb6, 0x79, 0x19, 0x61, 0x0f,
		0x2b, 0x69, 0xfd, 0xb7, 0xa5, 0x1b, 0x69, 0x08, 0x79, 0x15, 0xf7, 0x6a, 0x2a, 0x08, 0x96, 0xfe,
		0x53, 0x10, 0x3c, 0x81, 0xc2, 0x7d, 0x00, 0xb8, 0xc8, 0x05, 0xb4, 0x2d, 0x2a, 0xdb, 0xd3, 0x1b,
		0x21, 0xd1, 0x77, 0x3b, 0xc1, 0xf9, 0x6b, 0x3d, 0x5f, 0x93, 0x52, 0xf2, 0x24, 0xcf, 0x1a, 0xb9,
		0x3c, 0x18, 0xce, 0xf9, 0x71, 0x34, 0xfb, 0x3c, 0xaf, 0xbd, 0xa7, 0xb8, 0xe4, 0xc3, 0x01, 0x98,
		0x1a, 0xc4, 0x02, 0x74, 0x86, 0xd7, 0x4d, 0x13, 0x08, 0xc2, 0x34, 0xf8, 0x4a, 0x13, 0xcd, 0xf0,
		0xe5, 0x05, 0xd0, 0x2c, 0x3f, 0x1f, 0x2b, 0x8e, 0x99, 0x84, 0xd6, 0xb2, 0xfd, 0xbe, 0x04, 0x00
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xaf8e8fn;
	message = new Uint8Array([
		0xfa, 0x0e, 0x2e, 0xe8, 0xd9, 0x53, 0xee, 0x35, 0x89, 0xbe, 0x81, 0x46, 0x38, 0x51, 0x29, 0x66,
		0xd3, 0xd5, 0xe1, 0xb4, 0xca, 0x87, 0x40, 0x79, 0x17, 0x0f, 0x9f, 0xb8, 0x7d, 0xb1, 0x7e, 0x07,
		0x0d, 0xc7, 0x24, 0x9e, 0xef, 0x6f, 0x86, 0xae, 0x5f, 0x81, 0x6a, 0xf4, 0xf6, 0xc4, 0xcc, 0x8d,
		0x2b, 0x61, 0x81, 0x0c, 0x19, 0x97, 0x1a, 0xca, 0x83, 0xb1, 0x0b, 0x7d, 0x15, 0x35, 0x0d, 0x0c,
		0xec, 0x5f, 0xc0, 0xa2, 0x59, 0xcd, 0x95, 0x02, 0xe2, 0x7c, 0xeb, 0x1a, 0x8a, 0xf3, 0x78, 0xda,
		0x53, 0xbe, 0xeb, 0x46, 0x00, 0x1e, 0xcf, 0xca, 0x1f, 0xff, 0xb3, 0xce, 0x47, 0x2a, 0x88, 0x8b,
		0x9f, 0xbc, 0x4a, 0x1d, 0x9f, 0xd7, 0xe3, 0xd9, 0x1b, 0x97, 0x4c, 0xe0, 0x7d, 0x48, 0xf5, 0xf4,
		0x52, 0xd6, 0x67, 0x8b, 0x08, 0x84, 0x28, 0x22, 0xf5, 0xe1, 0xde, 0xd4, 0x9c, 0xf9, 0xb8, 0x2b
	]);
	signature = new Uint8Array([
		0x2f, 0xba, 0x32, 0x58, 0xaf, 0x60, 0xa9, 0xc0, 0x26, 0xba, 0xca, 0xab, 0xa3, 0x30, 0x76, 0xb2,
		0x17, 0x89, 0x35, 0x8f, 0x63, 0xd7, 0x09, 0xe4, 0xb2, 0x37, 0x4c, 0x7e, 0x01, 0x0a, 0x3f, 0x13,
		0xd7, 0x7d, 0x71, 0xaa, 0x6a, 0x70, 0xa1, 0x16, 0xed, 0xa2, 0x2a, 0x65, 0x27, 0x06, 0xed, 0xe6,
		0x23, 0x4e, 0x71, 0xbb, 0x68, 0x8c, 0x32, 0x69, 0x70, 0x87, 0xa0, 0xc1, 0x2c, 0x42, 0x2e, 0x98,
		0xcd, 0x6e, 0xa5, 0x30, 0xad, 0x7a, 0xdf, 0x9e, 0x29, 0x3c, 0x5e, 0xda, 0x31, 0x15, 0x78, 0xcf,
		0x0c, 0xd6, 0xb2, 0xcb, 0x32, 0xc9, 0x34, 0x2f, 0x5e, 0x2e, 0x2f, 0x3f, 0xd8, 0xb2, 0x7f, 0xd8,
		0xb9, 0xbd, 0x7b, 0xef, 0xfa, 0xc0, 0x3a, 0xdf, 0x61, 0x48, 0xe7, 0x2d, 0x97, 0x75, 0xc2, 0x7e,
		0xf9, 0x0a, 0xa2, 0x32, 0xf4, 0x9b, 0xed, 0x02, 0xaf, 0x05, 0xa0, 0xd1, 0x56, 0x78, 0x17, 0x11,
		0x6a, 0x9a, 0xbc, 0x0b, 0x81, 0xff, 0xb0, 0x28, 0x16, 0xec, 0x6b, 0xac, 0x84, 0x1e, 0x55, 0x9f,
		0xbd, 0xd7, 0xc2, 0xe4, 0x1d, 0xf9, 0xe4, 0xb6, 0x6f, 0x76, 0x72, 0x9f, 0xef, 0xc8, 0x44, 0xd6,
		0xdd, 0x6a, 0x87, 0x94, 0x41, 0xfb, 0x21, 0x2d, 0x4c, 0x06, 0x5e, 0xbe, 0x6a, 0xf9, 0x36, 0x5f,
		0xb2, 0xff, 0x05, 0x34, 0x33, 0xac, 0xa7, 0x78, 0xd3, 0xa6, 0x67, 0xc9, 0x01, 0xdf, 0xd7, 0xdc,
		0x35, 0xbc, 0x25, 0x18, 0x64, 0x0a, 0x79, 0xaa, 0xec, 0xa1, 0x27, 0x06, 0x46, 0x46, 0x4c, 0xa5,
		0x5b, 0x87, 0x20, 0x17, 0xa5, 0x1c, 0xff, 0x49, 0xb5, 0x6b, 0x53, 0xf7, 0x03, 0x24, 0x16, 0x8d,
		0xa7, 0x2b, 0x0b, 0x5a, 0x29, 0x7b, 0x79, 0x0c, 0x89, 0xb1, 0xf7, 0x1f, 0xa7, 0x93, 0x7e, 0xb1,
		0xe5, 0x14, 0xd7, 0x7f, 0x33, 0x28, 0x47, 0x65, 0xb6, 0x66, 0x08, 0x01, 0x0c, 0x32, 0x40, 0x13
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xaf8e8fn;
	message = new Uint8Array([
		0xe2, 0x57, 0x50, 0xb8, 0x3c, 0x69, 0xe4, 0xe1, 0x4c, 0xd3, 0x1a, 0x1f, 0x36, 0x6d, 0x7f, 0x97,
		0x13, 0x42, 0x01, 0x53, 0x5b, 0x36, 0x01, 0xfe, 0x9d, 0xec, 0xa9, 0xe8, 0x74, 0xe6, 0x80, 0x51,
		0xb6, 0xee, 0x3b, 0xe3, 0xee, 0xb5, 0xd7, 0x80, 0x0d, 0xbb, 0xe4, 0x3e, 0x5c, 0x6e, 0x24, 0xb0,
		0xb5, 0x96, 0x54, 0x68, 0xf3, 0xf0, 0x4a, 0xb9, 0xa7, 0x19, 0x40, 0xc2, 0x0d, 0xae, 0x70, 0xa7,
		0x3e, 0xb2, 0xe1, 0x22, 0xa6, 0x30, 0x80, 0x3b, 0xb9, 0x21, 0x72, 0x53, 0xe2, 0x8f, 0xa9, 0x67,
		0xbc, 0xfb, 0xb5, 0x93, 0x85, 0xfd, 0xdd, 0xd5, 0xd0, 0x2a, 0x6f, 0x14, 0x79, 0x3a, 0x54, 0x61,
		0xde, 0x6b, 0xe7, 0x7c, 0x4c, 0x20, 0x08, 0x9a, 0xb8, 0xce, 0x6b, 0x65, 0xb0, 0x18, 0x36, 0x45,
		0x91, 0x39, 0xcc, 0xde, 0xf9, 0xa3, 0xe3, 0xda, 0x7f, 0xe5, 0xdd, 0xe8, 0xa2, 0xd2, 0x55, 0x04
	]);
	signature = new Uint8Array([
		0x5c, 0x3f, 0xf2, 0x64, 0x14, 0xd2, 0xaf, 0x68, 0xf3, 0x16, 0xf7, 0x64, 0x6f, 0xe4, 0x74, 0x0d,
		0x57, 0x1d, 0x7d, 0x08, 0xa4, 0x55, 0x3c, 0x25, 0x0b, 0x6a, 0xbf, 0x01, 0x87, 0xc2, 0xcc, 0xf1,
		0x6e, 0xde, 0x3b, 0xa3, 0x3a, 0xcf, 0x57, 0xe2, 0x8b, 0x20, 0xec, 0xfc, 0xd0, 0xc7, 0x78, 0x15,
		0xd2, 0x80, 0xc0, 0x8e, 0xf4, 0xbc, 0x76, 0xae, 0xba, 0x90, 0x12, 0x93, 0x9b, 0xb5, 0x3a, 0x5c,
		0x93, 0x2c, 0xca, 0xda, 0x63, 0x23, 0xd8, 0xde, 0x5b, 0x00, 0x43, 0x90, 0x32, 0xb0, 0xfb, 0x57,
		0xc7, 0x7e, 0x64, 0x42, 0x3a, 0x50, 0xd4, 0x80, 0xd9, 0x36, 0x43, 0x56, 0xe0, 0xb3, 0xb8, 0x41,
		0xcc, 0x8a, 0x61, 0xbb, 0xff, 0x8f, 0x23, 0x5a, 0xa8, 0x24, 0x7c, 0x4d, 0xf7, 0xac, 0x1a, 0x31,
		0xfa, 0xa8, 0x5a, 0x85, 0x5c, 0x76, 0x10, 0x9c, 0xc0, 0xa8, 0xba, 0xff, 0x6b, 0x46, 0xfe, 0xff,
		0xa6, 0x5a, 0xd5, 0x76, 0xeb, 0x2e, 0xcf, 0x17, 0x13, 0xba, 0xef, 0x88, 0xcb, 0xf8, 0xa9, 0xd9,
		0x39, 0x55, 0x8f, 0x95, 0x67, 0x7e, 0x74, 0x90, 0x45, 0xa0, 0x6b, 0x8d, 0xa3, 0xfd, 0xdc, 0xa0,
		0x7b, 0x8c, 0x6e, 0x25, 0x49, 0x9c, 0x8d, 0x2d, 0xc6, 0xf2, 0xe1, 0x52, 0xb7, 0x5a, 0x9a, 0x85,
		0xaf, 0x85, 0xdb, 0x7c, 0x84, 0x15, 0x22, 0x91, 0xbb, 0x03, 0xa6, 0xec, 0xd6, 0x5a, 0x1a, 0x02,
		0x09, 0xd8, 0x29, 0x1c, 0xca, 0x9d, 0xb5, 0x64, 0x8a, 0xce, 0xbe, 0xae, 0x1f, 0xae, 0xaf, 0x48,
		0x8c, 0x49, 0x18, 0x3b, 0x04, 0x33, 0xd7, 0x48, 0x33, 0x81, 0x2d, 0xdd, 0x35, 0xca, 0x6b, 0x48,
		0x3a, 0x9f, 0x24, 0x84, 0x5f, 0x10, 0xc1, 0x1a, 0x18, 0x15, 0x2c, 0x9d, 0x3c, 0x8c, 0xe5, 0x20,
		0x9e, 0xc4, 0xd8, 0xc1, 0x0c, 0x59, 0x60, 0xcc, 0x58, 0x89, 0x95, 0x04, 0x28, 0xe5, 0x57, 0xe3
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xfd7a0bn;
	message = new Uint8Array([
		0x22, 0x88, 0x96, 0x1b, 0x2d, 0x0b, 0x66, 0xe7, 0x5d, 0xfe, 0x40, 0x79, 0x80, 0x4a, 0x7f, 0x99,
		0xcd, 0x97, 0x35, 0xdb, 0x1b, 0xb5, 0x07, 0x21, 0x51, 0x3a, 0x3f, 0x61, 0x1e, 0x6d, 0x1c, 0xa8,
		0xea, 0x63, 0x6c, 0x5f, 0x0c, 0x68, 0x5d, 0xce, 0x3d, 0xa1, 0x91, 0xde, 0x4c, 0xef, 0x70, 0x23,
		0x14, 0x15, 0xc2, 0x19, 0xac, 0x1e, 0x7d, 0xae, 0xdd, 0xf9, 0xdb, 0x01, 0xd9, 0x67, 0xb0, 0x6a,
		0x29, 0x17, 0xfb, 0xba, 0xe8, 0x0e, 0xbb, 0xc4, 0x2f, 0x4d, 0x04, 0x1c, 0xd0, 0xae, 0x51, 0x1e,
		0x47, 0x10, 0x1c, 0x32, 0xed, 0xb3, 0xac, 0x4f, 0x6f, 0xe5, 0x2f, 0xbe, 0x7f, 0xdf, 0x08, 0x21,
		0xc9, 0xea, 0x6a, 0xb3, 0x29, 0xc6, 0x26, 0xd1, 0x1b, 0x4b, 0xc1, 0xba, 0x73, 0x51, 0xca, 0x93,
		0x4e, 0xce, 0x6a, 0xae, 0x48, 0x3e, 0x3d, 0x0b, 0xef, 0x48, 0x60, 0x1f, 0x78, 0x9e, 0xcc, 0xd5
	]);
	signature = new Uint8Array([
		0x39, 0x4e, 0xcb, 0xdd, 0x11, 0x59, 0x19, 0x3f, 0x00, 0xfc, 0xab, 0xfe, 0x13, 0xf1, 0xeb, 0xad,
		0x7d, 0x74, 0xc0, 0xfa, 0x95, 0x4d, 0xfe, 0x2f, 0xce, 0xa5, 0x20, 0x3b, 0x54, 0xc9, 0x3e, 0x02,
		0x96, 0x04, 0x90, 0xf5, 0x1c, 0x15, 0x5d, 0xa4, 0x52, 0xcb, 0x45, 0x1a, 0xa0, 0x12, 0xf1, 0x5f,
		0x27, 0xc9, 0xed, 0x60, 0x30, 0x14, 0xeb, 0x88, 0xb7, 0x14, 0xcd, 0x32, 0x32, 0xb0, 0xb0, 0x8c,
		0xaa, 0xd1, 0xe1, 0x8f, 0x80, 0xcf, 0xb8, 0x13, 0x45, 0xa1, 0x8c, 0x44, 0x19, 0xb8, 0x8a, 0x42,
		0x9a, 0x4f, 0x69, 0xc7, 0x21, 0x49, 0xe9, 0x6a, 0xcb, 0x7f, 0x44, 0x63, 0xde, 0xca, 0x71, 0x05,
		0x93, 0x8d, 0x51, 0xf2, 0xa9, 0x16, 0x92, 0x97, 0xe2, 0x46, 0x2d, 0xcf, 0x4e, 0xac, 0x45, 0x20,
		0x8b, 0xc5, 0x09, 0xcc, 0x3e, 0x85, 0xfe, 0xac, 0x0e, 0x51, 0xb3, 0xbb, 0x32, 0x97, 0x4e, 0xe8,
		0x2f, 0xbd, 0x23, 0xb3, 0xe2, 0xdc, 0x06, 0xda, 0x6e, 0x7f, 0x64, 0xf9, 0x17, 0xd0, 0x0b, 0xef,
		0xb1, 0x81, 0xb2, 0x64, 0x10, 0x1d, 0xe5, 0x5c, 0xd9, 0x0a, 0x86, 0xe0, 0xfd, 0xb2, 0x7b, 0x3e,
		0x9e, 0x8f, 0xfb, 0x45, 0x8b, 0x39, 0xb1, 0x71, 0x8e, 0x20, 0xda, 0x77, 0x94, 0x08, 0xde, 0x3a,
		0xbc, 0x05, 0xf9, 0x8e, 0x19, 0x6f, 0x5f, 0x92, 0xf4, 0xdc, 0x22, 0xb3, 0x4a, 0x39, 0xc2, 0x8a,
		0xae, 0xd5, 0xd4, 0x4b, 0xa5, 0xfc, 0x8a, 0x50, 0xfb, 0xcc, 0x35, 0x5b, 0xbe, 0xad, 0xa2, 0x39,
		0xbb, 0x66, 0x4f, 0x2d, 0x8e, 0x32, 0xfd, 0x53, 0xa0, 0xf8, 0xa0, 0xca, 0x08, 0x12, 0x76, 0xc3,
		0x2c, 0xb6, 0x1c, 0x74, 0xfa, 0x95, 0x23, 0xb1, 0xd3, 0xf6, 0xa7, 0x95, 0xda, 0xca, 0xb8, 0x36,
		0x36, 0x80, 0xef, 0x62, 0xa2, 0xa9, 0x64, 0xf6, 0x6e, 0x3f, 0x5c, 0x0e, 0xf5, 0xd6, 0x63, 0xd0
	]);
	saltLength = 64;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	n =
		0xfa15594057e21dfd0b41c921627809dd454b519cc1c4ea39883814f9cdeff4a184d10f641a5ced9a80de1623ee7f86567d953256f48dd68ccb2e8362173aeaab3f11182425924334f9b92092c0fdf1e3b4c17b5efbc0269a7d839683470112c425c4d77b8835e6a307d0189223894d74d809ddba7260fa22cf3eae11e58cb94bf61cff8faae7cf17643cacd709725814ec9c365366b3a721161d8c2092681520a23e888dc0fecdcbe61f0cf27f3ae99ebab6a459331cfb3626fcd34eb124adf5ad5cf6ab5af05e0956391cc6debbbd0d6270b8412f330d469c41b26bc0f261b9aaaf4178b55b21af6ba12dcec1b9c58e9eaf9747e37cf50878110aec5630fe3dd77217c35e55c48896207a8586354d058dd7028a386e474b7c736283c45662c4810f56c6d0ec8586397d499d59c0e0a8d640c25bb91f3fd2cc74801f2526f78ae49f42b279a1687b9a8e965b49fe10a2360852000f440117b84dd8cbb793c27f124ff88535a25ecf925d464efae566f81c8f43d23b646296c087fb56589ecebdn;
	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a673fn;
	message = new Uint8Array([
		0x34, 0x8d, 0x82, 0x53, 0xc3, 0xfd, 0x1e, 0x01, 0x75, 0xf2, 0x63, 0x08, 0x1c, 0x02, 0x5e, 0xd1,
		0xd2, 0xf4, 0x8d, 0x74, 0x98, 0xd3, 0x9f, 0x73, 0x3d, 0x41, 0x7c, 0xa7, 0x82, 0x0e, 0x85, 0x7a,
		0x7b, 0x09, 0x1d, 0x57, 0x38, 0x16, 0x68, 0x5f, 0xa5, 0x81, 0x52, 0x5e, 0xaf, 0x92, 0xd4, 0xfd,
		0xa8, 0x62, 0x73, 0x39, 0xed, 0xec, 0x09, 0x13, 0xc6, 0x67, 0xc7, 0x89, 0x8d, 0xd4, 0x7b, 0xc6,
		0x13, 0xd3, 0x0f, 0x96, 0x3f, 0xba, 0x52, 0x1c, 0xf8, 0xe8, 0xfc, 0xc7, 0x45, 0x57, 0xec, 0x82,
		0xb3, 0x71, 0xb3, 0x2b, 0xf8, 0x25, 0x56, 0x47, 0xd5, 0x39, 0x50, 0xf4, 0x41, 0xe2, 0xd7, 0x1e,
		0xc3, 0x92, 0x60, 0xf6, 0x20, 0x11, 0x65, 0xa0, 0x36, 0xcf, 0x66, 0x2c, 0x28, 0x79, 0x2e, 0xc8,
		0xbb, 0xca, 0x57, 0x34, 0x00, 0xa4, 0x10, 0x76, 0x34, 0x5f, 0x1e, 0xce, 0xe4, 0x61, 0x21, 0xec
	]);
	signature = new Uint8Array([
		0x72, 0x47, 0x18, 0x2f, 0x6a, 0x34, 0x68, 0x44, 0x02, 0x02, 0x8e, 0xb1, 0xf0, 0xff, 0x8a, 0xd0,
		0xf1, 0x63, 0x43, 0x26, 0x5e, 0xe6, 0xc6, 0xf7, 0xcc, 0x8b, 0x18, 0xf2, 0xef, 0x9d, 0x30, 0xe7,
		0x78, 0xc9, 0xae, 0x49, 0xbd, 0xaa, 0xee, 0x7f, 0xa1, 0xd4, 0xdc, 0x17, 0xea, 0x4a, 0x1a, 0x11,
		0xa6, 0x3d, 0x29, 0xef, 0x17, 0x03, 0x5f, 0xa4, 0x12, 0x15, 0xfd, 0xa4, 0x1d, 0x36, 0xed, 0xc7,
		0xa0, 0xa6, 0x72, 0x64, 0x9c, 0x3b, 0x05, 0xca, 0x07, 0xd0, 0x96, 0x44, 0x50, 0x3a, 0xbf, 0x99,
		0xdf, 0x6c, 0x7c, 0x31, 0xf5, 0x16, 0x36, 0x90, 0x44, 0x32, 0x20, 0x29, 0xc7, 0xba, 0x5d, 0x72,
		0x20, 0xbe, 0x8f, 0xe4, 0x6a, 0x0a, 0x03, 0x06, 0x8b, 0x7a, 0x8f, 0x1a, 0x14, 0x5d, 0x0a, 0xa0,
		0xaa, 0xcc, 0xc4, 0x40, 0x5f, 0xab, 0xad, 0xef, 0x36, 0x35, 0x4e, 0xe7, 0x49, 0xf5, 0x9c, 0x26,
		0xa0, 0xf7, 0xe0, 0xbc, 0xaf, 0xec, 0xa1, 0xec, 0xc2, 0x72, 0xc2, 0xc8, 0x37, 0x38, 0xb6, 0x3f,
		0x8b, 0xa2, 0xc6, 0xd1, 0x55, 0x3b, 0x1b, 0x32, 0x6d, 0xe4, 0x9d, 0xfe, 0xaa, 0xb0, 0xf5, 0x0c,
		0x34, 0x4b, 0xa3, 0x11, 0xc5, 0x84, 0x2f, 0x09, 0x3e, 0xf8, 0xb9, 0x06, 0xfd, 0x5e, 0x16, 0x31,
		0x80, 0x48, 0x4e, 0x95, 0x17, 0xc3, 0x63, 0x21, 0x7e, 0x90, 0x57, 0xa9, 0x33, 0xf5, 0xc2, 0x10,
		0x29, 0xc0, 0x0b, 0xb1, 0xa9, 0x36, 0x98, 0xe4, 0x17, 0xd3, 0x3b, 0x19, 0x58, 0x3d, 0x3d, 0xc4,
		0x77, 0x4f, 0x38, 0x1e, 0x43, 0x4e, 0x4a, 0x2c, 0x35, 0xdb, 0xd3, 0xf3, 0x82, 0x9f, 0x4d, 0xa9,
		0xc0, 0xd1, 0x8a, 0x70, 0x2f, 0x54, 0xd7, 0x3f, 0x20, 0x1d, 0xfa, 0xe3, 0xc2, 0x98, 0x00, 0x7e,
		0xe8, 0x7b, 0xd2, 0xd0, 0x17, 0xb8, 0xaa, 0x94, 0x11, 0xc2, 0x08, 0x1e, 0xc0, 0x4b, 0xa3, 0xbd,
		0xe2, 0x4c, 0xde, 0x89, 0xcf, 0x74, 0x3f, 0xa7, 0xf6, 0x27, 0xc7, 0x42, 0x0e, 0x4a, 0x21, 0x26,
		0x62, 0xbb, 0x16, 0x0f, 0xa5, 0xcb, 0xc9, 0x3b, 0x7b, 0x75, 0x85, 0xc5, 0x3a, 0x4d, 0x93, 0xdd,
		0x18, 0x12, 0x48, 0x51, 0xb9, 0x5b, 0xf0, 0x0d, 0xb2, 0x40, 0xa0, 0x85, 0x0a, 0x89, 0xbb, 0x1d,
		0x29, 0x19, 0x44, 0x94, 0x7c, 0x0d, 0x82, 0x06, 0xd6, 0xc5, 0x09, 0xb7, 0xb2, 0x7d, 0x8f, 0x38,
		0xa3, 0x39, 0xec, 0xcd, 0x36, 0x41, 0xb2, 0x91, 0xdd, 0x56, 0x9b, 0xbd, 0x3b, 0xed, 0x6c, 0xc1,
		0x8f, 0x57, 0x89, 0x01, 0x13, 0xca, 0x5f, 0x3a, 0xea, 0x7a, 0xf7, 0xb3, 0x58, 0x80, 0xfd, 0xc0,
		0xe1, 0x57, 0xf9, 0x41, 0x94, 0x6e, 0x74, 0x2a, 0xb6, 0x1b, 0x5a, 0x9d, 0xe3, 0xe1, 0x8a, 0x55,
		0x75, 0x68, 0x0a, 0x86, 0x9f, 0xde, 0xe0, 0x2b, 0xec, 0x97, 0xa7, 0x26, 0xd9, 0x9d, 0x07, 0x03
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a673fn;
	message = new Uint8Array([
		0x07, 0xdd, 0x79, 0xfa, 0x6d, 0x61, 0x0e, 0x1c, 0x9f, 0x3c, 0x64, 0xa2, 0xb9, 0x2d, 0x12, 0x54,
		0xb0, 0x66, 0x53, 0x11, 0x36, 0xdf, 0x0a, 0xc3, 0xdd, 0xf0, 0x03, 0x92, 0x7e, 0x1f, 0x7c, 0x58,
		0xdc, 0x37, 0xe4, 0x55, 0x85, 0x9a, 0xe2, 0x25, 0xf9, 0xd7, 0x99, 0xee, 0x0e, 0x7f, 0x2b, 0xde,
		0x93, 0x35, 0x7b, 0xd5, 0x34, 0x05, 0x38, 0x5e, 0x9d, 0xf7, 0x17, 0xe4, 0xe3, 0xe3, 0x5f, 0x23,
		0x1f, 0x86, 0xab, 0xdc, 0x5c, 0xd6, 0xeb, 0xcd, 0xb3, 0x93, 0xad, 0xe0, 0xb4, 0x1f, 0x9b, 0xa3,
		0x08, 0x8f, 0x44, 0xf8, 0x55, 0x02, 0x1f, 0x0e, 0x62, 0x31, 0xcc, 0x8f, 0x7c, 0x48, 0x9e, 0x1b,
		0x18, 0xf5, 0x57, 0xf6, 0xb9, 0xbe, 0x32, 0xfd, 0x14, 0x97, 0x27, 0xdf, 0x72, 0xb4, 0x6a, 0x89,
		0x57, 0x9c, 0x35, 0xe2, 0x61, 0x7f, 0xc7, 0xb9, 0x72, 0xc9, 0xad, 0xfb, 0x12, 0xf7, 0x40, 0x2a
	]);
	signature = new Uint8Array([
		0xba, 0xfb, 0xff, 0x97, 0x0e, 0x29, 0xb5, 0x6a, 0xde, 0xd3, 0x54, 0xa1, 0x40, 0x3c, 0xa8, 0x6d,
		0x9d, 0xca, 0x58, 0x6a, 0xfe, 0x5f, 0x7e, 0x26, 0x8d, 0xd1, 0x2a, 0x19, 0x15, 0x80, 0x37, 0x14,
		0xb3, 0x7b, 0x5b, 0x32, 0x9f, 0xb2, 0x62, 0xdf, 0x32, 0x0b, 0x7e, 0x4f, 0xf2, 0xa0, 0x78, 0x94,
		0x7e, 0xb7, 0xe1, 0x14, 0x40, 0x8b, 0xc4, 0x32, 0xb4, 0x1c, 0x89, 0x9f, 0x9f, 0x7a, 0xa4, 0x59,
		0x27, 0x76, 0x3c, 0x96, 0x9b, 0x81, 0x93, 0x21, 0xcb, 0x6a, 0x04, 0x85, 0x20, 0xa3, 0xce, 0x64,
		0xd6, 0x6e, 0x63, 0xc8, 0x1e, 0xf4, 0xa4, 0x8e, 0xd2, 0x69, 0xf4, 0x10, 0x8d, 0x39, 0x2a, 0x14,
		0x29, 0x87, 0x72, 0x52, 0xa5, 0x89, 0xca, 0x0f, 0xb2, 0x2f, 0x70, 0x08, 0x8a, 0x23, 0xd0, 0x1e,
		0xf8, 0x1a, 0x65, 0xe0, 0xda, 0xd9, 0xe7, 0xae, 0x9d, 0xfa, 0x09, 0xc4, 0x2e, 0x28, 0x43, 0xe7,
		0x55, 0x1a, 0xaa, 0xc9, 0x14, 0xe1, 0xfd, 0x43, 0x6b, 0x81, 0x1a, 0x28, 0xb7, 0x88, 0x03, 0xf1,
		0xba, 0x34, 0xc7, 0xea, 0x25, 0x4d, 0x1d, 0x37, 0xa3, 0x32, 0x17, 0x41, 0x3a, 0x08, 0x90, 0x85,
		0x62, 0x97, 0xf8, 0x1a, 0x61, 0x72, 0xbd, 0x6f, 0x14, 0x7f, 0x3c, 0x6a, 0xd8, 0x18, 0x32, 0x4e,
		0x5d, 0x6e, 0x36, 0x37, 0x0c, 0x2a, 0x52, 0x30, 0x11, 0x80, 0xb8, 0xa3, 0xa8, 0xb7, 0x14, 0x11,
		0x19, 0xca, 0x6e, 0x8b, 0x5b, 0xd7, 0x1a, 0x77, 0xd1, 0x1c, 0x51, 0x3d, 0xe8, 0x2a, 0xe3, 0xe4,
		0x18, 0x67, 0x57, 0xcf, 0xed, 0x3d, 0xdf, 0x17, 0xb3, 0x45, 0xe6, 0xaf, 0x80, 0x8e, 0x3b, 0x0a,
		0x63, 0x38, 0x78, 0x2c, 0x25, 0x31, 0x85, 0xc5, 0x1e, 0xd8, 0x55, 0xfb, 0x9a, 0x03, 0xc1, 0xc1,
		0x89, 0x5b, 0xa4, 0x44, 0xfc, 0xb6, 0x91, 0xe6, 0x57, 0x8a, 0x54, 0xfb, 0x92, 0x7b, 0x20, 0x56,
		0x4e, 0x32, 0x8f, 0x17, 0x5b, 0xf5, 0x93, 0x66, 0x3e, 0x38, 0xea, 0x5b, 0x92, 0xec, 0x8f, 0x85,
		0x6d, 0xca, 0x9c, 0x42, 0xc3, 0xed, 0x11, 0xe9, 0x3f, 0xae, 0x96, 0x0d, 0xc2, 0xb0, 0x38, 0x40,
		0x07, 0x29, 0x2a, 0xc2, 0x38, 0x5d, 0x12, 0xea, 0x05, 0xde, 0xa3, 0xc2, 0xa6, 0x0d, 0x5f, 0xe3,
		0xe6, 0xde, 0x6e, 0x88, 0x86, 0xb1, 0xb1, 0x25, 0x8c, 0x35, 0xbe, 0x13, 0xff, 0x1d, 0xdd, 0x7e,
		0x37, 0x34, 0x92, 0x3d, 0x05, 0xeb, 0x93, 0xbd, 0x90, 0x35, 0xc8, 0xb9, 0x36, 0xdf, 0x2b, 0x8c,
		0x36, 0x88, 0xa0, 0x45, 0x82, 0x9d, 0x42, 0x03, 0xbc, 0xd1, 0x78, 0xfe, 0x1c, 0xc9, 0xa5, 0x72,
		0x43, 0x68, 0xb9, 0x14, 0x88, 0x41, 0xf1, 0x73, 0x80, 0x5b, 0x88, 0xe5, 0x05, 0xcb, 0x5d, 0x51,
		0x69, 0x46, 0xbb, 0xb1, 0x73, 0x85, 0x60, 0x7e, 0x14, 0x34, 0x7d, 0xc5, 0xfd, 0x98, 0xd1, 0x72
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xa673fn;
	message = new Uint8Array([
		0xb6, 0x1e, 0xab, 0xe9, 0xeb, 0x62, 0x74, 0x0c, 0x50, 0x0b, 0x32, 0xe9, 0xb0, 0x49, 0xa0, 0x65,
		0x2b, 0x4a, 0x87, 0x31, 0x7e, 0x68, 0x28, 0x9f, 0x85, 0xa1, 0xda, 0xb5, 0xfe, 0x47, 0xf4, 0x81,
		0x8f, 0xf8, 0xed, 0xab, 0x0b, 0xd1, 0xc2, 0x51, 0xf1, 0xdf, 0x98, 0x0e, 0x35, 0xd6, 0xa3, 0x5c,
		0x43, 0x06, 0x46, 0x1d, 0x42, 0x8a, 0x7c, 0x74, 0x95, 0xc3, 0x76, 0xd9, 0xa8, 0x05, 0x86, 0x6d,
		0xe9, 0x8f, 0x3b, 0x8a, 0x14, 0xc1, 0xce, 0x9f, 0xb4, 0x89, 0xbc, 0x3b, 0xe7, 0x1f, 0xb5, 0x67,
		0x61, 0xf2, 0xb5, 0x39, 0xb3, 0xe2, 0x71, 0xa6, 0xcd, 0xaf, 0xf4, 0x98, 0xc2, 0xb1, 0x8a, 0x40,
		0xcc, 0xca, 0xdd, 0xae, 0x90, 0x9a, 0x5e, 0x9f, 0xa3, 0xf1, 0xe6, 0x96, 0x4c, 0x8a, 0x9d, 0x2e,
		0x8c, 0xf6, 0x1c, 0xae, 0x5b, 0xd6, 0xce, 0xde, 0x35, 0x4d, 0x9c, 0x19, 0xd5, 0xb5, 0xc9, 0xa4
	]);
	signature = new Uint8Array([
		0x09, 0xb5, 0x73, 0xed, 0x2b, 0xe2, 0x13, 0xb3, 0xe1, 0xad, 0x49, 0xab, 0x1f, 0xce, 0xbc, 0x2b,
		0xe8, 0xcb, 0xd3, 0x05, 0x56, 0xa3, 0xc9, 0xac, 0x4e, 0xaf, 0xdf, 0xfa, 0xce, 0xe2, 0x0b, 0x7c,
		0x5b, 0x19, 0xfe, 0x84, 0xc6, 0x6c, 0xdf, 0x57, 0xc0, 0xff, 0x08, 0x16, 0x43, 0x48, 0x4d, 0x5e,
		0x5e, 0xc9, 0x04, 0xde, 0x4e, 0xd8, 0x7d, 0x7c, 0xbd, 0xd8, 0xe9, 0x89, 0x7f, 0xfc, 0xad, 0xe1,
		0xb0, 0xa2, 0x60, 0xf7, 0xce, 0xc4, 0x72, 0x12, 0xe1, 0xdd, 0x29, 0xcb, 0xda, 0x97, 0xc1, 0x95,
		0xd0, 0xf4, 0x7a, 0xd0, 0xe7, 0xf8, 0xe8, 0x36, 0xc9, 0xf8, 0x70, 0xf2, 0xe7, 0x7d, 0x86, 0x48,
		0xf5, 0x17, 0xbf, 0xe1, 0x5f, 0x18, 0x85, 0x08, 0x4a, 0x28, 0xae, 0x1b, 0xb2, 0xac, 0x73, 0x77,
		0x27, 0x4d, 0x2b, 0xe8, 0x74, 0x8b, 0x28, 0xff, 0xf3, 0x11, 0x40, 0x88, 0x7a, 0x31, 0x7b, 0xa4,
		0x98, 0x3e, 0x0b, 0x3c, 0x94, 0xd4, 0xc0, 0x36, 0x0e, 0x65, 0x81, 0x61, 0xc0, 0x11, 0xf1, 0x87,
		0x51, 0xca, 0x06, 0x1b, 0xe3, 0x84, 0xbf, 0x09, 0xd3, 0xf6, 0xb8, 0xda, 0x45, 0x9d, 0x43, 0x20,
		0x81, 0xfd, 0xb2, 0x2d, 0xb7, 0x84, 0x83, 0xe6, 0x9d, 0xf8, 0xf3, 0x78, 0x13, 0xfa, 0xaf, 0x31,
		0xa9, 0xc7, 0x66, 0xe1, 0x6f, 0xcb, 0x8f, 0x4a, 0x77, 0xd1, 0x8f, 0x8a, 0x1e, 0xe8, 0xde, 0x88,
		0x18, 0x0b, 0x9f, 0x15, 0xd0, 0x89, 0x4f, 0xf2, 0xa8, 0xb2, 0xa5, 0xf6, 0xf9, 0x43, 0x8c, 0x60,
		0x5e, 0x18, 0x1f, 0xb5, 0x80, 0x7f, 0x9d, 0xc6, 0x35, 0xdb, 0xb3, 0x4a, 0xa5, 0x38, 0x0f, 0xeb,
		0x00, 0x4e, 0x16, 0xf4, 0x9b, 0x3b, 0x9a, 0xbf, 0x5e, 0x9e, 0x24, 0x1d, 0x66, 0xc5, 0xe4, 0xdd,
		0x2d, 0xcd, 0x4c, 0x67, 0xff, 0x33, 0x40, 0xe4, 0xb1, 0xdc, 0xf2, 0x0e, 0x07, 0x0c, 0x18, 0xbc,
		0x9f, 0x49, 0x72, 0xb7, 0xcc, 0x7f, 0x85, 0x43, 0x56, 0x4f, 0xde, 0x3b, 0x35, 0x98, 0xae, 0x17,
		0x7e, 0x7a, 0x97, 0xe3, 0x37, 0x1a, 0xef, 0xf0, 0xdf, 0x98, 0xb1, 0x85, 0x23, 0x30, 0xbe, 0xfe,
		0x8e, 0xf5, 0x47, 0x3f, 0x8e, 0x52, 0x10, 0x36, 0x09, 0x22, 0xa5, 0x43, 0x1a, 0x29, 0x14, 0x44,
		0x8e, 0x2c, 0x7d, 0xb9, 0x73, 0xd6, 0x28, 0x95, 0x15, 0xeb, 0x3c, 0x60, 0x53, 0xa7, 0x7a, 0xa3,
		0x27, 0x6c, 0x71, 0xf8, 0xe2, 0x69, 0x2b, 0xb2, 0xff, 0x86, 0xf4, 0x8f, 0xee, 0x9d, 0xb1, 0x96,
		0x02, 0x03, 0xfb, 0xbd, 0x72, 0x59, 0xee, 0xc3, 0x23, 0x0b, 0xa4, 0x6d, 0x4e, 0x3c, 0xaf, 0x2c,
		0x11, 0x78, 0xfb, 0x4f, 0x62, 0xe5, 0x16, 0xd8, 0x6a, 0xf4, 0xe9, 0x20, 0x36, 0xf7, 0xd0, 0x8a,
		0x8e, 0x51, 0x2d, 0x93, 0x32, 0x21, 0xd0, 0xfb, 0xf5, 0x20, 0xbb, 0x90, 0x4c, 0x7c, 0x5b, 0x64
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xa673fn;
	message = new Uint8Array([
		0xe5, 0x94, 0xd6, 0x40, 0xdc, 0x2f, 0xb4, 0xd4, 0xd9, 0x52, 0x3e, 0xa1, 0x71, 0xc9, 0x5d, 0xfc,
		0x7a, 0xa2, 0x34, 0x8c, 0xcc, 0xe4, 0x03, 0xa1, 0x48, 0x7e, 0x4b, 0xc7, 0x19, 0x7e, 0x33, 0x9c,
		0x3a, 0x83, 0x2a, 0xde, 0x38, 0x75, 0xce, 0xc8, 0x3a, 0x73, 0x0c, 0x9f, 0x3e, 0x0d, 0x89, 0x88,
		0xa5, 0xb4, 0x41, 0x9c, 0xf2, 0x6e, 0x6f, 0x3e, 0xcf, 0xcf, 0xac, 0xac, 0x51, 0x24, 0x5a, 0xd5,
		0x7c, 0xf1, 0x43, 0x6b, 0x0a, 0x9e, 0x7e, 0x38, 0x68, 0x6d, 0x93, 0xb5, 0x02, 0xaf, 0xde, 0xd9,
		0xc0, 0x38, 0x39, 0x2f, 0xd0, 0x10, 0xd5, 0x2b, 0xa7, 0x6b, 0x69, 0xbe, 0x42, 0xdb, 0x8f, 0x28,
		0xb2, 0xc5, 0x6a, 0x0e, 0xd7, 0x12, 0x8d, 0xcc, 0x6c, 0x26, 0x18, 0x0c, 0x43, 0x16, 0x24, 0x98,
		0xd2, 0x15, 0x62, 0x6c, 0xef, 0x30, 0xfe, 0x10, 0xd8, 0x3c, 0xca, 0x24, 0x76, 0x0c, 0x98, 0x3c
	]);
	signature = new Uint8Array([
		0x85, 0x65, 0x68, 0x0f, 0x99, 0x57, 0xf0, 0xdc, 0xb5, 0x40, 0xc1, 0xcb, 0x61, 0xbb, 0x07, 0xf5,
		0x8b, 0xcd, 0xef, 0x54, 0x26, 0x50, 0x47, 0xd6, 0x0e, 0x43, 0x8e, 0x01, 0xf4, 0xbd, 0x2b, 0x58,
		0x9c, 0xc0, 0x67, 0xa4, 0x05, 0x15, 0x94, 0x98, 0x08, 0xb3, 0x1e, 0x9c, 0x22, 0x04, 0x2b, 0xbf,
		0xd3, 0x69, 0x61, 0x0a, 0x45, 0x85, 0x0d, 0x15, 0xd5, 0x26, 0x70, 0x66, 0x63, 0x77, 0xdc, 0xac,
		0x67, 0x4a, 0x95, 0x9f, 0x1a, 0xb5, 0x0c, 0x5f, 0x98, 0x0d, 0x88, 0x86, 0xc0, 0x62, 0xf5, 0x53,
		0x45, 0x07, 0x68, 0x04, 0x1a, 0xf7, 0x41, 0xe3, 0xff, 0x8a, 0x15, 0x1d, 0xcc, 0x37, 0xed, 0xe1,
		0x67, 0xd6, 0x9f, 0xbd, 0xa2, 0x5c, 0xd1, 0x7e, 0xe6, 0x49, 0xb7, 0x2e, 0x5a, 0x08, 0x12, 0xdc,
		0x69, 0x6c, 0xb1, 0xec, 0x99, 0x6b, 0x0e, 0xa9, 0xd1, 0xcd, 0x59, 0x68, 0x0f, 0xa9, 0x56, 0x0c,
		0x3e, 0x80, 0x85, 0x15, 0x44, 0xd8, 0xb9, 0x70, 0xe0, 0xf6, 0x38, 0xe1, 0x62, 0xe2, 0x38, 0x5f,
		0x7f, 0x4a, 0xcd, 0x70, 0x1d, 0x52, 0x8e, 0x62, 0x84, 0x26, 0x11, 0xc1, 0xba, 0x68, 0xd0, 0xb5,
		0xc4, 0xff, 0x27, 0x39, 0x76, 0xd3, 0x67, 0x87, 0xc8, 0x37, 0xd6, 0x5f, 0x35, 0x5c, 0x18, 0x64,
		0x17, 0xb6, 0xc1, 0x59, 0x34, 0xab, 0x6e, 0x8f, 0x9e, 0x7d, 0x03, 0x0a, 0xdd, 0x66, 0x4c, 0x19,
		0x1e, 0xf8, 0x18, 0x52, 0xd8, 0x5b, 0xdf, 0x15, 0x52, 0xc2, 0x67, 0xe4, 0x0c, 0xdc, 0x2d, 0xd6,
		0x13, 0x68, 0x51, 0x02, 0x4b, 0xab, 0xdb, 0x70, 0x14, 0x28, 0xa8, 0xce, 0x79, 0xae, 0xab, 0x9d,
		0x43, 0x32, 0xa1, 0xe1, 0x69, 0x97, 0x31, 0xf9, 0xd4, 0x37, 0x99, 0xb5, 0x36, 0x55, 0x36, 0xba,
		0xd8, 0x60, 0xeb, 0x5b, 0x75, 0x6f, 0x2a, 0xed, 0x6f, 0xe6, 0xaa, 0xd1, 0x6c, 0xf4, 0x27, 0x0f,
		0x76, 0xeb, 0x63, 0x1e, 0x1b, 0x1d, 0xd6, 0xbc, 0x10, 0x01, 0x11, 0xa9, 0x09, 0xda, 0x67, 0x00,
		0xce, 0x7f, 0x91, 0x73, 0x85, 0xbb, 0xa5, 0xd9, 0x97, 0x49, 0x87, 0x72, 0x8d, 0x6b, 0xde, 0xde,
		0x76, 0x88, 0x76, 0xe2, 0x41, 0xd2, 0xbf, 0x23, 0xde, 0x0f, 0x30, 0x28, 0xd5, 0x28, 0x48, 0xf1,
		0x5a, 0xbe, 0x06, 0xa9, 0x3d, 0xd6, 0x16, 0xba, 0x95, 0x72, 0x43, 0x47, 0x04, 0x3a, 0x30, 0x0c,
		0x09, 0x90, 0x2b, 0xca, 0x9f, 0xde, 0xde, 0x9a, 0x7d, 0x29, 0xf2, 0x5a, 0xfb, 0xc9, 0xb0, 0xe9,
		0x07, 0x7b, 0x50, 0x81, 0x64, 0x79, 0x27, 0x13, 0x27, 0x8e, 0xee, 0x44, 0x80, 0x00, 0x62, 0x9b,
		0x11, 0x58, 0xd2, 0xcc, 0x65, 0xc6, 0xff, 0x06, 0xea, 0x9a, 0x2e, 0x95, 0xc2, 0x87, 0x4e, 0x2c,
		0x7e, 0x2b, 0xf8, 0x72, 0xf3, 0x19, 0xc2, 0x62, 0x7e, 0x53, 0x8f, 0x9f, 0x74, 0x34, 0xf6, 0xce
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xa673fn;
	message = new Uint8Array([
		0x74, 0x4a, 0x12, 0x8d, 0x95, 0x41, 0x61, 0x47, 0xb6, 0x35, 0xc3, 0xad, 0x24, 0x4f, 0x88, 0x5c,
		0x54, 0x40, 0x75, 0x9b, 0xc9, 0x8d, 0xc4, 0x46, 0x38, 0x2a, 0x6d, 0x0c, 0xeb, 0x4b, 0xa4, 0xdb,
		0x63, 0x77, 0xa3, 0x97, 0x41, 0xde, 0xa9, 0x12, 0x67, 0xec, 0x43, 0x39, 0x5a, 0x1e, 0xca, 0x8b,
		0xea, 0x15, 0x2d, 0xd0, 0x16, 0xe9, 0xf0, 0x07, 0x2a, 0xbf, 0x75, 0xa0, 0x2a, 0x9e, 0x7b, 0xeb,
		0x73, 0x7e, 0xe4, 0xd1, 0xa0, 0xa2, 0xbb, 0xc2, 0xab, 0x28, 0x75, 0xee, 0x54, 0xdf, 0x77, 0xb8,
		0xc7, 0x58, 0xd9, 0x67, 0x79, 0x40, 0x6a, 0x1f, 0x53, 0xec, 0xf4, 0x11, 0x12, 0x36, 0xc1, 0xee,
		0xee, 0x88, 0x5d, 0xa1, 0x79, 0x36, 0x9e, 0x3d, 0xcb, 0x11, 0xe2, 0x34, 0xdc, 0x39, 0x98, 0xcb,
		0x31, 0x32, 0x02, 0xca, 0xbb, 0x3a, 0x38, 0x78, 0xfc, 0xda, 0x71, 0xc6, 0x6b, 0xbc, 0x7e, 0xcb
	]);
	signature = new Uint8Array([
		0x28, 0x74, 0xdc, 0xd9, 0x99, 0x7e, 0x8f, 0x60, 0xed, 0x51, 0xf9, 0xc4, 0x72, 0x46, 0xcf, 0x5d,
		0x91, 0x9c, 0xc2, 0x36, 0x8a, 0xb2, 0xb5, 0xd6, 0x07, 0x8f, 0xf8, 0x0c, 0x78, 0xe3, 0x6d, 0xbc,
		0x97, 0x22, 0xc9, 0x4c, 0x07, 0x88, 0x85, 0x8c, 0xd5, 0xe4, 0x61, 0x50, 0xc9, 0x73, 0x4d, 0xf7,
		0x5f, 0xc9, 0xda, 0x2a, 0xb6, 0xbf, 0xdb, 0x1c, 0x6c, 0xd7, 0xea, 0x6a, 0x18, 0x14, 0x89, 0xe5,
		0xa7, 0xc4, 0xb4, 0x99, 0x73, 0x3e, 0x96, 0x63, 0x78, 0x4e, 0x1c, 0x87, 0xcb, 0x79, 0xf9, 0x0d,
		0x83, 0x0e, 0xcc, 0xec, 0x48, 0x24, 0xf4, 0xf2, 0x56, 0x5d, 0x88, 0x5d, 0x31, 0xfe, 0x08, 0x97,
		0x17, 0x3e, 0xe3, 0xae, 0x61, 0xd1, 0x94, 0x88, 0x37, 0x5a, 0xc3, 0x91, 0x76, 0x52, 0xae, 0x66,
		0xfe, 0x56, 0xe6, 0x83, 0xbe, 0x86, 0xd7, 0xa8, 0x44, 0x5e, 0x62, 0xab, 0x13, 0x4f, 0x3c, 0xb1,
		0xcf, 0xfc, 0x93, 0x1f, 0xc0, 0x46, 0x89, 0xfa, 0x31, 0x7f, 0xab, 0x58, 0xc1, 0x50, 0xa9, 0x4a,
		0x55, 0x5e, 0x02, 0x30, 0x88, 0xd4, 0x10, 0xb3, 0x16, 0xc4, 0xe7, 0x9c, 0x1c, 0x57, 0xf9, 0x0a,
		0xb8, 0x61, 0x99, 0xc2, 0x65, 0x55, 0xb3, 0x4d, 0x44, 0x39, 0x7e, 0x11, 0xe9, 0xf9, 0x16, 0x19,
		0x84, 0x31, 0x7e, 0xf5, 0xd5, 0xc4, 0x89, 0xb5, 0x01, 0xa1, 0x88, 0x5e, 0xcd, 0x25, 0xa9, 0x94,
		0x58, 0x3c, 0x26, 0x3b, 0x2f, 0x2c, 0x41, 0x5b, 0x7b, 0xa7, 0xfa, 0xf2, 0x37, 0xbf, 0x58, 0x47,
		0x1d, 0xbf, 0xad, 0xbd, 0xf0, 0x9b, 0xcb, 0x0d, 0xe1, 0xd0, 0x95, 0xb5, 0xae, 0xb3, 0xf2, 0x0a,
		0xf4, 0x61, 0x13, 0xbb, 0xf9, 0x63, 0x8c, 0x13, 0x8a, 0x2b, 0xa7, 0x86, 0x83, 0xb6, 0x9c, 0x86,
		0x52, 0xab, 0x40, 0x1c, 0x3b, 0xeb, 0x2b, 0xb0, 0x6d, 0xde, 0xdb, 0xe6, 0x1d, 0xcf, 0x39, 0x85,
		0x78, 0xfe, 0x4c, 0x95, 0x84, 0x65, 0xaa, 0x1b, 0xc4, 0x30, 0x14, 0x0b, 0x68, 0xf0, 0xce, 0x34,
		0xe4, 0xc9, 0x64, 0xb5, 0x41, 0xe6, 0xd6, 0x68, 0x25, 0x01, 0x1a, 0x4b, 0xc3, 0x67, 0xd9, 0x53,
		0x38, 0xfe, 0x62, 0x56, 0xc2, 0x9f, 0xba, 0x24, 0x9d, 0x98, 0xa1, 0xae, 0x0e, 0x4d, 0xb5, 0x5f,
		0xce, 0x67, 0x77, 0x5f, 0x2c, 0xde, 0x1d, 0x86, 0x61, 0xb7, 0x75, 0x3f, 0x5c, 0x5b, 0x3a, 0x47,
		0x6e, 0x7a, 0x2c, 0x94, 0x94, 0x1e, 0x74, 0xff, 0xfe, 0xb4, 0x1a, 0x8a, 0x3d, 0x38, 0xe2, 0xa8,
		0xc3, 0xd9, 0xbf, 0x37, 0x3c, 0x7a, 0x51, 0x14, 0x11, 0xe2, 0x11, 0xbd, 0x43, 0x81, 0xff, 0x30,
		0xd3, 0x6a, 0xe6, 0x6f, 0xd2, 0x9c, 0x55, 0x34, 0x5a, 0xc6, 0xb8, 0xfd, 0x07, 0xd0, 0xb9, 0x11,
		0x35, 0xfc, 0x6c, 0x19, 0x08, 0x61, 0xaa, 0xd1, 0xb2, 0xd5, 0x44, 0x8b, 0xff, 0x18, 0x1e, 0x7e
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(true);

	e =
		0xc9c31n;
	message = new Uint8Array([
		0xea, 0xf9, 0x89, 0x92, 0x7d, 0x18, 0xe7, 0x89, 0xa4, 0xc2, 0xc8, 0x89, 0xfc, 0xf5, 0xc2, 0x1d,
		0xf3, 0x32, 0xe4, 0x6e, 0x21, 0x82, 0xa3, 0x65, 0xdc, 0xb7, 0x17, 0x10, 0x06, 0xf4, 0x68, 0x47,
		0x2a, 0x6f, 0x83, 0x8f, 0xc7, 0x76, 0x11, 0x3e, 0xec, 0xb0, 0xa9, 0xe0, 0x05, 0xa6, 0x44, 0xda,
		0xf5, 0x81, 0xf2, 0x4d, 0x65, 0x15, 0xcc, 0x3d, 0x5b, 0x1f, 0x2a, 0xf3, 0x0e, 0xcb, 0x16, 0x9f,
		0xf9, 0x7a, 0x00, 0x42, 0x2e, 0xc1, 0xb3, 0xcb, 0xed, 0xb5, 0x87, 0x80, 0x75, 0x66, 0xd8, 0xa0,
		0x1a, 0xa9, 0xb8, 0x47, 0x98, 0x1b, 0xe1, 0x91, 0xa7, 0x62, 0xed, 0x02, 0xcf, 0xb6, 0xca, 0x26,
		0x7e, 0xa1, 0x68, 0x74, 0x58, 0x02, 0xb4, 0x78, 0xce, 0x58, 0xca, 0x32, 0xf2, 0x3d, 0x66, 0xb9,
		0x89, 0x31, 0x9c, 0x23, 0x62, 0x99, 0xca, 0xa9, 0xe7, 0x07, 0xca, 0x07, 0xf2, 0xbc, 0x6c, 0x22
	]);
	signature = new Uint8Array([
		0xa5, 0xdb, 0x83, 0xaa, 0x53, 0x18, 0xaa, 0xa5, 0xed, 0x79, 0xb8, 0xe2, 0xf7, 0x06, 0x52, 0xe8,
		0xa7, 0xf0, 0x3e, 0xdb, 0x12, 0x80, 0xef, 0xd2, 0x4a, 0xbc, 0xdb, 0xda, 0x7f, 0x79, 0x4f, 0x59,
		0x2b, 0xa7, 0x1d, 0xb3, 0x49, 0x4c, 0x20, 0x13, 0x46, 0x3a, 0x23, 0x53, 0x58, 0xc4, 0x68, 0xd0,
		0xb7, 0x22, 0xb7, 0x97, 0xb5, 0x1b, 0x05, 0xef, 0x6d, 0x14, 0x63, 0x20, 0x3c, 0x88, 0x2b, 0xe3,
		0xf2, 0xf2, 0x5b, 0xf4, 0x91, 0x8a, 0x04, 0x04, 0x9e, 0x2a, 0x52, 0xd6, 0x93, 0x02, 0x08, 0x83,
		0x9c, 0xf3, 0xde, 0x4b, 0x20, 0x72, 0x67, 0x1d, 0xa8, 0xce, 0x0d, 0x28, 0x8c, 0x9b, 0x19, 0xac,
		0x91, 0xb4, 0x36, 0xda, 0x8c, 0x7d, 0x4c, 0xe8, 0x7c, 0xa5, 0x60, 0xf1, 0x6c, 0xb7, 0x59, 0xfa,
		0xdf, 0xaf, 0xcf, 0x4b, 0xfa, 0xce, 0x1f, 0xcf, 0x2d, 0x09, 0x30, 0xec, 0x12, 0x0b, 0x3f, 0xef,
		0x64, 0x7b, 0x17, 0x72, 0xd3, 0xaf, 0x81, 0x0a, 0x67, 0xe3, 0xc3, 0x59, 0xf9, 0x77, 0xd9, 0xb1,
		0x6e, 0xbd, 0xd2, 0x78, 0x6d, 0x41, 0x19, 0x10, 0xc8, 0xeb, 0x72, 0x45, 0x8e, 0xb9, 0x40, 0x17,
		0x90, 0x4c, 0xc8, 0xda, 0x37, 0xd0, 0xdc, 0x56, 0xb8, 0xc7, 0x46, 0x8e, 0x7d, 0xc8, 0x87, 0x21,
		0xe6, 0x6c, 0x3a, 0x5c, 0xbf, 0xd7, 0x29, 0xc4, 0x50, 0x6d, 0xfc, 0xf2, 0xbf, 0xf3, 0x20, 0x69,
		0x07, 0x56, 0x2b, 0x9f, 0x8e, 0x75, 0x36, 0xb3, 0xce, 0x6d, 0x9d, 0x60, 0x70, 0x62, 0xfd, 0xcb,
		0x06, 0xda, 0xe0, 0x44, 0x69, 0x1d, 0x40, 0xf5, 0x17, 0x58, 0xfc, 0x0d, 0xb4, 0x6f, 0xcc, 0x07,
		0xf1, 0xa4, 0xce, 0xd5, 0x44, 0x39, 0x66, 0x98, 0x25, 0x6d, 0xa5, 0x5d, 0x6a, 0xec, 0xe5, 0xb6,
		0x4b, 0x72, 0xa7, 0x7d, 0x41, 0xfa, 0x0e, 0xe3, 0x4f, 0x99, 0x8e, 0xa3, 0xbf, 0xc5, 0xf7, 0x93,
		0x48, 0xf4, 0x6b, 0x1b, 0x3c, 0xed, 0x4d, 0x35, 0xda, 0xa3, 0xa4, 0xef, 0x65, 0x6d, 0x3f, 0x03,
		0x9d, 0xa9, 0xd3, 0x12, 0xf3, 0x6e, 0xc8, 0x97, 0x6e, 0x5e, 0xc1, 0xea, 0x29, 0x45, 0x93, 0x82,
		0x32, 0xfc, 0xf6, 0xc4, 0x7c, 0xe1, 0xd8, 0x68, 0x3c, 0xd4, 0x9f, 0x2b, 0x73, 0x6f, 0x69, 0x76,
		0x15, 0x8c, 0x65, 0x06, 0x13, 0x26, 0xf8, 0x68, 0xfd, 0xf8, 0x7a, 0xfd, 0xe1, 0xec, 0x7e, 0x0f,
		0xbd, 0xaa, 0x7c, 0x27, 0x88, 0xac, 0xef, 0xcb, 0xc8, 0x5d, 0x36, 0x44, 0xe2, 0xf9, 0x63, 0x6e,
		0x47, 0x0f, 0x00, 0xaf, 0xbd, 0x86, 0x05, 0x48, 0x07, 0xd9, 0x56, 0xdf, 0x08, 0x90, 0xca, 0x3a,
		0xc1, 0x89, 0x7c, 0xff, 0x7f, 0x68, 0xde, 0xcc, 0x11, 0xb9, 0x75, 0xec, 0x4f, 0xbf, 0x47, 0x0d,
		0x30, 0xd1, 0x4f, 0x0a, 0x88, 0xbd, 0x1b, 0x4f, 0x16, 0x38, 0x59, 0x6f, 0xc5, 0x4e, 0xc9, 0xef
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	n =
		0x9881b3fb6c99a115da60ade6d178008b7e6db8f79fe34fb7e6f7d2fb96a24350dbe35fc9a9742c6d3deede1ee6c04cfcca1f1ce9f1d7c53dda87b149dbc7ac4644e2eb57f211bf883ca006098e0f871155c6c1f9c88df9768c61581e0b5016aa57177438396be35edbc31002cb2bb766c9b9786a81358e5dff52b9073fb7f9714600c0b1dd060ffa1455fc926d30329925bde76cd68a58896de4719eba84529f76de312e9681cc252ebd4c42b51614b172cdc67a5144e7bee75050f7efb904d52b8c084242c3545269cc1193691981670e0816cb82e39c4541bcc7f5fcd27e46df00e7e73946da7a6f8a7026d89d951a8bc8010132862aa0ab872534372a2f3d10d3edbbf852a43ec06a93b3495289619bf899c10027dc2b06daac43342e3200a1f002ad53acc537772f1485d3b517f4686bf27ba47183df94a8cbd9a5bb0659bbbe43beb2eb05d29a23813b0e6ca8e7228b9ce3fe0de7bda5a0c56e9a5ad4e5e4622896c6f3e0269d69bbf0cc1ffc82278ff55168f485dca669868b97f4a003n;
	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016b265n;
	message = new Uint8Array([
		0xc9, 0x44, 0x73, 0xf3, 0x7b, 0x3e, 0x8f, 0xbb, 0x10, 0xfb, 0x2c, 0xb1, 0x05, 0xce, 0xd7, 0x7e,
		0x75, 0x3b, 0x9c, 0x4e, 0xea, 0x71, 0x79, 0x76, 0x73, 0x15, 0x13, 0x59, 0xf6, 0x41, 0xa8, 0x8c,
		0xc8, 0xcd, 0x45, 0x38, 0x7b, 0xcd, 0x39, 0xc0, 0xf7, 0x5a, 0xc9, 0xa4, 0xcc, 0x96, 0x25, 0xa6,
		0xc7, 0xea, 0x9b, 0x2b, 0xc4, 0x92, 0x0b, 0xe3, 0xc2, 0x5c, 0x9b, 0xac, 0x3d, 0xac, 0xab, 0xb4,
		0xb8, 0xc4, 0x0c, 0xde, 0x99, 0x42, 0x6c, 0x68, 0x39, 0xea, 0x15, 0xca, 0x3c, 0xa6, 0xd8, 0xe1,
		0x1e, 0xcb, 0x43, 0x4c, 0x0f, 0x9e, 0x1b, 0x17, 0x01, 0x17, 0x06, 0x96, 0xff, 0xe5, 0x87, 0x94,
		0xc0, 0xb1, 0x2f, 0xae, 0x7c, 0xa7, 0x12, 0xf9, 0xfe, 0x33, 0x79, 0xeb, 0xfb, 0x08, 0xd6, 0x78,
		0xa2, 0x67, 0xfd, 0x7b, 0x74, 0x9e, 0x90, 0x58, 0x56, 0xcf, 0xbb, 0xdf, 0xe4, 0xf2, 0x22, 0x74
	]);
	signature = new Uint8Array([
		0x7b, 0x2b, 0xa5, 0xd8, 0x47, 0xb8, 0x71, 0x18, 0xe2, 0xc0, 0x9a, 0xd0, 0x23, 0xe2, 0xcc, 0x5e,
		0x6f, 0x4e, 0x01, 0x70, 0xba, 0x9e, 0x02, 0xd3, 0xc0, 0x68, 0xad, 0xf1, 0xfd, 0x00, 0x97, 0x6b,
		0x62, 0x88, 0xf3, 0x16, 0x17, 0x1d, 0x77, 0x63, 0x49, 0xdc, 0x35, 0x70, 0xec, 0x1a, 0x69, 0x50,
		0xe4, 0x70, 0x94, 0x33, 0x14, 0x49, 0xa7, 0x9e, 0x74, 0xd8, 0x69, 0x9a, 0x53, 0x97, 0x94, 0x12,
		0x61, 0xd9, 0x8d, 0x6b, 0xd5, 0xe1, 0xf4, 0xee, 0x63, 0x13, 0x61, 0xb0, 0xaa, 0xa5, 0xe0, 0x1d,
		0x25, 0xef, 0x71, 0xe4, 0x7d, 0x74, 0x08, 0x65, 0x59, 0x2e, 0xee, 0x53, 0xf2, 0x90, 0xa6, 0xc4,
		0x19, 0xa2, 0x15, 0x3f, 0xb7, 0xcb, 0x37, 0x3c, 0xda, 0xf2, 0x2c, 0xbe, 0x63, 0x8d, 0x49, 0x49,
		0x2c, 0x2c, 0xb2, 0x67, 0xbe, 0x07, 0x62, 0x99, 0x5b, 0x97, 0x56, 0xe3, 0x2d, 0xd4, 0x36, 0x75,
		0xa8, 0x02, 0x9f, 0x19, 0xf2, 0x37, 0x96, 0x03, 0x34, 0xfe, 0xd8, 0xde, 0x1b, 0xca, 0xb3, 0x6c,
		0xd0, 0x91, 0xc2, 0x02, 0xbd, 0x39, 0x1c, 0x75, 0x3b, 0x7f, 0xbd, 0x80, 0x62, 0xb3, 0x1b, 0xa8,
		0xdd, 0xf3, 0x60, 0xf3, 0x42, 0x0d, 0x0c, 0x99, 0xa7, 0x46, 0xfb, 0x1b, 0xee, 0x1a, 0xe0, 0xce,
		0x03, 0x37, 0x94, 0xc2, 0x2c, 0x32, 0xd8, 0xea, 0x81, 0x36, 0x02, 0x26, 0x47, 0xcc, 0x90, 0xf9,
		0x9a, 0x89, 0x5b, 0xaa, 0x36, 0x2c, 0xbe, 0xbf, 0x29, 0x48, 0x66, 0xf3, 0xd9, 0x42, 0xa5, 0x3c,
		0x78, 0x99, 0x19, 0xff, 0x4b, 0x84, 0x6f, 0xa1, 0xc1, 0xd4, 0x82, 0x02, 0xc7, 0x68, 0x9f, 0x1e,
		0xfa, 0xa5, 0x20, 0x36, 0x92, 0x1d, 0xf7, 0xec, 0x58, 0xe0, 0xb6, 0xcb, 0x9a, 0x52, 0x25, 0xd8,
		0x9e, 0xda, 0x78, 0x54, 0x5d, 0x6b, 0x11, 0x7f, 0xdb, 0xc1, 0xc7, 0x26, 0x85, 0x0f, 0x73, 0xe7,
		0x35, 0xd5, 0x7b, 0x8a, 0x73, 0x55, 0xba, 0x6d, 0x6f, 0xf3, 0xc8, 0xef, 0xeb, 0x49, 0xa2, 0x9b,
		0x85, 0xc9, 0x2d, 0x95, 0xed, 0xdd, 0xb0, 0x49, 0x14, 0xb1, 0xc1, 0x55, 0x0e, 0x38, 0x61, 0x48,
		0x04, 0x10, 0x53, 0x13, 0x66, 0x0e, 0x94, 0xc5, 0xde, 0xcc, 0x0a, 0x56, 0x27, 0xe0, 0x07, 0x1e,
		0x13, 0x84, 0x3b, 0x7d, 0x63, 0xa4, 0x54, 0x4a, 0x13, 0x30, 0xa3, 0x77, 0xef, 0xfc, 0x53, 0x1f,
		0xdb, 0x12, 0xd3, 0xe9, 0x95, 0x1c, 0x4d, 0x2c, 0x22, 0x9a, 0x12, 0x40, 0x62, 0x8d, 0x17, 0xfb,
		0x3a, 0x7c, 0xb4, 0x10, 0xd1, 0xb0, 0x1c, 0x82, 0x7e, 0x66, 0x72, 0xf4, 0xfc, 0x34, 0xb6, 0x50,
		0xc3, 0xa0, 0xf4, 0x2a, 0x1c, 0x0d, 0x74, 0x3a, 0x17, 0x97, 0x62, 0x3c, 0x27, 0x78, 0xa4, 0x94,
		0x82, 0xd5, 0x2f, 0x37, 0xa7, 0x0d, 0x81, 0xde, 0x36, 0xeb, 0x6d, 0xd9, 0xe2, 0x3b, 0x25, 0x76
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xa4bd05n;
	message = new Uint8Array([
		0xbd, 0x14, 0x49, 0xb4, 0x45, 0x48, 0x88, 0x9e, 0xcd, 0x19, 0x1d, 0x0a, 0x43, 0xcd, 0xff, 0xa7,
		0xe4, 0xbb, 0xfd, 0x95, 0xa5, 0x19, 0x46, 0xd5, 0xd2, 0x0f, 0x2e, 0xfe, 0xf5, 0x0f, 0x2f, 0x31,
		0xf9, 0x69, 0x2e, 0x4e, 0x8f, 0x1a, 0x00, 0x68, 0xd1, 0xe5, 0x2d, 0x77, 0x25, 0xa6, 0xf4, 0x4d,
		0x65, 0xe2, 0x8f, 0xcc, 0x3d, 0xa2, 0xb8, 0x55, 0xd4, 0x82, 0x6b, 0x83, 0xae, 0x05, 0xee, 0x1a,
		0xd1, 0x2b, 0x0f, 0x3a, 0x26, 0x46, 0xad, 0xd9, 0x23, 0x09, 0x79, 0x70, 0xa7, 0xe2, 0xfe, 0xf3,
		0x25, 0x8a, 0xdf, 0x07, 0x05, 0xda, 0x60, 0x70, 0x47, 0xe0, 0x28, 0xc8, 0x6a, 0x32, 0x46, 0x77,
		0x8c, 0x82, 0x71, 0xdf, 0xd2, 0x73, 0x94, 0xd7, 0x0a, 0xab, 0x8a, 0x5b, 0x8f, 0x29, 0x25, 0x81,
		0x6d, 0xd9, 0x76, 0xaf, 0xc6, 0x66, 0x48, 0x0c, 0x75, 0x50, 0xee, 0x34, 0xf0, 0x3e, 0x3f, 0x30
	]);
	signature = new Uint8Array([
		0x22, 0xc2, 0xfb, 0x87, 0x42, 0xe3, 0x25, 0xe8, 0xe5, 0x9f, 0x44, 0x9a, 0xd6, 0xfb, 0x8b, 0x53,
		0x1e, 0x05, 0xef, 0xa5, 0xd8, 0x7c, 0xae, 0x92, 0x8a, 0x03, 0x09, 0x24, 0xbf, 0x34, 0x02, 0x9c,
		0xd2, 0x5d, 0x27, 0x94, 0xc4, 0x2c, 0x98, 0x75, 0x20, 0xd5, 0x21, 0xa2, 0xde, 0xf5, 0x7c, 0x62,
		0xd5, 0xa0, 0x0b, 0x95, 0x40, 0xb7, 0x92, 0xfd, 0x04, 0x08, 0x8b, 0x82, 0x05, 0x3f, 0xd5, 0xfc,
		0x7d, 0x76, 0xd3, 0xb9, 0x12, 0x08, 0x6a, 0xc7, 0x18, 0xcc, 0x9b, 0x19, 0xb0, 0x3e, 0x27, 0xc3,
		0x31, 0x1a, 0xaa, 0xdb, 0xc1, 0x96, 0x02, 0xa5, 0xb4, 0xc1, 0x32, 0x1b, 0x4f, 0x72, 0x17, 0xc5,
		0x71, 0x7b, 0xb4, 0x8d, 0xe8, 0x00, 0x87, 0x2a, 0xd3, 0x22, 0xc9, 0x94, 0x86, 0x82, 0x79, 0x4f,
		0x25, 0xa8, 0x9b, 0x3a, 0x76, 0x00, 0xc3, 0x6f, 0x9d, 0x46, 0x0f, 0x0b, 0xb2, 0x18, 0x6b, 0x5a,
		0x9a, 0x04, 0x9b, 0x04, 0xc3, 0x8e, 0x92, 0x59, 0xa9, 0xbf, 0x85, 0x66, 0xcc, 0xfe, 0x46, 0x22,
		0x11, 0x60, 0x7a, 0x81, 0xca, 0xd7, 0x2f, 0x3a, 0xa2, 0x46, 0x89, 0x09, 0xb7, 0x23, 0xc6, 0x7b,
		0xd5, 0xaf, 0x91, 0x3f, 0xce, 0xa3, 0x71, 0x7c, 0x33, 0xee, 0x8a, 0xb5, 0x29, 0x15, 0x4d, 0xc5,
		0x49, 0xba, 0x12, 0x50, 0x62, 0x27, 0xc9, 0x57, 0xb8, 0x07, 0x88, 0xa0, 0xd7, 0xb6, 0x30, 0xe7,
		0xd7, 0x35, 0xde, 0xaa, 0x84, 0x7a, 0xb5, 0xdc, 0x9d, 0xe4, 0xdd, 0x90, 0xce, 0x57, 0x64, 0x5d,
		0x1d, 0xfc, 0x14, 0x7d, 0x5c, 0x2c, 0x05, 0x15, 0x97, 0xfe, 0xc2, 0x69, 0x75, 0x08, 0xba, 0xc5,
		0x77, 0xaf, 0xf5, 0xdc, 0x1a, 0x43, 0xee, 0xc3, 0xc7, 0xb0, 0x14, 0xf0, 0x27, 0xa1, 0x64, 0x00,
		0x47, 0xd4, 0x2b, 0x4a, 0xb5, 0x97, 0x09, 0x72, 0x2b, 0xf5, 0xbc, 0x70, 0x35, 0x66, 0xab, 0xe2,
		0xe2, 0xaa, 0xd6, 0xe9, 0xcf, 0x9e, 0x85, 0x02, 0x47, 0xed, 0x40, 0x56, 0x3a, 0xd5, 0x42, 0x96,
		0xff, 0xe8, 0x4c, 0xb2, 0xf8, 0xba, 0x31, 0x38, 0x6e, 0x8b, 0x82, 0x1a, 0x2a, 0xc2, 0x93, 0x47,
		0xce, 0x71, 0x0a, 0xc3, 0x19, 0x39, 0xbf, 0x01, 0xeb, 0xd3, 0xb7, 0xb1, 0x2b, 0x10, 0x7c, 0xae,
		0xc9, 0xee, 0x01, 0xd7, 0x8c, 0xc8, 0x07, 0x21, 0xfa, 0x75, 0x14, 0x3c, 0xae, 0x00, 0xb7, 0x85,
		0x4e, 0x64, 0x95, 0x35, 0x80, 0x21, 0x3c, 0x46, 0x90, 0x0d, 0x98, 0x37, 0xb5, 0x23, 0xfb, 0x20,
		0x4c, 0xde, 0x10, 0x48, 0xd0, 0x2e, 0x08, 0xdd, 0x00, 0xba, 0x0e, 0x50, 0x51, 0x51, 0x84, 0x0f,
		0x02, 0xcc, 0xcc, 0xa3, 0x87, 0x44, 0x0d, 0x00, 0x7a, 0x54, 0x52, 0xab, 0x6b, 0xb7, 0x41, 0xbe,
		0xba, 0xfc, 0x0b, 0xf3, 0xc7, 0x8e, 0xb1, 0xb8, 0x95, 0xe2, 0x5d, 0xa6, 0x05, 0x33, 0xbb, 0xc2
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016b265n;
	message = new Uint8Array([
		0x10, 0x57, 0x41, 0x33, 0x7c, 0xb1, 0x92, 0x62, 0xc7, 0x8a, 0x1b, 0xcb, 0xc0, 0x43, 0x49, 0x77,
		0x5e, 0xc4, 0xf3, 0x2f, 0x55, 0xc1, 0x8f, 0xe1, 0xeb, 0x3c, 0xa6, 0x45, 0x08, 0x4c, 0x85, 0xbf,
		0x8d, 0x1c, 0x36, 0x88, 0xe7, 0x36, 0xae, 0x09, 0xe4, 0x02, 0x48, 0x87, 0xc5, 0x89, 0x72, 0x05,
		0x94, 0x7f, 0xa6, 0x66, 0xb8, 0x81, 0x9d, 0xd3, 0xc6, 0x9b, 0xbf, 0x5c, 0x9a, 0x0d, 0xdd, 0xe2,
		0xa7, 0x4f, 0x22, 0x34, 0x8b, 0x52, 0x47, 0x78, 0xe6, 0x09, 0x07, 0xcd, 0x6d, 0x28, 0xd3, 0x2e,
		0x3a, 0x2c, 0xc6, 0x99, 0x66, 0x9b, 0xdb, 0x71, 0xda, 0x8d, 0x5e, 0x22, 0x62, 0x6b, 0xa0, 0x03,
		0x04, 0xf7, 0xef, 0x80, 0x8f, 0x8c, 0xc5, 0x78, 0x76, 0xa7, 0x40, 0xe4, 0xdf, 0xa7, 0xd2, 0xba,
		0xf8, 0xd1, 0x3a, 0x11, 0x8a, 0x97, 0xb3, 0x85, 0xd0, 0x1a, 0x6b, 0xdd, 0x89, 0xed, 0x36, 0xeb
	]);
	signature = new Uint8Array([
		0x96, 0xed, 0x14, 0x22, 0xc5, 0xac, 0xf2, 0x19, 0x98, 0x99, 0x3a, 0x4d, 0x30, 0xce, 0xe4, 0x89,
		0x7d, 0x49, 0x0c, 0x8d, 0xe0, 0x02, 0xf6, 0xfb, 0xbc, 0x3b, 0xad, 0x70, 0xe6, 0xc4, 0x4c, 0xfd,
		0x22, 0x32, 0x84, 0x1b, 0xec, 0xbf, 0x2c, 0xfa, 0xe4, 0x2d, 0xf1, 0xf1, 0xd9, 0x1f, 0xcf, 0xba,
		0x8b, 0x81, 0xf1, 0x9d, 0x3f, 0xa3, 0x36, 0x4b, 0x56, 0x9e, 0x44, 0x4f, 0x6f, 0x18, 0xdd, 0x86,
		0x0b, 0xeb, 0x64, 0x19, 0x20, 0xb7, 0xc5, 0x65, 0x21, 0x7c, 0xe1, 0x81, 0xb6, 0x37, 0x70, 0x9b,
		0xf9, 0xa6, 0x12, 0x1f, 0xec, 0xcd, 0x49, 0xf5, 0x96, 0x75, 0xca, 0xd5, 0xd7, 0xb2, 0x79, 0x56,
		0xf1, 0x42, 0xae, 0xd7, 0x1c, 0x96, 0x2c, 0xd2, 0x38, 0x65, 0x28, 0x16, 0x22, 0xd2, 0x24, 0x29,
		0xf2, 0x88, 0x33, 0x8b, 0x09, 0x55, 0x24, 0xb3, 0x97, 0x03, 0x03, 0x53, 0xf5, 0x90, 0xdc, 0x11,
		0xa4, 0xcb, 0x98, 0x10, 0xcc, 0x24, 0x7a, 0x0c, 0x8a, 0x81, 0x6b, 0x41, 0x68, 0x3a, 0x64, 0x65,
		0x1b, 0x1c, 0x60, 0xbe, 0x46, 0x2d, 0x80, 0xe5, 0xcb, 0xcf, 0x02, 0x5f, 0xd0, 0x18, 0x1c, 0xf6,
		0x1c, 0x2d, 0x9a, 0x63, 0xea, 0xcc, 0x2d, 0xe0, 0xdd, 0x56, 0x37, 0x19, 0x35, 0x98, 0x12, 0x0b,
		0x8c, 0x6d, 0x60, 0xb6, 0xc6, 0xf1, 0x22, 0x87, 0x35, 0xfd, 0x18, 0xa4, 0xfe, 0x3f, 0x8f, 0x63,
		0xec, 0xdb, 0x33, 0x92, 0x4e, 0xb7, 0xb8, 0x09, 0xbb, 0x66, 0xc4, 0x58, 0xd4, 0xb7, 0x31, 0x06,
		0xb6, 0xa2, 0x3a, 0x7f, 0xc6, 0x85, 0xdf, 0x39, 0x78, 0xba, 0x9c, 0xc1, 0xe2, 0x37, 0x12, 0x88,
		0xf0, 0x19, 0x5b, 0x6d, 0x73, 0x23, 0x9f, 0xbd, 0xe2, 0x60, 0xbd, 0x92, 0xab, 0x83, 0x8f, 0x0b,
		0xb8, 0x07, 0x35, 0x66, 0x5a, 0x68, 0xca, 0x5e, 0x42, 0x66, 0x78, 0xfa, 0x6b, 0xa2, 0xf2, 0x9a,
		0x93, 0x74, 0xdd, 0x7b, 0xed, 0x51, 0xf3, 0x41, 0x3f, 0xa0, 0x74, 0x96, 0x5e, 0x56, 0xf3, 0x68,
		0x7d, 0xb3, 0x10, 0xc0, 0xb3, 0xc6, 0x9e, 0x3f, 0x37, 0x38, 0x6a, 0xd5, 0xe6, 0xde, 0x25, 0xf3,
		0xfa, 0xae, 0x62, 0x12, 0xb3, 0x54, 0x9d, 0x87, 0xe3, 0x9a, 0x6c, 0xc9, 0xdc, 0xce, 0xe9, 0xea,
		0x1c, 0x84, 0x69, 0x70, 0x4f, 0x79, 0xe8, 0x80, 0x89, 0xb3, 0xc1, 0xd3, 0x23, 0x2a, 0xde, 0xb9,
		0x9b, 0xc0, 0xc0, 0xa2, 0xb3, 0x40, 0x94, 0xdd, 0xb3, 0x00, 0x6c, 0xfa, 0xdf, 0x82, 0x6e, 0x1e,
		0x2a, 0x6a, 0xa2, 0xa3, 0xcb, 0xee, 0x33, 0x4b, 0xc4, 0xf5, 0xfd, 0x01, 0x9f, 0xcf, 0x8e, 0xb6,
		0x1b, 0x0d, 0xb6, 0xe3, 0x8e, 0x61, 0x17, 0x44, 0x51, 0x5c, 0x58, 0x61, 0x9d, 0x46, 0xa3, 0x9a,
		0xfd, 0xe9, 0x67, 0x71, 0x89, 0x06, 0x6f, 0x55, 0xe4, 0xf7, 0x8c, 0x39, 0xde, 0xbf, 0x7e, 0x59
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xb265n;
	message = new Uint8Array([
		0x6a, 0xc3, 0x1a, 0xcf, 0xb4, 0x6b, 0xc4, 0x2f, 0xbd, 0x13, 0xc3, 0x8f, 0xc2, 0xcf, 0x67, 0x51,
		0xb2, 0xa6, 0x33, 0x3d, 0x3e, 0x4f, 0x8f, 0x6a, 0x33, 0x38, 0xbd, 0x62, 0x07, 0xcd, 0x0e, 0x81,
		0xb1, 0xf6, 0x56, 0x9e, 0xbe, 0xe1, 0x9d, 0xee, 0xa2, 0x03, 0x17, 0x24, 0x4c, 0x59, 0x57, 0xdd,
		0xfd, 0xf4, 0xbf, 0x3c, 0x59, 0xb4, 0x3b, 0xd1, 0xbf, 0x54, 0x2f, 0xc0, 0xd6, 0xa6, 0xad, 0x1f,
		0x68, 0x20, 0xec, 0x9f, 0x74, 0x98, 0xf5, 0x6f, 0x7e, 0x4c, 0xa0, 0x5d, 0x2a, 0x25, 0xbf, 0x3f,
		0x09, 0x3d, 0x99, 0x91, 0xb3, 0x9e, 0x9a, 0x5f, 0x16, 0x4d, 0x48, 0x66, 0x0d, 0x87, 0x79, 0x76,
		0x35, 0x4a, 0xc3, 0x1a, 0xfc, 0x17, 0x35, 0x7b, 0xfa, 0xf7, 0x44, 0x82, 0x85, 0xbc, 0x08, 0x3d,
		0x7f, 0x89, 0xa9, 0x84, 0x73, 0x94, 0x14, 0xdc, 0xe0, 0x2b, 0xf2, 0x9b, 0xd5, 0xf5, 0xda, 0x4d
	]);
	signature = new Uint8Array([
		0x12, 0x2c, 0xad, 0xf5, 0x1e, 0x1f, 0x09, 0x84, 0x90, 0x7c, 0x38, 0x20, 0x90, 0xaa, 0xa9, 0x72,
		0xb6, 0xdf, 0xce, 0xe9, 0x55, 0x9e, 0x01, 0xd9, 0x6a, 0x21, 0x2a, 0x71, 0x6f, 0x23, 0xa1, 0x01,
		0x63, 0x90, 0x34, 0x41, 0xd4, 0xba, 0x50, 0x04, 0xb4, 0x2e, 0x26, 0xfb, 0x31, 0xca, 0x48, 0x14,
		0x21, 0x2c, 0x09, 0x36, 0xcd, 0x3c, 0x11, 0x00, 0xf2, 0xe5, 0xfd, 0xff, 0x1f, 0xbe, 0x17, 0x7c,
		0xe0, 0xef, 0x0f, 0x8c, 0xc5, 0x22, 0xb8, 0x5d, 0x58, 0x71, 0x41, 0x5f, 0xe2, 0x55, 0x91, 0x79,
		0x44, 0xd2, 0x06, 0x18, 0xc4, 0xbc, 0xbe, 0x2c, 0xd5, 0x3b, 0x9c, 0x46, 0xf8, 0x4e, 0x3f, 0x18,
		0xb5, 0x0a, 0xa6, 0x97, 0xbb, 0xd8, 0xb7, 0x28, 0x21, 0x07, 0x51, 0x6a, 0xf4, 0x4b, 0x96, 0x61,
		0xa8, 0x6e, 0xfb, 0xae, 0x96, 0x07, 0x49, 0x51, 0x4f, 0xb3, 0x9a, 0xd0, 0x63, 0x29, 0x01, 0x1f,
		0xfb, 0x94, 0xc8, 0xe2, 0xa1, 0xe6, 0x3a, 0x4b, 0x49, 0x28, 0x0f, 0x3b, 0x92, 0xcf, 0x3a, 0xdd,
		0x5f, 0x1d, 0xed, 0x63, 0xe1, 0xb4, 0x36, 0xcb, 0x2d, 0xfd, 0xa4, 0xbb, 0x6b, 0x38, 0x31, 0xc9,
		0xf3, 0x52, 0x54, 0x4b, 0xd7, 0x98, 0x84, 0x95, 0x36, 0x2b, 0xa5, 0xcc, 0x7a, 0x9c, 0x60, 0x59,
		0xf1, 0x1d, 0x0f, 0x7b, 0xa9, 0x9b, 0x53, 0x79, 0x74, 0xa0, 0xd2, 0x4b, 0x8b, 0xb6, 0x01, 0x4a,
		0x98, 0xa6, 0x12, 0x2d, 0x8f, 0x2b, 0x69, 0x79, 0xf9, 0x1d, 0x3f, 0x0b, 0xec, 0x9b, 0xfd, 0x7c,
		0x0d, 0x10, 0xf8, 0xb2, 0x5e, 0x43, 0x25, 0x57, 0xfe, 0xb9, 0xf9, 0x55, 0xcb, 0xb5, 0xfc, 0xa7,
		0xf6, 0x3b, 0x81, 0x57, 0xe0, 0xf1, 0xbe, 0x76, 0x04, 0xa0, 0xef, 0xdd, 0xe2, 0x94, 0x28, 0x9f,
		0xb4, 0x6a, 0x73, 0x2f, 0x63, 0x6b, 0x2b, 0x0b, 0x33, 0xf5, 0xbe, 0x9b, 0xce, 0x3f, 0x2f, 0x76,
		0xb1, 0x86, 0xc5, 0xa1, 0x77, 0x45, 0x8e, 0xbb, 0xb8, 0xa4, 0x63, 0x14, 0xe3, 0x7e, 0x28, 0x41,
		0xeb, 0x53, 0x75, 0x9d, 0x3b, 0x46, 0x36, 0xd9, 0x1e, 0x9d, 0x1c, 0x81, 0x4b, 0x06, 0xd7, 0x61,
		0xd4, 0xe4, 0x83, 0xa5, 0x5e, 0x5c, 0x54, 0x50, 0x7d, 0x3f, 0x03, 0x06, 0x3c, 0x53, 0xcc, 0xaf,
		0x57, 0xc7, 0x3f, 0x1e, 0xf9, 0x8b, 0xc6, 0x0b, 0x7c, 0x25, 0xb0, 0x15, 0xf6, 0xa3, 0xbf, 0xe8,
		0x1a, 0x36, 0xb3, 0x2b, 0xcc, 0x2a, 0xe8, 0x28, 0xda, 0x98, 0x5d, 0xd8, 0x69, 0xaf, 0x8c, 0xba,
		0x37, 0x44, 0x4c, 0xc7, 0x9e, 0xb3, 0xc8, 0x0f, 0x6e, 0x81, 0xbc, 0xf7, 0x93, 0xc2, 0xd0, 0x8b,
		0xcd, 0xd3, 0xe8, 0x19, 0x10, 0x02, 0x27, 0x8d, 0x23, 0x15, 0x3a, 0x8c, 0xe9, 0x0c, 0x10, 0xe8,
		0x25, 0xd5, 0x45, 0xa2, 0x49, 0xdb, 0xae, 0x60, 0x13, 0xfa, 0x34, 0x70, 0xec, 0xa9, 0xb1, 0x3f
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xb265n;
	message = new Uint8Array([
		0x68, 0xb5, 0x9f, 0x9d, 0xe0, 0x14, 0x6f, 0xa3, 0xa9, 0x64, 0xbf, 0x39, 0x9c, 0xab, 0xcb, 0xb6,
		0x85, 0x14, 0x5f, 0xc7, 0x27, 0xe8, 0xf7, 0x0a, 0x81, 0xb9, 0x25, 0xd8, 0x50, 0xe1, 0x33, 0x62,
		0xd5, 0x2b, 0x09, 0xff, 0xd8, 0xcf, 0x52, 0xc4, 0xed, 0xa4, 0xdb, 0x56, 0xf6, 0x91, 0x3b, 0xfc,
		0xe9, 0x44, 0xb9, 0xf8, 0xd4, 0x27, 0x6a, 0x18, 0x1e, 0x90, 0x9a, 0x88, 0x0f, 0x39, 0x6d, 0xea,
		0x92, 0xef, 0xc6, 0xa8, 0x3a, 0x8e, 0x68, 0x89, 0x84, 0x2c, 0x5c, 0x83, 0x5c, 0x95, 0x92, 0xd1,
		0xe2, 0xf8, 0xcb, 0x45, 0x6d, 0xdf, 0xb5, 0xde, 0xd0, 0x64, 0x58, 0x9d, 0xdd, 0xa2, 0xb2, 0x95,
		0x28, 0x6b, 0x9e, 0x42, 0x0e, 0x39, 0xfb, 0x1b, 0xf5, 0x66, 0x09, 0x6a, 0xd4, 0x9f, 0x16, 0x5c,
		0xf7, 0x96, 0x5b, 0x54, 0xfc, 0xf7, 0x21, 0x85, 0x22, 0x9e, 0x28, 0xc0, 0xc3, 0x07, 0x48, 0x8a
	]);
	signature = new Uint8Array([
		0x0f, 0x49, 0x85, 0x11, 0x33, 0xf7, 0x26, 0x70, 0xc3, 0xaa, 0xc8, 0x57, 0xde, 0xf0, 0xe2, 0x0b,
		0x2c, 0x31, 0x99, 0xcb, 0xf0, 0x4f, 0xdb, 0x23, 0x60, 0xaf, 0xd4, 0x8a, 0x5f, 0x4a, 0x6d, 0x37,
		0x1c, 0xd7, 0x71, 0x67, 0xe8, 0x7f, 0x34, 0xda, 0xad, 0x90, 0x35, 0xaf, 0xa5, 0x20, 0x68, 0x8f,
		0x07, 0x05, 0x93, 0x1f, 0x98, 0x7f, 0x0a, 0x9d, 0x33, 0xdb, 0xb7, 0xd8, 0x9a, 0x0c, 0xd4, 0xb2,
		0x86, 0xce, 0xf0, 0x4c, 0x07, 0xb8, 0xa5, 0xb5, 0x21, 0xab, 0x78, 0x81, 0xd8, 0xa0, 0x6b, 0x91,
		0x4c, 0xf4, 0x16, 0x31, 0x1e, 0x5d, 0xbc, 0x77, 0x63, 0x7a, 0x8d, 0xd5, 0x75, 0x2f, 0x11, 0x4b,
		0x3f, 0xe6, 0x5e, 0x03, 0x13, 0x0c, 0x60, 0x3e, 0xa6, 0x41, 0x25, 0x2e, 0x1e, 0xfd, 0xa9, 0xcf,
		0xf7, 0x47, 0x70, 0x54, 0x55, 0x21, 0x74, 0xbb, 0x21, 0x1e, 0x55, 0x6e, 0xb2, 0x7e, 0x5d, 0x95,
		0x48, 0xa6, 0x35, 0x45, 0xc0, 0x19, 0x39, 0xe6, 0x35, 0x68, 0xaa, 0xc7, 0x29, 0x5c, 0x87, 0x58,
		0x35, 0x78, 0xa4, 0xa4, 0x6c, 0xb4, 0xa5, 0x3f, 0x3e, 0x83, 0x0a, 0xe9, 0xd0, 0x9b, 0xa1, 0x35,
		0x80, 0x0a, 0x97, 0x66, 0x8d, 0x98, 0x44, 0x22, 0x9b, 0x7e, 0x7c, 0x38, 0xe7, 0xdf, 0x08, 0xbc,
		0x9b, 0xc7, 0xf2, 0xeb, 0xbe, 0x46, 0x2a, 0x43, 0xd2, 0x24, 0xc9, 0xde, 0x34, 0xb3, 0x86, 0xe6,
		0x72, 0x80, 0x35, 0x0b, 0xd9, 0xf8, 0xca, 0x05, 0x85, 0x95, 0x19, 0xe0, 0x72, 0x10, 0xcf, 0xcd,
		0x1d, 0x39, 0x83, 0xb1, 0xd7, 0x5a, 0xae, 0xb9, 0xb9, 0xfe, 0xd2, 0xd3, 0x78, 0xf8, 0xab, 0x23,
		0x3e, 0x50, 0x13, 0x53, 0xdc, 0x8c, 0x35, 0xe7, 0xb5, 0x73, 0xdd, 0x04, 0x19, 0x24, 0x02, 0x9b,
		0xc7, 0xef, 0xc6, 0xa0, 0x2a, 0xff, 0x08, 0xe2, 0xbf, 0xb1, 0x65, 0x0d, 0xa6, 0x56, 0xc0, 0x07,
		0x3a, 0x04, 0xac, 0xfd, 0x2f, 0x3a, 0x09, 0xb4, 0xc4, 0x1c, 0x85, 0x76, 0x22, 0xd7, 0xbc, 0x42,
		0xb8, 0x15, 0x96, 0x15, 0x7e, 0x61, 0xa2, 0xb8, 0xf6, 0x17, 0x4f, 0x94, 0xaf, 0x67, 0x2d, 0xe4,
		0xb5, 0x9e, 0x77, 0xd8, 0x05, 0xfe, 0x5e, 0x62, 0x98, 0x7a, 0xfd, 0x74, 0x0d, 0x34, 0xae, 0x1e,
		0x35, 0xb8, 0xc1, 0xb6, 0x82, 0x99, 0x69, 0x35, 0x25, 0x8c, 0xf6, 0x27, 0xb6, 0xcf, 0x85, 0xef,
		0xb7, 0x58, 0xf2, 0xd0, 0x85, 0x07, 0x04, 0x7f, 0x0a, 0xeb, 0xa1, 0x12, 0x7e, 0xae, 0x29, 0xfe,
		0x00, 0xca, 0x87, 0x38, 0x56, 0x2e, 0xca, 0x3d, 0x55, 0x08, 0x4b, 0x8c, 0x01, 0x1b, 0xce, 0x7b,
		0xaf, 0xfd, 0x90, 0x29, 0x21, 0xb9, 0xe0, 0xde, 0x58, 0x3f, 0x89, 0x79, 0xb9, 0x7d, 0x93, 0x06,
		0x5f, 0x26, 0x6a, 0x7e, 0xb5, 0x46, 0x89, 0x91, 0x27, 0xb8, 0xc2, 0x87, 0x40, 0x3d, 0xec, 0xdd
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(true);

	e =
		0xb265n;
	message = new Uint8Array([
		0x97, 0x9e, 0x87, 0xfd, 0x76, 0x2d, 0x8f, 0x04, 0x45, 0x53, 0xa5, 0x6d, 0x47, 0xd7, 0xc2, 0x62,
		0xd0, 0x47, 0x89, 0x02, 0x4f, 0xed, 0x71, 0xfb, 0x8b, 0xff, 0x26, 0x5b, 0x2d, 0x16, 0x2d, 0xa3,
		0x7f, 0xe1, 0xc7, 0x1d, 0x73, 0x1b, 0x19, 0x70, 0xe7, 0xba, 0x89, 0x72, 0x27, 0x6a, 0x6b, 0x3d,
		0xb4, 0x39, 0xdd, 0x85, 0x44, 0x94, 0xef, 0x29, 0x09, 0x72, 0x08, 0x07, 0x36, 0xcf, 0x85, 0x15,
		0xc0, 0x5c, 0xa2, 0xae, 0x61, 0x75, 0x9e, 0x29, 0xe3, 0x53, 0x1a, 0xb0, 0x9b, 0x83, 0xc3, 0x4f,
		0x34, 0x96, 0x30, 0x4c, 0xae, 0x1b, 0x0d, 0xb7, 0xa5, 0xca, 0x7a, 0x41, 0xd7, 0x02, 0xae, 0x52,
		0xe1, 0x76, 0xe0, 0x55, 0x49, 0x23, 0x67, 0x57, 0xc1, 0x85, 0x20, 0xd0, 0xaa, 0x0a, 0x10, 0xc0,
		0xd8, 0xc7, 0x4a, 0xfe, 0x95, 0x69, 0x13, 0xcd, 0xe8, 0x6f, 0x45, 0xb1, 0x17, 0x97, 0xf1, 0x81
	]);
	signature = new Uint8Array([
		0x5a, 0x48, 0xfe, 0x3d, 0xbc, 0xfd, 0xf6, 0xb9, 0x95, 0xf8, 0x49, 0xd7, 0x75, 0xac, 0x51, 0xe5,
		0x6c, 0xde, 0x0f, 0x0b, 0x41, 0xc9, 0xac, 0xa3, 0xb0, 0x35, 0x35, 0x0f, 0x3a, 0xec, 0x02, 0x70,
		0x21, 0xb3, 0x33, 0x7e, 0x4e, 0x21, 0x65, 0x34, 0x48, 0x02, 0x7c, 0xcb, 0xd6, 0xc8, 0x3f, 0x60,
		0x36, 0xdb, 0xfb, 0x02, 0x82, 0x12, 0xaf, 0xed, 0x26, 0xca, 0x99, 0xc7, 0x29, 0x08, 0x1c, 0xe7,
		0x42, 0x00, 0x5a, 0xee, 0x6c, 0xc2, 0x20, 0x46, 0xf7, 0x5a, 0x66, 0x74, 0xa4, 0xf1, 0xf3, 0xc1,
		0x40, 0x35, 0x53, 0xc4, 0x02, 0x71, 0x37, 0xfb, 0x27, 0xb3, 0x80, 0x4c, 0x0c, 0x72, 0x32, 0x0d,
		0x3e, 0xf0, 0xef, 0x3a, 0xfe, 0x78, 0x35, 0x82, 0x94, 0x7e, 0xec, 0x01, 0xf5, 0x7a, 0x01, 0x31,
		0xce, 0xf6, 0x78, 0x15, 0x29, 0x75, 0x8e, 0x33, 0x2b, 0x16, 0x22, 0x26, 0xff, 0x6e, 0x34, 0x77,
		0x71, 0xa4, 0xd0, 0xa6, 0xf8, 0xa7, 0x24, 0x49, 0x55, 0xde, 0xb5, 0x52, 0xb9, 0x76, 0x40, 0x87,
		0x30, 0x15, 0x3d, 0x90, 0x08, 0x46, 0x8c, 0x13, 0xd8, 0x24, 0x11, 0x1a, 0x1f, 0x16, 0x24, 0x50,
		0xc2, 0x5c, 0x36, 0x5e, 0x92, 0x3e, 0xd0, 0x55, 0xb3, 0x0f, 0x74, 0x79, 0x97, 0xe4, 0x9b, 0xb5,
		0xb8, 0xaf, 0x28, 0x34, 0x48, 0xb0, 0x5e, 0x1e, 0x26, 0x53, 0x66, 0xb9, 0x4d, 0xe3, 0xf5, 0x5d,
		0x13, 0x5c, 0x06, 0x3d, 0x45, 0xb4, 0xa9, 0x26, 0x1f, 0xd1, 0xb7, 0x7e, 0x29, 0x57, 0x91, 0xb8,
		0xc7, 0x7f, 0xf5, 0xfe, 0xaa, 0x14, 0x6d, 0x7c, 0x47, 0x4e, 0xf2, 0x52, 0x57, 0xb7, 0xce, 0x24,
		0x13, 0xa4, 0xc0, 0xfc, 0x42, 0x2d, 0x7f, 0x93, 0x95, 0xf6, 0xaf, 0x25, 0x6a, 0x3c, 0x6f, 0x5d,
		0xfb, 0xe9, 0x02, 0xef, 0x5f, 0x44, 0x11, 0x03, 0x4c, 0x1e, 0x54, 0x82, 0xd3, 0x99, 0xbb, 0x6d,
		0x46, 0x2d, 0x8e, 0x42, 0x66, 0x87, 0x15, 0x06, 0x7e, 0xad, 0x9a, 0xd9, 0xb6, 0x60, 0x95, 0x17,
		0xba, 0x64, 0xc7, 0x0b, 0x33, 0x62, 0xe2, 0xa8, 0x2a, 0xbc, 0x61, 0x71, 0x0b, 0x01, 0x13, 0x2a,
		0xdf, 0x39, 0xc1, 0xa7, 0x67, 0x26, 0xd6, 0x67, 0xac, 0x55, 0x53, 0xba, 0xea, 0xe2, 0x8f, 0xd3,
		0x60, 0x26, 0xda, 0x0c, 0x04, 0xfd, 0xcd, 0x19, 0x10, 0x4b, 0x96, 0x8c, 0xf5, 0x64, 0x92, 0x22,
		0x9a, 0x76, 0x05, 0x09, 0xeb, 0x61, 0x5b, 0x36, 0xa5, 0xd0, 0xbe, 0xbd, 0xdc, 0xe3, 0x07, 0x1b,
		0x8d, 0xec, 0x3a, 0x0c, 0xc3, 0x0d, 0x88, 0x72, 0x02, 0xee, 0xdc, 0xd1, 0x23, 0x27, 0xc7, 0x98,
		0xbf, 0xa9, 0x2a, 0x03, 0x66, 0x66, 0x4e, 0x01, 0x58, 0x08, 0x40, 0xe5, 0x8a, 0x63, 0x66, 0x4c,
		0x38, 0x78, 0xaf, 0xc8, 0xfd, 0x10, 0x1f, 0x01, 0x0d, 0x83, 0x33, 0xc7, 0x25, 0xa9, 0x1c, 0xc0
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	n =
		0xce4924ff470fb99d17f66595561a74ded22092d1dc27122ae15ca8cac4bfae11daa9e37a941430dd1b81aaf472f320835ee2fe744c83f1320882a8a02316ceb375f5c4909232bb2c6520b249c88be4f47b8b86fdd93678c69e64f50089e907a5504fdd43f0cad24aaa9e317ef2ecade3b5c1fd31f3c327d70a0e2d4867e6fe3f26272e8b6a3cce17843e359b82eb7a4cad8c42460179cb6c07fa252efaec428fd5cae5208b298b255109026e21272424ec0c52e1e5f72c5ab06f5d2a05e77c193b647ec948bb844e0c2ef1307f53cb800d4f55523d86038bb9e21099a861b6b9bcc969e5dddbdf7171b37d616381b78c3b22ef66510b2765d9617556b175599879d8558100ad90b830e87ad460a22108baa5ed0f2ba9dfc05167f8ab61fc9f8ae01603f9dd5e66ce1e642b604bca9294b57fb7c0d83f054bacf4454c298a272c44bc718f54605b91e0bfafd772aebaf3828846c93018f98e315708d50be8401eb9a8778dcbd0d6db9370860411b004cd37fbb8b5df87edee7aae949fff34607bn;
	e =
		0xfe3079n;
	message = new Uint8Array([
		0xe4, 0x9f, 0x58, 0x5e, 0xec, 0xcf, 0x2b, 0xf7, 0x26, 0x56, 0x41, 0xfb, 0x8c, 0x0f, 0x94, 0xc7,
		0x17, 0xe2, 0xff, 0x1d, 0x90, 0x45, 0xae, 0xca, 0xa3, 0x02, 0xd2, 0x85, 0x35, 0x3b, 0x99, 0x1b,
		0xf7, 0xac, 0x5d, 0xc9, 0x3b, 0x31, 0x1c, 0xe9, 0x07, 0x88, 0x28, 0xd2, 0x68, 0x57, 0x1f, 0xf9,
		0x09, 0x71, 0x1e, 0x5c, 0x04, 0x55, 0x32, 0x20, 0xf8, 0xf8, 0x0f, 0x78, 0x5c, 0xc4, 0x05, 0xca,
		0x13, 0xe0, 0x2f, 0x0d, 0x40, 0xb2, 0xee, 0x76, 0x5b, 0xa2, 0x95, 0x53, 0x85, 0x21, 0x66, 0x37,
		0x18, 0xea, 0xbe, 0x57, 0x83, 0x88, 0x8c, 0x34, 0x55, 0x19, 0x07, 0x7a, 0x97, 0x51, 0xa1, 0x28,
		0x5f, 0xc2, 0x36, 0xf2, 0xa2, 0x5a, 0x8a, 0xe4, 0x4a, 0x2d, 0xf2, 0x47, 0x88, 0x74, 0x51, 0xc8,
		0x6c, 0xd6, 0x46, 0xd7, 0xb3, 0xe7, 0xa4, 0x4e, 0xe0, 0xef, 0x23, 0x53, 0x8e, 0xec, 0x55, 0x7f
	]);
	signature = new Uint8Array([
		0x4e, 0x85, 0xf6, 0x8a, 0x5b, 0x06, 0xb0, 0x6a, 0x17, 0xd0, 0xf3, 0xf2, 0x7b, 0x3a, 0x5a, 0x11,
		0x9e, 0x7d, 0xb0, 0x2a, 0xbc, 0x2d, 0x9b, 0x4a, 0xfc, 0x69, 0x82, 0x20, 0xda, 0x11, 0x52, 0x4a,
		0x88, 0x5f, 0x33, 0xcd, 0x7a, 0x10, 0xae, 0x89, 0xc9, 0x8b, 0x02, 0x7b, 0x69, 0x22, 0x4a, 0xce,
		0xf4, 0x71, 0x3a, 0x14, 0x63, 0xf1, 0x68, 0xc8, 0xbe, 0xf5, 0x51, 0xef, 0x8f, 0xed, 0xb2, 0x19,
		0xb6, 0xad, 0x0b, 0x3e, 0x99, 0xd6, 0x21, 0x66, 0x43, 0xe5, 0x8a, 0x51, 0xbb, 0x2a, 0xe9, 0x3b,
		0xbe, 0xf7, 0x69, 0x61, 0x49, 0x14, 0xea, 0xb1, 0x37, 0xc1, 0x99, 0x3b, 0x14, 0x91, 0x71, 0xb8,
		0x63, 0x3f, 0x4a, 0x31, 0x8f, 0x69, 0x77, 0x29, 0x96, 0xef, 0x7d, 0xc3, 0xf7, 0x74, 0x8f, 0x37,
		0x56, 0xd5, 0x8e, 0xcd, 0xc3, 0x93, 0x76, 0x32, 0x71, 0x7f, 0xb4, 0x0c, 0xb7, 0xed, 0x6e, 0x5c,
		0x72, 0xe1, 0x72, 0xac, 0x58, 0xec, 0x01, 0xf4, 0xe3, 0x2f, 0xff, 0xc4, 0x45, 0xb6, 0x0f, 0x98,
		0xa6, 0x28, 0xfc, 0x1b, 0x0f, 0xa4, 0xcf, 0xb6, 0x68, 0x6d, 0xeb, 0x12, 0x59, 0x50, 0xb8, 0x62,
		0xf3, 0x47, 0xe9, 0xeb, 0x81, 0x20, 0xfb, 0x2b, 0x5a, 0xa2, 0x3d, 0x6d, 0x86, 0xea, 0xf1, 0xed,
		0xeb, 0xeb, 0x13, 0x37, 0x93, 0x54, 0x1c, 0x4d, 0xbe, 0xa0, 0xf1, 0x4a, 0x9f, 0x74, 0x73, 0x3d,
		0xa4, 0xed, 0x11, 0xd1, 0x27, 0x4d, 0x46, 0x4e, 0x09, 0xa5, 0x78, 0x08, 0x43, 0xd6, 0x75, 0x0b,
		0xac, 0xe0, 0xe9, 0x70, 0x29, 0x30, 0x82, 0x87, 0xdd, 0x39, 0x6e, 0xfa, 0x0f, 0x32, 0x62, 0x81,
		0x71, 0xfc, 0x5e, 0xc2, 0x0d, 0x3c, 0x82, 0x61, 0x9b, 0x78, 0x4e, 0x4c, 0xdb, 0x66, 0xcb, 0xdb,
		0x28, 0xcd, 0xd2, 0x63, 0xa4, 0x6a, 0x3e, 0xc6, 0x3e, 0x1c, 0xad, 0x76, 0x59, 0xdc, 0x3b, 0x33,
		0x80, 0x14, 0x32, 0xd2, 0xb5, 0xb5, 0xe1, 0x0a, 0x77, 0x00, 0x83, 0xb9, 0x33, 0xa8, 0x05, 0xa9,
		0xc7, 0x6c, 0xc2, 0x6c, 0x91, 0x2f, 0x95, 0x2c, 0xec, 0x5f, 0xd8, 0x41, 0x3a, 0x8c, 0x1a, 0xda,
		0xee, 0x80, 0x14, 0x9f, 0xa1, 0x98, 0x55, 0x31, 0x50, 0x75, 0x82, 0x52, 0x92, 0xdb, 0x24, 0xde,
		0x32, 0x5f, 0xa6, 0xbf, 0x3b, 0x4c, 0x06, 0x65, 0x2f, 0xc8, 0x32, 0x0d, 0xef, 0x42, 0x36, 0xc0,
		0x88, 0xdd, 0x5a, 0xe4, 0x33, 0x15, 0xe0, 0x36, 0x72, 0xfb, 0x99, 0x9c, 0x35, 0x4e, 0xf6, 0x1a,
		0xc3, 0x80, 0xb1, 0xb1, 0xc9, 0x6d, 0x71, 0x1f, 0xc7, 0x77, 0xe3, 0x45, 0xcc, 0xb9, 0x45, 0x36,
		0x35, 0x5a, 0x32, 0x14, 0x66, 0xee, 0xdc, 0xf2, 0x35, 0x5d, 0xd5, 0x1f, 0x68, 0x80, 0x23, 0xd6,
		0xb5, 0x99, 0x39, 0x0f, 0x3a, 0xff, 0x62, 0x01, 0x36, 0x9d, 0x81, 0x03, 0xaf, 0x92, 0x6c, 0x83
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xb193n;
	message = new Uint8Array([
		0x46, 0x21, 0xb1, 0x7c, 0xd9, 0xf5, 0xb6, 0x23, 0xfe, 0x73, 0xb5, 0xfe, 0x28, 0x0c, 0xe9, 0xac,
		0x84, 0x08, 0x05, 0x60, 0x8a, 0xcd, 0x6e, 0x41, 0xd5, 0x5e, 0xa7, 0x11, 0x32, 0x22, 0x0c, 0x0d,
		0xf7, 0xe7, 0xc4, 0x15, 0x96, 0x26, 0xf1, 0x0d, 0x71, 0x88, 0x29, 0x83, 0xf0, 0xaa, 0x2a, 0x92,
		0xd1, 0x1d, 0xc9, 0x06, 0xc0, 0xb2, 0x2c, 0xc0, 0x28, 0xf4, 0x39, 0x5d, 0x48, 0xf5, 0x4e, 0x12,
		0x89, 0x4e, 0x33, 0xda, 0x0f, 0x61, 0x4d, 0xd4, 0x8e, 0xe1, 0x14, 0xe6, 0x5f, 0x95, 0xc7, 0xa7,
		0xd3, 0x58, 0x5e, 0x7c, 0xc7, 0x65, 0xc0, 0x01, 0x78, 0xd1, 0x36, 0xaa, 0x99, 0x59, 0x1f, 0xaa,
		0xa3, 0x5e, 0xe6, 0x13, 0x6d, 0x2e, 0x32, 0x3f, 0xfc, 0x85, 0x5c, 0x70, 0x9c, 0x54, 0x26, 0xb3,
		0x2f, 0xc0, 0xaa, 0x0a, 0xc6, 0x6e, 0x90, 0xc9, 0x6e, 0xfe, 0x84, 0x41, 0x4d, 0xd5, 0xe7, 0x9c
	]);
	signature = new Uint8Array([
		0xb6, 0x0a, 0x4d, 0xd6, 0x29, 0xd6, 0x03, 0x0f, 0xe6, 0x52, 0x2f, 0x6b, 0x75, 0x4f, 0x0e, 0x75,
		0x1d, 0xe4, 0xb2, 0x55, 0x2c, 0x60, 0x7e, 0xfc, 0xcb, 0x2f, 0x90, 0xda, 0x91, 0x78, 0x75, 0x83,
		0xb6, 0xfc, 0x51, 0xbc, 0xb6, 0x0a, 0xb2, 0x19, 0x38, 0xa4, 0x8c, 0xa6, 0xab, 0x3e, 0xf8, 0xab,
		0x75, 0xb5, 0x6a, 0xbb, 0x9d, 0xf1, 0xfa, 0xa4, 0xdb, 0xd8, 0x4b, 0x41, 0x20, 0x66, 0xf3, 0xf9,
		0x2b, 0xff, 0x77, 0x8a, 0x89, 0xf7, 0xdf, 0x4f, 0x55, 0x31, 0x7c, 0xbc, 0x40, 0xa7, 0x80, 0xfb,
		0x87, 0xf0, 0xc8, 0x44, 0xc2, 0xd6, 0x4e, 0x23, 0x24, 0x74, 0xa3, 0xe9, 0x31, 0xc1, 0x68, 0xb3,
		0x30, 0x86, 0x65, 0x79, 0x68, 0x5c, 0x51, 0xa5, 0x93, 0x7a, 0x2e, 0x80, 0xea, 0x2c, 0x6e, 0xd0,
		0x0f, 0xe1, 0x23, 0xf1, 0x4b, 0xbe, 0xf5, 0x5c, 0x97, 0x74, 0xbd, 0x62, 0x0e, 0x1e, 0x82, 0x1e,
		0x01, 0x28, 0xcf, 0x49, 0xda, 0xb6, 0xf8, 0x85, 0x3c, 0x08, 0x80, 0x1c, 0x8a, 0x00, 0x91, 0x9a,
		0x6c, 0x01, 0x3c, 0x3a, 0x83, 0xf9, 0x99, 0xc6, 0x6a, 0x5c, 0xb4, 0x9c, 0x91, 0x86, 0x5d, 0xf6,
		0x0d, 0xb8, 0xbe, 0x81, 0x3b, 0xc3, 0xd8, 0xb3, 0x5d, 0x85, 0xd7, 0x9c, 0xf0, 0x1a, 0xbe, 0xd2,
		0xf6, 0x0f, 0x60, 0xed, 0xc9, 0x71, 0x53, 0x78, 0x0c, 0x0c, 0x12, 0xfe, 0x45, 0xe5, 0xe4, 0x87,
		0xfd, 0x95, 0x93, 0x93, 0x07, 0x9d, 0xbe, 0xe5, 0xaf, 0x46, 0xc0, 0xa7, 0xc4, 0x21, 0x4f, 0xab,
		0x75, 0xc5, 0xb5, 0xdd, 0xd6, 0xf0, 0x28, 0x86, 0x69, 0xe0, 0xa9, 0xbe, 0x33, 0xf4, 0xb5, 0x78,
		0x25, 0x24, 0xe8, 0x38, 0x31, 0x5c, 0xc0, 0x31, 0xd9, 0x7b, 0xeb, 0x15, 0x96, 0x02, 0x6f, 0x12,
		0x9a, 0x21, 0xe9, 0x61, 0xdd, 0xe6, 0xbc, 0x34, 0xc4, 0x92, 0xf3, 0x02, 0x6a, 0xf7, 0xf5, 0x03,
		0xb8, 0xff, 0x87, 0xb7, 0x77, 0x56, 0x19, 0xf8, 0xd1, 0xe1, 0x7f, 0x97, 0x2c, 0x85, 0x94, 0x0a,
		0xff, 0xbb, 0x64, 0xd3, 0x31, 0x0f, 0xb9, 0xf7, 0x4d, 0x9d, 0x16, 0xae, 0xb0, 0x77, 0xb8, 0xb9,
		0x97, 0xb1, 0x80, 0x20, 0xeb, 0x99, 0x2a, 0xb6, 0x13, 0x22, 0x84, 0x7f, 0xe6, 0xcb, 0x62, 0xf7,
		0x3d, 0x0a, 0xbd, 0x81, 0x63, 0x3a, 0xc5, 0xc5, 0xbe, 0x65, 0x19, 0xdd, 0xbc, 0x93, 0x34, 0xbb,
		0x56, 0x44, 0x9b, 0xdf, 0x96, 0x93, 0x0d, 0x65, 0xd8, 0x06, 0x1d, 0xb8, 0x91, 0x1d, 0x4e, 0xd6,
		0xa5, 0x9a, 0xe8, 0xd2, 0x27, 0x6d, 0x04, 0x59, 0x6a, 0x38, 0x8e, 0x75, 0x2c, 0xf9, 0x9c, 0xbd,
		0x39, 0x5b, 0x83, 0x7e, 0x7c, 0x5a, 0xee, 0x27, 0x8a, 0x7c, 0x4b, 0x43, 0xc7, 0x8d, 0x3d, 0x74,
		0xc8, 0x8f, 0x49, 0xcb, 0xc8, 0xd8, 0x16, 0xf5, 0x3c, 0xca, 0x15, 0x69, 0x27, 0xfb, 0x92, 0xd4
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000073b193n;
	message = new Uint8Array([
		0x08, 0x97, 0xd4, 0x0e, 0x7c, 0x0f, 0x2d, 0xfc, 0x07, 0xb0, 0xc7, 0xfd, 0xda, 0xf5, 0xfd, 0x8f,
		0xcc, 0x6a, 0xf9, 0xc1, 0xfd, 0xc1, 0x7b, 0xeb, 0xb9, 0x23, 0xd5, 0x9c, 0x9f, 0xc4, 0x3b, 0xd4,
		0x02, 0xba, 0x39, 0x73, 0x8f, 0x0f, 0x85, 0xf2, 0x30, 0x15, 0xf7, 0x51, 0x31, 0xf9, 0xd6, 0x50,
		0xa2, 0x9b, 0x55, 0xe2, 0xfc, 0x9d, 0x5d, 0xdf, 0x07, 0xbb, 0x8d, 0xf9, 0xfa, 0x5a, 0x80, 0xf1,
		0xe4, 0x63, 0x4e, 0x0b, 0x4c, 0x51, 0x55, 0xbf, 0x14, 0x89, 0x39, 0xb1, 0xa4, 0xea, 0x29, 0xe3,
		0x44, 0xa6, 0x64, 0x29, 0xc8, 0x50, 0xfc, 0xde, 0x73, 0x36, 0xda, 0xd6, 0x16, 0xf0, 0x03, 0x93,
		0x78, 0x39, 0x1a, 0xbc, 0xfa, 0xfe, 0x25, 0xca, 0x7b, 0xb5, 0x94, 0x05, 0x7a, 0xf0, 0x7f, 0xaf,
		0x7a, 0x32, 0x2f, 0x7f, 0xab, 0x01, 0xe0, 0x51, 0xc6, 0x3c, 0xc5, 0x1b, 0x39, 0xaf, 0x4d, 0x23
	]);
	signature = new Uint8Array([
		0x8e, 0xbe, 0xd0, 0x02, 0xd4, 0xf5, 0x4d, 0xe5, 0x89, 0x8a, 0x5f, 0x2e, 0x69, 0xd7, 0x70, 0xed,
		0x5a, 0x5c, 0xe1, 0xd4, 0x5a, 0xd6, 0xdd, 0x9c, 0xe5, 0xf1, 0x17, 0x9d, 0x1c, 0x46, 0xda, 0xa4,
		0xd0, 0x39, 0x4e, 0x21, 0xa9, 0x9d, 0x80, 0x33, 0x58, 0xd9, 0xab, 0xfd, 0x23, 0xbb, 0x53, 0x16,
		0x63, 0x94, 0xf9, 0x97, 0xb9, 0x09, 0xe6, 0x75, 0x66, 0x20, 0x66, 0x32, 0x4c, 0xa1, 0xf2, 0xb7,
		0x31, 0xde, 0xba, 0x17, 0x05, 0x25, 0xc4, 0xee, 0x8f, 0xa7, 0x52, 0xd2, 0xd7, 0xf2, 0x01, 0xb1,
		0x02, 0x19, 0x48, 0x9f, 0x57, 0x84, 0xe3, 0x99, 0xd9, 0x16, 0x30, 0x2f, 0xd4, 0xb7, 0xad, 0xf8,
		0x84, 0x90, 0xdf, 0x87, 0x65, 0x01, 0xc4, 0x67, 0x42, 0xa9, 0x3c, 0xfb, 0x3a, 0xaa, 0xb9, 0x60,
		0x2e, 0x65, 0xd7, 0xe6, 0x0d, 0x7c, 0x4c, 0xea, 0xdb, 0x7e, 0xb6, 0x7e, 0x42, 0x1d, 0x18, 0x03,
		0x23, 0xa6, 0xd3, 0x8f, 0x38, 0xb9, 0xf9, 0x99, 0x21, 0x3e, 0xbf, 0xcc, 0xc7, 0xe0, 0x4f, 0x06,
		0x0f, 0xbd, 0xb7, 0xc2, 0x10, 0x20, 0x65, 0x22, 0xb4, 0x94, 0xe1, 0x99, 0xe9, 0x8c, 0x6c, 0x24,
		0xe4, 0x57, 0xf8, 0x69, 0x66, 0x44, 0xfd, 0xca, 0xeb, 0xc1, 0xb9, 0x03, 0x1c, 0x81, 0x83, 0x22,
		0xc2, 0x9d, 0x13, 0x5e, 0x11, 0x72, 0xfa, 0x0f, 0xdf, 0x7b, 0xe1, 0x00, 0x7d, 0xab, 0xca, 0xab,
		0x49, 0x66, 0x33, 0x2e, 0x7e, 0xa1, 0x45, 0x6b, 0x6c, 0xe8, 0x79, 0xcd, 0x91, 0x0c, 0x91, 0x10,
		0x10, 0x4f, 0xc7, 0xd3, 0xdc, 0xab, 0x07, 0x6f, 0x2b, 0xd1, 0x82, 0xbb, 0x83, 0x27, 0xa8, 0x63,
		0x25, 0x45, 0x70, 0xcd, 0xf2, 0xab, 0x38, 0xe0, 0xcd, 0xa3, 0x17, 0x79, 0xde, 0xaa, 0xd6, 0x16,
		0xe3, 0x43, 0x7e, 0xd6, 0x59, 0xd7, 0x4e, 0x5a, 0x4e, 0x04, 0x5a, 0x70, 0x13, 0x38, 0x90, 0xb8,
		0x1b, 0xc4, 0xf2, 0x4a, 0xb6, 0xda, 0x67, 0xa2, 0xee, 0x0c, 0xe1, 0x5b, 0xab, 0xa3, 0x37, 0xd0,
		0x91, 0xcb, 0x5a, 0x1c, 0x44, 0xda, 0x69, 0x0f, 0x81, 0x14, 0x5b, 0x02, 0x52, 0xa6, 0x54, 0x9b,
		0xbb, 0x20, 0xcd, 0x5c, 0xc4, 0x7a, 0xfe, 0xc7, 0x55, 0xeb, 0x37, 0xfe, 0xd5, 0x5a, 0x9a, 0x33,
		0xd3, 0x65, 0x57, 0x42, 0x45, 0x03, 0xd8, 0x05, 0xa0, 0xa1, 0x20, 0xb7, 0x69, 0x41, 0xf4, 0x15,
		0x0d, 0x89, 0x34, 0x2d, 0x7a, 0x7f, 0xa3, 0xa2, 0xb0, 0x8c, 0x51, 0x5e, 0x6f, 0x68, 0x42, 0x9c,
		0xf7, 0xaf, 0xd1, 0xa3, 0xfc, 0xe0, 0xf4, 0x28, 0x35, 0x1a, 0x6f, 0x9e, 0xda, 0x3a, 0xb2, 0x4a,
		0x7e, 0xf5, 0x91, 0x99, 0x4c, 0x21, 0xfb, 0xf1, 0x00, 0x1f, 0x99, 0x23, 0x9e, 0x88, 0x34, 0x0f,
		0x9b, 0x35, 0x9e, 0xc7, 0x2e, 0x8a, 0x21, 0x2a, 0x19, 0x20, 0xe6, 0xcf, 0x99, 0x3f, 0xf8, 0x48
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(true);

	e =
		0xb193n;
	message = new Uint8Array([
		0x78, 0x67, 0xb6, 0x5e, 0xd9, 0x82, 0xed, 0x6c, 0xdd, 0x2d, 0x06, 0x11, 0x57, 0xbe, 0x90, 0xf8,
		0x5b, 0xcd, 0x58, 0x03, 0x50, 0xf1, 0x25, 0x31, 0x45, 0xcb, 0xa5, 0xc5, 0x89, 0x46, 0xa8, 0xa5,
		0x75, 0x1c, 0x8c, 0x00, 0x8d, 0x9d, 0xf8, 0x33, 0xc8, 0xac, 0xce, 0xee, 0x2b, 0x0a, 0x5a, 0x92,
		0x9c, 0xd7, 0xd0, 0xde, 0xf6, 0x55, 0xf5, 0xcb, 0x59, 0xf0, 0x1c, 0xb4, 0xc4, 0x7b, 0x54, 0xba,
		0xe5, 0xbd, 0xe0, 0x67, 0x2f, 0x2c, 0xe7, 0x92, 0x2e, 0xf8, 0x6d, 0x82, 0x17, 0x4b, 0x82, 0x56,
		0xa4, 0xd0, 0xb9, 0xa3, 0x1e, 0x72, 0xdc, 0x60, 0xbb, 0x66, 0xde, 0xff, 0x2b, 0x6b, 0x11, 0xdd,
		0x6e, 0x50, 0x99, 0xdc, 0xe8, 0xb7, 0x21, 0x4e, 0xb7, 0x1a, 0xcd, 0x16, 0x44, 0x0b, 0x6f, 0x09,
		0x18, 0xc0, 0xfd, 0x9b, 0xf2, 0xce, 0x43, 0xb7, 0x16, 0x35, 0xd5, 0xee, 0xe7, 0x9d, 0x48, 0xd4
	]);
	signature = new Uint8Array([
		0x0a, 0x61, 0x70, 0x81, 0xdd, 0x97, 0x94, 0xc9, 0x37, 0xe4, 0xc7, 0x16, 0x3e, 0x28, 0x65, 0x43,
		0x95, 0x58, 0xd4, 0x1e, 0x68, 0x8b, 0x23, 0x0c, 0x20, 0xa1, 0xea, 0x71, 0x84, 0x66, 0x43, 0xb8,
		0x32, 0x1d, 0x77, 0xca, 0xd5, 0x82, 0xec, 0x9a, 0x70, 0xf4, 0x0d, 0x7a, 0x8e, 0xd9, 0xf7, 0x22,
		0xc5, 0xb9, 0x01, 0x2f, 0x43, 0x6c, 0x7a, 0x61, 0x7d, 0xed, 0x2a, 0xd1, 0x86, 0x43, 0x45, 0x7b,
		0x6f, 0xd3, 0x30, 0x35, 0xfc, 0x2a, 0x2c, 0xbd, 0x52, 0xf3, 0xda, 0x41, 0x58, 0x01, 0x5e, 0x01,
		0xfa, 0xb5, 0x5b, 0x4e, 0x26, 0xe2, 0xde, 0x96, 0x02, 0x10, 0x1d, 0xdb, 0x86, 0xe8, 0xd2, 0xae,
		0xb8, 0x9b, 0xf4, 0x00, 0x69, 0x33, 0xa1, 0x1b, 0x5f, 0xbc, 0xe2, 0xbd, 0x09, 0xe3, 0x1f, 0xda,
		0x18, 0xa8, 0x2e, 0xc4, 0x05, 0x91, 0x0d, 0xd3, 0xd1, 0xcf, 0x1e, 0x46, 0x5c, 0x17, 0x68, 0x72,
		0xda, 0x3d, 0xb1, 0xc2, 0xb3, 0x08, 0x9b, 0x48, 0xe7, 0x68, 0xef, 0x15, 0x5a, 0xd5, 0xf5, 0x64,
		0x17, 0x49, 0x7a, 0x64, 0x8e, 0xd0, 0x42, 0x7d, 0x45, 0xec, 0xdd, 0x03, 0x8d, 0x3c, 0xc8, 0xc8,
		0x7c, 0xe9, 0x9a, 0x92, 0xf0, 0x8c, 0x76, 0x41, 0xf7, 0xfa, 0x39, 0xce, 0xb4, 0xec, 0x83, 0xec,
		0xe0, 0x99, 0x4a, 0xc6, 0x84, 0x8b, 0xb6, 0xef, 0xb4, 0xe7, 0x93, 0x27, 0x14, 0x5e, 0x53, 0x96,
		0xb1, 0x0f, 0xaa, 0x1a, 0xc3, 0xa6, 0x3e, 0xcd, 0x4a, 0x4a, 0x2c, 0x9c, 0xba, 0x94, 0x6b, 0x0e,
		0x5f, 0x18, 0x5b, 0x2c, 0xd1, 0xa0, 0x42, 0x93, 0xee, 0x46, 0x39, 0x3d, 0x37, 0x4d, 0xb8, 0xbe,
		0x0a, 0x84, 0x93, 0x77, 0xeb, 0x11, 0x06, 0x7e, 0xad, 0x3b, 0x76, 0xe5, 0x14, 0x55, 0x1d, 0x48,
		0x4d, 0x5c, 0x51, 0x54, 0x4a, 0x1d, 0x0d, 0xa9, 0x6c, 0x17, 0xb5, 0xb2, 0xef, 0x95, 0x3d, 0xcd,
		0xc1, 0xc6, 0xd5, 0x92, 0x03, 0x0e, 0x46, 0x8e, 0xb8, 0x18, 0x6a, 0x5b, 0xf6, 0x60, 0xb7, 0x1d,
		0xa5, 0xd9, 0x82, 0xbc, 0x54, 0x24, 0xcf, 0x1a, 0x4f, 0x8c, 0xe9, 0x52, 0xbc, 0x76, 0x3b, 0x4e,
		0xaa, 0xdb, 0x2a, 0x3f, 0x78, 0x7c, 0x8a, 0xf0, 0x1d, 0xf2, 0xf4, 0x3d, 0xb5, 0xe0, 0xad, 0x71,
		0x18, 0x24, 0xac, 0xec, 0xe2, 0xd9, 0x9d, 0x5b, 0xf9, 0xfd, 0xee, 0x0f, 0xdf, 0x1f, 0xdd, 0x37,
		0x0e, 0xc7, 0x91, 0xa9, 0x46, 0xa4, 0xb6, 0xaf, 0x20, 0xb2, 0x77, 0x47, 0x9a, 0x83, 0x87, 0x76,
		0xe9, 0xc0, 0x92, 0x30, 0xc3, 0x63, 0x25, 0xb8, 0xc8, 0xef, 0x84, 0xdb, 0x28, 0x2f, 0xe8, 0x9c,
		0xed, 0x24, 0xb0, 0xd7, 0x86, 0x9b, 0x5d, 0x24, 0x6f, 0xb3, 0xc6, 0x0f, 0xcb, 0x26, 0x13, 0x09,
		0x89, 0x77, 0x14, 0xe8, 0x70, 0x19, 0x5b, 0x9b, 0xee, 0xd0, 0xb2, 0x65, 0x80, 0x0f, 0xc6, 0xe6
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xb193n;
	message = new Uint8Array([
		0x4d, 0x36, 0xeb, 0x2c, 0x3a, 0xd2, 0x33, 0x43, 0x69, 0x23, 0xe5, 0x80, 0xfa, 0xdd, 0xb4, 0x5a,
		0xd3, 0x59, 0x67, 0x10, 0x8b, 0xe8, 0xd9, 0x9a, 0x87, 0x67, 0x45, 0xdf, 0x62, 0x13, 0xc0, 0x28,
		0x92, 0x9f, 0x07, 0xd5, 0x49, 0x84, 0x7b, 0x4f, 0x9a, 0x99, 0x6a, 0x3d, 0xdd, 0xe3, 0x90, 0xfb,
		0x54, 0xae, 0xde, 0x47, 0x0f, 0xdc, 0x7a, 0x3e, 0x0c, 0x7e, 0x06, 0x88, 0xa3, 0xa1, 0x25, 0xcf,
		0x21, 0x6a, 0x3b, 0x75, 0xb4, 0x66, 0x75, 0x86, 0x87, 0x1b, 0x0a, 0xeb, 0x2d, 0xe3, 0xc0, 0xe1,
		0x43, 0xfa, 0xb1, 0xaa, 0x51, 0xd5, 0x4f, 0x82, 0xf2, 0xb5, 0xa6, 0xd5, 0x35, 0x7d, 0xe1, 0xaf,
		0x42, 0xc0, 0x10, 0x74, 0x41, 0x1f, 0x28, 0xd1, 0x77, 0xd2, 0x4b, 0xf2, 0xb2, 0x84, 0x4a, 0xf6,
		0xe8, 0x64, 0x69, 0xa0, 0x1b, 0x79, 0x62, 0x4f, 0x7f, 0x35, 0xac, 0x30, 0xdf, 0x4e, 0xfc, 0xb2
	]);
	signature = new Uint8Array([
		0x81, 0x38, 0x92, 0x2f, 0xd1, 0xa8, 0x73, 0x33, 0xf1, 0x31, 0x6e, 0x20, 0x7e, 0x58, 0x51, 0xaf,
		0x65, 0xf2, 0x7d, 0x9f, 0x5c, 0xda, 0x0f, 0x7b, 0x7c, 0xab, 0x00, 0x54, 0xa2, 0xde, 0xab, 0x0a,
		0x5c, 0x24, 0x6f, 0x18, 0x34, 0xb8, 0xfa, 0x0a, 0x9a, 0xe7, 0x55, 0xb6, 0xad, 0xd3, 0xb6, 0xdd,
		0x93, 0xc6, 0x94, 0xfa, 0x49, 0xbe, 0xa2, 0x8a, 0x56, 0x35, 0xe5, 0x6d, 0x98, 0x41, 0xd2, 0x83,
		0x32, 0x0e, 0x7a, 0x6f, 0x98, 0x12, 0xc1, 0x02, 0xa6, 0x0f, 0xc2, 0x50, 0x5a, 0x08, 0x1e, 0xe3,
		0x84, 0x9f, 0x81, 0x51, 0x91, 0xb9, 0xd7, 0xa6, 0xc4, 0x1d, 0xb6, 0x7a, 0xa1, 0xa0, 0x53, 0xf2,
		0x2d, 0x15, 0x14, 0x22, 0x6a, 0xad, 0x39, 0x22, 0xcb, 0x0b, 0x5b, 0xe7, 0xdc, 0x86, 0xd6, 0xcd,
		0x5d, 0xaf, 0x28, 0xba, 0xda, 0x17, 0x9f, 0xbe, 0xda, 0x50, 0x37, 0x2b, 0xce, 0xe5, 0xfd, 0x8b,
		0x56, 0x7c, 0xa1, 0x82, 0x6b, 0x08, 0x1c, 0xc0, 0xe6, 0xcf, 0x58, 0xcd, 0x7e, 0xd9, 0x35, 0xc6,
		0x92, 0x2b, 0x92, 0x4b, 0xed, 0xd7, 0xe4, 0xf3, 0xd4, 0x8f, 0x19, 0x95, 0xa5, 0x6b, 0xb1, 0xd8,
		0xaf, 0xf5, 0x50, 0x5e, 0xa9, 0x7c, 0x56, 0xcd, 0xcb, 0xaa, 0x8e, 0x93, 0x25, 0x4e, 0x8c, 0x6a,
		0x39, 0xdb, 0x12, 0x76, 0xc6, 0xf5, 0x3a, 0x65, 0x51, 0xf1, 0x62, 0xf4, 0x03, 0x18, 0x2b, 0x4b,
		0xca, 0x89, 0x2a, 0x6c, 0xf5, 0x27, 0xc4, 0xf9, 0x62, 0x96, 0xb2, 0xce, 0x17, 0xff, 0xdf, 0xa0,
		0x34, 0x7d, 0x52, 0x90, 0x94, 0x0d, 0x81, 0xed, 0x99, 0xa3, 0xe8, 0xb0, 0x0e, 0x85, 0x9d, 0xc0,
		0xbc, 0xb8, 0x3e, 0x90, 0xe9, 0xcd, 0x9a, 0x5b, 0x64, 0xcb, 0x9d, 0xb1, 0xf3, 0xf0, 0x1d, 0x26,
		0xd0, 0x88, 0x35, 0xff, 0xdf, 0xe4, 0x05, 0x3d, 0x9c, 0x79, 0x20, 0x96, 0x3b, 0x07, 0xfb, 0x19,
		0x9e, 0x5c, 0x01, 0xd4, 0x4d, 0x41, 0x82, 0x58, 0x61, 0x04, 0x85, 0x02, 0x13, 0xf8, 0xca, 0x60,
		0xc0, 0x08, 0x1e, 0x62, 0xb5, 0xfe, 0xcb, 0xad, 0x7e, 0xce, 0xd9, 0x3c, 0x35, 0xa1, 0x37, 0x4d,
		0x27, 0xb6, 0x71, 0x50, 0xdd, 0xfb, 0x44, 0xac, 0x68, 0xf6, 0xaa, 0x00, 0xb5, 0x5e, 0x38, 0xe6,
		0x81, 0xb4, 0x56, 0xe6, 0x06, 0x55, 0x26, 0x1d, 0x8d, 0xae, 0x04, 0x7d, 0x67, 0xa4, 0xee, 0x2c,
		0x55, 0xec, 0xf2, 0x13, 0x57, 0x1d, 0xa1, 0xdf, 0x54, 0x9a, 0x48, 0x89, 0xea, 0x3a, 0x28, 0x5b,
		0x5b, 0x2f, 0xe0, 0x70, 0x7d, 0x74, 0xd4, 0x70, 0xc7, 0xec, 0xe3, 0xa2, 0x15, 0x26, 0xf5, 0xd4,
		0xaf, 0x70, 0x85, 0xdd, 0x11, 0xe6, 0xaf, 0x40, 0x51, 0x52, 0xa0, 0x51, 0x10, 0xfc, 0xd6, 0xaa,
		0x06, 0xce, 0x93, 0xf1, 0xd2, 0xba, 0xba, 0x3e, 0xd5, 0xdb, 0x73, 0x29, 0x3f, 0x97, 0x7e, 0xf1
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xb193n;
	message = new Uint8Array([
		0xe2, 0xa9, 0x2b, 0x14, 0x3c, 0x8a, 0x00, 0x6c, 0xee, 0x8a, 0xfe, 0xbb, 0x66, 0x31, 0x19, 0x74,
		0x5d, 0x26, 0xf4, 0xff, 0xac, 0xaa, 0x53, 0x5c, 0x61, 0x65, 0xd3, 0x0a, 0x12, 0x65, 0xd9, 0x27,
		0x71, 0x64, 0xc8, 0xd8, 0x21, 0x49, 0x77, 0xeb, 0xc8, 0xf2, 0xe2, 0xbb, 0x66, 0x31, 0x1f, 0x54,
		0xe5, 0x14, 0x94, 0xd8, 0xf1, 0x6a, 0x68, 0x22, 0x09, 0x82, 0x37, 0xa8, 0xd6, 0x36, 0x0a, 0xa6,
		0xbc, 0x28, 0x86, 0x79, 0xb0, 0x4c, 0x63, 0x48, 0x49, 0xa7, 0x20, 0xea, 0x19, 0x56, 0xf5, 0x04,
		0x3d, 0xd1, 0x0a, 0x72, 0x33, 0x71, 0xe6, 0xe9, 0xec, 0x30, 0x2a, 0xda, 0x22, 0xb1, 0x7f, 0x99,
		0xec, 0x80, 0xcd, 0xbe, 0x90, 0x9a, 0xae, 0xcc, 0x98, 0x30, 0x22, 0x10, 0x28, 0xa8, 0x84, 0xcc,
		0x8e, 0xe5, 0xbc, 0x95, 0x1b, 0xc8, 0xb7, 0xfa, 0x31, 0xf6, 0x14, 0x66, 0x9e, 0xdc, 0x20, 0x48
	]);
	signature = new Uint8Array([
		0xc8, 0x1a, 0xc3, 0x94, 0xf8, 0x2c, 0xb2, 0x7d, 0x75, 0x95, 0x07, 0x59, 0x22, 0x4b, 0x17, 0x87,
		0xf8, 0x72, 0x25, 0xae, 0x55, 0x49, 0xbe, 0x13, 0xdc, 0x1f, 0x74, 0x32, 0x6e, 0xb6, 0x68, 0xe5,
		0xe0, 0x9d, 0x03, 0xe0, 0x3e, 0xcf, 0x03, 0x9f, 0xd0, 0x8d, 0xc3, 0x01, 0xe7, 0x0b, 0xd0, 0x79,
		0x92, 0xb2, 0x0a, 0x27, 0x57, 0xb5, 0x76, 0x6b, 0xf6, 0x22, 0x05, 0x2d, 0x69, 0xfb, 0xfb, 0xfa,
		0xca, 0x96, 0x4d, 0xa3, 0x3a, 0xf7, 0x1c, 0x87, 0x87, 0xeb, 0xa9, 0xed, 0x5c, 0xaf, 0x1b, 0xf8,
		0x6e, 0x48, 0x58, 0x7d, 0x26, 0xb2, 0x1f, 0x9f, 0x1b, 0xe6, 0x01, 0x24, 0x6e, 0x1d, 0x9c, 0xdc,
		0xea, 0x9a, 0xf7, 0x79, 0x6a, 0xe3, 0x0d, 0xd6, 0xbc, 0xbf, 0x1b, 0x25, 0x73, 0x4f, 0x89, 0xe8,
		0x6a, 0xe9, 0x05, 0x1c, 0x7a, 0x2c, 0xf3, 0x73, 0x09, 0x14, 0x40, 0x6f, 0x15, 0x41, 0xbe, 0xed,
		0x81, 0x2a, 0xc6, 0xc9, 0xe1, 0x8c, 0xfd, 0x5b, 0xf2, 0x65, 0x52, 0x33, 0x60, 0x01, 0x88, 0x60,
		0x14, 0x1b, 0xcf, 0xc5, 0x1c, 0x89, 0xef, 0x87, 0x96, 0x36, 0xae, 0x2d, 0x7f, 0x7e, 0x41, 0xe3,
		0x13, 0x37, 0xf7, 0xaf, 0xc3, 0xe2, 0x01, 0xc6, 0x80, 0x5a, 0x76, 0xaf, 0x89, 0xdc, 0x9e, 0xa7,
		0x74, 0x13, 0xbe, 0x1f, 0x13, 0x38, 0xe8, 0x45, 0xe9, 0xd1, 0x6c, 0xf8, 0x6e, 0x5e, 0x04, 0xa5,
		0x2d, 0x8b, 0x57, 0x94, 0x21, 0x29, 0x6f, 0xa7, 0x02, 0xad, 0x07, 0xec, 0xbf, 0xa0, 0x23, 0x7a,
		0xc9, 0x96, 0xee, 0x2e, 0x91, 0xee, 0xac, 0x8e, 0xf4, 0x89, 0x02, 0xa7, 0x6c, 0x94, 0x7b, 0x50,
		0x1e, 0x26, 0x5c, 0x4b, 0x3f, 0xbd, 0x0c, 0x51, 0x6a, 0x04, 0x16, 0xea, 0x13, 0xc7, 0x9b, 0x7e,
		0x5d, 0x5b, 0x94, 0x35, 0xae, 0xf3, 0xf3, 0x71, 0xd3, 0x8f, 0xf9, 0xdf, 0x8f, 0xdd, 0xed, 0x2f,
		0x26, 0x5b, 0x27, 0xda, 0x5a, 0x84, 0xfe, 0x54, 0x43, 0x63, 0x5e, 0x26, 0x08, 0x07, 0xdb, 0x9a,
		0x15, 0x51, 0x38, 0x7e, 0x6c, 0x9c, 0x59, 0x64, 0x98, 0xd2, 0x80, 0xd9, 0x17, 0x0d, 0xaa, 0x62,
		0x95, 0x4e, 0xd3, 0x2b, 0x14, 0xd0, 0x44, 0x98, 0x0e, 0xca, 0x76, 0xa8, 0xdb, 0x63, 0x48, 0x3d,
		0x8c, 0x4c, 0xbf, 0xa6, 0x69, 0xec, 0x14, 0x0e, 0x7c, 0x4a, 0x30, 0x4c, 0xc1, 0x5e, 0x46, 0x8d,
		0x96, 0xff, 0xf3, 0x4d, 0x77, 0x69, 0x25, 0x81, 0xb1, 0x0e, 0x7d, 0x25, 0xef, 0x07, 0x5d, 0x65,
		0x27, 0x58, 0xf5, 0x0e, 0x9a, 0xc4, 0xcf, 0x98, 0x48, 0x46, 0x63, 0x88, 0x05, 0x15, 0x18, 0xcf,
		0x93, 0xe1, 0x83, 0xf9, 0x10, 0xa4, 0xf5, 0x03, 0xfb, 0xeb, 0x65, 0x4f, 0x4b, 0x94, 0x24, 0xdb,
		0xad, 0xf6, 0x1d, 0x2d, 0x50, 0xf6, 0x0f, 0x8f, 0x02, 0xb4, 0xea, 0x0e, 0x7b, 0xc3, 0xb3, 0x98
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	n =
		0xb125fc054e1b9db3b98212f53840690607c110bf31e18871fdfa13046496a2e73b3204f33bf8350f841ba94f511cbb2f40587b147a820fd166213968e8fff9fa4be4718a672f4e9321455c56d5e4e09d4f8b2c690718bc46108de269857bb4145c86cc75a4bd55f972285e4054b9fd13927574e63690958177784b39b17083bdafdd3ab8d327dbb9da93fc5cf9375205566242bb30246254ddf04c526f9141006fbaffc268bd2fe9aaa19581bb1c19e77264b08670ff3fe2b543f47a7af95bbe94b99300889b8ff07b2a44d5e9e229e33133b58bc7d2b8eb92a3bb6c035f8891d3165284e9ced25d6ef19a8135d06ab889f7627318cb043c89d90667cb92d1318880107ed9b866b10fa9af2225a987827e866c981f0c4424740fa71697ba9933a91c0d1fe83efd8e7d6c8287de72811da7fb4fcbad42637f0df47482119a07af9cccc993537cefe7892054bc2ce20021e9e37f391ee57b66c40dac49a346a54e6416f4e40af67b7190d65f497febd7d54f148fbc4850cd7de200cbfab53d05fbn;
	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000147e73n;
	message = new Uint8Array([
		0x64, 0x3e, 0x40, 0xf3, 0x63, 0x6d, 0x70, 0x6e, 0x13, 0x37, 0xbc, 0xce, 0x68, 0x18, 0xc1, 0x0a,
		0x10, 0x4f, 0xcf, 0x06, 0xed, 0x87, 0xf8, 0x59, 0xc8, 0xb6, 0x67, 0x53, 0x44, 0x46, 0xf4, 0x3f,
		0x10, 0x73, 0xf5, 0xe5, 0x61, 0xf4, 0x56, 0x53, 0xa0, 0xdd, 0xec, 0xdd, 0x5f, 0xc4, 0x06, 0x63,
		0x92, 0x22, 0x45, 0xd2, 0xfc, 0xfd, 0xae, 0xed, 0xe7, 0xc4, 0xfe, 0x4e, 0x18, 0x7b, 0x3d, 0xa7,
		0x02, 0x17, 0x96, 0x4e, 0x3a, 0x2c, 0x66, 0xf9, 0x2b, 0xc5, 0x93, 0xc6, 0x0b, 0x93, 0x1f, 0x7e,
		0x0e, 0x4b, 0xfd, 0x1a, 0xd9, 0x49, 0x23, 0x86, 0x39, 0x79, 0xe0, 0xa6, 0x15, 0x77, 0x70, 0x97,
		0xa1, 0xf5, 0xce, 0x37, 0xd5, 0x5e, 0xc9, 0xe7, 0x1e, 0xb8, 0x5a, 0x8f, 0x53, 0xcf, 0x35, 0xe3,
		0xea, 0x90, 0x9e, 0xe5, 0x6c, 0xb3, 0x7e, 0xab, 0x26, 0x9d, 0xb6, 0x63, 0x22, 0x84, 0xb3, 0x94
	]);
	signature = new Uint8Array([
		0x4b, 0x12, 0x64, 0x45, 0x9b, 0x5d, 0x40, 0x66, 0x37, 0x0a, 0x09, 0xc8, 0xe2, 0x04, 0x79, 0x11,
		0xd5, 0x42, 0xe8, 0x00, 0xc0, 0xff, 0xc3, 0x27, 0x6b, 0xb2, 0xd8, 0x8c, 0x74, 0xcd, 0x16, 0x59,
		0x1c, 0x0c, 0x1c, 0x85, 0xac, 0x44, 0xe0, 0x8c, 0x74, 0x84, 0x9c, 0x2d, 0x8f, 0xc2, 0x87, 0xf5,
		0xe4, 0xc3, 0x3e, 0xbc, 0x7b, 0xf7, 0x81, 0xfa, 0x0e, 0x89, 0xb4, 0xd7, 0xad, 0x8e, 0x0a, 0x0e,
		0x4e, 0x45, 0x0c, 0x02, 0xe4, 0x8c, 0xea, 0x82, 0x6f, 0x19, 0xa9, 0x6a, 0x98, 0x73, 0x40, 0x7d,
		0x13, 0x13, 0x75, 0xe9, 0x9f, 0xa2, 0xad, 0x74, 0x4d, 0xdb, 0x39, 0x72, 0xf3, 0xef, 0x5e, 0x3a,
		0x5b, 0xc7, 0xa6, 0xdc, 0x87, 0x01, 0xc9, 0x38, 0x21, 0xbf, 0xb3, 0x1a, 0xdc, 0xa2, 0xe6, 0xcc,
		0x8f, 0x9f, 0xd3, 0x75, 0x29, 0x0b, 0x99, 0x1e, 0x55, 0x19, 0xef, 0xba, 0x5f, 0xca, 0xee, 0xc5,
		0xee, 0xa2, 0x4b, 0x67, 0x1a, 0x6c, 0x23, 0xb6, 0xae, 0x4e, 0x20, 0x3c, 0x0d, 0x0d, 0x27, 0x55,
		0x39, 0x46, 0xd1, 0xb2, 0xfe, 0x55, 0xb4, 0x3f, 0xba, 0x5d, 0x32, 0x1f, 0x0d, 0xdc, 0x07, 0xec,
		0x9c, 0xf7, 0x2a, 0xa8, 0x63, 0x3f, 0x8f, 0x66, 0x64, 0x28, 0xa6, 0x37, 0xfb, 0x2b, 0x10, 0xe7,
		0xfe, 0x9b, 0xb8, 0x1f, 0x24, 0xc5, 0xb5, 0x75, 0x00, 0x36, 0xd6, 0x89, 0x8d, 0x18, 0xeb, 0xc3,
		0x58, 0xa6, 0x38, 0x03, 0xec, 0x2b, 0x67, 0xf5, 0x16, 0xb3, 0x63, 0x21, 0xb3, 0x43, 0xf9, 0x60,
		0xa1, 0xb8, 0xdb, 0x94, 0x3a, 0xc0, 0x44, 0x0c, 0x00, 0x63, 0x91, 0xdd, 0x64, 0xe0, 0x9f, 0x6b,
		0xc3, 0xc1, 0xd2, 0xe2, 0xe2, 0xcb, 0xa7, 0x81, 0xa1, 0x61, 0xf0, 0xaa, 0xd3, 0x41, 0x5a, 0x5b,
		0x03, 0xad, 0xdf, 0x63, 0x70, 0x60, 0xcf, 0x02, 0x11, 0xa0, 0x20, 0x94, 0xa1, 0xf7, 0xb0, 0x7d,
		0x44, 0x3a, 0x7e, 0xc9, 0x58, 0xab, 0xfe, 0x74, 0x43, 0x63, 0x30, 0xa2, 0xa8, 0xc7, 0xc7, 0xec,
		0x86, 0xf9, 0x1b, 0xff, 0xa9, 0xc3, 0x5e, 0x1e, 0x8d, 0x36, 0x83, 0x30, 0x7e, 0x33, 0xf2, 0x26,
		0xf9, 0x64, 0x5e, 0xa6, 0x6a, 0xb5, 0x9e, 0xce, 0x99, 0xa0, 0x49, 0x66, 0x98, 0xec, 0xb8, 0x92,
		0x6e, 0x47, 0x72, 0xb3, 0x07, 0x11, 0x0f, 0x64, 0xf8, 0xfc, 0x02, 0xba, 0x70, 0x76, 0xd2, 0x88,
		0xd4, 0xfc, 0x14, 0x81, 0x25, 0x9c, 0xcb, 0xb7, 0xeb, 0x35, 0xaf, 0xce, 0x02, 0x69, 0xf2, 0x79,
		0xf6, 0x84, 0x33, 0x01, 0x76, 0x22, 0x13, 0x0f, 0x62, 0xe9, 0x18, 0x51, 0xd1, 0x4b, 0xb7, 0xe6,
		0xbb, 0x64, 0x8c, 0x00, 0xbe, 0x48, 0x5f, 0xea, 0x37, 0xbc, 0xe5, 0x5e, 0xd7, 0x85, 0x75, 0xfe,
		0x12, 0xac, 0x31, 0x37, 0xdf, 0x34, 0x72, 0x2c, 0x0f, 0x2e, 0x99, 0x26, 0x28, 0xc5, 0x25, 0xa1
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xe73n;
	message = new Uint8Array([
		0xd5, 0x58, 0x69, 0xd6, 0x62, 0x39, 0x71, 0xfa, 0x7c, 0x90, 0xb5, 0x97, 0xb4, 0x03, 0x54, 0x19,
		0x51, 0x06, 0xfc, 0x48, 0x8a, 0x46, 0xbb, 0xcd, 0xf8, 0x48, 0x12, 0xf1, 0x4a, 0x4d, 0x4c, 0xa9,
		0x3b, 0x7a, 0x0d, 0xd0, 0xc1, 0x35, 0x2e, 0xb3, 0x87, 0xd2, 0xc8, 0xd2, 0x9e, 0x6f, 0x8f, 0xe5,
		0x70, 0x1c, 0x62, 0x1e, 0xf5, 0x40, 0x20, 0xae, 0x29, 0x38, 0xbc, 0x8a, 0xbd, 0x40, 0x94, 0x6f,
		0x0c, 0x97, 0xfe, 0x23, 0x52, 0xde, 0x24, 0xff, 0x18, 0xc1, 0x13, 0xaa, 0xf3, 0xda, 0x0e, 0x27,
		0x6e, 0xd2, 0x28, 0x12, 0x45, 0xca, 0x12, 0x26, 0xd4, 0xf9, 0x31, 0x03, 0xce, 0x96, 0xf3, 0x2e,
		0x32, 0xf8, 0x64, 0x5a, 0x7b, 0xfc, 0xfc, 0xe6, 0x18, 0xa7, 0xbb, 0xa6, 0x1b, 0x0c, 0x79, 0xe6,
		0x35, 0x70, 0x77, 0xac, 0xe2, 0xad, 0x39, 0x3e, 0xe1, 0xd4, 0x98, 0xe4, 0xe7, 0x16, 0x13, 0xef
	]);
	signature = new Uint8Array([
		0x9c, 0x2d, 0x84, 0x6e, 0xac, 0xd7, 0x5c, 0x81, 0xb7, 0xca, 0xdb, 0xbb, 0x06, 0x67, 0xf5, 0x8e,
		0xc2, 0x15, 0x8c, 0x64, 0xdd, 0xbb, 0xc2, 0xaf, 0x07, 0x80, 0x82, 0xae, 0xa4, 0x04, 0x7e, 0x30,
		0xa5, 0x9e, 0x74, 0xc3, 0xb5, 0xa5, 0x8b, 0xe9, 0x55, 0x32, 0x53, 0xa7, 0xd8, 0xbd, 0x4e, 0x52,
		0x7a, 0x0d, 0xaa, 0xc1, 0xbf, 0x03, 0xf3, 0xbf, 0x7c, 0xe5, 0xcd, 0x8d, 0x20, 0x44, 0x3e, 0xee,
		0x2e, 0xe8, 0x9a, 0x78, 0xc0, 0x69, 0x2c, 0x08, 0xe3, 0xc4, 0x52, 0xaa, 0x48, 0xb5, 0xaa, 0x76,
		0xb3, 0x1e, 0x00, 0x51, 0x8e, 0x43, 0x5f, 0xe8, 0xe7, 0x85, 0x82, 0x29, 0x89, 0x1e, 0xa0, 0xc1,
		0x65, 0x29, 0xab, 0x09, 0xe3, 0x80, 0x1b, 0x07, 0xf3, 0xff, 0xbb, 0xc5, 0x4b, 0xd8, 0x21, 0x71,
		0x4e, 0xe9, 0x07, 0x88, 0xd6, 0x1f, 0x60, 0xa8, 0x19, 0xd0, 0x0f, 0xf4, 0x09, 0x14, 0xe7, 0xaa,
		0xdc, 0xc5, 0x96, 0xba, 0xe3, 0x02, 0x53, 0xf4, 0x95, 0xad, 0xf4, 0x9d, 0xdf, 0xec, 0x45, 0x32,
		0xb8, 0x24, 0xe8, 0x86, 0x6e, 0x39, 0x40, 0x6c, 0x00, 0x21, 0x91, 0x4f, 0x26, 0x7e, 0x42, 0x4f,
		0xfc, 0x58, 0x94, 0x40, 0xbd, 0x84, 0x7b, 0xae, 0xbf, 0x34, 0x66, 0x08, 0x97, 0x8b, 0xab, 0x8a,
		0xb4, 0x79, 0x51, 0x99, 0xec, 0x75, 0x5a, 0xc6, 0x15, 0x1b, 0xf9, 0x46, 0x6c, 0x5b, 0x08, 0x58,
		0x12, 0xee, 0xda, 0x9f, 0x16, 0xb4, 0xdc, 0x22, 0xfe, 0xf2, 0x90, 0x82, 0x31, 0xbf, 0xc3, 0x12,
		0x11, 0x29, 0x33, 0x74, 0xce, 0x6f, 0x7d, 0x68, 0x19, 0x59, 0x45, 0x5c, 0x4c, 0xf0, 0xb6, 0x66,
		0x08, 0x95, 0xdc, 0x12, 0x8a, 0x5b, 0xdc, 0x84, 0x45, 0xa0, 0x81, 0x1f, 0x2e, 0x37, 0x21, 0x23,
		0xe5, 0xa2, 0x1f, 0xc0, 0x63, 0x8d, 0xa5, 0xf2, 0x6a, 0xe2, 0x70, 0x93, 0x0d, 0x2e, 0x09, 0x6c,
		0x6a, 0xa2, 0x17, 0x8a, 0x4d, 0x84, 0x04, 0x0e, 0x3d, 0xe1, 0x95, 0xcd, 0xbc, 0xd6, 0x94, 0x0c,
		0xba, 0xc0, 0xdf, 0x96, 0xae, 0x27, 0x3a, 0x23, 0x2a, 0x4c, 0x5a, 0x3f, 0xc2, 0xa2, 0xbb, 0x7e,
		0x7b, 0x12, 0xe9, 0xc4, 0x9d, 0x95, 0xea, 0x24, 0x58, 0xcc, 0x7c, 0xf2, 0x3c, 0xea, 0xa2, 0xc8,
		0xce, 0x42, 0x33, 0x27, 0xde, 0x1f, 0xfa, 0xf6, 0xea, 0x64, 0x13, 0xa8, 0x84, 0x33, 0x16, 0x41,
		0x8c, 0x2a, 0xe7, 0x14, 0xfc, 0xd0, 0x7f, 0x75, 0xc0, 0xe5, 0x57, 0xc7, 0x12, 0x29, 0xc1, 0x37,
		0xe0, 0x16, 0x0e, 0xba, 0x1c, 0x29, 0xf2, 0x09, 0x82, 0x45, 0xa8, 0x62, 0x3a, 0xb1, 0xe0, 0x56,
		0x12, 0x48, 0x5d, 0x07, 0x64, 0x44, 0x8b, 0x21, 0x49, 0xba, 0x19, 0x31, 0x51, 0x3d, 0xd3, 0x1b,
		0x7c, 0xee, 0xa8, 0x05, 0x49, 0xc2, 0x6e, 0xf1, 0x66, 0xd0, 0xe3, 0xae, 0xec, 0xf7, 0xbf, 0x61
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(true);

	e =
		0xe73n;
	message = new Uint8Array([
		0xdc, 0xf6, 0x45, 0xe2, 0x20, 0x1c, 0x31, 0x44, 0xcc, 0xde, 0xd7, 0xcd, 0xf8, 0x43, 0x32, 0x64,
		0x81, 0xff, 0x31, 0x05, 0x01, 0x9a, 0x53, 0x08, 0xfd, 0xcf, 0x74, 0xa6, 0x60, 0x33, 0xe7, 0xb9,
		0x28, 0x17, 0xc4, 0xc3, 0x60, 0xae, 0x83, 0x32, 0x4e, 0x73, 0xca, 0xe2, 0xed, 0xc5, 0x84, 0xe4,
		0x9e, 0xd4, 0x33, 0x7e, 0x1a, 0xc1, 0x87, 0x72, 0xab, 0x01, 0x2f, 0x83, 0x9c, 0x03, 0xef, 0x36,
		0xed, 0x12, 0xf3, 0xd6, 0x4c, 0x7c, 0x63, 0xba, 0x41, 0xf4, 0x37, 0xcb, 0xa9, 0x35, 0x4d, 0x40,
		0x65, 0xe8, 0xb8, 0xac, 0x53, 0xc8, 0x5c, 0x3b, 0x7d, 0x04, 0xb8, 0x38, 0x91, 0xe4, 0x02, 0xd3,
		0x92, 0xb0, 0x79, 0x22, 0xcc, 0xce, 0xf7, 0x65, 0x0d, 0x2a, 0xc5, 0x8e, 0x12, 0xdb, 0xb4, 0x01,
		0x40, 0x03, 0x69, 0x98, 0x95, 0xf6, 0xf9, 0xea, 0xdd, 0x9f, 0xb6, 0xcd, 0x29, 0x20, 0x48, 0x19
	]);
	signature = new Uint8Array([
		0x0e, 0x7a, 0x23, 0x8a, 0x1e, 0xeb, 0x14, 0xed, 0x0a, 0xee, 0xf7, 0x4b, 0xc5, 0x8f, 0xee, 0xd3,
		0x0a, 0xfa, 0xab, 0xd4, 0x66, 0xb1, 0x3d, 0x91, 0xb7, 0x22, 0x83, 0xa6, 0x94, 0xb7, 0x85, 0xd9,
		0xa3, 0x15, 0x52, 0xb6, 0x02, 0x17, 0xd9, 0x72, 0x11, 0x97, 0x40, 0x93, 0x18, 0x09, 0x73, 0x35,
		0x96, 0x1d, 0x23, 0x4c, 0x9c, 0xb6, 0xa8, 0x6b, 0xdc, 0xb7, 0x2d, 0x6d, 0xa2, 0x19, 0x51, 0xc7,
		0x04, 0x61, 0x85, 0x89, 0x07, 0x33, 0x6f, 0x52, 0xe8, 0x2e, 0x7d, 0x44, 0x07, 0x49, 0x80, 0x37,
		0x3a, 0x5b, 0xac, 0xd0, 0x87, 0x68, 0xab, 0x96, 0x65, 0x62, 0x4c, 0x8d, 0xf9, 0xf0, 0x93, 0x63,
		0xda, 0xa8, 0x23, 0x94, 0x8b, 0x4b, 0x68, 0x87, 0xa6, 0x9a, 0xb7, 0xeb, 0x15, 0xd4, 0xaf, 0xcf,
		0xfa, 0xf8, 0xa1, 0x49, 0x9a, 0xb1, 0x2d, 0xe7, 0x4f, 0xab, 0xbc, 0x7c, 0x93, 0xec, 0x60, 0xf6,
		0x6b, 0x78, 0x3d, 0x83, 0x95, 0xfd, 0xf9, 0x5f, 0xc3, 0xb4, 0x17, 0x22, 0x28, 0x82, 0xc9, 0x1b,
		0x40, 0xd2, 0x49, 0x16, 0x5f, 0x5b, 0x60, 0xb2, 0x9d, 0xa2, 0x32, 0x0d, 0x2c, 0xc3, 0xaf, 0x8a,
		0x1c, 0x14, 0x8a, 0xf3, 0x34, 0xc4, 0x04, 0xd9, 0xfc, 0x24, 0x80, 0x34, 0x88, 0x8f, 0xcd, 0xe6,
		0xac, 0x99, 0x41, 0x19, 0x95, 0xf6, 0xee, 0x8a, 0x14, 0x79, 0xde, 0xf7, 0x85, 0x73, 0x07, 0xb0,
		0xb4, 0x04, 0x98, 0xa5, 0x6e, 0x64, 0x92, 0x9c, 0x81, 0xd1, 0x4a, 0x7a, 0x91, 0x47, 0x79, 0x35,
		0xa3, 0x73, 0x11, 0xe3, 0x06, 0x00, 0xd4, 0x18, 0xdc, 0x07, 0xd6, 0xaf, 0x4c, 0xd2, 0x00, 0xae,
		0x88, 0xd5, 0xba, 0x69, 0xb2, 0xe9, 0x6b, 0xcf, 0x99, 0x3d, 0x10, 0x5a, 0x18, 0xa1, 0xf7, 0xe8,
		0xa5, 0x6b, 0x37, 0x29, 0x61, 0xeb, 0xd7, 0x29, 0xa7, 0x6c, 0x15, 0xe4, 0x29, 0x7a, 0xe4, 0xbc,
		0xdb, 0x5e, 0xf2, 0xe7, 0x24, 0x2e, 0x30, 0xab, 0x9d, 0xc1, 0x34, 0x42, 0x44, 0x03, 0x10, 0xde,
		0x6b, 0xdc, 0xa4, 0x8b, 0x98, 0xd6, 0x7b, 0xbb, 0x2a, 0xb0, 0x78, 0x22, 0xb3, 0xa9, 0xd5, 0x34,
		0x5b, 0x45, 0x09, 0xbb, 0x3a, 0x82, 0xc3, 0x87, 0xf3, 0x54, 0xf4, 0xcb, 0x19, 0xbf, 0xda, 0x50,
		0xcb, 0x88, 0x14, 0x9f, 0x0c, 0xf4, 0xd8, 0xa6, 0x68, 0x45, 0x83, 0x09, 0x67, 0x6c, 0x4c, 0x7a,
		0x1a, 0xe9, 0x50, 0xef, 0x5a, 0x58, 0x30, 0xb4, 0xc1, 0xd0, 0x59, 0x2c, 0xcc, 0x87, 0x5a, 0x46,
		0x82, 0x8e, 0x61, 0x76, 0x08, 0x02, 0x3f, 0x1d, 0xb2, 0x49, 0xe9, 0xcc, 0x13, 0xe8, 0xc0, 0xa2,
		0x8b, 0x03, 0x95, 0x46, 0x5e, 0x58, 0x70, 0xb9, 0x6d, 0x68, 0xef, 0x2e, 0x25, 0x43, 0x93, 0xb0,
		0x4b, 0xfe, 0xa2, 0x34, 0xea, 0x3f, 0xa4, 0x6c, 0x6d, 0x53, 0xd3, 0xc5, 0xd5, 0x16, 0x40, 0xd1
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xe73n;
	message = new Uint8Array([
		0xf5, 0xe7, 0x01, 0x0e, 0x48, 0x29, 0xc8, 0x55, 0xdd, 0x6c, 0x3c, 0x84, 0xf5, 0x7a, 0x50, 0xcf,
		0xbe, 0x5b, 0x3c, 0x9f, 0xd4, 0xc9, 0x22, 0x9e, 0x07, 0xe4, 0xf1, 0x0d, 0x5f, 0x27, 0x8a, 0x5e,
		0x5d, 0x9b, 0x21, 0xff, 0x84, 0x4a, 0xe6, 0x74, 0x18, 0xf7, 0xe5, 0xa8, 0x26, 0x0c, 0x2b, 0x85,
		0xc4, 0xd4, 0x2b, 0xc2, 0x9a, 0xea, 0x60, 0xfc, 0xa1, 0xf2, 0x33, 0x09, 0x2b, 0x86, 0x1e, 0x89,
		0x24, 0x73, 0x12, 0xbd, 0x97, 0x26, 0x16, 0x9d, 0x73, 0x61, 0x32, 0x24, 0x90, 0x33, 0x8b, 0xef,
		0xed, 0x26, 0xcf, 0x06, 0x3c, 0xba, 0xd3, 0xfa, 0xa0, 0x12, 0x7b, 0x30, 0xb5, 0xee, 0xdb, 0x7c,
		0xd1, 0xd9, 0x9b, 0xf1, 0x89, 0xa4, 0xa0, 0xf8, 0x77, 0x12, 0xe8, 0xa0, 0x3b, 0xd5, 0xb6, 0x35,
		0xc0, 0xb9, 0xf0, 0x14, 0xc1, 0x20, 0xc5, 0xbd, 0x8b, 0xae, 0x92, 0x2a, 0x04, 0x45, 0x07, 0x60
	]);
	signature = new Uint8Array([
		0x5f, 0x23, 0x1b, 0x5b, 0x8e, 0x58, 0x04, 0x69, 0x8a, 0xc2, 0x93, 0x1b, 0x61, 0x2c, 0x70, 0x87,
		0x46, 0x2f, 0x29, 0x65, 0x02, 0xf7, 0xcf, 0xb9, 0x5d, 0x85, 0x47, 0xc8, 0x13, 0x00, 0x4d, 0xdc,
		0x1c, 0x01, 0xde, 0x04, 0xab, 0x90, 0x0a, 0x26, 0x06, 0xdb, 0x31, 0xf9, 0x8b, 0xad, 0x9d, 0x43,
		0xd6, 0xce, 0x85, 0x8d, 0x74, 0x13, 0xf6, 0xca, 0x48, 0xdf, 0x12, 0x14, 0xc3, 0x48, 0x72, 0x55,
		0x07, 0xd8, 0x6b, 0x19, 0x31, 0x4a, 0xad, 0x2b, 0xe7, 0x54, 0xa9, 0x1b, 0xa5, 0x51, 0xe1, 0x56,
		0x70, 0x7a, 0x99, 0x1e, 0x93, 0xf4, 0xe4, 0x9e, 0x66, 0xfc, 0x82, 0xad, 0x34, 0xd1, 0xf3, 0x6c,
		0xea, 0xba, 0x9b, 0x78, 0x1d, 0xf4, 0xb2, 0x77, 0xf6, 0x2f, 0x50, 0x72, 0x65, 0x2a, 0xe6, 0x0a,
		0x65, 0x25, 0xf6, 0xb2, 0x8a, 0x77, 0xe1, 0x44, 0xed, 0xcd, 0x4f, 0x59, 0x6d, 0xff, 0xc9, 0xcf,
		0xc6, 0xab, 0x23, 0x5a, 0xc4, 0x06, 0xc7, 0xd5, 0xfe, 0x3d, 0x36, 0x4e, 0x6c, 0x4d, 0xf5, 0xe2,
		0xe5, 0x0c, 0x0e, 0x99, 0x31, 0xf3, 0xab, 0x47, 0xfb, 0x41, 0xbb, 0xd0, 0xae, 0x19, 0x6f, 0x93,
		0x81, 0x68, 0xf5, 0x2f, 0x3c, 0xa4, 0xc6, 0x29, 0x09, 0x68, 0x30, 0x60, 0x44, 0xc2, 0x36, 0x79,
		0x29, 0x53, 0xa2, 0xe8, 0x4e, 0x2a, 0x27, 0x38, 0xf2, 0x96, 0xc0, 0x32, 0xd7, 0xa0, 0x69, 0x98,
		0x49, 0x17, 0x7c, 0xc6, 0x49, 0x5b, 0x27, 0x25, 0x88, 0x20, 0xf8, 0x47, 0x6c, 0x4b, 0x09, 0xe8,
		0x5e, 0x30, 0x51, 0x5b, 0xb9, 0xbf, 0xb2, 0xee, 0xa6, 0xbb, 0x04, 0xd9, 0x0f, 0x65, 0x61, 0xf5,
		0xbc, 0x51, 0x23, 0xdf, 0x8e, 0x6d, 0x27, 0x6f, 0xea, 0xe3, 0xf6, 0x63, 0x67, 0xc4, 0x48, 0x1b,
		0x1f, 0x72, 0xb3, 0x8f, 0x51, 0x52, 0x99, 0x72, 0xd9, 0x25, 0x9d, 0xbb, 0xdb, 0xb2, 0xf0, 0x4b,
		0x02, 0x8d, 0x43, 0x95, 0x20, 0xc7, 0x2a, 0xbd, 0xa8, 0xf0, 0x4d, 0x7b, 0x27, 0x78, 0x31, 0x59,
		0x1d, 0x2d, 0x6b, 0x63, 0x98, 0xfe, 0x15, 0xfc, 0x5c, 0xfd, 0x0b, 0x85, 0x4f, 0x4e, 0xff, 0xa0,
		0xa7, 0x7e, 0x39, 0xc1, 0xe5, 0x96, 0xa4, 0x66, 0xe2, 0xb1, 0x84, 0xc4, 0x99, 0xe2, 0xb1, 0x5a,
		0xac, 0xc5, 0xf6, 0xbd, 0x4c, 0x74, 0xa5, 0x8e, 0x34, 0x6b, 0xf6, 0xf5, 0xae, 0xd5, 0x34, 0x3c,
		0x30, 0x0c, 0x8f, 0x71, 0x54, 0x5d, 0x95, 0xd2, 0x27, 0x6d, 0x54, 0xde, 0x2b, 0x6e, 0x23, 0xae,
		0xb8, 0xf5, 0x24, 0x7f, 0xa6, 0x71, 0x3e, 0x0e, 0x52, 0x8e, 0x35, 0xce, 0xa8, 0x21, 0x48, 0xac,
		0x4c, 0x72, 0xa6, 0x54, 0x38, 0x0d, 0xff, 0x36, 0xe4, 0xff, 0x0f, 0x2b, 0x0a, 0x14, 0xdc, 0x27,
		0x1e, 0x87, 0xfa, 0x71, 0x1e, 0x91, 0x58, 0x55, 0xef, 0xed, 0x24, 0xee, 0xc1, 0x57, 0x00, 0xfb
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xea299n;
	message = new Uint8Array([
		0x96, 0x1d, 0x11, 0xd0, 0x2f, 0xea, 0x21, 0x79, 0xea, 0xd8, 0x3f, 0xa5, 0x16, 0x84, 0xe5, 0xf4,
		0xa2, 0xb8, 0x04, 0xa8, 0x98, 0xe2, 0xa3, 0xb6, 0xe8, 0xc4, 0xc9, 0x1c, 0x67, 0x6c, 0x9e, 0x76,
		0x17, 0x67, 0xcd, 0xcc, 0xa9, 0x32, 0x2c, 0xaf, 0x40, 0xf1, 0x9f, 0x84, 0x78, 0x63, 0x3a, 0x1f,
		0xa7, 0x16, 0xa5, 0x94, 0x63, 0xd7, 0xc5, 0x49, 0x44, 0x6d, 0x98, 0x50, 0xea, 0x87, 0x61, 0xf4,
		0x42, 0xf2, 0x06, 0x92, 0x06, 0x0f, 0xb6, 0xab, 0x83, 0x85, 0xce, 0x36, 0x9f, 0x33, 0xfe, 0x3b,
		0x1a, 0x69, 0xa8, 0x9d, 0x14, 0x57, 0x88, 0x38, 0xd0, 0xc5, 0x9a, 0x2b, 0xb7, 0x05, 0x38, 0x77,
		0xa0, 0x26, 0x83, 0xca, 0x4e, 0x6b, 0x05, 0x95, 0x3a, 0xfb, 0x95, 0x64, 0x93, 0xda, 0x7a, 0x6f,
		0x84, 0x18, 0xd3, 0x6c, 0xb5, 0x49, 0x36, 0xa8, 0x14, 0x35, 0x97, 0x56, 0xd5, 0xd0, 0x6b, 0x27
	]);
	signature = new Uint8Array([
		0x28, 0xe4, 0xee, 0x25, 0x83, 0xd3, 0x59, 0xcc, 0x91, 0xcf, 0x56, 0xaa, 0xcc, 0x9a, 0x9f, 0xc5,
		0x60, 0xee, 0x09, 0x84, 0x2f, 0xc4, 0xfd, 0x66, 0x43, 0x3f, 0x38, 0x3b, 0x67, 0xf4, 0x35, 0x61,
		0x67, 0xc7, 0x99, 0xe6, 0x44, 0x6e, 0xc0, 0x93, 0x96, 0x91, 0xa7, 0x89, 0x47, 0xc0, 0x72, 0xc1,
		0xb0, 0x71, 0xab, 0x15, 0xc4, 0xc4, 0xde, 0x6d, 0x12, 0x45, 0x50, 0x13, 0x9d, 0x6b, 0x61, 0xc0,
		0xc8, 0x37, 0x0b, 0x72, 0x5a, 0x9a, 0x06, 0x70, 0x45, 0x92, 0x97, 0x5d, 0x57, 0xfd, 0x3d, 0x8b,
		0x3d, 0x18, 0x67, 0xd5, 0xd6, 0x9a, 0x0b, 0x55, 0x80, 0x31, 0x6f, 0x21, 0x1f, 0x10, 0xec, 0x4b,
		0xab, 0x68, 0xa2, 0xdf, 0xd9, 0x9c, 0xfc, 0x31, 0xcd, 0x3c, 0x5c, 0x2b, 0x87, 0xea, 0xc5, 0x4e,
		0xc4, 0x82, 0xa6, 0x0a, 0xd2, 0xb0, 0xcb, 0x1f, 0xe6, 0x26, 0x76, 0xe5, 0x40, 0x54, 0x59, 0xa6,
		0xc0, 0x10, 0xc1, 0xb9, 0xe8, 0x1c, 0xab, 0xa0, 0xa8, 0x20, 0x43, 0x42, 0x3a, 0xdc, 0xa1, 0xcc,
		0xe0, 0x03, 0x7e, 0x44, 0x45, 0x72, 0xb0, 0x92, 0xc5, 0xeb, 0x06, 0x0b, 0x02, 0x09, 0x37, 0x94,
		0x8a, 0xc7, 0x98, 0xb4, 0x1c, 0x55, 0xa1, 0x83, 0xaf, 0x7f, 0xf1, 0xc1, 0x18, 0xed, 0x77, 0x8a,
		0x14, 0x0a, 0xcf, 0x7f, 0x17, 0x89, 0x4e, 0xc6, 0xd3, 0x9d, 0xe2, 0x28, 0x71, 0xee, 0x0b, 0xf2,
		0xfc, 0x97, 0x07, 0x1a, 0x96, 0x62, 0x66, 0x3e, 0x62, 0x60, 0x9b, 0x18, 0x4b, 0x9e, 0x78, 0x84,
		0x1f, 0x0d, 0xf3, 0x49, 0x63, 0xb2, 0x28, 0xb4, 0xb1, 0x3e, 0x5a, 0x05, 0x9e, 0xd1, 0xf1, 0x13,
		0xf1, 0x4a, 0xb6, 0x5f, 0xb9, 0x5d, 0x79, 0xa9, 0x04, 0xf4, 0xd9, 0xc4, 0x7d, 0x61, 0x9a, 0x37,
		0xb2, 0x17, 0x0a, 0xb2, 0xd4, 0x1d, 0xaf, 0x64, 0xc3, 0x91, 0x17, 0xae, 0x5c, 0xfc, 0x94, 0xa7,
		0x9d, 0x05, 0x5b, 0x63, 0x48, 0x5c, 0x76, 0x81, 0xeb, 0x4a, 0xa4, 0xe3, 0xc0, 0x44, 0xe9, 0x8b,
		0x95, 0xfc, 0xde, 0xbb, 0x9b, 0xc2, 0x4c, 0x90, 0x76, 0x35, 0xc7, 0x73, 0x33, 0xac, 0xda, 0x3d,
		0x5c, 0x1f, 0xb9, 0xc7, 0x9e, 0xf9, 0x99, 0x10, 0xb8, 0x89, 0xa1, 0xc7, 0xee, 0xd7, 0x95, 0x3c,
		0x07, 0xae, 0x9d, 0x23, 0x4c, 0x3f, 0xa5, 0x3d, 0x62, 0x7b, 0x7f, 0xd8, 0x9b, 0x53, 0x21, 0xc2,
		0xe8, 0xc3, 0xf9, 0x03, 0x8f, 0xa8, 0x39, 0x10, 0x95, 0xdd, 0xaf, 0xf9, 0xb9, 0xca, 0x53, 0x3e,
		0x42, 0x55, 0x4c, 0x83, 0xab, 0xf0, 0x26, 0x97, 0x4a, 0x82, 0xc9, 0x5c, 0x6d, 0x55, 0xc8, 0x42,
		0xb2, 0xa3, 0x9d, 0xf9, 0xc5, 0xfa, 0xf5, 0x0d, 0x29, 0xfe, 0xf5, 0xd1, 0x48, 0x01, 0x7c, 0x42,
		0xbf, 0x41, 0xe7, 0xde, 0x20, 0x73, 0xdc, 0xd5, 0xd8, 0xa6, 0xf7, 0x02, 0x9a, 0x19, 0xdd, 0xdc
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xe73n;
	message = new Uint8Array([
		0x00, 0xd7, 0x6d, 0xc4, 0x29, 0xaf, 0x28, 0x10, 0x12, 0xcb, 0x92, 0xd5, 0xf7, 0xc2, 0xfa, 0xfc,
		0xaa, 0x73, 0xce, 0x04, 0x3f, 0xec, 0xfa, 0x01, 0x08, 0x8b, 0x70, 0xe5, 0xc4, 0x62, 0x08, 0xff,
		0x13, 0xe0, 0x8b, 0xc1, 0x2d, 0xae, 0x0a, 0xc6, 0xd4, 0xd8, 0x75, 0x14, 0x87, 0x2d, 0x69, 0x9e,
		0xf9, 0xe8, 0x48, 0x0d, 0xc1, 0x90, 0x8f, 0xbf, 0x53, 0x1c, 0x64, 0x10, 0x2f, 0x5b, 0x6f, 0xd9,
		0x58, 0x93, 0xeb, 0x37, 0x08, 0x69, 0xfd, 0x8e, 0xa2, 0x00, 0x44, 0xcd, 0xe8, 0x65, 0xb1, 0xf3,
		0x6e, 0x2b, 0x99, 0xd2, 0x4e, 0x52, 0x08, 0x12, 0x1e, 0x6e, 0x59, 0x7a, 0x1f, 0x04, 0x03, 0x6b,
		0xb7, 0x38, 0xb6, 0xad, 0x22, 0xa5, 0xa7, 0x6f, 0x64, 0x8d, 0x28, 0x88, 0x82, 0x32, 0x7b, 0x03,
		0xf1, 0x83, 0xe8, 0xdb, 0x4f, 0xfb, 0x0d, 0x03, 0x51, 0xc7, 0x76, 0xa9, 0xfd, 0x27, 0x6d, 0xbc
	]);
	signature = new Uint8Array([
		0x61, 0x96, 0x52, 0xbc, 0xc2, 0x2c, 0xac, 0x50, 0x46, 0xe8, 0xea, 0xc8, 0x69, 0x4e, 0x0c, 0xcd,
		0xa0, 0x0a, 0x7f, 0xf1, 0xaf, 0xba, 0xb0, 0x0e, 0xf5, 0xe9, 0x71, 0xa7, 0x00, 0x49, 0x9b, 0x64,
		0xea, 0xbe, 0x6f, 0x80, 0x10, 0x26, 0x87, 0x86, 0x1e, 0x7b, 0x84, 0x66, 0xca, 0x32, 0xea, 0xaa,
		0x87, 0xe9, 0xa0, 0xd1, 0x43, 0xf7, 0x5d, 0xd7, 0xfd, 0xe5, 0x0b, 0x01, 0x95, 0xa0, 0x35, 0xd4,
		0xdb, 0x44, 0x30, 0x45, 0x41, 0x6c, 0xaa, 0x3d, 0x51, 0x41, 0x0c, 0x66, 0x13, 0x7e, 0xcc, 0x63,
		0xe6, 0xd0, 0x56, 0x8f, 0x76, 0x76, 0x90, 0x45, 0xec, 0xd6, 0x6a, 0x35, 0x12, 0xb2, 0x46, 0xdf,
		0xd2, 0x96, 0x39, 0x7a, 0xa4, 0x16, 0x23, 0xf4, 0xff, 0x67, 0xa6, 0x7b, 0x42, 0xb9, 0xff, 0x69,
		0x2d, 0xd4, 0xb9, 0xe4, 0x59, 0x5a, 0xaf, 0xe2, 0xe7, 0x16, 0x6e, 0xb0, 0x2f, 0xb3, 0xd1, 0x3b,
		0xe0, 0xf2, 0x2f, 0x5b, 0x6c, 0x71, 0x6e, 0xe0, 0xbf, 0xfc, 0x8e, 0xc3, 0x56, 0x7e, 0x14, 0x77,
		0x5f, 0x98, 0xef, 0x1f, 0x0a, 0x6b, 0x96, 0xfe, 0x09, 0x2b, 0xe0, 0xa6, 0xd2, 0x43, 0xff, 0x66,
		0x80, 0x45, 0xd4, 0x2a, 0x72, 0x17, 0x3c, 0x70, 0x2f, 0xd0, 0xe1, 0x9c, 0x23, 0x09, 0x34, 0x97,
		0xcc, 0xee, 0x3e, 0xcd, 0x7c, 0x1f, 0x9a, 0xfc, 0x87, 0x69, 0x06, 0xb4, 0x98, 0xf8, 0x5c, 0x3b,
		0x3c, 0x0a, 0x88, 0xdd, 0x59, 0x88, 0xa9, 0xe6, 0x18, 0x6d, 0x3f, 0xe6, 0x35, 0xfd, 0x73, 0x13,
		0xbd, 0xe1, 0xae, 0xba, 0x87, 0x39, 0x01, 0xf1, 0x0f, 0x30, 0xcc, 0xc2, 0xd6, 0xf9, 0x1d, 0xca,
		0xf6, 0x4a, 0x6d, 0x9a, 0x95, 0x02, 0x8b, 0x12, 0x36, 0xe9, 0xb5, 0xaf, 0x24, 0x04, 0xf4, 0xc2,
		0x24, 0x38, 0x8e, 0xf3, 0x98, 0x01, 0xeb, 0x4b, 0x50, 0x90, 0x29, 0x25, 0x74, 0x1d, 0x3e, 0xe5,
		0x0a, 0x4d, 0x30, 0x9f, 0x92, 0x0f, 0x1e, 0x82, 0x3b, 0xeb, 0xac, 0x39, 0x31, 0x22, 0x43, 0xf6,
		0x6a, 0x3f, 0x06, 0x48, 0xdb, 0x64, 0x11, 0x61, 0x2e, 0x6c, 0x88, 0x1b, 0x4e, 0x44, 0x92, 0x0c,
		0x7f, 0x19, 0xd7, 0xfe, 0x59, 0x70, 0xe1, 0x50, 0x8f, 0x2d, 0x6c, 0xf6, 0x62, 0xd3, 0x13, 0x56,
		0x0a, 0x52, 0x19, 0x97, 0x3e, 0x66, 0xbc, 0x54, 0xbb, 0xdc, 0x7e, 0x05, 0xae, 0x3b, 0x46, 0xfa,
		0x7c, 0x70, 0xe5, 0xaf, 0x4d, 0x4e, 0x37, 0x9a, 0x34, 0xfb, 0x67, 0x94, 0xb7, 0xd8, 0x3c, 0x3e,
		0xda, 0xbf, 0x36, 0xa0, 0x80, 0xb3, 0x02, 0x0b, 0xec, 0xee, 0xee, 0xeb, 0x94, 0x8d, 0x36, 0xd1,
		0x57, 0xb3, 0xe2, 0xd2, 0x7e, 0x79, 0xf8, 0xa9, 0xb2, 0xdf, 0xd4, 0x13, 0x65, 0x5f, 0xb7, 0x1e,
		0x68, 0x08, 0x09, 0x24, 0xa7, 0xfe, 0x84, 0x01, 0x53, 0x8a, 0x3e, 0x90, 0xfb, 0x1c, 0xdd, 0x83
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	n =
		0x99a5c8d094a5f917034667a0408b7ecfcaacc3f9784444e21773c3461ec355f0d0f52a5db0568a71d388696788ef66ae7340c6b28dbf925fe83557986575f79cca69217221397ed5808a26f7e7e714c93235f914d45c4a9af4619b20f511ad644bd3412dfdf0ff717f7aac746f310bfa9a141ac3dbf01c1fc74febd197938419c262293505c35f402f9053ad13c51a5960ecde55ec829e953f941af733e58705913767e7a7200d1d09e7e7e2d269fa29a558bb16304b059f13f4ca560a8101fe3720b4a779ec126427326caa132a3d3611d7dbc50336fac789ec406b397e1e36d7daf9b624bf639c82b859288747690c730c980b2f5a239dd95ad5389a2ec90c5778604713710383ae55d4d28c06d4ac26f0d1231f1d6762c8e0d918118156bc637760daea184746b8dcf6f61db274a7ddceaa074937ababad4549b97ab992494a807208abd789823f5d75c4b994089c8072cfc254e0d8202fd896476e96ad9d309a0e8e7301282f07eb2ae8edefb7dbbe13b96e8b4024c6b84de0a05e150285n;
	e =
		0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008a649n;
	message = new Uint8Array([
		0x4d, 0x44, 0x66, 0x5e, 0x0e, 0x29, 0x87, 0xcf, 0x7d, 0xd1, 0xe9, 0xd6, 0x20, 0x01, 0x51, 0xf5,
		0x00, 0xea, 0x3b, 0x85, 0xa2, 0x4f, 0x72, 0xfb, 0x38, 0xe5, 0xdd, 0x69, 0x19, 0xff, 0x9c, 0x48,
		0x6f, 0x6a, 0x54, 0x74, 0x2f, 0x96, 0xc6, 0x78, 0x4f, 0xf7, 0xa7, 0x0c, 0x33, 0xab, 0xab, 0xdc,
		0x68, 0x5d, 0xe4, 0x8b, 0x94, 0x69, 0x4a, 0xf8, 0xad, 0x41, 0x9b, 0xc0, 0x6a, 0x0f, 0x65, 0x04,
		0xf7, 0x9c, 0x60, 0x6c, 0xed, 0x70, 0x02, 0x6b, 0x81, 0x3b, 0x4e, 0xc5, 0xfc, 0x73, 0xed, 0x4f,
		0x6b, 0x3f, 0x7f, 0xf6, 0x97, 0x94, 0x33, 0x03, 0x37, 0x9d, 0x95, 0x9e, 0x65, 0x61, 0xa8, 0x90,
		0x4f, 0xa0, 0x35, 0x4d, 0x2f, 0xfd, 0x62, 0x31, 0x7d, 0x63, 0x86, 0x0a, 0x62, 0xa1, 0x3c, 0xd7,
		0x71, 0x57, 0xb7, 0xcf, 0x92, 0x16, 0x55, 0xa5, 0x3e, 0xc3, 0x76, 0x0b, 0xf2, 0x3c, 0x8e, 0x75
	]);
	signature = new Uint8Array([
		0x4f, 0x48, 0xe5, 0x1a, 0x04, 0x1e, 0x40, 0xa0, 0x29, 0xd5, 0x86, 0xcb, 0x7a, 0xfd, 0x7e, 0xc1,
		0x10, 0x31, 0xf8, 0x6d, 0x7b, 0xee, 0x58, 0xfc, 0x13, 0xa9, 0x22, 0x7d, 0xd2, 0x09, 0xf1, 0xd7,
		0xbe, 0xcf, 0x32, 0x09, 0xcd, 0x43, 0x05, 0x5e, 0x93, 0x16, 0x5f, 0x04, 0xf2, 0x32, 0x76, 0xd4,
		0x6b, 0x0b, 0x64, 0x66, 0x9b, 0x88, 0xc2, 0xba, 0x54, 0xad, 0x6b, 0xcb, 0x5e, 0x9d, 0xa8, 0x18,
		0x10, 0x01, 0x4e, 0x14, 0x0e, 0xd0, 0xa1, 0x42, 0x34, 0xb1, 0xfc, 0x0f, 0xa4, 0xcf, 0xa4, 0xf2,
		0x58, 0xa7, 0xb5, 0xcf, 0x73, 0xa3, 0x36, 0x53, 0x4f, 0x37, 0x58, 0x0a, 0x38, 0x30, 0x87, 0x5f,
		0x31, 0x19, 0x09, 0x2e, 0x48, 0x54, 0xfa, 0x80, 0xd8, 0x78, 0x33, 0xf7, 0xe9, 0x62, 0x7a, 0xb5,
		0x1e, 0x05, 0x6a, 0x8d, 0xef, 0xf3, 0xa4, 0x51, 0xe8, 0xaa, 0xd7, 0x83, 0x35, 0x81, 0x6b, 0x53,
		0xae, 0x0d, 0x89, 0x9b, 0x06, 0x07, 0x40, 0x3b, 0xf0, 0x8e, 0x8c, 0x32, 0xe1, 0xcf, 0x0b, 0xaa,
		0x8f, 0xe0, 0xd7, 0x8d, 0x1b, 0x8d, 0x72, 0xf8, 0x5f, 0x17, 0xc1, 0xc5, 0xb8, 0x87, 0x0c, 0xec,
		0x49, 0x94, 0x97, 0xb4, 0x2d, 0xe9, 0x82, 0x40, 0x8f, 0xba, 0xdb, 0xe3, 0xb4, 0x5a, 0x13, 0xb4,
		0xb5, 0x37, 0x1c, 0xe2, 0xa4, 0xd9, 0x60, 0x0b, 0x7d, 0x14, 0x01, 0x16, 0x25, 0xcb, 0xe7, 0x3a,
		0x79, 0x31, 0x39, 0x54, 0xf4, 0xf3, 0xec, 0x0b, 0x3b, 0xf6, 0xdc, 0x94, 0x52, 0x97, 0x32, 0x5e,
		0x3a, 0xaf, 0x5b, 0xc8, 0x9a, 0x27, 0x67, 0x0f, 0x5b, 0x25, 0x36, 0xa5, 0x4c, 0xae, 0xa3, 0xbc,
		0x66, 0x41, 0xae, 0x62, 0x8a, 0x9a, 0x4d, 0xa6, 0x1d, 0xe7, 0x49, 0x66, 0x1a, 0x93, 0xb6, 0xae,
		0x68, 0x72, 0x2d, 0x10, 0xd7, 0x90, 0x2b, 0x39, 0x1f, 0x9e, 0x9e, 0xbf, 0x3a, 0xb9, 0xc1, 0x86,
		0x01, 0x7b, 0x52, 0xea, 0xc6, 0xfd, 0x44, 0x2a, 0x25, 0x6f, 0xe7, 0xc9, 0x50, 0x01, 0x65, 0xe3,
		0xc7, 0xa4, 0x02, 0xaa, 0x01, 0x74, 0xe6, 0xb6, 0xf3, 0x5e, 0x4e, 0x12, 0xe3, 0x5a, 0x9d, 0x42,
		0x9b, 0x21, 0xf6, 0xcc, 0x98, 0xeb, 0xa7, 0x3c, 0x80, 0xed, 0x8a, 0xc3, 0x3a, 0xcd, 0x79, 0x48,
		0x8e, 0x62, 0x0b, 0x27, 0x49, 0x23, 0xe7, 0x8c, 0xe5, 0xd9, 0x1a, 0x61, 0x96, 0xca, 0x59, 0x05,
		0x4f, 0xa7, 0x7c, 0xd6, 0x7e, 0x0d, 0x3f, 0xc0, 0x4d, 0x71, 0xb9, 0x4b, 0x0c, 0xda, 0x54, 0x78,
		0xf1, 0xb3, 0xd6, 0x91, 0x50, 0xf4, 0x09, 0x27, 0xc1, 0xab, 0x39, 0x20, 0x36, 0x58, 0x36, 0x09,
		0xd8, 0xef, 0xda, 0x3f, 0xe4, 0x86, 0x43, 0xef, 0x2f, 0x75, 0xf1, 0x16, 0x4e, 0xa7, 0xf2, 0x55,
		0x89, 0xb5, 0xbb, 0xb5, 0x60, 0xc9, 0xa0, 0x42, 0x40, 0x8f, 0x85, 0x94, 0x4c, 0xa0, 0x8f, 0x92
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xa649n;
	message = new Uint8Array([
		0x1a, 0xbc, 0xa8, 0xd8, 0x1c, 0xc9, 0x8a, 0x5d, 0x50, 0x20, 0xe9, 0x50, 0x80, 0xb5, 0xfc, 0xe5,
		0x9f, 0xfe, 0x70, 0xdc, 0xff, 0x54, 0x48, 0x02, 0xc4, 0x9d, 0xe7, 0xfa, 0x99, 0x28, 0x6b, 0x3d,
		0xa1, 0xd8, 0x3d, 0x60, 0xb0, 0x85, 0xe6, 0x96, 0xbc, 0x9f, 0x25, 0x75, 0x8e, 0x14, 0x3e, 0xfd,
		0xbd, 0x74, 0x94, 0xd6, 0xdd, 0x54, 0x7a, 0xd9, 0xf4, 0xf0, 0x47, 0xd2, 0x2d, 0x14, 0xa8, 0x84,
		0xd1, 0x3c, 0x3b, 0xee, 0x72, 0xfa, 0x59, 0xcd, 0x6a, 0x98, 0x33, 0x62, 0x84, 0xfe, 0x20, 0x75,
		0xf8, 0xd7, 0x35, 0x9a, 0x9d, 0xf0, 0x17, 0xb3, 0x5a, 0xe0, 0x0d, 0xb6, 0xdd, 0xee, 0x59, 0xb1,
		0x90, 0x2f, 0xc9, 0x0b, 0xc9, 0xef, 0x89, 0x0c, 0x42, 0x52, 0x3b, 0x9f, 0xc8, 0x3b, 0x49, 0x57,
		0x37, 0x6d, 0x7a, 0xb1, 0xa5, 0xf1, 0xc4, 0x99, 0xde, 0xb7, 0x62, 0x2f, 0x11, 0x80, 0x26, 0xca
	]);
	signature = new Uint8Array([
		0x85, 0xe1, 0x57, 0x65, 0xa4, 0x01, 0xc1, 0x0d, 0x86, 0xac, 0xf3, 0xa0, 0x5f, 0xab, 0x14, 0xe0,
		0x54, 0x87, 0xb7, 0x93, 0x56, 0x9a, 0xe6, 0x80, 0xf7, 0x7d, 0x20, 0xc2, 0x5b, 0x17, 0x63, 0xd1,
		0x84, 0x63, 0x4f, 0xa0, 0xb0, 0x1d, 0x97, 0x9d, 0xce, 0x9d, 0x80, 0x36, 0x70, 0xd7, 0xf9, 0xf6,
		0xad, 0xcd, 0x59, 0x47, 0x6f, 0xb1, 0xc8, 0xc3, 0xaa, 0xe5, 0x12, 0xf9, 0x4a, 0x9c, 0xcf, 0x6e,
		0x57, 0x3a, 0xee, 0x6a, 0x28, 0xc0, 0xdc, 0xfd, 0x2d, 0xae, 0x85, 0x22, 0x68, 0x5f, 0x03, 0xec,
		0xec, 0x8c, 0x04, 0x50, 0x36, 0xd1, 0xcb, 0x05, 0x4a, 0x08, 0x64, 0x54, 0xa2, 0x83, 0x26, 0xd5,
		0x31, 0x9b, 0xc7, 0x00, 0x4b, 0xc8, 0x7c, 0x75, 0x66, 0xa5, 0x68, 0x52, 0x55, 0x8f, 0x58, 0x3a,
		0x38, 0xa4, 0xe7, 0xe7, 0xbe, 0x79, 0x81, 0xdc, 0xf3, 0xec, 0x41, 0xc1, 0x23, 0x45, 0xf8, 0x45,
		0x40, 0x97, 0x92, 0xed, 0x87, 0xb3, 0xf1, 0xb8, 0xfc, 0x89, 0xc2, 0x88, 0xa2, 0x96, 0x8e, 0x73,
		0x27, 0x3a, 0x36, 0xf2, 0xb6, 0x72, 0x58, 0xfc, 0x67, 0xe8, 0x88, 0x60, 0x85, 0x66, 0xa2, 0x3a,
		0x6a, 0x56, 0x45, 0x32, 0x8f, 0x1e, 0xdd, 0x8c, 0x10, 0x59, 0x93, 0xb4, 0x86, 0xeb, 0x33, 0x35,
		0x23, 0x22, 0x12, 0xa1, 0xdc, 0xfd, 0x5d, 0xa4, 0x0f, 0xb3, 0x90, 0x2f, 0xd2, 0xcf, 0xa8, 0x6e,
		0x85, 0x88, 0xeb, 0x3c, 0x40, 0xdf, 0x8d, 0x9e, 0xdf, 0x3c, 0x41, 0x93, 0x4c, 0xe9, 0x1b, 0x50,
		0xc0, 0xd5, 0xca, 0x1a, 0x38, 0x40, 0xca, 0x40, 0xe3, 0xc8, 0x41, 0xb3, 0x95, 0x20, 0xcb, 0x5e,
		0x56, 0x54, 0xaf, 0x39, 0x61, 0xec, 0x94, 0x08, 0xd2, 0x2e, 0xdb, 0x34, 0x50, 0x27, 0xee, 0xa7,
		0x11, 0x9d, 0xd5, 0x52, 0x65, 0x63, 0x42, 0xe3, 0x16, 0xc6, 0x0c, 0x5f, 0x5d, 0xa0, 0x28, 0x30,
		0x8b, 0x03, 0x1b, 0xac, 0xc7, 0x4d, 0x1f, 0xdd, 0x69, 0x07, 0xbc, 0x69, 0x44, 0xfb, 0x85, 0x60,
		0x82, 0xcb, 0x14, 0xf1, 0x2c, 0xb5, 0x09, 0xca, 0x4e, 0xfb, 0x51, 0x6e, 0xd0, 0xc6, 0x08, 0x96,
		0x77, 0x1b, 0x47, 0x84, 0x42, 0x02, 0x69, 0x13, 0xe6, 0x1a, 0x32, 0x61, 0x1d, 0xde, 0x1a, 0x88,
		0x07, 0xf2, 0xe1, 0xcb, 0x76, 0xd0, 0xc0, 0xc6, 0x9c, 0x70, 0x5b, 0xeb, 0x8f, 0xe7, 0x13, 0xe8,
		0x48, 0xcc, 0x03, 0xb1, 0xef, 0x89, 0x65, 0x26, 0x7c, 0xfc, 0x3e, 0xbd, 0x43, 0xf0, 0x00, 0x1b,
		0x33, 0xb9, 0xe9, 0xad, 0x41, 0x8e, 0xe0, 0xd5, 0x92, 0xf1, 0x84, 0xd2, 0x02, 0x33, 0x1d, 0x4b,
		0x51, 0xa9, 0x6a, 0x17, 0xb0, 0x14, 0xd4, 0x71, 0x38, 0xf2, 0x8c, 0xaa, 0x39, 0xd9, 0xdf, 0xbd,
		0xa6, 0x08, 0x94, 0x95, 0x6d, 0x0c, 0x04, 0x3e, 0x42, 0x92, 0x87, 0x7f, 0x04, 0x4b, 0x55, 0xa2
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xa649n;
	message = new Uint8Array([
		0x20, 0x85, 0xe8, 0xb9, 0x46, 0xd2, 0x05, 0x97, 0x52, 0xf8, 0xf0, 0xfe, 0xe5, 0x28, 0xe7, 0xc4,
		0xcc, 0x0a, 0xc1, 0xfa, 0x24, 0x53, 0x2c, 0x1e, 0xc2, 0x9a, 0x3a, 0x92, 0xd2, 0x68, 0x1c, 0x4d,
		0xbd, 0x8e, 0x2d, 0xd1, 0x51, 0xbb, 0x32, 0x5d, 0x1c, 0x4d, 0xdf, 0x63, 0x18, 0x68, 0x9e, 0x3c,
		0x8e, 0x45, 0x8d, 0x1b, 0x34, 0xcd, 0xc5, 0x40, 0x98, 0x67, 0xe2, 0x6e, 0xc2, 0x0e, 0xc0, 0x9e,
		0x15, 0xa6, 0x82, 0xf5, 0x77, 0x90, 0xd9, 0xf4, 0xb2, 0x7c, 0x83, 0xef, 0x19, 0x7e, 0x11, 0xc0,
		0x6e, 0x65, 0xee, 0xbc, 0x03, 0x48, 0x9d, 0xe6, 0x20, 0x61, 0x42, 0x63, 0xa5, 0x1e, 0x64, 0x2e,
		0xf0, 0x76, 0xf1, 0x0d, 0x01, 0x7a, 0x82, 0xc4, 0xdc, 0x2c, 0xe1, 0x88, 0x2f, 0x93, 0xc9, 0xb6,
		0x35, 0x0f, 0xec, 0xc5, 0xda, 0xeb, 0x3a, 0x7a, 0x20, 0x31, 0x61, 0x5a, 0xc1, 0xc2, 0x90, 0x65
	]);
	signature = new Uint8Array([
		0x65, 0xbd, 0x57, 0xd4, 0xa3, 0x74, 0x95, 0xd5, 0x4e, 0xec, 0x7f, 0x63, 0x21, 0xf7, 0x10, 0x1a,
		0x46, 0x43, 0xd9, 0x43, 0x2a, 0x2a, 0xfc, 0x8e, 0xaa, 0x14, 0x7f, 0xb2, 0x9e, 0x7a, 0xb1, 0x10,
		0x6e, 0xb3, 0x1a, 0x6e, 0xa7, 0xae, 0x3b, 0x48, 0xe4, 0x0d, 0xe6, 0x3c, 0xc3, 0x68, 0xe7, 0xa6,
		0xdf, 0x4c, 0x99, 0x82, 0x59, 0xc5, 0x9c, 0xe4, 0x0b, 0x8a, 0xc2, 0xf8, 0x76, 0x3b, 0xee, 0x91,
		0x92, 0x41, 0x7d, 0x20, 0x20, 0xcb, 0xe1, 0x79, 0xbb, 0xa8, 0xae, 0xe9, 0xbe, 0x89, 0x71, 0x46,
		0x6f, 0x5e, 0x53, 0xb3, 0xf8, 0x20, 0x04, 0xab, 0x6a, 0xa5, 0x29, 0xd0, 0x85, 0x45, 0xbd, 0x89,
		0x44, 0x35, 0xd8, 0xdc, 0xee, 0xb3, 0xa8, 0xe9, 0x05, 0x91, 0x6b, 0xbd, 0xb0, 0x15, 0xbf, 0xf6,
		0x5e, 0x9e, 0x79, 0x2a, 0x88, 0xe1, 0xc8, 0x44, 0x9f, 0x41, 0x1e, 0xda, 0xcb, 0xa5, 0x04, 0xcd,
		0x07, 0x30, 0x60, 0x5d, 0xc8, 0x3f, 0xee, 0x64, 0xf8, 0xdd, 0x17, 0xf5, 0x77, 0x07, 0x56, 0x94,
		0x40, 0x2f, 0x18, 0x62, 0x79, 0x0d, 0x96, 0x29, 0xf9, 0xfa, 0x8a, 0xc3, 0xab, 0x4e, 0xe3, 0x41,
		0xdd, 0x39, 0x79, 0xeb, 0x17, 0x15, 0xc4, 0xf7, 0x42, 0xfb, 0xd8, 0x9b, 0xa3, 0xb9, 0x05, 0x65,
		0xea, 0x45, 0x87, 0x43, 0x85, 0x62, 0x49, 0x3f, 0x61, 0x1d, 0x5a, 0xc9, 0x98, 0x9f, 0xd4, 0x05,
		0xa0, 0x1d, 0x23, 0xb1, 0x34, 0x69, 0xa2, 0xa7, 0xa8, 0x5b, 0x00, 0x47, 0x48, 0x3a, 0x66, 0x5c,
		0xe3, 0x89, 0x9a, 0x41, 0x21, 0x07, 0xca, 0xcc, 0x11, 0x08, 0x7c, 0xb2, 0x60, 0x7b, 0xa9, 0xd0,
		0x40, 0x91, 0xc4, 0x18, 0x24, 0x72, 0x42, 0xcd, 0x8d, 0x81, 0x9a, 0xe1, 0x7e, 0x49, 0xa2, 0x1b,
		0xc4, 0xf9, 0x66, 0xac, 0x3d, 0x37, 0xd2, 0xa6, 0x1a, 0x8b, 0xfe, 0xed, 0xe0, 0xf2, 0xef, 0x2d,
		0xa3, 0xaa, 0x32, 0xbc, 0x38, 0xab, 0xb6, 0xa1, 0x6a, 0x44, 0x75, 0xe9, 0x67, 0x2c, 0x4a, 0xaa,
		0x31, 0xd2, 0xe8, 0x27, 0x7f, 0x3d, 0xd9, 0x66, 0x3f, 0x39, 0x60, 0xf1, 0x6c, 0x01, 0x99, 0x8d,
		0x50, 0xa9, 0x9b, 0xcc, 0x68, 0x1e, 0xa0, 0x2b, 0x13, 0x75, 0x55, 0xaf, 0x2c, 0xdd, 0x28, 0xea,
		0x43, 0x28, 0x15, 0x88, 0x06, 0x6b, 0xc5, 0x5c, 0x8f, 0x7a, 0xab, 0x45, 0xde, 0xdf, 0xa2, 0xf6,
		0xbe, 0xfb, 0x5b, 0x13, 0x91, 0x1c, 0xb9, 0xce, 0xc2, 0xb3, 0xfb, 0x07, 0xbc, 0x00, 0xb2, 0xda,
		0xca, 0xff, 0x82, 0x37, 0x20, 0x1d, 0x3e, 0xbe, 0xac, 0x57, 0x50, 0x83, 0x01, 0x16, 0x24, 0xb4,
		0xbe, 0x01, 0x83, 0x79, 0x51, 0x4d, 0xec, 0x97, 0x20, 0x9f, 0xaa, 0x29, 0xb1, 0xf9, 0x3f, 0xda,
		0x75, 0xf0, 0x77, 0x0f, 0x3c, 0x73, 0xe7, 0x00, 0xa2, 0xe4, 0x84, 0x53, 0x06, 0x7c, 0x90, 0x9e
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xa649n;
	message = new Uint8Array([
		0xcc, 0x21, 0x59, 0x3a, 0x6a, 0x0f, 0x73, 0x7e, 0x29, 0x70, 0xb7, 0xc0, 0x79, 0x84, 0xb0, 0x70,
		0xd7, 0x61, 0x72, 0x62, 0x96, 0xa0, 0x7e, 0x24, 0xe0, 0x56, 0xe6, 0x8f, 0xf8, 0x46, 0xb2, 0x9c,
		0xc1, 0x54, 0x81, 0x79, 0x84, 0x3d, 0x74, 0xdc, 0xee, 0x86, 0x47, 0x98, 0x58, 0xb2, 0xc1, 0x6e,
		0x4c, 0xb8, 0x4f, 0x25, 0x44, 0xb4, 0xec, 0xdc, 0xb4, 0xdd, 0x43, 0xa0, 0x4b, 0xb7, 0x18, 0x3a,
		0x76, 0x8a, 0xe4, 0x4a, 0x27, 0x12, 0xbf, 0x9a, 0xd4, 0x78, 0x83, 0xac, 0xc2, 0x81, 0x2f, 0x95,
		0x83, 0x06, 0x89, 0x0e, 0xbe, 0xa4, 0x08, 0xc9, 0x2e, 0xb4, 0xf0, 0x01, 0xed, 0x7d, 0xbf, 0x55,
		0xf3, 0xa9, 0xc8, 0xd6, 0xd9, 0xf6, 0x1e, 0x5f, 0xe3, 0x2e, 0xb3, 0x25, 0x3e, 0x59, 0xc1, 0x8e,
		0x86, 0x31, 0x69, 0x47, 0x8c, 0xd6, 0x9b, 0x91, 0x55, 0xc3, 0x35, 0xdb, 0x66, 0x01, 0x6f, 0x96
	]);
	signature = new Uint8Array([
		0x0a, 0xa5, 0x72, 0xa6, 0x84, 0x5b, 0x87, 0x0b, 0x89, 0x09, 0xa6, 0x83, 0xbb, 0x7e, 0x6e, 0x76,
		0x16, 0xf7, 0x7b, 0xef, 0xf2, 0x87, 0x46, 0x11, 0x6d, 0x8b, 0xc4, 0xb7, 0x33, 0x55, 0x46, 0xb5,
		0x1e, 0x80, 0x06, 0xed, 0x0f, 0xc9, 0xa0, 0xd6, 0x6f, 0x63, 0xce, 0x0b, 0x9e, 0xbf, 0x79, 0x2d,
		0x7e, 0xfd, 0x43, 0x05, 0xd7, 0x62, 0x4d, 0x54, 0x54, 0x00, 0xa5, 0xfd, 0x6a, 0x06, 0xb7, 0x8f,
		0x17, 0x4b, 0x86, 0x80, 0x3f, 0x7c, 0xd1, 0xcc, 0x93, 0xe3, 0xa9, 0x72, 0x86, 0xf0, 0xea, 0x59,
		0x0e, 0x40, 0xff, 0x26, 0x19, 0x5a, 0xa2, 0x19, 0xfe, 0x15, 0x10, 0xa0, 0x16, 0x78, 0x52, 0x23,
		0x60, 0x6d, 0x93, 0x11, 0xa1, 0x6c, 0x59, 0xa8, 0xfe, 0x4a, 0x6d, 0xa6, 0xec, 0xd0, 0xc1, 0xd7,
		0x77, 0x50, 0x39, 0x29, 0x0c, 0x2a, 0xaa, 0x17, 0xed, 0x1e, 0xb1, 0xb5, 0x43, 0x74, 0xf7, 0xe5,
		0x72, 0xdb, 0x13, 0xcc, 0xa3, 0xa6, 0x38, 0x57, 0x5f, 0x80, 0x04, 0xaa, 0x54, 0xa2, 0xfa, 0x98,
		0x42, 0x2f, 0xc0, 0x7e, 0x43, 0xad, 0x3a, 0x20, 0xdd, 0x93, 0x00, 0x14, 0x93, 0x44, 0x26, 0x77,
		0xd8, 0x83, 0x91, 0x4d, 0xc7, 0x4e, 0xc1, 0xcb, 0xeb, 0xbb, 0xd3, 0xd2, 0xb6, 0xba, 0xd4, 0x66,
		0x6d, 0x91, 0x45, 0x7b, 0x69, 0xb4, 0x6a, 0x1a, 0x61, 0xf2, 0x12, 0x98, 0xf1, 0xa6, 0x79, 0x42,
		0xec, 0x86, 0xc8, 0x76, 0x32, 0x2d, 0xd3, 0x66, 0xed, 0x16, 0x78, 0x14, 0xe9, 0xc8, 0xfc, 0x90,
		0x40, 0xc5, 0xb4, 0xb7, 0xa8, 0x59, 0xbb, 0xd8, 0x80, 0xcb, 0x6b, 0xc2, 0x41, 0xb9, 0xe3, 0x27,
		0xce, 0x77, 0x9e, 0x07, 0x83, 0xb1, 0xcf, 0x44, 0x5e, 0x0b, 0x2f, 0x57, 0x71, 0xb3, 0xf5, 0x82,
		0x2a, 0x13, 0x64, 0x39, 0x1c, 0x15, 0x4d, 0xc5, 0x06, 0xff, 0xf1, 0xfb, 0x9d, 0x9a, 0x35, 0xf8,
		0x01, 0x99, 0xa6, 0xb3, 0x0b, 0x4b, 0x92, 0xb9, 0x26, 0x19, 0xa4, 0x0e, 0x21, 0xae, 0xa1, 0x92,
		0x84, 0x01, 0x58, 0x63, 0xc4, 0x48, 0x66, 0xc6, 0x1e, 0xd9, 0x04, 0xa7, 0xad, 0x19, 0xee, 0x04,
		0xd9, 0x66, 0xc0, 0xaa, 0xe3, 0x90, 0x63, 0x62, 0x43, 0x56, 0x55, 0x81, 0xff, 0x20, 0xbd, 0x6e,
		0x3c, 0xfb, 0x6e, 0x31, 0xf5, 0xaf, 0xba, 0x96, 0x4b, 0x31, 0x1d, 0xc2, 0xd0, 0x23, 0xa2, 0x19,
		0x98, 0xc8, 0xdd, 0x50, 0xca, 0x45, 0x36, 0x99, 0x19, 0x0b, 0xd4, 0x67, 0x42, 0x9e, 0x2f, 0x88,
		0xac, 0xe2, 0x9c, 0x4d, 0x1d, 0xa4, 0xda, 0x61, 0xaa, 0xc1, 0xed, 0xa2, 0x38, 0x02, 0x30, 0xaa,
		0x8d, 0xbb, 0x63, 0xc7, 0x5a, 0x3c, 0x1e, 0xc0, 0x4d, 0xa3, 0xa1, 0xf8, 0x80, 0xc9, 0xc7, 0x47,
		0xac, 0xdb, 0x74, 0xa8, 0x39, 0x5a, 0xf5, 0x8f, 0x5f, 0x04, 0x40, 0x15, 0xcc, 0xaf, 0x6e, 0x94
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(true);

	e =
		0xa45b6bn;
	message = new Uint8Array([
		0xa5, 0x89, 0xc8, 0x78, 0x8c, 0x95, 0x99, 0x61, 0xfe, 0xf9, 0x86, 0x94, 0xbb, 0xfe, 0xff, 0xce,
		0x5d, 0x69, 0x07, 0x18, 0x99, 0xad, 0x96, 0x9a, 0xc2, 0x5f, 0x3c, 0xb4, 0x8e, 0xea, 0x08, 0x4b,
		0x1d, 0x84, 0xa8, 0x61, 0x37, 0x61, 0xd1, 0xe9, 0xd6, 0x26, 0xe2, 0xd9, 0xe4, 0xa0, 0xc4, 0x80,
		0x45, 0xb6, 0x14, 0x1a, 0x18, 0x9c, 0x84, 0xa2, 0x3a, 0x4a, 0x7e, 0xe7, 0x0c, 0x2d, 0x0b, 0xe2,
		0x77, 0x1c, 0xf4, 0x47, 0x2d, 0x8d, 0x27, 0x5a, 0x31, 0x09, 0x5b, 0x04, 0x99, 0xdd, 0xf7, 0x26,
		0x93, 0x13, 0x30, 0x2d, 0xa6, 0xa0, 0x72, 0xe7, 0x3a, 0xdf, 0x02, 0x95, 0x5b, 0x3e, 0xe1, 0x41,
		0xba, 0x38, 0xf3, 0x51, 0xf4, 0x83, 0x60, 0x5d, 0x17, 0x8a, 0x3b, 0x3e, 0x63, 0x1d, 0x62, 0x67,
		0x4d, 0x67, 0xa5, 0x79, 0xca, 0x21, 0x2a, 0x11, 0xc9, 0x06, 0x0f, 0xe4, 0x01, 0x87, 0x52, 0x0f
	]);
	signature = new Uint8Array([
		0x06, 0x24, 0x18, 0x75, 0x08, 0x45, 0xd3, 0x29, 0x1e, 0x63, 0x3e, 0x47, 0x40, 0x64, 0x80, 0xe3,
		0x2f, 0xa2, 0x98, 0x02, 0x75, 0xf2, 0xe4, 0xac, 0x79, 0xd2, 0x84, 0xad, 0x83, 0xed, 0x11, 0x19,
		0x0e, 0x7b, 0x85, 0xbf, 0xd6, 0xed, 0x9b, 0xcf, 0xf6, 0x33, 0x45, 0x58, 0x2f, 0xcc, 0xd8, 0x8a,
		0x57, 0x89, 0x41, 0xab, 0xb9, 0x87, 0xd2, 0xdc, 0xb5, 0x49, 0xa0, 0xac, 0x2e, 0xd5, 0xfe, 0x7c,
		0xe8, 0x25, 0x7b, 0xb1, 0xe6, 0x28, 0x81, 0x55, 0xff, 0xf3, 0xdc, 0x9b, 0xc1, 0x14, 0x0f, 0x27,
		0x77, 0xa8, 0x45, 0x75, 0x98, 0x63, 0x60, 0xd0, 0x76, 0x60, 0x5e, 0x65, 0x5c, 0x9d, 0x73, 0xf9,
		0xbf, 0x01, 0x0a, 0x43, 0x7e, 0xb7, 0xb2, 0x80, 0xd6, 0x10, 0x83, 0x74, 0xce, 0x8d, 0xa4, 0xc7,
		0x02, 0xf6, 0x6a, 0x9d, 0x1d, 0x01, 0xb1, 0x41, 0xc6, 0xa6, 0x98, 0x72, 0x9d, 0x0f, 0xcd, 0xb0,
		0x63, 0x1b, 0x21, 0x57, 0x8d, 0xde, 0xd7, 0x21, 0xef, 0x5c, 0x49, 0x08, 0x12, 0x26, 0x6c, 0xf6,
		0xf0, 0x12, 0x70, 0xa8, 0xc6, 0xc2, 0xf0, 0x84, 0x66, 0xc9, 0xb3, 0xc6, 0x26, 0xc0, 0xf1, 0xed,
		0xeb, 0x5b, 0x4f, 0xb3, 0x2e, 0x95, 0x8a, 0x4a, 0x38, 0x8c, 0x6c, 0x6e, 0x73, 0xb5, 0x3a, 0x50,
		0x61, 0x37, 0x35, 0x43, 0x58, 0xbd, 0x00, 0xbb, 0xd2, 0x05, 0x8c, 0x9c, 0x12, 0x79, 0x04, 0x10,
		0xa4, 0x5f, 0x43, 0x48, 0x75, 0x48, 0x44, 0xb3, 0x57, 0xc4, 0xe1, 0x7f, 0xb3, 0x8c, 0x8c, 0xac,
		0x87, 0xa6, 0xbe, 0x3c, 0xd0, 0x6a, 0x08, 0x94, 0x3d, 0xb0, 0xe8, 0xb8, 0x67, 0xd4, 0x73, 0xe7,
		0xd3, 0x58, 0x1e, 0xd2, 0xa3, 0x2d, 0x25, 0xd7, 0xb4, 0x5e, 0xec, 0xf8, 0xfe, 0xa1, 0x0d, 0x0a,
		0xde, 0x1c, 0x88, 0x85, 0x91, 0xc7, 0x1f, 0xc8, 0x6a, 0xbd, 0x14, 0x46, 0xfa, 0xdc, 0xa2, 0x88,
		0x1d, 0xe8, 0x7a, 0x6d, 0x05, 0x56, 0x6c, 0x50, 0x00, 0xc1, 0xe0, 0x75, 0xb0, 0xc1, 0xc5, 0x48,
		0x1f, 0xfb, 0x6e, 0x98, 0x2a, 0x3f, 0x8f, 0x44, 0xfa, 0x8a, 0xd0, 0xb6, 0xa9, 0x2f, 0x1c, 0xde,
		0xdd, 0x9c, 0x38, 0xd3, 0x26, 0xa6, 0xef, 0xad, 0x9d, 0x03, 0x59, 0xa6, 0x9a, 0xf4, 0x20, 0x34,
		0xb7, 0xa4, 0xac, 0x38, 0x8f, 0x9c, 0x7d, 0x35, 0x6e, 0xdf, 0x4d, 0x6e, 0x45, 0x50, 0xad, 0xde,
		0xcc, 0x71, 0x92, 0x24, 0x2b, 0x3b, 0x1f, 0xc4, 0x16, 0x46, 0x02, 0x91, 0x9d, 0x34, 0x11, 0xed,
		0x43, 0xe2, 0xb3, 0x94, 0x86, 0x7b, 0xf8, 0x40, 0xea, 0x61, 0x75, 0x0b, 0xac, 0x4f, 0x1b, 0x72,
		0xd2, 0x8a, 0xf3, 0x5e, 0xb0, 0xb3, 0xaa, 0xf6, 0xee, 0xd6, 0x54, 0xd1, 0xde, 0x88, 0x32, 0x40,
		0xc0, 0xe2, 0x23, 0x4e, 0xa2, 0xdd, 0xf6, 0xf8, 0x93, 0x4c, 0xdc, 0xac, 0xea, 0x80, 0x2e, 0x26
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xa649n;
	message = new Uint8Array([
		0x70, 0xa4, 0xa8, 0x98, 0x02, 0x85, 0x68, 0x69, 0x9c, 0xcd, 0x8a, 0x53, 0x28, 0x8a, 0x74, 0x78,
		0x51, 0x88, 0x4d, 0xb2, 0x97, 0x1a, 0xb1, 0x7a, 0xa1, 0x16, 0xa9, 0x09, 0xd4, 0x22, 0xda, 0xbc,
		0x24, 0x2e, 0xfc, 0xbd, 0x2a, 0x42, 0x8e, 0xe0, 0x77, 0x7a, 0xc8, 0xcb, 0x29, 0x4f, 0xd2, 0x5a,
		0xbc, 0x17, 0x33, 0x42, 0x22, 0xcf, 0x8c, 0xf4, 0x15, 0x19, 0x86, 0xc4, 0xac, 0x81, 0x09, 0x4a,
		0x2c, 0x04, 0xaf, 0x08, 0x21, 0xd3, 0x78, 0x4e, 0xae, 0x54, 0xbf, 0x5b, 0x22, 0x6a, 0x6c, 0xc5,
		0xcb, 0xf6, 0x6c, 0x1b, 0x0f, 0x9e, 0x5e, 0xc8, 0xb8, 0xcd, 0x8f, 0x3a, 0x90, 0xfa, 0x29, 0x44,
		0x2e, 0x2e, 0xa7, 0xc1, 0x0f, 0xc0, 0x8c, 0x7b, 0xe9, 0x63, 0x55, 0x4b, 0x3b, 0x64, 0xac, 0x81,
		0x29, 0x2c, 0xde, 0x85, 0x87, 0x0c, 0x8f, 0xbf, 0x34, 0x3a, 0xad, 0xb5, 0xa9, 0x16, 0xa2, 0x73
	]);
	signature = new Uint8Array([
		0x07, 0x88, 0x43, 0xb0, 0x4c, 0x98, 0x55, 0xe6, 0x0b, 0x09, 0x65, 0x97, 0x0e, 0x34, 0x85, 0xa8,
		0x51, 0x70, 0x33, 0xef, 0xb5, 0x7b, 0x77, 0x31, 0x50, 0x48, 0x3e, 0x7d, 0x79, 0xa5, 0x49, 0xd2,
		0x17, 0x15, 0x9f, 0xc1, 0x94, 0xc7, 0x8d, 0x1d, 0x7e, 0xb8, 0x72, 0xad, 0xe2, 0x31, 0xd1, 0xc9,
		0x5d, 0xaf, 0xcb, 0x7d, 0x52, 0x92, 0xd7, 0xb1, 0x13, 0xa9, 0x95, 0x67, 0xf4, 0x92, 0xcd, 0x84,
		0x6f, 0x88, 0xcd, 0xc1, 0xd0, 0x35, 0xa0, 0x4a, 0xe6, 0xa5, 0xef, 0x28, 0xa8, 0x67, 0x33, 0x87,
		0xa2, 0x47, 0x9c, 0x3e, 0x0c, 0x5a, 0x12, 0x04, 0xbf, 0x13, 0x60, 0x2b, 0x49, 0x09, 0x7f, 0xd4,
		0xbe, 0xc1, 0x62, 0x84, 0x56, 0x6c, 0x36, 0xe4, 0x5e, 0xa3, 0x96, 0x35, 0x67, 0xf3, 0x6d, 0xae,
		0xe1, 0xee, 0x86, 0x69, 0x71, 0x37, 0xcb, 0x25, 0x82, 0x58, 0xb5, 0xc3, 0x18, 0x92, 0x6f, 0xed,
		0x50, 0x5c, 0xd6, 0x78, 0x4c, 0xcc, 0x95, 0xde, 0x4e, 0xdc, 0x20, 0x34, 0xe6, 0x45, 0x21, 0x27,
		0x6f, 0x90, 0x55, 0x82, 0x44, 0x79, 0xb4, 0xab, 0xd5, 0x1a, 0x73, 0x15, 0xe8, 0x1e, 0x20, 0x4d,
		0xc0, 0x0f, 0x4b, 0x07, 0x7f, 0x26, 0xea, 0x0a, 0x72, 0x56, 0xbc, 0xfb, 0x0e, 0xdf, 0x88, 0x62,
		0x4c, 0x4e, 0x3a, 0x05, 0x99, 0x14, 0xb7, 0x5d, 0xdf, 0xcf, 0x94, 0x5c, 0x56, 0x20, 0xeb, 0x6b,
		0x06, 0xb3, 0x01, 0x1e, 0x4b, 0xab, 0xc2, 0x68, 0x57, 0xbd, 0xd9, 0xbb, 0x06, 0x5d, 0xfd, 0xe5,
		0x15, 0xc3, 0x7e, 0xaa, 0x6a, 0xd8, 0x35, 0x90, 0x53, 0x75, 0x66, 0x68, 0x0a, 0xd1, 0xd7, 0x76,
		0x06, 0x78, 0x27, 0x28, 0x8c, 0x80, 0x49, 0x7b, 0x76, 0xc4, 0x89, 0xcb, 0x39, 0x76, 0x2d, 0xc1,
		0x99, 0x7f, 0xaa, 0x41, 0x08, 0x6b, 0x1e, 0x37, 0x7d, 0x3c, 0x9c, 0xb2, 0x9e, 0x45, 0x99, 0xde,
		0xa3, 0xb1, 0x23, 0xd8, 0x50, 0x46, 0x3e, 0xd2, 0x00, 0x87, 0xfa, 0x74, 0x4a, 0x54, 0x81, 0xa4,
		0x53, 0x7a, 0x62, 0x52, 0xae, 0xa0, 0xbc, 0x18, 0xb2, 0xbc, 0x96, 0x2d, 0xeb, 0x58, 0x9a, 0xe5,
		0x3a, 0x88, 0x23, 0x9e, 0xac, 0x7e, 0x79, 0x06, 0xf4, 0xb1, 0x6e, 0x68, 0xc0, 0xe7, 0xde, 0x24,
		0x78, 0xc4, 0xe4, 0xda, 0x86, 0x90, 0x08, 0xa6, 0x54, 0x55, 0xc6, 0x91, 0x54, 0x7b, 0x16, 0xa9,
		0xd9, 0x64, 0xfe, 0x0f, 0xaa, 0xac, 0x4a, 0xbb, 0x22, 0x30, 0x9e, 0x07, 0x53, 0x40, 0x8e, 0x22,
		0xa8, 0x66, 0x8c, 0x0e, 0x96, 0x68, 0x1f, 0x0f, 0xed, 0xf3, 0xad, 0xeb, 0xd7, 0xc3, 0xc6, 0xea,
		0x0b, 0x45, 0x2e, 0x07, 0xa6, 0xd9, 0x4d, 0x94, 0x37, 0xe8, 0xb0, 0x3e, 0x7b, 0x26, 0x20, 0x3a,
		0xff, 0x7c, 0x17, 0x06, 0xb5, 0x8a, 0x20, 0x56, 0x86, 0x42, 0xa8, 0x71, 0x9b, 0x98, 0x38, 0xf0
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	n =
		0x96410d900ffe9a71d348c210c0dda7ee43f92e8a31ad876255dc540ff239c236b998ef9375e695992aba77861bf8f1cd966e3af1f9ca874618d35ecb494982f7c05df134f5ce5853d410e670e0972efcce2fb14b2ea6974d4802ddfb5915d23752480f5def2e4a858543918d5fb47e837e5f6564abba60745d0ed710b713dea6b4302a6b56376679435ecd62b9a03c5c7ccea920fa64715c0b554b5108abc20583c1c87c81e20b0ccded165e581791bad0760140540a8c18b0a1adef5e9cda29fb959652cf68b5da128484e0c837c6cc017a7741edb301891e01fc28b8bebb1167d07c2993877a62a8bf82471e7130416fd825e5deeee26bf9e3e5b9d4c8869240fc2ea09ab7547668deff741b9dadc6304c467ca896794af09a1f22eadccd526c2eecb7a3138d78d8a12b0afc2132fdf5ac6299433dcb72ad40a183d21bbf5e3fab66b1b961016d9bb5af818ee381653c3c7216e308bfd19ad0224051e4b569bb27471b9303eb9c0d4a0f684dd86b1cc91d13c025aee06c97ba89e02b0bc6edn;
	e =
		0xfd157dn;
	message = new Uint8Array([
		0xc6, 0x54, 0x2c, 0x0b, 0x67, 0xda, 0x9d, 0xee, 0x63, 0x38, 0xcd, 0xc0, 0xff, 0x70, 0x43, 0x46,
		0xfa, 0x13, 0xde, 0x2c, 0x65, 0xbe, 0x53, 0xa4, 0xb5, 0xe5, 0xdd, 0x50, 0x17, 0xcf, 0x2f, 0x62,
		0x03, 0xe2, 0xae, 0x02, 0x14, 0x21, 0xdd, 0xf0, 0x17, 0xf3, 0x18, 0x6a, 0x62, 0x26, 0x86, 0x50,
		0x67, 0x33, 0x49, 0x86, 0x88, 0xc4, 0xf7, 0x9a, 0x2d, 0x73, 0x4e, 0xa6, 0x14, 0xd5, 0x23, 0x78,
		0xe9, 0xb7, 0x9c, 0xf1, 0x17, 0xa7, 0x9f, 0xab, 0xdd, 0xb7, 0x8a, 0xde, 0xa4, 0x7d, 0x25, 0x85,
		0x90, 0x5e, 0xd5, 0xbc, 0x55, 0x0d, 0x12, 0x6d, 0x4c, 0x4e, 0x1a, 0x2b, 0xc6, 0x00, 0xe7, 0x5e,
		0xa0, 0x5a, 0x5f, 0xa1, 0x17, 0x75, 0xcc, 0x68, 0xde, 0x0a, 0x8b, 0xe6, 0x6e, 0x7e, 0x08, 0x2e,
		0x9e, 0x1b, 0xea, 0x98, 0x73, 0xa1, 0x8a, 0x66, 0x39, 0xfd, 0xaa, 0xa7, 0xd2, 0x58, 0x64, 0x5c
	]);
	signature = new Uint8Array([
		0x4b, 0xbe, 0xd7, 0x9b, 0x3d, 0xfd, 0x05, 0x48, 0x36, 0xd6, 0xb9, 0xaf, 0x30, 0xb0, 0xcb, 0x20,
		0x2e, 0xea, 0x9d, 0x5a, 0x03, 0x8c, 0x5a, 0x2c, 0xe9, 0xdd, 0x68, 0xbd, 0x22, 0xad, 0x74, 0x05,
		0x0b, 0xf6, 0xf9, 0x56, 0x34, 0xc2, 0x89, 0x55, 0xb5, 0x39, 0xa3, 0xdf, 0xbe, 0x80, 0xa4, 0x44,
		0x4a, 0xe2, 0xab, 0xa1, 0xcf, 0xc4, 0xf3, 0x37, 0xab, 0xfa, 0xbf, 0x55, 0xb6, 0x5a, 0x89, 0xba,
		0x6a, 0x5f, 0xcb, 0xef, 0x5b, 0x62, 0xa4, 0xba, 0xe5, 0xb4, 0xc5, 0x1a, 0x22, 0x95, 0x3e, 0x89,
		0xb7, 0x1f, 0x4e, 0xb8, 0x46, 0x99, 0x66, 0xe5, 0x1f, 0x1b, 0x2d, 0x23, 0x2e, 0x4d, 0xe3, 0xd0,
		0xed, 0xe3, 0xd9, 0x29, 0xce, 0x1e, 0x90, 0xab, 0xf1, 0x6a, 0x4f, 0x89, 0xcd, 0x4b, 0x10, 0x2c,
		0x48, 0xaf, 0xae, 0x0e, 0x03, 0x9e, 0xf8, 0xf3, 0x6c, 0x0c, 0x20, 0x51, 0x3f, 0x0a, 0x79, 0xc2,
		0x09, 0xf2, 0x97, 0x47, 0x75, 0x7a, 0xae, 0x83, 0x80, 0x99, 0x3c, 0xc1, 0xd4, 0x27, 0xc8, 0x90,
		0x25, 0x07, 0xe0, 0x38, 0xcc, 0x5c, 0x24, 0x96, 0x10, 0x2b, 0x2d, 0x1f, 0xf0, 0xb7, 0xf7, 0x17,
		0xdd, 0x8f, 0x08, 0x3c, 0xf3, 0x13, 0xb8, 0x2f, 0x9a, 0x44, 0x15, 0xdd, 0x03, 0x60, 0x3b, 0x73,
		0xd9, 0x26, 0xc6, 0x77, 0xf1, 0xca, 0xb0, 0x7d, 0xfa, 0xc0, 0xf8, 0x30, 0x5d, 0x53, 0xee, 0xa8,
		0xa8, 0xcb, 0x78, 0x9d, 0xa3, 0xdd, 0x34, 0x23, 0x0f, 0x59, 0x23, 0x34, 0x61, 0x9f, 0x48, 0x7d,
		0x7e, 0xe8, 0x5b, 0x09, 0x9f, 0x98, 0xd4, 0xf5, 0x57, 0xdb, 0xcf, 0x1f, 0x23, 0x94, 0x4e, 0x73,
		0xe9, 0xa3, 0xb7, 0x62, 0xc8, 0x2e, 0x1f, 0x45, 0x47, 0x7c, 0x91, 0x50, 0x7c, 0xfa, 0x8e, 0xe1,
		0x1a, 0x94, 0x4c, 0x7d, 0xe8, 0xdd, 0x0c, 0x0e, 0x78, 0x6d, 0xae, 0xff, 0x11, 0x27, 0x50, 0x85,
		0xc8, 0xe2, 0xd2, 0xf4, 0xfc, 0xb9, 0x97, 0x3a, 0x62, 0xc5, 0xb9, 0xde, 0x61, 0x36, 0x8b, 0x51,
		0x7b, 0x02, 0x91, 0x64, 0xd0, 0xf6, 0xc2, 0xe0, 0x7a, 0x3f, 0xde, 0xfb, 0xc0, 0x82, 0x27, 0x5f,
		0x5e, 0x72, 0x6c, 0xcb, 0x1b, 0xf0, 0x84, 0x65, 0x0e, 0x46, 0x15, 0x7c, 0xaf, 0x81, 0x30, 0xfc,
		0xc9, 0x02, 0xf4, 0x99, 0x26, 0xc3, 0x6c, 0x8c, 0xce, 0x92, 0xdb, 0x6a, 0x30, 0x72, 0xec, 0x7a,
		0x4f, 0xc7, 0xac, 0xb1, 0x6b, 0xd7, 0x70, 0x3b, 0x93, 0x6f, 0x9b, 0xa1, 0xdb, 0x29, 0x5e, 0xa7,
		0x0e, 0xfe, 0x3c, 0x5b, 0x9a, 0xa0, 0x51, 0x5e, 0x7d, 0xcc, 0x2f, 0x4a, 0x02, 0xa9, 0x6d, 0x69,
		0x59, 0x1f, 0x3c, 0xc3, 0xc6, 0x42, 0x67, 0xe4, 0x92, 0x6e, 0x09, 0x4b, 0x84, 0xf8, 0x00, 0x15,
		0x5d, 0x1f, 0xff, 0x6b, 0x68, 0x6a, 0x71, 0xed, 0x9a, 0xbf, 0x52, 0x95, 0xbc, 0xcc, 0x87, 0x83
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd157dn;
	message = new Uint8Array([
		0xc6, 0xce, 0xc9, 0x90, 0x47, 0x6c, 0xd2, 0x0d, 0x44, 0x5e, 0x83, 0xa5, 0xba, 0x7c, 0xe4, 0x8e,
		0x1b, 0x42, 0x15, 0xba, 0xa2, 0xd1, 0x3e, 0xfb, 0xe4, 0x36, 0xc8, 0x6b, 0xa9, 0xef, 0xce, 0x0b,
		0xf9, 0xab, 0xce, 0xaa, 0x7a, 0x52, 0xa5, 0x09, 0xf9, 0x45, 0xba, 0x3c, 0x46, 0xe7, 0x79, 0x53,
		0x45, 0x5c, 0x03, 0x3a, 0x42, 0x91, 0x23, 0xde, 0x85, 0x7c, 0x85, 0x91, 0x26, 0xa5, 0x22, 0xb0,
		0x23, 0xe5, 0xff, 0x83, 0xb0, 0x6d, 0x17, 0x64, 0xce, 0x0b, 0x95, 0x24, 0x1f, 0xa9, 0x47, 0xaa,
		0xf9, 0x17, 0x50, 0xdd, 0xb9, 0x0a, 0x1d, 0xc5, 0x5a, 0x64, 0x9a, 0xec, 0x46, 0xb5, 0xa5, 0x0b,
		0x6b, 0x02, 0xc3, 0xe2, 0x92, 0xc6, 0x11, 0x68, 0xec, 0x37, 0x7e, 0x24, 0xee, 0xca, 0x38, 0xdb,
		0x5f, 0xf9, 0x64, 0x6b, 0xb0, 0x44, 0x12, 0xf7, 0x8b, 0x76, 0x70, 0x44, 0xae, 0x29, 0x3d, 0x63
	]);
	signature = new Uint8Array([
		0x36, 0x3c, 0x8a, 0x8e, 0x3f, 0x25, 0x1f, 0x7c, 0x86, 0xcf, 0x53, 0xa3, 0x4e, 0x9d, 0xa2, 0x96,
		0xb4, 0x78, 0xbd, 0xd9, 0xff, 0x3b, 0xcf, 0x36, 0x92, 0x1a, 0xe3, 0x6b, 0xda, 0xaf, 0xbd, 0x73,
		0xcc, 0x22, 0x01, 0x3f, 0xae, 0x7d, 0x3b, 0x0a, 0xb8, 0x40, 0xdb, 0x28, 0xcd, 0xdc, 0xf0, 0xc1,
		0x22, 0xec, 0xa5, 0x61, 0x0b, 0x16, 0x40, 0xa5, 0xd4, 0x65, 0x86, 0x72, 0xc2, 0x32, 0x3c, 0xee,
		0xa3, 0x26, 0x09, 0x19, 0x6b, 0xe2, 0xff, 0xcf, 0x40, 0x48, 0x85, 0x76, 0x06, 0x5c, 0xd0, 0x22,
		0xc0, 0xe2, 0xcc, 0x22, 0xe6, 0x10, 0x3c, 0xf9, 0x36, 0x10, 0xdf, 0x66, 0x16, 0x57, 0xc3, 0xcc,
		0xbc, 0x03, 0x57, 0xd0, 0xce, 0xeb, 0xb8, 0x5d, 0x8a, 0x2b, 0x28, 0xc6, 0xa4, 0x5b, 0x5e, 0xed,
		0x17, 0x03, 0xa1, 0x4e, 0x1d, 0xd2, 0x8e, 0x24, 0x48, 0x82, 0xa8, 0x10, 0x1d, 0xa1, 0xe5, 0xb9,
		0xeb, 0xd9, 0xd1, 0x0d, 0xf3, 0x6e, 0xc4, 0x57, 0x6a, 0x1c, 0xde, 0xfa, 0x89, 0xbd, 0x53, 0x90,
		0x95, 0x7a, 0x0d, 0x9d, 0x72, 0x87, 0x3a, 0x9f, 0xdf, 0x46, 0xb6, 0x7b, 0x4f, 0x27, 0x73, 0xf5,
		0x97, 0x10, 0x52, 0x17, 0x0c, 0x71, 0xb9, 0xaa, 0x40, 0x9e, 0x75, 0xca, 0x5c, 0xc2, 0xf0, 0xcb,
		0xc9, 0x7a, 0x89, 0x18, 0x81, 0x7b, 0xe1, 0x64, 0xa8, 0x20, 0xf9, 0x0a, 0x61, 0x8a, 0xcf, 0x0c,
		0x5a, 0xea, 0x19, 0xe2, 0x3c, 0x6e, 0x5d, 0x78, 0x46, 0x5f, 0x60, 0xee, 0x70, 0x6c, 0x8b, 0xf7,
		0x8d, 0x38, 0xce, 0x3c, 0xe4, 0xb2, 0x04, 0xdb, 0x5e, 0x3e, 0xe3, 0x5c, 0x4d, 0xc3, 0xcf, 0x5d,
		0x6c, 0xfc, 0x1d, 0x0b, 0x17, 0xb6, 0x5b, 0x97, 0xbf, 0x22, 0x79, 0x37, 0x54, 0x0a, 0xca, 0x0c,
		0x0b, 0x5d, 0x2e, 0xe7, 0xf5, 0xfa, 0x2a, 0xe4, 0xfc, 0x0a, 0x59, 0x2d, 0x9b, 0x97, 0xf5, 0x24,
		0xa7, 0x46, 0x89, 0x10, 0xe7, 0xc1, 0xd8, 0x43, 0xb8, 0xfe, 0xcf, 0xc4, 0x8f, 0x7e, 0x2b, 0x53,
		0x55, 0xcd, 0xfc, 0x7d, 0x53, 0x59, 0xdd, 0xf0, 0x65, 0x03, 0x17, 0x30, 0x91, 0x5e, 0x41, 0x12,
		0x6b, 0x7d, 0xca, 0x03, 0x16, 0x1b, 0x45, 0x49, 0x3d, 0x64, 0x1d, 0x50, 0x27, 0x6c, 0xc1, 0xab,
		0x05, 0xc2, 0xf2, 0xab, 0xef, 0x47, 0x61, 0xe0, 0xa9, 0x9b, 0x7f, 0x34, 0xf3, 0x5d, 0x56, 0x21,
		0xf2, 0xcb, 0xf8, 0x49, 0x0c, 0x61, 0xd0, 0x35, 0xaf, 0x3c, 0x40, 0xd4, 0x73, 0x19, 0x29, 0x77,
		0xdd, 0x7b, 0xce, 0x01, 0xbd, 0xa6, 0xfa, 0xb5, 0xd3, 0x63, 0xaf, 0xc5, 0xd2, 0xe2, 0xcd, 0xcc,
		0xd6, 0x72, 0x1a, 0x64, 0x69, 0xd6, 0x8e, 0x55, 0x23, 0xb7, 0xd6, 0xc3, 0x0a, 0x9b, 0x91, 0x36,
		0x3d, 0xd2, 0xe9, 0x0e, 0xf7, 0xc5, 0x1c, 0x00, 0x1f, 0x95, 0x6d, 0x7d, 0xab, 0x72, 0xac, 0x5a
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xf19b7n;
	message = new Uint8Array([
		0xd5, 0x05, 0x4a, 0xb2, 0xc2, 0xe4, 0xfb, 0xef, 0x56, 0x8b, 0x1f, 0x7d, 0x08, 0xa3, 0x87, 0x70,
		0xea, 0x0b, 0x6b, 0xb5, 0x89, 0x27, 0x69, 0x00, 0x15, 0x7b, 0xcb, 0x06, 0xc2, 0x78, 0x09, 0xed,
		0x6d, 0x95, 0x8e, 0x00, 0x83, 0xa2, 0xbf, 0xa8, 0x1f, 0x59, 0x3a, 0x97, 0x72, 0x37, 0x5b, 0x47,
		0x68, 0x8a, 0x05, 0xa3, 0x88, 0xca, 0x9f, 0x04, 0x1d, 0x2c, 0x5c, 0x5e, 0x93, 0x75, 0xc0, 0xbc,
		0x23, 0x0c, 0x60, 0xe9, 0xb3, 0x54, 0xe9, 0x70, 0xf7, 0x38, 0x63, 0xc7, 0xdd, 0x08, 0xb7, 0xc8,
		0x28, 0x83, 0x6f, 0x60, 0x5a, 0x35, 0xbe, 0x8b, 0xd8, 0x03, 0xc0, 0x80, 0x49, 0x04, 0x02, 0x28,
		0x3f, 0x92, 0x45, 0xd5, 0x19, 0xa1, 0x7f, 0x31, 0x28, 0x50, 0x23, 0x75, 0x10, 0xbe, 0xa2, 0xdb,
		0x71, 0x1f, 0x32, 0x55, 0xc7, 0x0f, 0xce, 0x7f, 0x8f, 0x25, 0x7e, 0xd2, 0xac, 0xcc, 0xd8, 0x1b
	]);
	signature = new Uint8Array([
		0x09, 0x3d, 0x39, 0x9d, 0xd2, 0x90, 0x39, 0x1e, 0xf0, 0x25, 0x93, 0xae, 0x52, 0xe5, 0x4d, 0x55,
		0x33, 0x00, 0x6b, 0x65, 0x07, 0x30, 0xfb, 0xa6, 0x11, 0x70, 0xc3, 0x1f, 0xc6, 0xd0, 0xe2, 0xc5,
		0x37, 0x51, 0xfa, 0xa3, 0x1d, 0x90, 0x4f, 0x4a, 0x96, 0x34, 0x8a, 0xd8, 0xf3, 0x6f, 0xfe, 0x88,
		0x92, 0xb8, 0x46, 0xee, 0xcd, 0xcc, 0x85, 0xac, 0x1a, 0x73, 0x99, 0x78, 0x70, 0x7f, 0xb2, 0xb4,
		0xff, 0xa9, 0x81, 0x06, 0xfa, 0x2e, 0x55, 0x95, 0x39, 0x11, 0x14, 0x0f, 0xcd, 0xf4, 0x1d, 0xdb,
		0x14, 0x50, 0xce, 0xd8, 0x19, 0xec, 0xc4, 0xd7, 0x23, 0xb8, 0x42, 0xa8, 0x8b, 0x4f, 0xd9, 0xb5,
		0xa5, 0x06, 0xd8, 0xa0, 0xf5, 0xbd, 0x6b, 0x62, 0x9d, 0x1a, 0x28, 0x71, 0x76, 0x65, 0x56, 0x88,
		0x93, 0x26, 0xd1, 0xc9, 0x22, 0x2c, 0x98, 0x06, 0x2e, 0xf6, 0x90, 0x34, 0x27, 0xf1, 0x3d, 0x5c,
		0x55, 0x06, 0x6b, 0x56, 0x93, 0xe8, 0x5d, 0x74, 0x99, 0x61, 0xc5, 0x33, 0x04, 0x89, 0x5e, 0x23,
		0x43, 0xfe, 0x95, 0x3f, 0xd3, 0x0d, 0x4e, 0x8e, 0x93, 0xc9, 0x52, 0x43, 0x8c, 0x2a, 0x83, 0xb8,
		0x59, 0x0f, 0x32, 0x42, 0xfe, 0x56, 0x1c, 0xcc, 0x2d, 0x4d, 0xc3, 0x93, 0xd2, 0x44, 0x2b, 0xb5,
		0x7c, 0x54, 0x27, 0x68, 0x13, 0xcb, 0xc3, 0x31, 0x7a, 0x6e, 0x93, 0x14, 0x1c, 0x32, 0xa2, 0x40,
		0x57, 0x2e, 0x52, 0xc6, 0xeb, 0x40, 0x0e, 0x88, 0x69, 0x00, 0x51, 0x48, 0xf6, 0x6c, 0x7b, 0x04,
		0x39, 0x1e, 0x28, 0x56, 0x05, 0x13, 0x3c, 0xf8, 0xea, 0x5e, 0x80, 0x97, 0x77, 0xba, 0x22, 0x32,
		0x35, 0x06, 0xae, 0x5e, 0xce, 0x5f, 0x9a, 0x55, 0xd8, 0x12, 0x76, 0x6f, 0xf3, 0xc9, 0xd7, 0x84,
		0xa9, 0x79, 0xee, 0xa3, 0x39, 0x1d, 0x47, 0xfa, 0x97, 0x30, 0x4b, 0x71, 0x9a, 0xb7, 0x21, 0x0f,
		0x1b, 0x1b, 0xe7, 0xca, 0x98, 0x46, 0xcb, 0xa4, 0xb3, 0xfd, 0xfb, 0xbe, 0xf0, 0x12, 0x7e, 0xfc,
		0x2b, 0x1f, 0x6a, 0xcb, 0x08, 0x27, 0xb0, 0xbf, 0x48, 0x05, 0x8c, 0xd2, 0x6d, 0x21, 0x34, 0x4e,
		0xf9, 0xa3, 0xd3, 0x4f, 0x62, 0x48, 0x4d, 0xb3, 0x50, 0xe9, 0x26, 0x80, 0x48, 0xfa, 0x09, 0x64,
		0x15, 0xf8, 0x33, 0xe9, 0x71, 0x14, 0x59, 0x0c, 0x7f, 0x1f, 0x07, 0x3b, 0x56, 0x2b, 0xe5, 0x52,
		0xcf, 0xc2, 0x16, 0x8a, 0x18, 0x6e, 0x94, 0x1b, 0x70, 0xe8, 0xf3, 0xfc, 0xe8, 0x4d, 0xd4, 0x37,
		0xfc, 0xa3, 0xcf, 0xb1, 0x91, 0xff, 0xc1, 0x74, 0x19, 0x4d, 0x1f, 0x44, 0x8c, 0x92, 0x70, 0xb8,
		0x46, 0xf2, 0x53, 0x92, 0x3c, 0x00, 0xf7, 0x39, 0x32, 0xa0, 0x38, 0xbf, 0x97, 0xfb, 0x47, 0xc3,
		0xea, 0x8b, 0xfa, 0x39, 0xbb, 0x20, 0x70, 0xfd, 0xd5, 0x0a, 0x13, 0x64, 0x9f, 0x06, 0xad, 0x0a
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xfd157dn;
	message = new Uint8Array([
		0x02, 0xab, 0xc5, 0x27, 0x1d, 0x55, 0x12, 0x9f, 0xdb, 0xf1, 0xfd, 0xdf, 0x59, 0xf4, 0xb9, 0x9d,
		0x90, 0x49, 0x15, 0xba, 0xe1, 0x96, 0xad, 0xb2, 0xf0, 0xc0, 0x62, 0x37, 0xb6, 0xb1, 0x09, 0x19,
		0xd2, 0x59, 0x60, 0x69, 0x20, 0xf2, 0x46, 0xde, 0x8d, 0x89, 0x2b, 0x77, 0x2a, 0xba, 0xc5, 0x62,
		0x7f, 0xbb, 0x04, 0x1d, 0x21, 0x9c, 0x49, 0xdb, 0x87, 0xcc, 0xd3, 0x29, 0x19, 0xe0, 0x79, 0xd1,
		0x8a, 0x90, 0x9f, 0xff, 0x68, 0x02, 0x63, 0xa2, 0xf1, 0x4c, 0x17, 0x15, 0x29, 0x34, 0xf4, 0xff,
		0x29, 0x39, 0x0c, 0x78, 0xba, 0xd8, 0x81, 0x6d, 0x22, 0x08, 0xf5, 0x45, 0x3e, 0x07, 0x41, 0xc4,
		0xd1, 0x58, 0x6a, 0x30, 0x1c, 0x0d, 0xd1, 0xb3, 0xaf, 0x42, 0xa9, 0x01, 0x7e, 0xea, 0xae, 0x3a,
		0x37, 0xce, 0x14, 0x12, 0xd3, 0xd2, 0xbe, 0x2f, 0x6c, 0x7a, 0xb1, 0xd3, 0x4e, 0xae, 0xc8, 0xba
	]);
	signature = new Uint8Array([
		0x70, 0xa5, 0x0b, 0x8a, 0x43, 0x49, 0xe5, 0x7d, 0x7c, 0x23, 0xf9, 0x90, 0xd3, 0x3d, 0x0b, 0x1c,
		0xc5, 0x07, 0x4a, 0xaf, 0x46, 0x25, 0x29, 0x10, 0x2a, 0x10, 0x10, 0x57, 0x5d, 0xc2, 0x5f, 0xe9,
		0x0a, 0x34, 0x41, 0x4a, 0xd4, 0xf3, 0xbf, 0x8e, 0x20, 0x3a, 0xf8, 0xfb, 0xfb, 0x68, 0xa8, 0xd1,
		0x0d, 0xb1, 0xbd, 0x24, 0x00, 0x52, 0xc2, 0x3a, 0x40, 0x15, 0xfb, 0x2e, 0xd9, 0x76, 0x0f, 0x8a,
		0xa1, 0xbf, 0x13, 0xa0, 0x76, 0x5f, 0x90, 0x7c, 0x51, 0x03, 0x70, 0x95, 0xb2, 0x53, 0x7f, 0xa0,
		0xe7, 0x29, 0x01, 0xb7, 0x6a, 0x94, 0x5f, 0xb6, 0x09, 0x4a, 0xeb, 0x31, 0x65, 0x54, 0x21, 0x85,
		0x05, 0xc5, 0x3b, 0x4a, 0xaf, 0xec, 0x44, 0x8e, 0xef, 0xb5, 0x3d, 0x0d, 0xc4, 0xb8, 0x17, 0x5a,
		0x07, 0xf2, 0x41, 0xd6, 0x4e, 0x31, 0xd8, 0x48, 0xcc, 0x35, 0x26, 0xe7, 0xff, 0x64, 0x21, 0x97,
		0x19, 0x95, 0xd1, 0x43, 0xfd, 0x3b, 0x20, 0x1f, 0x29, 0x33, 0xe3, 0x23, 0xba, 0x7a, 0x1c, 0xe8,
		0x1a, 0x49, 0xc9, 0x4e, 0x45, 0xc6, 0xdd, 0xf3, 0xf5, 0xcc, 0xcc, 0x24, 0x73, 0xed, 0xd7, 0x51,
		0x1d, 0x5c, 0xec, 0x51, 0xaa, 0xd6, 0x2c, 0x4c, 0xa0, 0x36, 0x6b, 0x48, 0x7c, 0x86, 0x91, 0xbf,
		0x2a, 0xed, 0x91, 0x96, 0x11, 0xe7, 0x79, 0x2f, 0xbb, 0x80, 0x13, 0xf4, 0xa1, 0x1d, 0x15, 0x50,
		0x88, 0x90, 0xa7, 0xf1, 0xbe, 0xc1, 0x0a, 0x18, 0x2d, 0x23, 0xf1, 0x87, 0xe3, 0xf5, 0x64, 0x28,
		0x68, 0xf7, 0xa4, 0xd2, 0x37, 0xd9, 0x44, 0xee, 0xb0, 0xec, 0x3e, 0x8a, 0x04, 0x58, 0x12, 0xfd,
		0x31, 0x62, 0x59, 0x78, 0xeb, 0x70, 0x52, 0xdf, 0x5f, 0x1a, 0x26, 0xd8, 0x85, 0x04, 0x9b, 0x2f,
		0xc7, 0x40, 0x64, 0xac, 0x94, 0x86, 0xe2, 0xf4, 0x01, 0x79, 0xd6, 0xea, 0x6c, 0x0a, 0x68, 0xa4,
		0x9a, 0xd3, 0x84, 0xfd, 0xe8, 0xa3, 0x7f, 0x98, 0xa3, 0x7f, 0x96, 0xb4, 0x94, 0x65, 0x1f, 0x13,
		0x6d, 0x2a, 0xdd, 0xc2, 0xa3, 0xd7, 0x3e, 0xa6, 0x94, 0x43, 0x67, 0x62, 0xc0, 0x21, 0x89, 0x95,
		0x3f, 0x93, 0x65, 0xa1, 0x9a, 0x48, 0x8b, 0x79, 0x45, 0x88, 0x84, 0x07, 0x9e, 0x8a, 0x94, 0xd0,
		0x92, 0x50, 0xfe, 0x8f, 0xea, 0x7e, 0xcb, 0xa1, 0x77, 0x7c, 0xf4, 0x42, 0x89, 0xb3, 0x8f, 0xd2,
		0xe5, 0x56, 0x95, 0x8f, 0xf7, 0x17, 0x0d, 0x36, 0xb0, 0x4f, 0x7c, 0xb7, 0x60, 0x53, 0xa7, 0x3c,
		0x78, 0xcf, 0xef, 0xae, 0xc3, 0x45, 0x72, 0x8a, 0xb6, 0x6a, 0xaf, 0x62, 0xe7, 0x46, 0x71, 0x01,
		0xff, 0x66, 0xb6, 0x43, 0xdb, 0x74, 0xa1, 0x0d, 0x98, 0x44, 0xdb, 0xb3, 0x47, 0x5f, 0x28, 0x0d,
		0x0a, 0x85, 0x30, 0x2c, 0x45, 0x9c, 0x67, 0xd9, 0x87, 0x9a, 0xd4, 0x46, 0x49, 0x10, 0x13, 0x04
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xfd157dn;
	message = new Uint8Array([
		0xab, 0x73, 0xde, 0x45, 0x4d, 0xec, 0x96, 0xf7, 0xe9, 0x43, 0x5a, 0x96, 0x8b, 0x1e, 0xc3, 0xa7,
		0xb5, 0xca, 0x80, 0x6c, 0xb1, 0x38, 0x4c, 0x07, 0x26, 0x46, 0x1d, 0xe1, 0xea, 0x40, 0x9e, 0x4d,
		0x17, 0xa7, 0xe0, 0x69, 0x61, 0x31, 0x4c, 0x45, 0xa6, 0x10, 0xdd, 0x48, 0xc7, 0x77, 0x8c, 0xcf,
		0xb7, 0x5b, 0x0b, 0x16, 0xd1, 0x77, 0xb5, 0x5c, 0x6f, 0x92, 0xc6, 0x42, 0xb8, 0x04, 0xc7, 0x75,
		0xb9, 0x77, 0x4d, 0x8c, 0xb8, 0xeb, 0xe3, 0x34, 0xc4, 0xfd, 0x45, 0x8a, 0x91, 0x68, 0xcf, 0xc8,
		0x83, 0xcc, 0x34, 0x24, 0x09, 0xae, 0x73, 0xf5, 0x2c, 0xc0, 0x07, 0x18, 0x68, 0x63, 0x5e, 0x92,
		0xba, 0x6b, 0x8d, 0x76, 0xfa, 0x22, 0x42, 0x0a, 0x6b, 0x8f, 0xfa, 0x25, 0x91, 0xf8, 0x74, 0xdb,
		0x42, 0xa5, 0x65, 0x5c, 0x00, 0xe7, 0x6d, 0x1a, 0x86, 0x59, 0x4a, 0x2a, 0xa1, 0x66, 0x4c, 0xed
	]);
	signature = new Uint8Array([
		0x51, 0x8d, 0xa2, 0x6a, 0xae, 0xd8, 0xf7, 0xd3, 0xae, 0x91, 0xb2, 0x55, 0x6e, 0x71, 0x58, 0x6e,
		0x97, 0xad, 0xed, 0xde, 0x3f, 0x4f, 0xf3, 0xe6, 0x41, 0x89, 0x2c, 0x19, 0xd5, 0xa5, 0x41, 0x9c,
		0x96, 0x21, 0x4e, 0xd3, 0x2f, 0x90, 0x95, 0x96, 0x0c, 0xca, 0xdf, 0x74, 0x64, 0xaf, 0x21, 0x4c,
		0x96, 0x4f, 0xca, 0x23, 0xdf, 0x2a, 0xdc, 0x19, 0x40, 0x49, 0xff, 0x1f, 0x76, 0x85, 0x13, 0x6a,
		0x2a, 0x7e, 0x03, 0x3f, 0x29, 0x7b, 0x22, 0x40, 0x86, 0x54, 0x7e, 0x81, 0x69, 0xb1, 0x15, 0xea,
		0x77, 0x96, 0xb6, 0xb0, 0xaa, 0xf4, 0xd9, 0x49, 0xde, 0x19, 0x8f, 0x94, 0x04, 0xac, 0xdb, 0x2a,
		0x1d, 0x22, 0x9d, 0xb9, 0xe0, 0x50, 0x80, 0xaf, 0x35, 0x91, 0x0e, 0x80, 0x5e, 0xfd, 0x61, 0x51,
		0xe6, 0x32, 0xe2, 0x8a, 0x05, 0x7d, 0xe7, 0xba, 0x7b, 0x01, 0xfb, 0x1f, 0x4a, 0xe8, 0xe3, 0x09,
		0x1a, 0x72, 0x0e, 0xb7, 0xdc, 0x2c, 0xa1, 0xe2, 0xd7, 0x70, 0x51, 0x95, 0xfe, 0xb9, 0xd7, 0x4a,
		0x58, 0xaf, 0xdf, 0xb3, 0x53, 0x0d, 0x98, 0x8d, 0xf7, 0x0a, 0xde, 0xf2, 0xd4, 0x74, 0xae, 0x1e,
		0x33, 0xc9, 0xc2, 0xb7, 0x62, 0xa7, 0x22, 0x27, 0x48, 0xe6, 0xb9, 0xae, 0xf2, 0x84, 0xc5, 0x43,
		0xdf, 0xd8, 0xfe, 0xc4, 0x47, 0x4a, 0xf4, 0x29, 0x8f, 0x13, 0x72, 0xd9, 0xed, 0x79, 0xe9, 0xf9,
		0x20, 0x21, 0x0d, 0x7b, 0x8c, 0x43, 0xab, 0xc0, 0xa2, 0x2a, 0xcb, 0x6b, 0xcb, 0xc7, 0x56, 0x07,
		0xc5, 0x3a, 0xf7, 0x46, 0x51, 0x7e, 0xbc, 0x5f, 0xd1, 0xf8, 0xa5, 0x60, 0xd6, 0x45, 0x95, 0xac,
		0x7d, 0x07, 0x06, 0x62, 0x22, 0xc3, 0x55, 0xb2, 0x11, 0xfd, 0x48, 0x91, 0xb8, 0xca, 0x3b, 0x92,
		0xb0, 0x00, 0x19, 0xd3, 0x2c, 0x4a, 0x9b, 0x80, 0xf2, 0xcc, 0x52, 0xbd, 0x70, 0x21, 0x9c, 0xc4,
		0x73, 0xba, 0xec, 0x78, 0x53, 0x49, 0xdf, 0xdb, 0x02, 0x14, 0xb0, 0x1e, 0xe7, 0xe1, 0xc6, 0x18,
		0xd8, 0xc8, 0x51, 0xde, 0x0c, 0x3c, 0x8a, 0x9d, 0x3c, 0x20, 0x55, 0x74, 0x92, 0x35, 0x5e, 0xb9,
		0x06, 0x81, 0x63, 0xe2, 0x41, 0xab, 0x9f, 0x33, 0x5a, 0x20, 0x36, 0xf0, 0x47, 0x14, 0x24, 0xd8,
		0xea, 0x5e, 0x80, 0xd0, 0xbc, 0x95, 0x1f, 0xc7, 0x50, 0x87, 0xd5, 0x12, 0x8c, 0x13, 0xba, 0x02,
		0x2d, 0x8b, 0x9c, 0xc0, 0x2a, 0x54, 0x99, 0x2b, 0xbe, 0xf1, 0x19, 0xa3, 0x4b, 0x65, 0x2c, 0x70,
		0x7c, 0x2f, 0x6d, 0x36, 0x2b, 0x30, 0xb2, 0xe0, 0x06, 0x5e, 0xf5, 0x17, 0x7f, 0x6b, 0x3d, 0x3b,
		0x15, 0xd0, 0x11, 0x7f, 0x82, 0xc5, 0x4b, 0x2a, 0xd6, 0x2b, 0x26, 0xba, 0x8d, 0x99, 0x58, 0xc2,
		0x22, 0x7a, 0xfc, 0xad, 0xff, 0x47, 0xe5, 0xe7, 0x7a, 0xe7, 0x75, 0x5d, 0xb6, 0x9f, 0x66, 0x89
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(true);

	e =
		0xfd157dn;
	message = new Uint8Array([
		0x6c, 0x0b, 0x6d, 0x22, 0x66, 0xa2, 0x46, 0xfe, 0xda, 0x6f, 0xa5, 0xce, 0xe2, 0x2c, 0x2f, 0x33,
		0xed, 0x9d, 0x64, 0x3c, 0x1f, 0x68, 0x24, 0xd9, 0xf3, 0x27, 0x71, 0x92, 0x25, 0xbc, 0x76, 0x78,
		0xcf, 0xe4, 0xc8, 0x5c, 0xd2, 0x10, 0xed, 0x40, 0x77, 0x70, 0x1b, 0x0b, 0x56, 0x50, 0x41, 0x81,
		0x77, 0xa7, 0x4c, 0x71, 0xb8, 0xed, 0xa3, 0x30, 0x6e, 0x2e, 0xf3, 0x47, 0x4f, 0x5d, 0x32, 0x69,
		0x90, 0xea, 0xde, 0xa8, 0x4a, 0x96, 0x86, 0xe8, 0x22, 0x87, 0x8c, 0x93, 0x29, 0x97, 0x29, 0x8e,
		0x01, 0xf2, 0xb1, 0x6c, 0x42, 0xe0, 0x19, 0xe2, 0x1b, 0xdf, 0xb6, 0x7b, 0x3d, 0xf5, 0x47, 0x8d,
		0xf4, 0x44, 0x36, 0x6c, 0x97, 0xdf, 0x1b, 0xdd, 0x23, 0xdc, 0x82, 0xce, 0x23, 0xab, 0xee, 0x44,
		0xd3, 0xa6, 0x1e, 0x94, 0x84, 0xe8, 0x8e, 0xd6, 0x42, 0x63, 0x41, 0x97, 0xb5, 0x2d, 0xbe, 0xce
	]);
	signature = new Uint8Array([
		0x06, 0xeb, 0x0d, 0x95, 0xa9, 0x88, 0xe9, 0x43, 0x3b, 0x48, 0x16, 0x76, 0x03, 0xdf, 0x82, 0xc4,
		0xf9, 0x51, 0x74, 0x0c, 0xe4, 0x76, 0x71, 0xcc, 0x33, 0x74, 0xf9, 0x7a, 0x1f, 0x16, 0x8f, 0xe8,
		0x34, 0xc3, 0xbb, 0x88, 0x87, 0x4f, 0x06, 0x80, 0x0e, 0x90, 0x94, 0x57, 0x8f, 0x47, 0x2b, 0x99,
		0xfa, 0xd5, 0x32, 0x82, 0xea, 0x89, 0x64, 0xd2, 0xa8, 0x90, 0xe5, 0x0d, 0x1a, 0xb4, 0xc6, 0x1d,
		0x91, 0xbe, 0x1a, 0x2c, 0x73, 0x48, 0x45, 0xcc, 0x47, 0xe6, 0x37, 0xc8, 0x9d, 0x8e, 0x9d, 0xe4,
		0x30, 0xbf, 0x38, 0x72, 0x56, 0x1a, 0x91, 0x18, 0x3e, 0xdf, 0x79, 0x74, 0x0c, 0xe9, 0xab, 0xbd,
		0xd3, 0xc9, 0x1d, 0x41, 0x8f, 0x86, 0xdd, 0x56, 0x0f, 0xed, 0x0c, 0xee, 0x7b, 0x60, 0x42, 0xfa,
		0xa0, 0xd8, 0xbb, 0xca, 0x10, 0x5c, 0xbd, 0xe4, 0x74, 0xf0, 0x91, 0xff, 0x36, 0x88, 0xbe, 0x6c,
		0xc7, 0x6c, 0xe7, 0xb4, 0xad, 0xd8, 0x0f, 0xd7, 0xac, 0xa0, 0x6b, 0x77, 0xde, 0x4d, 0x04, 0x12,
		0xf7, 0x82, 0x45, 0xc4, 0x22, 0x90, 0x6f, 0xb3, 0x6e, 0x2a, 0xfd, 0x7f, 0x1c, 0xc6, 0x67, 0x29,
		0x48, 0x32, 0x62, 0xe4, 0xf4, 0x59, 0xdc, 0xda, 0xfe, 0x2e, 0x21, 0x7b, 0xf0, 0x7a, 0xc9, 0x6c,
		0x0b, 0x33, 0xdc, 0x98, 0xc6, 0xf2, 0xe2, 0x02, 0x31, 0x45, 0x4b, 0xd2, 0x61, 0x69, 0x2a, 0x06,
		0xca, 0x22, 0x04, 0xa1, 0xbf, 0x67, 0xb3, 0x9f, 0xb6, 0xc8, 0xa7, 0xf8, 0x6d, 0xfd, 0xfb, 0xbb,
		0x14, 0x48, 0xaf, 0x11, 0x94, 0x19, 0xd1, 0x2a, 0x9e, 0x95, 0xd2, 0x37, 0xa8, 0xab, 0xe0, 0x51,
		0x3a, 0xeb, 0x7e, 0x15, 0x7a, 0x4d, 0x88, 0x4c, 0xe2, 0x9a, 0x37, 0xc9, 0x7f, 0x07, 0xfc, 0x38,
		0xb1, 0x4b, 0x12, 0x10, 0x1d, 0xde, 0x27, 0xd4, 0x16, 0xdf, 0x51, 0x2c, 0xd6, 0xff, 0x2c, 0x7c,
		0x10, 0xa4, 0xe7, 0x24, 0xc5, 0x23, 0xc7, 0x8b, 0xe5, 0xc2, 0xd4, 0xe6, 0xa5, 0x50, 0x60, 0x82,
		0x8e, 0x2c, 0x62, 0xed, 0x47, 0x66, 0xc4, 0x35, 0x4c, 0x27, 0xc2, 0xf7, 0x76, 0xbc, 0xd9, 0x70,
		0x49, 0xc6, 0x3c, 0xf0, 0x17, 0xff, 0x78, 0x7f, 0xbf, 0x47, 0x24, 0x15, 0x0a, 0x86, 0x50, 0x1e,
		0x32, 0xa3, 0xa1, 0x87, 0xcd, 0xcb, 0x79, 0xdd, 0x81, 0xa4, 0xbd, 0x7a, 0x51, 0x62, 0x79, 0xbb,
		0x2a, 0xbe, 0x28, 0xf4, 0x2e, 0xe1, 0xfd, 0xc8, 0xec, 0x69, 0x34, 0x1c, 0xbf, 0x1d, 0xdf, 0x67,
		0x59, 0x21, 0x97, 0xb2, 0xc2, 0xca, 0x9a, 0x3f, 0x03, 0x1e, 0xa1, 0x15, 0x0d, 0xa2, 0x4e, 0xce,
		0x48, 0xf6, 0xa1, 0x3e, 0x64, 0x52, 0xc2, 0x72, 0x1a, 0xdc, 0xed, 0xfe, 0xff, 0xe5, 0xaa, 0x78,
		0x04, 0xb6, 0x82, 0xa3, 0x4c, 0x7f, 0x0f, 0x19, 0xa1, 0x48, 0x60, 0xff, 0xec, 0xbe, 0xcf, 0x12
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	n =
		0xd636bd164a6ba07108e2c93f58e061657bc5cd2dfe1a72e75b33adbdef50bcbd74ff0f6f074dfb0f9f25879d1bd6cff2d8bf354dd37f89c638921071af961ffab7559189bc18cc8a8e2a1867721eb914077503adbf08986272034bb1dba9333a886962cf19a8580b25463b0d71d3d41d0bd74c4f77da0bbd85204aabbc01506737503b3b99e0203658136cb8ab0cb62929b7c3be4eb03c947c85faac147bb148086fd59a130e545520c50e2841fbc0734b1ba6f98514cae15d7ea3ec4415fb20b7fb1eaca5db849d286414ef718f3d20dd68dfd440e042f84732afdd0f02f98f925a0f264cd37c67620285ca59be9e138a836730e87ecd754c7fb28ae75f8e24e6d14e41ba339bc801459d2b76d8928f12e8fb7dd3314fe4640f99f6dccb0e16be09b796d791ea0ec92301891a2f702bb6de46ef69b484449e23ae8cd247e7ce10bf3be855daae033d640e8dfc0e6f12abcd6e0479b29439d99ab135aea06178174a1b7048ada5645182fac8e018584fa4250e6aeb4317454e86598fc4fae0b3n;
	e =
		0xc6e57n;
	message = new Uint8Array([
		0xde, 0x53, 0xae, 0x1c, 0x40, 0xbb, 0x05, 0xa4, 0x45, 0x19, 0xe7, 0x4e, 0x93, 0x89, 0xcb, 0x49,
		0xf1, 0xc5, 0x52, 0x3f, 0xab, 0xf9, 0xcc, 0xd0, 0x38, 0xd2, 0xfe, 0x40, 0x1b, 0xd8, 0x23, 0x6c,
		0x07, 0xff, 0x30, 0x03, 0x46, 0x78, 0x5c, 0xf2, 0x5c, 0xcd, 0xe0, 0x20, 0xe7, 0x2d, 0xfb, 0x5c,
		0xc9, 0x05, 0x3a, 0x94, 0x89, 0xd0, 0xf6, 0x47, 0xf7, 0x2f, 0x1e, 0x3c, 0x0f, 0x3c, 0x37, 0x75,
		0x20, 0x1b, 0xa0, 0x5f, 0x2e, 0xd3, 0x1b, 0x4b, 0x94, 0x5c, 0x89, 0x21, 0xed, 0xfa, 0xf5, 0x53,
		0x35, 0xc9, 0xd4, 0x11, 0x2c, 0x98, 0x8b, 0xbc, 0xfb, 0xfa, 0x32, 0x9c, 0x1a, 0x9b, 0x98, 0xd5,
		0x71, 0xd1, 0x87, 0x97, 0xbe, 0x73, 0x49, 0x96, 0x36, 0xee, 0x6a, 0xba, 0x6f, 0x95, 0xc0, 0x17,
		0x7d, 0x39, 0xa9, 0x1f, 0x5c, 0xfa, 0x94, 0x16, 0x8e, 0x5c, 0xc3, 0xc7, 0x04, 0x9e, 0x4f, 0x76
	]);
	signature = new Uint8Array([
		0xc9, 0xad, 0x9f, 0x25, 0xb3, 0x54, 0x16, 0x28, 0x89, 0xad, 0x72, 0xcd, 0xb4, 0xf4, 0xc5, 0xbc,
		0x67, 0xa4, 0xb9, 0x6f, 0xa6, 0x90, 0x82, 0xaa, 0xaa, 0x0f, 0x90, 0x9d, 0xde, 0xa7, 0x7c, 0xf2,
		0xe2, 0x06, 0x14, 0xbe, 0xd0, 0x58, 0xbc, 0x2a, 0xcf, 0x43, 0x58, 0x11, 0xbc, 0xe3, 0x6c, 0x8a,
		0x30, 0xce, 0x05, 0xbb, 0x86, 0x13, 0x56, 0xcd, 0x79, 0x55, 0x30, 0x77, 0xc6, 0x9e, 0x66, 0x5b,
		0x2f, 0xf6, 0x90, 0x8a, 0x08, 0x3c, 0x27, 0x14, 0x83, 0xc5, 0xd7, 0xfc, 0x67, 0x05, 0x92, 0xf2,
		0xdb, 0xf8, 0x10, 0x0c, 0x4e, 0x5e, 0x18, 0x54, 0x92, 0x0f, 0xfb, 0x11, 0xf6, 0x35, 0xbb, 0x4d,
		0xb2, 0x39, 0x19, 0x8f, 0x40, 0x5b, 0xdf, 0x1c, 0x91, 0xfc, 0x69, 0xe9, 0xe9, 0x2a, 0x65, 0x65,
		0xee, 0x56, 0xc9, 0xa7, 0x26, 0x68, 0xe0, 0xc1, 0x16, 0x79, 0x3c, 0xed, 0xf6, 0xe2, 0xe3, 0x6b,
		0x60, 0xd2, 0x2a, 0x59, 0x93, 0x85, 0x1d, 0xd9, 0x9e, 0x6e, 0xa0, 0xab, 0x1e, 0xfb, 0x70, 0x63,
		0x7e, 0x64, 0x8f, 0x21, 0x62, 0xba, 0x9e, 0xd0, 0x7a, 0x5d, 0x1a, 0xcd, 0xc3, 0x96, 0xa8, 0x65,
		0x52, 0xb3, 0xc7, 0xdc, 0xcb, 0x61, 0x59, 0x2c, 0x32, 0x16, 0x16, 0xa9, 0xfb, 0xc6, 0x12, 0x62,
		0xbf, 0x0b, 0x8e, 0xa6, 0x7f, 0xd8, 0x23, 0x91, 0x5b, 0xec, 0x5e, 0x37, 0x09, 0x6f, 0xc3, 0x20,
		0x2d, 0xf2, 0xf1, 0xf4, 0x4b, 0x48, 0xff, 0x99, 0xa7, 0xcf, 0x0c, 0xaa, 0x2b, 0x20, 0xe5, 0x69,
		0x3e, 0xe2, 0x62, 0x7d, 0x4f, 0xd1, 0x10, 0x69, 0xc5, 0x9f, 0xd7, 0x25, 0x7d, 0x19, 0x83, 0xc0,
		0x6e, 0x66, 0xbf, 0xc2, 0x30, 0xf2, 0x1a, 0x48, 0x84, 0xce, 0x53, 0x6d, 0x00, 0x25, 0x67, 0x4c,
		0x2f, 0x92, 0x27, 0xb1, 0xdb, 0x75, 0xac, 0x07, 0x47, 0x8c, 0x39, 0x71, 0xfd, 0xd6, 0xf0, 0x39,
		0xfe, 0x9b, 0x27, 0xe6, 0xb8, 0xcb, 0x4f, 0xfe, 0xb1, 0xff, 0x4b, 0x23, 0xb7, 0x5a, 0xf8, 0xb4,
		0x03, 0x6e, 0xf2, 0x6e, 0x36, 0xa2, 0x2e, 0x62, 0x48, 0xc8, 0xc1, 0xef, 0x87, 0x9c, 0x2b, 0x88,
		0x6e, 0x83, 0x01, 0x40, 0xa9, 0xc1, 0x1c, 0x95, 0x00, 0x0e, 0x70, 0x72, 0x7c, 0x4b, 0x7c, 0x5d,
		0x3a, 0xbf, 0xdf, 0x66, 0x4c, 0xb9, 0xd5, 0x9c, 0x57, 0x9b, 0xd2, 0xa1, 0xc1, 0xce, 0x24, 0xe5,
		0xd4, 0x46, 0x64, 0x5a, 0x72, 0x8b, 0x69, 0x2b, 0x30, 0x62, 0x0a, 0xea, 0xce, 0xb5, 0xba, 0x23,
		0x0f, 0x23, 0x16, 0x88, 0x2a, 0x04, 0x36, 0x88, 0x1b, 0xb3, 0xfc, 0x3c, 0x25, 0x29, 0x1d, 0xb2,
		0x97, 0xee, 0xec, 0x59, 0x0c, 0x6d, 0x9e, 0xbd, 0xcd, 0x7f, 0x52, 0xbd, 0x79, 0xcc, 0xd8, 0x0f,
		0xf0, 0xb2, 0xf3, 0x09, 0x79, 0xa9, 0x11, 0x1a, 0xdb, 0x16, 0x5f, 0xb7, 0x01, 0xb9, 0x05, 0x0c
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xc6e57n;
	message = new Uint8Array([
		0xf3, 0x94, 0x6c, 0x8f, 0x52, 0xf2, 0x0a, 0xc9, 0xa6, 0x30, 0xde, 0xe2, 0xda, 0x59, 0x56, 0xe1,
		0xea, 0x48, 0x72, 0x15, 0xf6, 0x6a, 0x78, 0xfc, 0x97, 0xc5, 0xe9, 0x63, 0x73, 0x39, 0xb3, 0xcf,
		0x0f, 0x06, 0xa8, 0x1c, 0xe5, 0x8f, 0x2f, 0x64, 0xb7, 0x5e, 0x3a, 0x22, 0x22, 0x67, 0x78, 0x97,
		0x76, 0x91, 0xcb, 0x6d, 0xc5, 0x72, 0xfc, 0x9b, 0x3a, 0x5a, 0xae, 0x88, 0xac, 0x94, 0x90, 0x73,
		0x73, 0xe8, 0xd7, 0x12, 0x7b, 0x64, 0xec, 0x79, 0x97, 0x5d, 0x61, 0x3e, 0x17, 0xb0, 0x2a, 0xdb,
		0x9c, 0x4d, 0x0a, 0x53, 0x2b, 0xf7, 0x4b, 0x19, 0x81, 0x45, 0xb2, 0x2d, 0xa6, 0xed, 0xb2, 0x88,
		0xc5, 0x41, 0xe0, 0xba, 0x3b, 0xfa, 0xa7, 0xd2, 0xee, 0x35, 0x3d, 0x7e, 0xe0, 0xbb, 0xd5, 0x73,
		0x04, 0x85, 0x17, 0x0f, 0x50, 0x80, 0xcd, 0x3d, 0x13, 0x8d, 0xdf, 0x9a, 0x89, 0xcc, 0x81, 0xd6
	]);
	signature = new Uint8Array([
		0x28, 0x0e, 0x4d, 0xb5, 0xa0, 0xf0, 0x1d, 0xba, 0xfe, 0x7d, 0x3c, 0xc6, 0x4c, 0x1e, 0x76, 0x76,
		0x9a, 0x7f, 0xa8, 0x77, 0xdc, 0x4d, 0x26, 0xc9, 0xe0, 0xd5, 0xcc, 0x97, 0x82, 0x11, 0x9c, 0x8d,
		0x96, 0x62, 0xad, 0x25, 0xd6, 0xae, 0x59, 0xfb, 0x99, 0x03, 0x91, 0xbb, 0x1d, 0x3b, 0x59, 0x47,
		0x80, 0x9e, 0xce, 0xa7, 0x88, 0x7c, 0xc9, 0x9a, 0x47, 0xaa, 0x72, 0x75, 0xca, 0xdf, 0xef, 0x9f,
		0x82, 0x16, 0x1f, 0x7a, 0x30, 0x54, 0x92, 0x3f, 0xa8, 0x25, 0xcf, 0x16, 0xbd, 0x18, 0x9b, 0x41,
		0xc7, 0x5d, 0x34, 0x8c, 0x4d, 0x45, 0x7e, 0xf7, 0xed, 0x98, 0x9c, 0x10, 0x0c, 0x10, 0xee, 0x00,
		0x8d, 0xf1, 0x3d, 0xdf, 0x6e, 0xf9, 0xd5, 0x2b, 0xc5, 0x37, 0xf8, 0x61, 0x05, 0x97, 0x6d, 0x47,
		0x18, 0x8a, 0x28, 0x9f, 0xba, 0xe6, 0x23, 0x1c, 0xef, 0xc1, 0xf7, 0xdc, 0xd9, 0x28, 0x65, 0xdf,
		0x45, 0x88, 0xad, 0xa4, 0xee, 0xa0, 0x69, 0xec, 0xb1, 0xbf, 0xf0, 0xb5, 0x91, 0x0a, 0xd7, 0xfd,
		0x02, 0x87, 0x9c, 0xaf, 0x4c, 0x61, 0xb9, 0xfa, 0x9e, 0xc0, 0x3d, 0xbd, 0x93, 0xd6, 0x1c, 0xcc,
		0x8b, 0x52, 0x96, 0x50, 0x8a, 0xc6, 0x55, 0xd2, 0xdf, 0x9e, 0xe6, 0x8d, 0x3a, 0x0a, 0x1e, 0xd4,
		0x3e, 0xb7, 0xe7, 0x76, 0x74, 0x28, 0x6e, 0x4f, 0xd7, 0x4c, 0x5f, 0x8f, 0xfe, 0xb9, 0xc2, 0x1a,
		0x69, 0x71, 0xa6, 0x4e, 0x92, 0xe1, 0x64, 0xb0, 0x70, 0x8c, 0x09, 0x2e, 0x2f, 0x6f, 0xd6, 0xed,
		0xad, 0x76, 0x26, 0x42, 0x41, 0x6b, 0x7a, 0x98, 0x33, 0x9d, 0xee, 0xa1, 0x0d, 0x9d, 0x0a, 0x0b,
		0x3b, 0x4d, 0x19, 0x1b, 0x75, 0xdc, 0xc3, 0x81, 0x6f, 0xf6, 0x1e, 0x37, 0x7c, 0x03, 0xb2, 0x9e,
		0x88, 0x3a, 0x99, 0xb6, 0xbb, 0x98, 0x71, 0x95, 0x0b, 0xe3, 0x7b, 0xf9, 0x21, 0xb0, 0x98, 0x9b,
		0xc7, 0xee, 0x9e, 0x01, 0xb1, 0xc3, 0xb2, 0xfd, 0x8b, 0x42, 0x86, 0x84, 0xe0, 0xb5, 0x40, 0x9e,
		0x43, 0x2f, 0x6d, 0xf1, 0x04, 0xaa, 0x0f, 0x76, 0xd3, 0x8a, 0x8b, 0x3b, 0xfe, 0x71, 0x53, 0x22,
		0xc7, 0xfa, 0x59, 0xc1, 0x13, 0xb7, 0x74, 0x36, 0xcf, 0xb5, 0xbb, 0x79, 0x9b, 0xaf, 0xfd, 0xfc,
		0x74, 0xae, 0xcb, 0x38, 0xb1, 0x39, 0xc0, 0x93, 0x76, 0x69, 0xda, 0xf7, 0xdc, 0x4f, 0x1c, 0x49,
		0x0d, 0x7a, 0x8e, 0x17, 0xc8, 0x67, 0xad, 0x83, 0x4d, 0x61, 0x05, 0x31, 0x9f, 0x6e, 0xd9, 0x9e,
		0x31, 0x73, 0x19, 0x8c, 0xa7, 0x63, 0x57, 0x62, 0xf2, 0x77, 0xbf, 0x76, 0xbe, 0x3b, 0xd5, 0xd6,
		0x05, 0xdc, 0x02, 0xd0, 0x1a, 0xbb, 0x2b, 0x3a, 0x36, 0xbd, 0x24, 0x7c, 0x0c, 0xe3, 0xc8, 0x4e,
		0xfb, 0x56, 0xb0, 0xb6, 0xb6, 0x71, 0xe8, 0x65, 0xfd, 0xdd, 0xbd, 0xf2, 0x7b, 0x40, 0x2f, 0x0d
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xb98e6fn;
	message = new Uint8Array([
		0xf3, 0x32, 0x8c, 0x68, 0x8a, 0xb7, 0x64, 0xf3, 0xf4, 0x97, 0xa8, 0xb5, 0x40, 0x36, 0x83, 0x40,
		0x8d, 0xc7, 0xa8, 0x88, 0xcd, 0x04, 0x3a, 0x39, 0xc9, 0x22, 0xea, 0x4d, 0x66, 0x04, 0x5f, 0xdd,
		0x26, 0xaf, 0xda, 0x37, 0xf1, 0xfe, 0x1a, 0x32, 0x16, 0x96, 0x7d, 0xbe, 0x8d, 0x1d, 0x69, 0xbf,
		0x7f, 0xa7, 0xea, 0x1c, 0x07, 0x71, 0x9c, 0x12, 0x3b, 0xd2, 0xcc, 0xcf, 0x66, 0x6e, 0xda, 0x3c,
		0x98, 0xad, 0xe1, 0x1a, 0x61, 0x6c, 0x9a, 0x50, 0xd9, 0xf2, 0x7e, 0x83, 0xe3, 0x25, 0x2b, 0xe8,
		0xb3, 0xfd, 0x09, 0x56, 0x8e, 0x3a, 0x2d, 0xa0, 0xd1, 0x52, 0x7e, 0x21, 0x35, 0xae, 0x16, 0x98,
		0x51, 0x15, 0xeb, 0x37, 0x61, 0x69, 0xae, 0xf6, 0x45, 0x91, 0xf3, 0x2d, 0xcd, 0xb6, 0x93, 0x62,
		0x33, 0xb2, 0x4e, 0x5f, 0xe9, 0xc5, 0xb5, 0x88, 0x95, 0x8a, 0x48, 0x6c, 0x5b, 0x2a, 0xdb, 0x9a
	]);
	signature = new Uint8Array([
		0xc8, 0xa5, 0xf4, 0x45, 0x32, 0xaa, 0xab, 0x2c, 0x8d, 0x64, 0x48, 0x50, 0x04, 0xe0, 0xe1, 0xca,
		0xdb, 0x03, 0x3d, 0x4b, 0x4c, 0x45, 0x6a, 0x01, 0xf9, 0xa0, 0xf2, 0x17, 0xfd, 0x7f, 0xcd, 0xcc,
		0x0e, 0xcd, 0x6b, 0x78, 0x8c, 0xf3, 0xc7, 0xdb, 0x5e, 0x39, 0x01, 0x25, 0x40, 0xef, 0x2d, 0x69,
		0x2f, 0x04, 0xba, 0x77, 0xda, 0x29, 0xb3, 0x4d, 0x6c, 0x81, 0x7d, 0xfb, 0x45, 0xe0, 0xa4, 0x7b,
		0xa5, 0xda, 0x8e, 0x7d, 0x96, 0xf5, 0xf9, 0x29, 0xaa, 0xf8, 0x52, 0x22, 0xd2, 0xba, 0xf9, 0xe7,
		0xdc, 0x87, 0x56, 0xda, 0xe0, 0x1f, 0x78, 0x81, 0xc9, 0x9e, 0xfa, 0xff, 0x21, 0xe0, 0xdb, 0xe5,
		0x54, 0xef, 0x91, 0x27, 0xe6, 0xb3, 0x06, 0x81, 0xcc, 0x21, 0xc1, 0xcd, 0x9d, 0x75, 0x25, 0x27,
		0x9f, 0x79, 0x3e, 0xee, 0xd2, 0x92, 0x6f, 0x18, 0x06, 0x0c, 0x1f, 0xcc, 0x35, 0x38, 0xc6, 0x35,
		0x15, 0xdb, 0xd8, 0xca, 0x66, 0x07, 0xca, 0xc1, 0xf6, 0x5c, 0xa8, 0xa3, 0xff, 0x9e, 0xf9, 0x2b,
		0x7a, 0x3e, 0xf6, 0x8a, 0x5e, 0xca, 0xb3, 0x66, 0x08, 0x56, 0x77, 0xe7, 0x13, 0x4b, 0x7c, 0x32,
		0xb9, 0x9a, 0x30, 0x56, 0xdb, 0xb8, 0xb7, 0xcc, 0x61, 0x7e, 0x3d, 0x3a, 0x6d, 0x1a, 0x42, 0xe5,
		0xae, 0xe5, 0xd2, 0x46, 0x32, 0x91, 0x9d, 0xcc, 0xf6, 0x82, 0x66, 0x77, 0xbe, 0x86, 0x33, 0x81,
		0x9c, 0x27, 0xda, 0x66, 0xf0, 0xee, 0xb3, 0x04, 0x8c, 0xff, 0x20, 0x2c, 0x42, 0x40, 0x7a, 0x74,
		0x46, 0x9c, 0x11, 0x4d, 0x49, 0x62, 0x70, 0xe3, 0x57, 0x4c, 0x5a, 0x51, 0x62, 0x57, 0x98, 0x6a,
		0x23, 0x4c, 0x1c, 0x6e, 0x48, 0xe8, 0x68, 0xdf, 0x31, 0xb6, 0xf2, 0xe6, 0x35, 0x2a, 0x1d, 0x83,
		0x8e, 0xc8, 0xb5, 0x82, 0x17, 0x4e, 0x4a, 0x49, 0x3a, 0x47, 0xa1, 0x7c, 0x3e, 0xe0, 0xbe, 0x12,
		0xde, 0x20, 0x1a, 0x9d, 0x60, 0xdf, 0x89, 0xa9, 0xdb, 0x14, 0x50, 0x94, 0xd0, 0x4f, 0x96, 0x37,
		0x02, 0x6d, 0x3a, 0x64, 0xd0, 0x22, 0xb0, 0x2b, 0x05, 0x2e, 0x3e, 0x0c, 0xee, 0x55, 0xf7, 0x3b,
		0x72, 0x9b, 0x09, 0xf6, 0xcd, 0x7f, 0x84, 0xf7, 0xab, 0xc1, 0xa3, 0x57, 0xcc, 0x1e, 0x10, 0xb5,
		0xa6, 0xce, 0xa2, 0x48, 0x6a, 0xa8, 0xfd, 0xb0, 0xd3, 0x6c, 0xda, 0xd9, 0xb6, 0x0b, 0xe1, 0xc6,
		0xdf, 0xbd, 0x64, 0x6c, 0x00, 0x36, 0x47, 0xf5, 0x70, 0x71, 0xcf, 0x67, 0x91, 0xf1, 0xe5, 0xe3,
		0x86, 0xba, 0x87, 0x6c, 0xe1, 0xaf, 0xaf, 0xe6, 0x36, 0x45, 0x66, 0x47, 0xd4, 0x79, 0x4a, 0x0b,
		0x93, 0x2e, 0x8f, 0x4d, 0x60, 0x0f, 0x85, 0xa2, 0xe6, 0xa4, 0x85, 0xe9, 0x70, 0x08, 0x44, 0xa1,
		0x35, 0x4f, 0xb6, 0x21, 0x1e, 0xec, 0x8a, 0x25, 0xaa, 0xe2, 0xae, 0x91, 0x94, 0x4e, 0x37, 0x5c
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008c6e57n;
	message = new Uint8Array([
		0x78, 0x33, 0x79, 0xf2, 0x95, 0xb2, 0xbb, 0x2e, 0x1d, 0xae, 0x51, 0x15, 0xb3, 0x4c, 0x99, 0x18,
		0x54, 0xa5, 0x17, 0x40, 0x3a, 0x1c, 0x74, 0x1d, 0x00, 0xf0, 0xc7, 0x00, 0x08, 0x0d, 0x14, 0x6a,
		0x1a, 0x28, 0x12, 0xc3, 0x4d, 0x0a, 0x32, 0x4f, 0x2b, 0x2c, 0xdc, 0x5f, 0x10, 0x85, 0xfc, 0xc4,
		0xd3, 0xa0, 0xbd, 0x89, 0xa8, 0xf1, 0x94, 0xe2, 0x45, 0x69, 0x81, 0x5f, 0x44, 0x48, 0x92, 0x65,
		0xc9, 0x33, 0xa8, 0xdf, 0x64, 0x86, 0x7d, 0x31, 0x39, 0xeb, 0xe6, 0x6d, 0x5e, 0x2c, 0x56, 0xca,
		0x84, 0x45, 0xa4, 0x52, 0xda, 0xbe, 0x0e, 0xda, 0x2e, 0x37, 0x7d, 0x37, 0x55, 0x45, 0x0b, 0xaf,
		0xce, 0x7c, 0xc2, 0xae, 0xa2, 0xcd, 0xa6, 0xba, 0x8e, 0x13, 0xf6, 0xa9, 0x64, 0xe8, 0xb0, 0x12,
		0xaf, 0xbd, 0x53, 0x01, 0x96, 0x2a, 0xe8, 0xef, 0x03, 0x82, 0x43, 0xf1, 0x04, 0xab, 0x87, 0x2f
	]);
	signature = new Uint8Array([
		0x33, 0x0d, 0x94, 0x97, 0x42, 0x70, 0x83, 0x53, 0x58, 0xe4, 0xad, 0x6a, 0x73, 0xa3, 0xb1, 0x68,
		0x67, 0x82, 0x70, 0x6b, 0x5f, 0xca, 0xd4, 0x3d, 0x7e, 0x5f, 0x66, 0xd6, 0x1b, 0x7a, 0x3b, 0xaa,
		0x85, 0x9f, 0xb5, 0x8f, 0xb3, 0xac, 0xa2, 0x62, 0xd4, 0x75, 0x1d, 0x1f, 0xa7, 0x66, 0x12, 0x8f,
		0x96, 0x1b, 0x3a, 0x33, 0x80, 0xc8, 0x3d, 0x3f, 0x9e, 0x25, 0x08, 0x10, 0xb3, 0x04, 0x41, 0x7f,
		0x64, 0x77, 0x44, 0x6d, 0x28, 0x8f, 0x07, 0x71, 0x36, 0x82, 0xe3, 0xc9, 0xf4, 0x76, 0x32, 0x9d,
		0xf7, 0x5d, 0xb1, 0xe4, 0xff, 0x04, 0x32, 0xc3, 0xf1, 0xa7, 0xb3, 0x41, 0x34, 0x88, 0x99, 0x28,
		0x8c, 0x05, 0x61, 0x20, 0xa3, 0xa3, 0x84, 0x4d, 0x1e, 0xfe, 0xe7, 0xe1, 0x42, 0x7f, 0xfb, 0x53,
		0x3c, 0xb1, 0xd4, 0x53, 0xcf, 0x30, 0x86, 0x54, 0x49, 0x9f, 0x26, 0xe1, 0x65, 0x00, 0xd2, 0xba,
		0x52, 0xe9, 0x4b, 0xd0, 0xc2, 0xb9, 0x1e, 0x4f, 0x0f, 0xd7, 0x47, 0xd7, 0x3e, 0x04, 0xa8, 0x16,
		0x65, 0xd1, 0xe9, 0xe8, 0xa7, 0xe2, 0xb1, 0xeb, 0xcf, 0x91, 0xdd, 0x85, 0x04, 0x3e, 0x20, 0x84,
		0x69, 0x08, 0xb2, 0xab, 0x26, 0xa8, 0xf0, 0x1a, 0x8a, 0x36, 0x62, 0xfa, 0x41, 0x30, 0x46, 0xc6,
		0x87, 0x04, 0xd1, 0x39, 0x61, 0x6a, 0x48, 0x35, 0x22, 0x3b, 0x04, 0x22, 0x1e, 0x3f, 0xad, 0xf5,
		0xa0, 0x6e, 0x0b, 0x1e, 0xee, 0x72, 0x22, 0x98, 0xe2, 0x87, 0x93, 0x2d, 0xc6, 0x76, 0xa5, 0x03,
		0x8e, 0xfb, 0x6c, 0x60, 0x35, 0xd1, 0xe0, 0x64, 0xbd, 0x02, 0x55, 0x36, 0x1a, 0x74, 0xe4, 0xf8,
		0xef, 0xaa, 0x75, 0x4a, 0x27, 0xfd, 0x03, 0x85, 0xb5, 0x4c, 0xa4, 0xa4, 0xff, 0x16, 0x42, 0x2f,
		0x42, 0x7e, 0xf4, 0x82, 0x39, 0x3b, 0x1d, 0xf0, 0x5c, 0xe0, 0x3f, 0xd3, 0x0d, 0x82, 0x41, 0x9a,
		0x78, 0xdc, 0xc9, 0x88, 0xe4, 0xdd, 0x20, 0x83, 0xbf, 0x97, 0xae, 0x09, 0xc2, 0x6a, 0x2b, 0x52,
		0xa1, 0x0d, 0xe4, 0x4d, 0xcf, 0x9e, 0xcb, 0xa2, 0xb2, 0x48, 0x03, 0xe9, 0x3a, 0xd9, 0xe3, 0x66,
		0x0c, 0xdf, 0x00, 0xb1, 0xf6, 0x5b, 0xc5, 0x9b, 0x8a, 0x83, 0x14, 0x61, 0xf9, 0x2a, 0x26, 0x3f,
		0xae, 0x72, 0x78, 0xc1, 0xe4, 0x21, 0xc8, 0x01, 0x86, 0x25, 0x1d, 0x33, 0xb7, 0xeb, 0xc1, 0x4f,
		0xec, 0xe0, 0x13, 0x5f, 0x39, 0xb3, 0xf9, 0xc8, 0x63, 0x1e, 0x49, 0xe2, 0x06, 0x9e, 0x16, 0x75,
		0xc7, 0x24, 0xc5, 0x42, 0xb8, 0x03, 0x39, 0x8e, 0x97, 0x97, 0x5c, 0x89, 0xb7, 0xa9, 0x26, 0x49,
		0xb7, 0x90, 0xb1, 0xfd, 0xcb, 0xc1, 0xcd, 0xe0, 0xfe, 0x5d, 0xcc, 0xc6, 0xb8, 0x20, 0x58, 0x06,
		0x7e, 0xb2, 0x27, 0xfd, 0x6c, 0x60, 0xba, 0xb3, 0x3a, 0x8c, 0x5e, 0xa0, 0xaf, 0xee, 0x16, 0x17
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xc6e57n;
	message = new Uint8Array([
		0xe8, 0x83, 0xd8, 0x55, 0x9b, 0x04, 0xcb, 0x61, 0x0d, 0x30, 0x00, 0xd6, 0xaf, 0x88, 0x87, 0xd7,
		0x2b, 0xd6, 0x8e, 0x29, 0x3f, 0xb7, 0xd5, 0xdd, 0xcc, 0x57, 0x62, 0x30, 0x2a, 0x7c, 0x75, 0xaf,
		0xbf, 0xc6, 0xbe, 0x9f, 0xd0, 0x35, 0xce, 0x9b, 0x96, 0xeb, 0xcc, 0x7f, 0x95, 0x33, 0x69, 0x85,
		0x29, 0xc3, 0x15, 0xae, 0x62, 0x3e, 0x74, 0x64, 0x11, 0xfd, 0x0b, 0x5d, 0x23, 0x0f, 0x40, 0xc2,
		0x2e, 0x7e, 0x81, 0x91, 0x4a, 0xd4, 0xc3, 0x40, 0x22, 0xde, 0x2e, 0xa3, 0x4b, 0xb0, 0x16, 0x0f,
		0xd4, 0xe9, 0x2e, 0xc0, 0x1e, 0x39, 0xf8, 0x78, 0xed, 0x20, 0x80, 0x69, 0xc0, 0xf8, 0x4a, 0x55,
		0x5e, 0x35, 0x89, 0xf4, 0xb2, 0xec, 0x91, 0x96, 0xd8, 0x92, 0x8f, 0x09, 0x78, 0x07, 0x78, 0xbd,
		0x53, 0xd2, 0x3f, 0x26, 0x1b, 0xaf, 0x4b, 0x62, 0x88, 0x47, 0x28, 0x1c, 0xa8, 0x3e, 0x7d, 0xb0
	]);
	signature = new Uint8Array([
		0xb0, 0xe5, 0x96, 0xb4, 0x5e, 0x09, 0xda, 0x38, 0x6b, 0xac, 0xde, 0x6e, 0xc9, 0xc4, 0x4e, 0x8a,
		0x3a, 0xa5, 0x4a, 0xd2, 0xd4, 0x13, 0xc9, 0x41, 0xbf, 0xa0, 0x77, 0xde, 0x7b, 0x38, 0x38, 0xaf,
		0xee, 0xa9, 0x8e, 0xb0, 0x18, 0xed, 0x40, 0xbe, 0x73, 0xf5, 0xf8, 0xd6, 0x17, 0xa2, 0x12, 0xbc,
		0x9e, 0xca, 0x17, 0x17, 0x81, 0xc6, 0xec, 0x83, 0x77, 0x69, 0xd5, 0x87, 0x45, 0x0f, 0x17, 0xcb,
		0x6a, 0x1b, 0xf5, 0x94, 0xa6, 0x20, 0xdc, 0xd2, 0x54, 0xe0, 0x90, 0x9a, 0x9f, 0xfa, 0xc9, 0x81,
		0x4f, 0xdd, 0x49, 0x53, 0xb8, 0x85, 0xcf, 0xf3, 0xf0, 0x99, 0xef, 0x24, 0x32, 0x06, 0xdc, 0x3f,
		0x7c, 0x12, 0x73, 0x25, 0xea, 0x0b, 0xba, 0x1e, 0xa3, 0x34, 0x1a, 0xaf, 0xfc, 0xba, 0xdf, 0xee,
		0x48, 0x45, 0xeb, 0xb5, 0x5e, 0x3a, 0xd9, 0x7e, 0x78, 0xbf, 0x41, 0xca, 0x41, 0xea, 0xb4, 0xe7,
		0x84, 0xb6, 0x09, 0x5b, 0xe6, 0x35, 0xba, 0x7a, 0xad, 0xc5, 0xb5, 0x8d, 0x70, 0x2a, 0xa8, 0x0f,
		0xce, 0x64, 0xff, 0x62, 0x52, 0xcd, 0xa3, 0x83, 0x55, 0x7c, 0x37, 0xaf, 0xa7, 0x81, 0x48, 0x87,
		0x9e, 0x0d, 0xed, 0xc6, 0xd3, 0x82, 0x8e, 0x8e, 0x8f, 0xab, 0xac, 0xe3, 0x88, 0x5f, 0x9f, 0x55,
		0xae, 0x88, 0x7c, 0x44, 0xe9, 0x35, 0x38, 0x6a, 0x3d, 0x96, 0x1f, 0xa7, 0xbe, 0x2b, 0xab, 0xd8,
		0x71, 0x6e, 0xdb, 0x5d, 0xbb, 0xc0, 0xe5, 0x87, 0xba, 0x06, 0xa7, 0x8e, 0x34, 0x92, 0xc6, 0xc0,
		0x29, 0x81, 0x3a, 0x0d, 0xbe, 0xad, 0x05, 0x5c, 0x8d, 0x75, 0x57, 0x3d, 0x70, 0xc3, 0xdb, 0x7a,
		0x08, 0x7c, 0x8f, 0xdb, 0xd8, 0xc8, 0xda, 0x35, 0xac, 0x2d, 0xc1, 0x5f, 0x6e, 0x8f, 0x21, 0xdf,
		0x1e, 0x9f, 0x25, 0xd8, 0x4b, 0x9b, 0xa1, 0x86, 0xb3, 0xf3, 0xc8, 0xec, 0xad, 0x13, 0xea, 0xcd,
		0x98, 0xb1, 0x8c, 0xb8, 0xca, 0x2e, 0x31, 0x2f, 0x1f, 0x7c, 0x7a, 0x71, 0x9b, 0x18, 0x4a, 0x52,
		0x4b, 0x00, 0x3f, 0x22, 0xe4, 0xc5, 0x04, 0xb2, 0xc0, 0x85, 0xc8, 0x5f, 0xfb, 0x1c, 0x03, 0x5f,
		0xc0, 0x71, 0x7d, 0x19, 0x28, 0x92, 0x29, 0x64, 0xbb, 0x83, 0x7c, 0xe9, 0xce, 0x41, 0x71, 0xcf,
		0xbf, 0x09, 0xb6, 0x58, 0x02, 0x81, 0xf7, 0xf8, 0xc0, 0xdf, 0xe0, 0x00, 0x8e, 0xc4, 0x70, 0x83,
		0x52, 0xb4, 0x7a, 0x0d, 0x81, 0x2d, 0xbf, 0xce, 0x18, 0xfc, 0x56, 0x4c, 0x6d, 0x1b, 0x0d, 0x57,
		0x56, 0x84, 0x8b, 0x08, 0x77, 0x2c, 0x33, 0xc9, 0xa0, 0x05, 0x2e, 0x1d, 0x50, 0xb4, 0xd9, 0xcb,
		0xa5, 0x1e, 0x81, 0xd7, 0x5e, 0xd0, 0x97, 0xb6, 0xc2, 0x9a, 0x0d, 0xd6, 0xed, 0x5f, 0xdb, 0x2c,
		0xf4, 0x17, 0xeb, 0x0c, 0x1e, 0x09, 0xcf, 0xea, 0xc7, 0x51, 0x49, 0xa3, 0x82, 0x68, 0x82, 0x1a
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(true);

	e =
		0xc6e57n;
	message = new Uint8Array([
		0x1f, 0xad, 0xa4, 0x0d, 0x53, 0xaf, 0x00, 0x11, 0x40, 0x3e, 0x97, 0xc0, 0x15, 0x56, 0xc2, 0x22,
		0x8c, 0x61, 0x99, 0xfa, 0x27, 0x62, 0x5c, 0x9e, 0xb9, 0x73, 0x12, 0x05, 0x29, 0x71, 0x6f, 0x22,
		0x73, 0xf6, 0xfb, 0x70, 0xef, 0x87, 0x71, 0xcf, 0xd6, 0x0f, 0x65, 0x8e, 0x02, 0x8c, 0x2a, 0xc9,
		0xf5, 0x09, 0xf3, 0xf5, 0x1d, 0xcc, 0x38, 0xb9, 0x57, 0xd0, 0x5c, 0xff, 0xb1, 0x76, 0x8c, 0x4c,
		0x74, 0x77, 0xea, 0x4c, 0x62, 0x1d, 0xeb, 0xb2, 0x3c, 0xb3, 0xfd, 0x3f, 0x87, 0x3a, 0x6e, 0x1f,
		0x90, 0x5d, 0x89, 0x7c, 0xae, 0xa7, 0x02, 0x4e, 0xc7, 0xf4, 0x94, 0x70, 0x15, 0x25, 0xe8, 0xf9,
		0x2a, 0x18, 0xb9, 0xc9, 0x32, 0xd8, 0x36, 0x62, 0x79, 0x10, 0xa7, 0xfa, 0x2d, 0xc6, 0x54, 0xce,
		0x64, 0x45, 0xa2, 0xb8, 0x60, 0x5b, 0x80, 0x04, 0x12, 0xc5, 0x01, 0x80, 0xde, 0xe8, 0x4a, 0xd2
	]);
	signature = new Uint8Array([
		0x48, 0x24, 0xeb, 0xee, 0xa8, 0x4b, 0x2e, 0x2a, 0x50, 0x44, 0xc5, 0xba, 0x67, 0x3b, 0xe3, 0x12,
		0x2e, 0x74, 0x4c, 0xcb, 0x4c, 0x43, 0x1a, 0xa0, 0x1a, 0x70, 0x21, 0x4f, 0x37, 0x1e, 0xd9, 0xb4,
		0xaa, 0x65, 0xcf, 0x63, 0x11, 0xd8, 0x44, 0xf0, 0xea, 0xa0, 0x2a, 0xc8, 0x59, 0x52, 0xb4, 0x80,
		0x42, 0x2f, 0x57, 0xaa, 0xdb, 0x3b, 0xe1, 0xe3, 0xab, 0xd8, 0x37, 0x90, 0x63, 0x7b, 0xba, 0x5b,
		0x16, 0xda, 0x39, 0x5d, 0x7d, 0x74, 0x8a, 0x57, 0x2d, 0x49, 0x52, 0x87, 0xc9, 0x27, 0x3a, 0xa0,
		0x90, 0xc3, 0x95, 0xdf, 0xe3, 0x5f, 0x58, 0x1f, 0x23, 0x0f, 0x93, 0x13, 0xb5, 0x51, 0xe0, 0x37,
		0x46, 0xf3, 0x83, 0x0c, 0x7c, 0xc0, 0x94, 0x9c, 0x5b, 0x0d, 0x1d, 0xbd, 0xd9, 0xa8, 0x7d, 0x31,
		0x5a, 0x8e, 0x62, 0xc5, 0xe4, 0xfd, 0xdc, 0xf3, 0x77, 0x73, 0x00, 0x12, 0xe2, 0x23, 0x27, 0x9c,
		0x25, 0x50, 0x04, 0x3d, 0x55, 0x0a, 0x6c, 0xa6, 0x7f, 0xc3, 0xf0, 0x90, 0x5a, 0xc7, 0x1e, 0x35,
		0xb5, 0x96, 0xcb, 0xa9, 0x90, 0xe1, 0x83, 0xec, 0x08, 0x39, 0xf3, 0xc3, 0x98, 0x46, 0xa1, 0x0f,
		0xc2, 0xf9, 0xa5, 0xa5, 0x86, 0x8d, 0x22, 0x4b, 0x1c, 0xc6, 0xff, 0xcc, 0xdf, 0x6e, 0x86, 0xf5,
		0x71, 0xbc, 0xdc, 0xfd, 0xd5, 0xf1, 0xcf, 0x5a, 0x48, 0xd3, 0x35, 0x4c, 0x78, 0xce, 0xd6, 0x4d,
		0x21, 0x2f, 0x62, 0xb8, 0xd0, 0xf4, 0x39, 0x78, 0x2e, 0x52, 0xcd, 0x32, 0xf5, 0x00, 0xc8, 0xbb,
		0xb7, 0x1e, 0xe8, 0x44, 0x32, 0xd0, 0xb8, 0x1a, 0xeb, 0xbb, 0x18, 0x3a, 0x3c, 0x71, 0x6d, 0x41,
		0xce, 0x0b, 0x0c, 0x31, 0xd1, 0x98, 0xf9, 0x6c, 0x81, 0x3d, 0x8f, 0x0a, 0x3f, 0xf8, 0x92, 0x94,
		0xab, 0x65, 0x46, 0x57, 0x71, 0x19, 0x60, 0x2c, 0x74, 0x24, 0xe9, 0x33, 0xb9, 0x9f, 0x79, 0x90,
		0xa8, 0x8d, 0x1a, 0xb6, 0xa8, 0xde, 0x43, 0xca, 0x83, 0x85, 0x27, 0xf4, 0x9b, 0x61, 0x06, 0x66,
		0xe0, 0x98, 0x5e, 0xd6, 0x91, 0xe5, 0xd0, 0xf0, 0x4c, 0x0f, 0x75, 0xec, 0xd3, 0x62, 0x36, 0x17,
		0x99, 0x96, 0x73, 0xa3, 0x04, 0x87, 0x25, 0x7a, 0x49, 0xdb, 0x23, 0xde, 0x7b, 0x92, 0xc2, 0x5f,
		0x22, 0xbd, 0xc2, 0xcc, 0x16, 0x7f, 0x20, 0x39, 0x60, 0x98, 0xe9, 0x24, 0xb2, 0x31, 0x6a, 0x51,
		0x52, 0xd6, 0x77, 0x80, 0x58, 0x0a, 0x77, 0xd8, 0x86, 0xcc, 0x0a, 0xbe, 0x4b, 0x17, 0xcf, 0x3a,
		0x31, 0x8b, 0x8e, 0x92, 0xfb, 0xbd, 0xd8, 0x3e, 0x99, 0xa3, 0x9c, 0xbb, 0x3b, 0x74, 0xc7, 0x2d,
		0xec, 0x83, 0x9e, 0xa4, 0x7f, 0x53, 0x42, 0x35, 0xb1, 0xaa, 0x7a, 0xb5, 0xe7, 0x06, 0x3e, 0x54,
		0xcb, 0xa6, 0x23, 0xa2, 0xcc, 0xb7, 0x30, 0xac, 0x6f, 0x68, 0xe3, 0x5a, 0x9b, 0xba, 0xd9, 0x90
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	n =
		0x9c213ea373631f572e5e46225b95a0f5ea8ab0a5ec7090a3b0181c5906dc22fd1bd73d11471242a2ed1824e601017f5b5354b92fdb43d4da00a82427d05366a4d552c40d69d200485d5d5db83cf523e61a834b40ccd401087fbb93d81dbed7b2ee2381a1241ac68f2afc02157ee0c73cc66c02a6c6eb2dc35145ae55d7708412a3410f204c492376d6315cedf253af91f31dcab34f72c206ad81e800509864fe9255d046ac25dbdf4954d2350324722e73c1f25d089f87542ad907fb37eceaefb330f4325e97f5eabc04096a8fabba978589e355445d9543274c1c38ff849ba8c2911f07030634c132ccaf4e4f57a5ad9244f5df0ee25af8ef2fc7b29fdf7cc18404e20efaaffa451ec41ab838d594906ff2cad52dcbd0e9a68ef7b06c253710e1318d09ad07012767a89124177df50d1684679e14306889d9a7ac5143d4861b7d6ae77992efa73e0aba9da0ad9a6888bc804dbd07bc26a8a5dfbd292a0efa96867fdb92e845c36e3433cf292e0e31662480257fcf466f7f65d814bb3e33992fn;
	e =
		0xefabb9n;
	message = new Uint8Array([
		0xc6, 0x6e, 0x28, 0x55, 0x71, 0x24, 0x27, 0x3e, 0x4a, 0x1f, 0xdf, 0x51, 0x9a, 0xd9, 0xfb, 0x64,
		0x6e, 0x76, 0x1b, 0x64, 0x8f, 0xec, 0x6c, 0x9a, 0xb4, 0x66, 0x7b, 0x2d, 0xf7, 0xeb, 0x4b, 0xe8,
		0x86, 0x3a, 0xa5, 0x3e, 0x9b, 0xf9, 0xaf, 0x8b, 0xae, 0x0f, 0xc0, 0x9d, 0xe9, 0x4f, 0x73, 0x73,
		0xdc, 0x56, 0xfa, 0x44, 0x72, 0xb6, 0xb5, 0xc4, 0x23, 0x54, 0x03, 0xa2, 0x6c, 0x0e, 0x59, 0x55,
		0x7c, 0xa1, 0x91, 0x18, 0x31, 0xca, 0x84, 0x33, 0x42, 0xac, 0xda, 0x7d, 0xbe, 0x72, 0x21, 0x1f,
		0xb5, 0x35, 0x1d, 0x9a, 0x34, 0x20, 0x5f, 0x0c, 0x77, 0xd2, 0x19, 0xaf, 0x5b, 0x03, 0x31, 0xa2,
		0x12, 0x6b, 0x94, 0xec, 0x1a, 0xdf, 0xcd, 0xbe, 0x70, 0xbe, 0xd6, 0xf8, 0x01, 0x8b, 0x2e, 0xef,
		0x61, 0xdb, 0x2b, 0x6d, 0xbf, 0x72, 0x92, 0xfa, 0x19, 0xa9, 0x65, 0x5a, 0xac, 0x13, 0xfc, 0x57
	]);
	signature = new Uint8Array([
		0x89, 0xfb, 0x67, 0xfc, 0xf9, 0xeb, 0x4b, 0xc9, 0xc6, 0xee, 0x97, 0x13, 0xce, 0x1a, 0xab, 0x7d,
		0xbe, 0x72, 0xb9, 0xc2, 0xf9, 0x2b, 0xee, 0x72, 0x95, 0x52, 0x1e, 0x2c, 0x9b, 0x13, 0x80, 0xb0,
		0x4d, 0xf6, 0x69, 0xf2, 0xa8, 0xcc, 0x06, 0xfe, 0x94, 0xd3, 0x84, 0x3c, 0x64, 0xd4, 0xb4, 0xec,
		0xef, 0x51, 0x15, 0x24, 0x95, 0x15, 0x44, 0xb2, 0xd6, 0xa0, 0x77, 0x05, 0x43, 0xbf, 0x45, 0x16,
		0x6f, 0xde, 0xf8, 0xcf, 0xff, 0x91, 0xd9, 0xb9, 0x52, 0x17, 0xf1, 0x45, 0x3f, 0xf3, 0x53, 0xd9,
		0x24, 0x1d, 0x3d, 0x75, 0x5b, 0x80, 0x5a, 0x1e, 0x2e, 0xf9, 0x98, 0x07, 0x82, 0xaf, 0xdf, 0x3a,
		0x9f, 0x30, 0x74, 0xf4, 0x60, 0xda, 0xfe, 0xbc, 0xf9, 0x39, 0xb9, 0x0e, 0x11, 0xe8, 0x70, 0xf3,
		0x9b, 0x3d, 0x82, 0x21, 0xdd, 0xa9, 0x8c, 0x3b, 0x0d, 0x26, 0xff, 0x5b, 0x95, 0x3a, 0x44, 0x45,
		0xbd, 0x4e, 0x63, 0xd9, 0x15, 0xbd, 0xe3, 0x4f, 0x0a, 0xc8, 0xba, 0x13, 0xb6, 0x04, 0xe3, 0xbd,
		0x53, 0x70, 0x14, 0x26, 0x10, 0x06, 0x4a, 0x12, 0x21, 0x7a, 0x82, 0xe9, 0xf3, 0x3f, 0x7e, 0x5e,
		0x92, 0xd9, 0xa4, 0x6d, 0x6b, 0xfd, 0xff, 0x38, 0x68, 0x92, 0x3f, 0xc8, 0x6d, 0x30, 0xd7, 0x22,
		0xe4, 0xf6, 0xd2, 0xe0, 0x3c, 0xc0, 0x86, 0x31, 0xf7, 0xf1, 0x3a, 0x31, 0x92, 0x78, 0xee, 0x76,
		0xec, 0x01, 0x42, 0x14, 0x98, 0x3b, 0x01, 0x1b, 0x5f, 0xd8, 0x62, 0xfe, 0x18, 0x9e, 0x84, 0xea,
		0x67, 0x49, 0x97, 0x17, 0xa4, 0x06, 0xdf, 0x4d, 0x0b, 0xcb, 0x56, 0xb3, 0x12, 0xf0, 0x35, 0xbe,
		0x82, 0x8f, 0x03, 0x80, 0x33, 0x15, 0x03, 0xde, 0xe9, 0xb3, 0x03, 0xa4, 0xf9, 0x6b, 0xd6, 0x87,
		0xdd, 0x36, 0xfb, 0xc4, 0x3c, 0x53, 0xa6, 0x54, 0x96, 0x76, 0x6a, 0xc2, 0xe0, 0xd6, 0xed, 0xa7,
		0xe4, 0x15, 0xbe, 0x87, 0xab, 0xee, 0x12, 0x83, 0x99, 0x8d, 0x56, 0xb1, 0xc5, 0x4c, 0xc5, 0xf9,
		0xbc, 0xb0, 0x8c, 0x0a, 0x59, 0xc0, 0x70, 0xc0, 0x72, 0xba, 0x26, 0x09, 0x50, 0xc7, 0x50, 0x08,
		0x68, 0x80, 0x8d, 0xa6, 0xa7, 0xc0, 0xef, 0x77, 0x3e, 0x3d, 0x2e, 0x6d, 0x06, 0xa6, 0x86, 0xce,
		0xc3, 0x6b, 0xc3, 0x4a, 0x8e, 0xf7, 0xf2, 0x4d, 0x26, 0x75, 0x6e, 0x48, 0x5d, 0xfa, 0x4b, 0x71,
		0xdb, 0x26, 0x17, 0x4d, 0xb3, 0xef, 0x1e, 0xa6, 0x1e, 0x15, 0x25, 0x55, 0x79, 0xe6, 0x3c, 0xb1,
		0x64, 0xeb, 0x6e, 0xed, 0x53, 0x8c, 0x87, 0xac, 0x43, 0xf7, 0xdf, 0x50, 0xbf, 0x1a, 0xb8, 0x3f,
		0x2a, 0x85, 0xe7, 0x53, 0xad, 0x6e, 0x36, 0x11, 0xd3, 0x6f, 0x21, 0x37, 0x80, 0x1e, 0x03, 0xfd,
		0xbf, 0x58, 0xd8, 0xe1, 0x41, 0x6c, 0x00, 0x8c, 0xbd, 0x7c, 0x49, 0xe0, 0xa4, 0x48, 0x59, 0xd1
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xefabb9n;
	message = new Uint8Array([
		0xd6, 0x9f, 0xc3, 0x0f, 0x76, 0x0d, 0xd6, 0x02, 0x58, 0x78, 0xa1, 0xba, 0x22, 0x7e, 0x9b, 0xe2,
		0xa7, 0x3c, 0xc1, 0x94, 0x66, 0xbf, 0x38, 0x6f, 0x53, 0xbb, 0x34, 0xea, 0xdb, 0x80, 0x18, 0xe7,
		0x22, 0x29, 0xdf, 0x8c, 0x8f, 0x17, 0xba, 0x4e, 0x8a, 0x9e, 0xfa, 0x4e, 0x84, 0xfd, 0x31, 0xe9,
		0x38, 0x94, 0x94, 0x8a, 0x31, 0x51, 0xa4, 0xc3, 0x8d, 0x6c, 0x0e, 0x9d, 0x00, 0x54, 0xcf, 0x2c,
		0x1c, 0xe9, 0x9b, 0x66, 0xcf, 0xeb, 0x80, 0x35, 0x2d, 0xb2, 0xc7, 0xca, 0x6f, 0x20, 0x1b, 0x35,
		0x3c, 0xd5, 0xed, 0x32, 0x28, 0xa1, 0x16, 0x46, 0x7b, 0x3f, 0xbe, 0x0b, 0x33, 0x40, 0x7d, 0xc8,
		0x4c, 0x45, 0xc1, 0x45, 0x3e, 0x71, 0x70, 0xde, 0xc8, 0x1e, 0xce, 0xd5, 0xec, 0xcf, 0xa0, 0xed,
		0x3b, 0x66, 0x92, 0x34, 0x52, 0x98, 0xd6, 0x20, 0xa5, 0x9d, 0x0e, 0xdd, 0x7b, 0x2c, 0x6c, 0xe6
	]);
	signature = new Uint8Array([
		0x30, 0x00, 0xb8, 0x58, 0xd0, 0x21, 0x77, 0x05, 0x95, 0x9e, 0x33, 0x77, 0x18, 0x53, 0xc3, 0x9f,
		0xac, 0xa2, 0xf0, 0x7d, 0xb5, 0x60, 0x0a, 0xb6, 0xb9, 0x37, 0xc0, 0x14, 0x43, 0x3c, 0x03, 0x01,
		0x97, 0xa7, 0xe7, 0x83, 0x43, 0x74, 0xc5, 0xc0, 0xea, 0x66, 0xbe, 0xe8, 0xe5, 0xe9, 0x0e, 0x74,
		0x54, 0x60, 0x1e, 0x9f, 0xc9, 0x94, 0x07, 0x67, 0x58, 0xc8, 0xa0, 0x61, 0x57, 0xc0, 0xf2, 0x33,
		0x32, 0xa9, 0xf3, 0x6e, 0xed, 0xdf, 0x07, 0x79, 0x66, 0x4a, 0x20, 0xc6, 0xdb, 0x9e, 0xe8, 0x84,
		0xfb, 0xe8, 0xf8, 0x45, 0xbb, 0x60, 0x8d, 0x06, 0xcc, 0x02, 0x7d, 0x57, 0x2a, 0x06, 0x25, 0xd0,
		0xfd, 0x54, 0x8b, 0xed, 0x10, 0xca, 0x9f, 0xfe, 0xd8, 0xba, 0xcb, 0x67, 0xe6, 0xde, 0xd6, 0x29,
		0xcb, 0xdf, 0xc3, 0x7b, 0x4f, 0x03, 0xe9, 0xa5, 0x64, 0x07, 0x44, 0x1d, 0x48, 0x5e, 0xb2, 0x64,
		0x73, 0xeb, 0xdf, 0x12, 0x0c, 0x4d, 0xad, 0x7a, 0x72, 0x7c, 0x8f, 0xb2, 0x54, 0xfd, 0x92, 0x7b,
		0x1f, 0xdf, 0xd1, 0xf7, 0x68, 0x60, 0xf2, 0xe0, 0x10, 0x64, 0x05, 0xf2, 0x48, 0xd9, 0x50, 0x95,
		0x0f, 0x87, 0x42, 0x09, 0x00, 0x27, 0x7e, 0xcb, 0xe5, 0xa2, 0xc7, 0xb7, 0x7f, 0x77, 0x89, 0xda,
		0x11, 0xdd, 0xc5, 0xb7, 0x7b, 0xa7, 0xb6, 0xd8, 0xce, 0x60, 0x0e, 0x96, 0x7d, 0x9a, 0xbf, 0xd5,
		0x64, 0x8f, 0xd4, 0x04, 0x01, 0x72, 0x41, 0x65, 0x08, 0xe8, 0x71, 0x78, 0x55, 0x29, 0xfc, 0x3a,
		0xcd, 0x8d, 0x55, 0xab, 0x05, 0xc5, 0xa7, 0x61, 0xe2, 0xbf, 0x77, 0xc4, 0xf6, 0x34, 0x38, 0xed,
		0xb7, 0xdf, 0xf5, 0x77, 0x0e, 0x13, 0xef, 0xe4, 0xdd, 0x1e, 0x5e, 0xe6, 0x25, 0xa7, 0x51, 0xed,
		0x75, 0xb4, 0xe3, 0x78, 0x50, 0x65, 0x5a, 0x3d, 0x60, 0x96, 0xfb, 0x71, 0xad, 0x2d, 0xae, 0x70,
		0x5a, 0x64, 0xdd, 0x41, 0xc8, 0x4d, 0x1e, 0xd2, 0xb2, 0x98, 0x0f, 0x5d, 0x80, 0xd3, 0x5f, 0x6b,
		0x7a, 0x4b, 0xc5, 0x37, 0xb2, 0x4a, 0x0a, 0x45, 0x20, 0x0b, 0xe4, 0xbd, 0xb7, 0x1f, 0x19, 0x36,
		0xc4, 0x66, 0x5f, 0xef, 0xef, 0xda, 0x47, 0x75, 0x2a, 0x38, 0x3b, 0xa6, 0xeb, 0xb3, 0xb7, 0x67,
		0xc5, 0xc7, 0x6b, 0x8a, 0xdc, 0x0c, 0xc3, 0x1f, 0x5d, 0xc9, 0xc1, 0x7d, 0xc6, 0x74, 0x67, 0xae,
		0x64, 0x94, 0x42, 0xbb, 0xb9, 0xaa, 0x2a, 0xf6, 0x33, 0xf9, 0xa7, 0x55, 0x9d, 0xc5, 0x31, 0x65,
		0x84, 0x29, 0xf6, 0x30, 0xa3, 0xb4, 0xcf, 0xee, 0xf8, 0x4f, 0x87, 0x68, 0x55, 0x44, 0x22, 0x90,
		0x5f, 0xbe, 0x86, 0xa6, 0xa4, 0xfb, 0x41, 0xa4, 0x77, 0x90, 0x7c, 0x4a, 0x51, 0xa8, 0xf0, 0xdd,
		0x5d, 0x9b, 0x45, 0x9e, 0xc4, 0xaa, 0x69, 0x8f, 0x2e, 0x4d, 0x34, 0xc9, 0x35, 0x8b, 0x85, 0xe1
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xe24d7dn;
	message = new Uint8Array([
		0xfa, 0x0c, 0x34, 0xce, 0x3c, 0xf0, 0xcf, 0x6e, 0x48, 0x48, 0x8b, 0x2b, 0x86, 0x71, 0xa9, 0x4d,
		0xed, 0x15, 0x75, 0x01, 0xc6, 0xe7, 0x28, 0xad, 0xb3, 0x93, 0x0d, 0x81, 0xef, 0xf4, 0xe3, 0x4f,
		0xd7, 0x88, 0x83, 0x9c, 0xaa, 0x22, 0xc2, 0xf7, 0x8d, 0xdf, 0x99, 0x89, 0xd2, 0x5b, 0x83, 0xee,
		0x79, 0x25, 0x27, 0x43, 0xf7, 0x70, 0x37, 0x80, 0x37, 0x0b, 0x98, 0x08, 0xdf, 0x93, 0xc3, 0x7f,
		0xd4, 0xe7, 0x6b, 0xdc, 0x00, 0xdc, 0x60, 0xbf, 0x53, 0x32, 0xb3, 0x04, 0x07, 0xc7, 0x1b, 0x98,
		0x29, 0x0b, 0x97, 0x8b, 0x55, 0xb4, 0x55, 0x67, 0xc1, 0xb3, 0xd3, 0xc1, 0x7c, 0x66, 0x44, 0x0d,
		0xf8, 0x0f, 0x35, 0xb7, 0xc7, 0x85, 0x70, 0x6f, 0xa2, 0x29, 0x20, 0xc4, 0xaf, 0x1c, 0x37, 0xf4,
		0x04, 0xaf, 0x0d, 0x02, 0x67, 0x1b, 0x49, 0x0a, 0x57, 0x73, 0x05, 0xd2, 0x51, 0xd6, 0x2d, 0xa1
	]);
	signature = new Uint8Array([
		0x60, 0xb3, 0x9a, 0x98, 0x06, 0xdc, 0x82, 0x24, 0x48, 0x20, 0xa8, 0x22, 0x19, 0x85, 0xf0, 0x8a,
		0x77, 0x5f, 0xad, 0xc7, 0x15, 0xfa, 0xc2, 0x2e, 0x85, 0x6a, 0xbe, 0xae, 0x07, 0x22, 0x3b, 0x0f,
		0x70, 0x93, 0xd3, 0xd8, 0x35, 0xe4, 0x1a, 0x4c, 0xc1, 0xfc, 0xd2, 0x39, 0xd1, 0x29, 0x87, 0x9f,
		0x70, 0xe9, 0x40, 0x14, 0xb5, 0xc4, 0x6a, 0xa2, 0x91, 0x9f, 0x3e, 0x13, 0x70, 0x69, 0x79, 0xaa,
		0x32, 0x17, 0x2c, 0xad, 0xa7, 0xf3, 0x26, 0x42, 0x30, 0x35, 0xad, 0xcc, 0xb6, 0x09, 0x6c, 0xa4,
		0x4e, 0x2f, 0x09, 0x14, 0x6b, 0x38, 0x64, 0x26, 0x05, 0xeb, 0xee, 0x53, 0x1c, 0xa8, 0x1b, 0xad,
		0xb5, 0xf5, 0x97, 0x7c, 0x01, 0xec, 0x20, 0x15, 0xee, 0x7c, 0xb9, 0xf7, 0xce, 0x12, 0xe0, 0xa3,
		0xf5, 0x86, 0xba, 0xba, 0x7c, 0x37, 0xe5, 0xbb, 0xc2, 0x1e, 0x02, 0xbf, 0x88, 0x7f, 0x67, 0x2b,
		0xd1, 0xeb, 0x17, 0xa7, 0xc7, 0x85, 0xad, 0x90, 0x20, 0xa2, 0x24, 0x10, 0x06, 0x8b, 0x87, 0x9a,
		0x01, 0x43, 0xb7, 0x35, 0xb5, 0xec, 0x44, 0xd2, 0x24, 0xf0, 0xa0, 0x95, 0xe2, 0x39, 0xdd, 0x18,
		0xd8, 0x4d, 0x99, 0xee, 0xc8, 0x2a, 0x2d, 0x5c, 0x3b, 0xce, 0xf4, 0x64, 0x87, 0x72, 0xe3, 0x37,
		0xdc, 0x7b, 0x99, 0xbc, 0xc9, 0x8b, 0xc3, 0x3a, 0xd1, 0x3b, 0xa1, 0xdd, 0xf3, 0x6a, 0x43, 0xdc,
		0x83, 0xaa, 0x29, 0xf4, 0x11, 0x8d, 0xb6, 0xb0, 0x89, 0x9c, 0xd3, 0xa8, 0xf0, 0x16, 0xfd, 0x0c,
		0x45, 0x6e, 0x80, 0xa6, 0x54, 0xa8, 0x6e, 0x02, 0x39, 0xc8, 0xa1, 0xe7, 0x6d, 0x02, 0x93, 0xbf,
		0x7f, 0x88, 0x0e, 0x6b, 0xa3, 0xb2, 0xde, 0x37, 0xf6, 0xf2, 0xa6, 0xfa, 0xf5, 0x51, 0xf9, 0x1c,
		0xa6, 0x85, 0xd3, 0xb2, 0x63, 0x98, 0xb7, 0x34, 0xde, 0x25, 0x99, 0x46, 0x6a, 0x89, 0x6c, 0x82,
		0x9a, 0x49, 0x49, 0x48, 0x3c, 0x04, 0xcb, 0x16, 0x8d, 0x0a, 0xe8, 0x72, 0x1c, 0xd9, 0x1b, 0x48,
		0x78, 0x0f, 0x49, 0x5c, 0xf8, 0x09, 0x3b, 0x52, 0xdf, 0xce, 0xc7, 0xb8, 0x13, 0x70, 0x90, 0x41,
		0x95, 0x61, 0x7d, 0xf9, 0xb1, 0x3a, 0xe1, 0xf0, 0x66, 0x72, 0x69, 0x01, 0x24, 0xa4, 0x5c, 0x2c,
		0x34, 0xca, 0xe8, 0x4d, 0xea, 0x3d, 0x4d, 0xb6, 0x63, 0x30, 0x3a, 0xf2, 0xab, 0xb5, 0x91, 0xdb,
		0x41, 0xc1, 0x4f, 0xf9, 0x3a, 0x49, 0x1c, 0x00, 0x8c, 0x0f, 0xcc, 0x1b, 0x8c, 0x3a, 0x00, 0xdb,
		0xf3, 0xb0, 0xa7, 0x79, 0x65, 0x79, 0xdc, 0x1c, 0x22, 0x79, 0x98, 0x5b, 0x12, 0x31, 0xc9, 0xd2,
		0xa1, 0x0c, 0x46, 0xeb, 0x51, 0x3c, 0x8b, 0x29, 0x79, 0x7d, 0x7a, 0xea, 0x50, 0xb7, 0x22, 0x24,
		0xbe, 0xd0, 0x4e, 0x70, 0x7a, 0xd8, 0x1d, 0xc0, 0x33, 0xc5, 0x48, 0x49, 0xf0, 0xb7, 0xcc, 0x48
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xefabb9n;
	message = new Uint8Array([
		0x9b, 0x76, 0x87, 0xdc, 0xef, 0x6f, 0xf9, 0xaa, 0x5a, 0xf4, 0x57, 0x0e, 0xf5, 0x0b, 0x98, 0xf0,
		0x9d, 0x6b, 0xaf, 0x4b, 0xec, 0x99, 0x18, 0x7a, 0x67, 0x51, 0xb0, 0xb3, 0xf9, 0x27, 0xc9, 0xd1,
		0xa1, 0x6e, 0x7e, 0x56, 0x67, 0x59, 0x44, 0xb0, 0x94, 0x60, 0xc2, 0xbb, 0x22, 0xe5, 0xe3, 0x88,
		0x72, 0x18, 0x29, 0x5d, 0x3d, 0x18, 0x44, 0xfc, 0xcd, 0x5b, 0xe3, 0x28, 0x6d, 0x4f, 0xca, 0x66,
		0x1e, 0x41, 0x24, 0x01, 0x8b, 0x7f, 0x1b, 0x50, 0x3f, 0xb9, 0xa7, 0x3b, 0x16, 0xad, 0xa3, 0xfc,
		0xf1, 0x04, 0x26, 0x23, 0xae, 0x76, 0x10, 0xdd, 0x58, 0x35, 0xe3, 0x75, 0x9a, 0x89, 0xd5, 0x1b,
		0x7a, 0xb7, 0x23, 0xe5, 0x44, 0x28, 0xa7, 0x13, 0xc3, 0xc7, 0xad, 0x97, 0xb7, 0xab, 0x03, 0xd5,
		0x84, 0xf6, 0x4f, 0xa7, 0x28, 0xfd, 0xa5, 0xa4, 0x6f, 0xa9, 0x59, 0xa2, 0x6a, 0x1d, 0x12, 0x79
	]);
	signature = new Uint8Array([
		0x6b, 0x78, 0x4e, 0xe0, 0xa8, 0x68, 0xb7, 0xdb, 0xa2, 0x98, 0x54, 0x91, 0x30, 0x20, 0x4a, 0x52,
		0x45, 0xf8, 0x30, 0xa8, 0x93, 0x88, 0xdc, 0x8d, 0x32, 0x02, 0x03, 0xfc, 0xa4, 0xf8, 0xa1, 0xac,
		0xf3, 0x37, 0x77, 0xa4, 0x3e, 0x1b, 0x0b, 0xc0, 0x0a, 0x6d, 0x7f, 0xfa, 0x6f, 0xc1, 0xfd, 0xd7,
		0x8f, 0x4b, 0x2e, 0xdd, 0x65, 0xc2, 0x8a, 0x2b, 0x39, 0x32, 0x38, 0x89, 0x00, 0xa0, 0xb5, 0xb7,
		0x6b, 0x44, 0xcb, 0x78, 0x45, 0x8b, 0x2a, 0xdf, 0x23, 0xa1, 0x9c, 0x97, 0x86, 0x20, 0x05, 0x0d,
		0xd0, 0xb8, 0xfb, 0xec, 0xa5, 0x0e, 0x8c, 0xb1, 0x55, 0x9a, 0x85, 0xef, 0x0c, 0xd1, 0x1c, 0xa3,
		0x82, 0x64, 0xd3, 0x81, 0x41, 0x4b, 0x6b, 0x1c, 0x63, 0xe1, 0x6e, 0xa4, 0x15, 0x17, 0x38, 0x95,
		0x43, 0x0f, 0x1b, 0x1f, 0x42, 0xab, 0x1b, 0x02, 0x80, 0xa3, 0x1d, 0x98, 0x1c, 0x40, 0x2a, 0xee,
		0xf3, 0xe8, 0x90, 0xa9, 0x36, 0xd6, 0xb1, 0x82, 0xe8, 0x33, 0x83, 0xba, 0x75, 0xb2, 0x7a, 0x17,
		0x99, 0x35, 0x3d, 0xfa, 0x37, 0xfa, 0xa7, 0x98, 0x6f, 0x4d, 0xbd, 0xb1, 0x4d, 0xa9, 0x9e, 0xf1,
		0x87, 0x87, 0xba, 0xc6, 0x83, 0x24, 0x64, 0x23, 0x56, 0x60, 0xb6, 0x66, 0x9e, 0xb7, 0x4a, 0x41,
		0xa9, 0x26, 0x00, 0x23, 0x11, 0x5d, 0x97, 0xbc, 0xd1, 0x4f, 0x87, 0x07, 0xb6, 0x19, 0xb0, 0xae,
		0x14, 0x01, 0xa8, 0x50, 0x2a, 0x81, 0x8c, 0xc1, 0x62, 0x56, 0x46, 0xec, 0x58, 0xf7, 0x6e, 0x52,
		0x9c, 0xea, 0xda, 0x77, 0xb2, 0x5a, 0x5a, 0x9e, 0x32, 0x89, 0x91, 0xb0, 0xaa, 0xe5, 0xe8, 0xd0,
		0xea, 0x06, 0xc3, 0x57, 0xc2, 0x8b, 0x63, 0xf1, 0x01, 0xcb, 0x90, 0xd0, 0xb5, 0xd0, 0xd9, 0xd8,
		0xcd, 0xd6, 0x06, 0xd9, 0x1c, 0xb0, 0xb7, 0xcf, 0xdf, 0xd3, 0x3c, 0xc5, 0xe4, 0x26, 0x8b, 0x78,
		0xb8, 0x48, 0x27, 0xe8, 0x7d, 0xeb, 0xfc, 0x38, 0xa7, 0x0c, 0x9b, 0x86, 0xe7, 0xbe, 0x02, 0x46,
		0x2a, 0x62, 0xbe, 0xf6, 0x66, 0x64, 0x16, 0x22, 0x16, 0xb2, 0xca, 0x06, 0xac, 0x1b, 0x8f, 0x52,
		0x78, 0x5d, 0x31, 0x15, 0xe0, 0x80, 0x08, 0xd8, 0xc4, 0x4a, 0x77, 0xa4, 0x22, 0x1a, 0xf3, 0xdf,
		0x45, 0xce, 0xab, 0x9c, 0x67, 0x44, 0x42, 0x7a, 0x9a, 0x8d, 0x01, 0x9a, 0x4d, 0xdd, 0xa6, 0x59,
		0xc0, 0xa5, 0xd3, 0xbd, 0x74, 0x01, 0xe0, 0x9d, 0x14, 0x3b, 0xbd, 0x6e, 0x38, 0x67, 0xa2, 0x2a,
		0x26, 0xbb, 0x09, 0x55, 0x1b, 0x91, 0x48, 0x8b, 0xe5, 0x3f, 0x56, 0x1b, 0x1e, 0x80, 0xfc, 0x2a,
		0xd6, 0x49, 0xd0, 0x43, 0xb6, 0xaa, 0xe1, 0x38, 0x73, 0x7d, 0x0c, 0x6d, 0x7e, 0x7e, 0x38, 0xbe,
		0x7c, 0x26, 0x3a, 0x53, 0x62, 0x78, 0xc6, 0x91, 0x0f, 0xd9, 0x41, 0x4f, 0x43, 0xe8, 0x58, 0xb1
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000efabb9n;
	message = new Uint8Array([
		0x3a, 0xbd, 0x43, 0xf1, 0xd7, 0x41, 0xdd, 0xf0, 0xb7, 0x52, 0xdd, 0x94, 0x19, 0x7a, 0xb6, 0x56,
		0x28, 0x8f, 0xf4, 0x65, 0xe5, 0xdb, 0xcc, 0xec, 0x61, 0x79, 0xf8, 0x93, 0x2f, 0x02, 0xc2, 0x48,
		0x19, 0x6a, 0x5e, 0x3f, 0x12, 0x24, 0x7c, 0x37, 0x6c, 0x8d, 0x1e, 0x00, 0x4b, 0x87, 0xa7, 0x3a,
		0x5a, 0x64, 0x35, 0x5f, 0xbc, 0x07, 0x31, 0x04, 0x46, 0x45, 0x25, 0x5b, 0xeb, 0x91, 0xcd, 0xfd,
		0x77, 0xd9, 0x70, 0xe6, 0x81, 0xab, 0x70, 0xc1, 0x9a, 0x9c, 0x21, 0x67, 0xcb, 0xea, 0xd7, 0xa2,
		0x3f, 0x60, 0x43, 0x36, 0x3c, 0x7a, 0xff, 0x22, 0x58, 0xca, 0x67, 0x23, 0xe9, 0x9a, 0xab, 0x7a,
		0xbd, 0xd3, 0x22, 0xef, 0x0b, 0x1e, 0xe1, 0x16, 0xaa, 0x48, 0x8d, 0xd1, 0x81, 0xeb, 0x6d, 0x16,
		0x3f, 0x4b, 0xc3, 0xf2, 0x4c, 0x7e, 0x5d, 0xce, 0xff, 0xd0, 0x67, 0xf2, 0x11, 0x65, 0x83, 0x47
	]);
	signature = new Uint8Array([
		0x47, 0x40, 0x11, 0x5f, 0x25, 0x1b, 0x35, 0xcf, 0xe1, 0x9d, 0x38, 0x16, 0xcc, 0x1f, 0xbf, 0x02,
		0xb9, 0xa4, 0xd9, 0x47, 0x0d, 0xc6, 0x2b, 0x41, 0xcd, 0xb7, 0x22, 0x84, 0xc3, 0x0f, 0xff, 0xd3,
		0x4e, 0x70, 0x57, 0x55, 0x9a, 0x73, 0xb4, 0x4a, 0xc4, 0x9f, 0xa7, 0x28, 0x5f, 0x3e, 0x9a, 0x68,
		0x0b, 0xf1, 0x94, 0x95, 0x62, 0xa4, 0x7f, 0x01, 0xbf, 0xc5, 0x5e, 0xb7, 0xbd, 0xa9, 0xe2, 0x91,
		0xc9, 0xa5, 0xce, 0x1a, 0x5d, 0x7b, 0x61, 0x95, 0x90, 0xc0, 0xe1, 0xbd, 0x36, 0x94, 0x3f, 0xa4,
		0x1b, 0x9c, 0xc9, 0xb2, 0xa3, 0xa7, 0x42, 0xc2, 0x94, 0x2c, 0x53, 0xec, 0x3e, 0x45, 0xc7, 0x71,
		0x76, 0xe4, 0xbf, 0x32, 0xb7, 0x10, 0x1a, 0xb4, 0xb0, 0x5a, 0x99, 0x6a, 0x21, 0xfe, 0x12, 0x92,
		0x18, 0x41, 0xf8, 0xf0, 0xfa, 0xd1, 0xe7, 0x1b, 0xde, 0xff, 0x5a, 0x7f, 0x53, 0xe8, 0x76, 0x63,
		0x67, 0x31, 0x1a, 0x98, 0xb9, 0xd8, 0x61, 0x8a, 0x61, 0x98, 0xaa, 0x16, 0x62, 0xe5, 0x87, 0x33,
		0x2c, 0x24, 0x28, 0x3f, 0x9e, 0xcf, 0x2b, 0xb2, 0xd8, 0x25, 0xf5, 0x97, 0xd1, 0x82, 0x56, 0xce,
		0x9c, 0x58, 0x64, 0xf1, 0xff, 0xca, 0x37, 0xc4, 0xec, 0x8d, 0xf4, 0xf9, 0x45, 0xcf, 0x22, 0xc9,
		0x74, 0xf5, 0xef, 0x3d, 0xbb, 0x9f, 0x17, 0x0b, 0x39, 0x78, 0xbd, 0xdc, 0xc9, 0x1b, 0x13, 0xb9,
		0xe8, 0x55, 0x0b, 0xfc, 0xdb, 0x74, 0xac, 0x73, 0x49, 0xd5, 0x31, 0xe1, 0xe3, 0x28, 0x0f, 0xc0,
		0x05, 0xac, 0x34, 0xc0, 0x36, 0x08, 0x99, 0x3b, 0x78, 0x76, 0xca, 0xf2, 0x7c, 0x8b, 0xd5, 0xa9,
		0x73, 0x06, 0x29, 0x20, 0x82, 0xf7, 0x7d, 0x91, 0x44, 0x00, 0x5b, 0xcd, 0x10, 0x46, 0xf2, 0x73,
		0x03, 0x18, 0x5b, 0x6a, 0x7c, 0xac, 0x53, 0x9f, 0x1e, 0x05, 0x80, 0x5e, 0xe8, 0xd0, 0x77, 0x2f,
		0x37, 0xac, 0xc3, 0xe7, 0xfa, 0x09, 0x20, 0x17, 0x1c, 0x19, 0xec, 0x92, 0x66, 0xc4, 0xdd, 0x6d,
		0x9e, 0x51, 0x76, 0x6c, 0x44, 0x33, 0xa2, 0x83, 0x1c, 0x3e, 0x5f, 0xb7, 0xd8, 0x43, 0x41, 0x62,
		0x4e, 0xa9, 0xa2, 0x5e, 0x1a, 0x2e, 0xb2, 0x7e, 0xf2, 0xc7, 0xe8, 0xde, 0x49, 0x1d, 0x94, 0xd8,
		0xa8, 0xa3, 0x19, 0x19, 0xbd, 0xd7, 0xcd, 0xf6, 0x07, 0x3a, 0x1d, 0x88, 0xf4, 0x52, 0xff, 0x8d,
		0x15, 0xe5, 0x7c, 0xf6, 0x50, 0x4a, 0x81, 0x84, 0x3c, 0x24, 0x35, 0x1c, 0x61, 0xa3, 0x73, 0xb7,
		0x3a, 0xcd, 0x84, 0xc7, 0x6d, 0xe9, 0x16, 0xf2, 0x90, 0xe0, 0xe9, 0xbd, 0xf5, 0x1d, 0x8f, 0xfa,
		0x63, 0xf8, 0x67, 0xaf, 0x58, 0x7b, 0x5c, 0x75, 0x91, 0x11, 0x67, 0x10, 0x79, 0xea, 0x28, 0x84,
		0x64, 0x66, 0xcc, 0x33, 0xdf, 0x76, 0x83, 0x63, 0x9d, 0x01, 0x83, 0x37, 0xeb, 0xe1, 0x3c, 0xb8
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(true);

	e =
		0xefabb9n;
	message = new Uint8Array([
		0x7a, 0xd9, 0xbf, 0x1f, 0x36, 0xf9, 0x89, 0x7d, 0x28, 0x44, 0x87, 0x2e, 0x58, 0x2a, 0xb3, 0x51,
		0x3c, 0xdb, 0xcd, 0xb4, 0x37, 0xba, 0x01, 0xeb, 0x61, 0x0e, 0xc4, 0x9f, 0x8b, 0xfb, 0xff, 0x29,
		0x7e, 0xb2, 0x6f, 0x5f, 0x84, 0xe4, 0x4b, 0xae, 0x2a, 0x7c, 0x28, 0x6a, 0x43, 0x8d, 0x1b, 0x61,
		0x30, 0x89, 0x1d, 0xb6, 0x5f, 0xb5, 0xb3, 0xed, 0x12, 0xd9, 0xce, 0x42, 0x62, 0x3c, 0xef, 0x3f,
		0x83, 0xcf, 0x90, 0x8d, 0x49, 0xa9, 0xc0, 0x0b, 0xeb, 0xb3, 0x0d, 0x1d, 0x08, 0xa5, 0xa6, 0x47,
		0xe7, 0x31, 0xc1, 0xfa, 0x03, 0x7d, 0x3b, 0xad, 0xc7, 0xd7, 0x7e, 0x30, 0x96, 0xa5, 0xa8, 0x3d,
		0x0e, 0x9a, 0xea, 0x51, 0x8e, 0x30, 0x2d, 0xb9, 0xf5, 0x52, 0xfc, 0xf0, 0xad, 0x58, 0x9e, 0x28,
		0xe9, 0x39, 0x82, 0x27, 0x2a, 0xfc, 0xe1, 0x54, 0x08, 0x70, 0x9e, 0x12, 0x2f, 0x1d, 0x71, 0x4c
	]);
	signature = new Uint8Array([
		0x17, 0x7e, 0x1c, 0x38, 0x25, 0x1b, 0x8e, 0x9b, 0x40, 0x65, 0x97, 0xed, 0x90, 0xd0, 0x9f, 0x66,
		0x6c, 0xbc, 0xd8, 0x9f, 0x68, 0x63, 0x81, 0x1f, 0xe7, 0xef, 0x2d, 0xf9, 0x1a, 0x53, 0x33, 0x93,
		0x00, 0x52, 0xbf, 0x51, 0xc3, 0x5a, 0xab, 0x93, 0xc7, 0x7b, 0x4b, 0x6f, 0x8d, 0xd3, 0x1b, 0x01,
		0xe0, 0x55, 0x30, 0x3b, 0xfa, 0xcd, 0xce, 0xae, 0x9c, 0x3a, 0x1b, 0x9a, 0xf2, 0x78, 0x10, 0x0c,
		0x11, 0xed, 0x16, 0x7a, 0xcf, 0xe2, 0x72, 0xc0, 0x30, 0xdc, 0x35, 0x8c, 0xae, 0x57, 0x80, 0xfc,
		0xec, 0x0f, 0x6b, 0xc5, 0x81, 0xe0, 0xc3, 0xb0, 0xb4, 0x5a, 0x72, 0x72, 0xaa, 0x92, 0x70, 0x76,
		0x59, 0xc2, 0xb8, 0x18, 0x70, 0x9e, 0x2e, 0xf9, 0xae, 0x2e, 0xfd, 0x6b, 0x84, 0x1c, 0xc8, 0x22,
		0x67, 0xf3, 0x84, 0xcc, 0x8c, 0x87, 0xf6, 0x69, 0x09, 0xdd, 0xa9, 0xce, 0x58, 0xe2, 0xe7, 0xc3,
		0x5e, 0x68, 0xc0, 0xc4, 0x39, 0x73, 0xe9, 0xfe, 0x02, 0x46, 0x42, 0xf0, 0x4b, 0xa2, 0xb2, 0x5d,
		0x6d, 0xc9, 0x56, 0xbe, 0xe6, 0xda, 0xc1, 0x93, 0x91, 0xf5, 0xa2, 0xbd, 0x5e, 0xcc, 0x64, 0xaf,
		0xd1, 0xc2, 0x5a, 0xf6, 0x5a, 0xd8, 0xb4, 0x18, 0x9a, 0xed, 0xed, 0x9e, 0x49, 0x6a, 0x73, 0xe6,
		0x2e, 0x64, 0x8c, 0xb1, 0xff, 0x78, 0x9d, 0x01, 0xc1, 0x61, 0x0d, 0xb9, 0x65, 0x64, 0xb2, 0xb8,
		0xfb, 0x42, 0x84, 0x6d, 0xdb, 0xb1, 0x07, 0x3f, 0x1e, 0xdf, 0x6b, 0x80, 0x7d, 0xc9, 0x63, 0x5b,
		0xc2, 0x47, 0x62, 0x87, 0x26, 0xe7, 0xd4, 0x28, 0x56, 0x2a, 0x48, 0xe4, 0x39, 0x98, 0x46, 0x66,
		0x0e, 0xec, 0xcf, 0x85, 0x1a, 0x47, 0xb7, 0xbd, 0x1d, 0xac, 0xc9, 0xbe, 0xf1, 0x4e, 0x3d, 0x0b,
		0xdf, 0x7b, 0x22, 0xc7, 0x04, 0x79, 0x55, 0x38, 0x0d, 0xc3, 0xa1, 0xef, 0x6d, 0xdf, 0xd9, 0x53,
		0x3a, 0x0b, 0xb0, 0xf5, 0x11, 0x81, 0x1c, 0xa3, 0x48, 0x80, 0x76, 0xa4, 0x89, 0x6a, 0x95, 0x12,
		0x70, 0x28, 0xdc, 0xd2, 0x38, 0x29, 0x98, 0x76, 0x80, 0x82, 0x9d, 0x80, 0xd6, 0x8c, 0x98, 0xbe,
		0x2a, 0x7d, 0xcd, 0x7c, 0x89, 0x1f, 0xba, 0x6e, 0x46, 0xe4, 0xf9, 0x9d, 0x49, 0x66, 0xc9, 0xd7,
		0xdb, 0x19, 0x75, 0xb6, 0x0b, 0x4f, 0xbc, 0x12, 0x52, 0xc9, 0x3a, 0x96, 0xf0, 0x91, 0x9d, 0x5a,
		0x41, 0x77, 0xbd, 0x57, 0x8b, 0xca, 0xd8, 0x65, 0x6a, 0xd5, 0x96, 0xb1, 0x73, 0x41, 0x4e, 0xaa,
		0x13, 0x5c, 0x46, 0x2c, 0xd5, 0xe1, 0xf7, 0x83, 0xfc, 0x96, 0xda, 0x55, 0xbd, 0x41, 0x12, 0x3e,
		0x58, 0xb8, 0x92, 0x61, 0x8d, 0xc5, 0x91, 0x9e, 0x4b, 0xca, 0x14, 0x6f, 0xed, 0x14, 0xbb, 0xd5,
		0x46, 0x01, 0x63, 0x5e, 0x69, 0x00, 0x0b, 0x50, 0x60, 0x44, 0xda, 0x3a, 0xab, 0x70, 0x68, 0x48
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	n =
		0x9e428342d2e3633965aecb89b0ed65c619c47fadb9a9017fc18c3d1837e5f6b4d0fddbf05bdb00b659bac9645f02c78f05e62d0cf57b977345eff5df2066e0eb2ae3af57ca3d0fb0f6a475fc36dfc6e5870b3ac5d850e2849fc32c9b16ac3b68d2f815e8c44d1418cf51f860356b8d409f20210cb01c2cc7e109ba76f6c43f2096876d4500012d8ed7dc1c35d24eae1ecf406ce3ec92606623adb8b9e17c3677c1fdef1a54d9442a9d990c0733f03b31633b11fcfa8c9f2b1114f307a811657e33d285093f4653b3ea1eadb28a792c835f975896996bbf029d1f688ad2e0b978888b07c3a12303fed92bf3fc6db29837ddc7c71292abaed99f3a0d7e60b15d9f2cd08d15318d70d35a7b7ff2fddb22d89cf261b8ba64242ba4616a93ddce2015977421d25f1b3825155746bc13f92a6097f7f66e919505af07706008378597af3e70c7fda3e9c99a763aab19ba3f459b12e8c1ae404d5091d802ae0dfd6b3619b97d3d964daf1de600b7446f8a7bfb3f4956a6d1fe967089bebdcc9b4ac7b905n;
	e =
		0xdf0ff7n;
	message = new Uint8Array([
		0x6c, 0x29, 0x56, 0xc0, 0x24, 0xc4, 0x6d, 0x04, 0xfe, 0x81, 0x90, 0xd0, 0x38, 0x38, 0x85, 0xe3,
		0x67, 0xb0, 0x48, 0x5a, 0x05, 0x12, 0xae, 0xc5, 0x2c, 0x9d, 0x48, 0x80, 0x9f, 0x9c, 0x8a, 0x41,
		0x0a, 0x95, 0x2c, 0xed, 0x8b, 0xc4, 0xd1, 0xb0, 0x70, 0xc7, 0xe7, 0x4c, 0x43, 0x9b, 0xce, 0xb1,
		0x04, 0xc7, 0x3c, 0xcf, 0xb5, 0xd7, 0xe0, 0xa8, 0x1c, 0x0c, 0x45, 0xa9, 0xc4, 0x52, 0xfa, 0x3a,
		0x45, 0x72, 0xf0, 0x94, 0xc5, 0x89, 0x23, 0xd2, 0xbf, 0xb9, 0x7c, 0x4b, 0x03, 0x1e, 0xf6, 0x20,
		0xfe, 0x04, 0x01, 0x11, 0x3c, 0x57, 0x24, 0x95, 0x2b, 0x5a, 0xe5, 0x29, 0x22, 0x9c, 0xed, 0xe8,
		0xa1, 0x29, 0x68, 0x5c, 0xdb, 0xfd, 0xab, 0x94, 0x71, 0xbe, 0x19, 0x76, 0x81, 0xaa, 0x47, 0x57,
		0xdf, 0xce, 0x5e, 0xc9, 0xa2, 0x78, 0xc1, 0xb4, 0xe3, 0xf0, 0xf0, 0xa9, 0xc1, 0x63, 0xad, 0x72
	]);
	signature = new Uint8Array([
		0x1d, 0x09, 0x6e, 0x66, 0x5b, 0xdd, 0x80, 0x42, 0xe8, 0xf4, 0xad, 0x87, 0x10, 0x04, 0x2a, 0x3e,
		0x0f, 0x26, 0xf9, 0x5a, 0xc0, 0x0e, 0x28, 0x5e, 0x1b, 0xef, 0x43, 0x76, 0x22, 0xdd, 0x6f, 0x33,
		0x41, 0xa2, 0xa1, 0x84, 0x0a, 0x09, 0xf6, 0x80, 0xc9, 0x82, 0xfb, 0xa7, 0xa6, 0x9e, 0x14, 0xe5,
		0xe1, 0xb0, 0xd1, 0x99, 0x75, 0x18, 0x63, 0x99, 0x68, 0x43, 0x69, 0x6f, 0xe4, 0xeb, 0x46, 0x87,
		0x5b, 0x2c, 0xa7, 0x07, 0x93, 0x7b, 0x36, 0xbc, 0xd9, 0xda, 0x78, 0x20, 0x39, 0x34, 0x54, 0x24,
		0x86, 0x3a, 0xf7, 0x27, 0x5e, 0x00, 0x2b, 0x25, 0xf9, 0x13, 0xc6, 0x0e, 0x56, 0x81, 0x4c, 0xa4,
		0xfa, 0x2b, 0x32, 0x76, 0x93, 0x40, 0xdc, 0xe7, 0x90, 0xbc, 0x7b, 0x1d, 0x2c, 0x47, 0x9a, 0x4e,
		0xca, 0xad, 0xd8, 0x78, 0x69, 0xf6, 0x26, 0x05, 0xe2, 0x30, 0x2c, 0xc2, 0xba, 0xfa, 0xce, 0xa3,
		0x32, 0x05, 0xc9, 0x43, 0xc6, 0xbd, 0x60, 0xab, 0xa0, 0xca, 0xb7, 0x7e, 0x67, 0xe2, 0x20, 0xc6,
		0x15, 0x00, 0x74, 0x79, 0x70, 0x5d, 0xf8, 0xbf, 0x41, 0xcc, 0x16, 0x4d, 0x39, 0xe0, 0x9b, 0x8a,
		0xd3, 0x4c, 0x4b, 0xf7, 0xb5, 0x42, 0xbd, 0xf7, 0x4b, 0x91, 0xe5, 0x3f, 0x7c, 0xe3, 0x0b, 0x9e,
		0x9d, 0x29, 0xa1, 0x66, 0x0c, 0x1a, 0x20, 0x51, 0x16, 0x89, 0x27, 0xe4, 0x22, 0xbd, 0xb9, 0xa8,
		0x25, 0x5d, 0xb1, 0x20, 0xad, 0xce, 0x83, 0x85, 0x50, 0x7d, 0x06, 0x31, 0x39, 0x2b, 0x62, 0x54,
		0x8b, 0xcf, 0x40, 0x52, 0x7c, 0x26, 0x5c, 0x17, 0x4e, 0xd1, 0x9a, 0xd0, 0x0d, 0x9f, 0x4c, 0xed,
		0x6c, 0x9a, 0x2f, 0x62, 0x0f, 0x6d, 0x9b, 0x1f, 0x0b, 0xb6, 0x05, 0x65, 0x0e, 0x03, 0xba, 0xa4,
		0xda, 0x21, 0xeb, 0x4f, 0xea, 0xc2, 0x00, 0x34, 0xf6, 0x4b, 0x16, 0xc3, 0xc0, 0x3b, 0x1a, 0x35,
		0xf8, 0x90, 0xc8, 0xdf, 0xfb, 0x65, 0x40, 0xdc, 0x89, 0x2d, 0xd3, 0xaa, 0x89, 0x42, 0xc8, 0x8e,
		0x37, 0x33, 0x17, 0x3b, 0x9b, 0xa9, 0x31, 0xbf, 0xf1, 0x06, 0x02, 0x0b, 0xf3, 0xcd, 0x9f, 0x79,
		0x7b, 0xa1, 0x4e, 0x92, 0x31, 0xef, 0xc4, 0x5b, 0x54, 0xac, 0xc2, 0xaa, 0xbf, 0x4c, 0xaa, 0x18,
		0x9e, 0xc4, 0x24, 0x93, 0x80, 0x10, 0x00, 0x01, 0x6b, 0x85, 0xb4, 0x2c, 0x8a, 0xe0, 0xb4, 0x04,
		0x95, 0xae, 0x3a, 0x53, 0x07, 0x12, 0xbd, 0xf5, 0xd3, 0x3f, 0x09, 0x66, 0x09, 0x03, 0xb1, 0x60,
		0x5c, 0xf6, 0x2a, 0x8b, 0xe3, 0x77, 0x35, 0x56, 0xf2, 0x5d, 0x08, 0xc0, 0xa9, 0xd5, 0x57, 0x22,
		0x9c, 0xfd, 0xb2, 0x89, 0x61, 0x8e, 0xa3, 0xdb, 0xf3, 0x39, 0x0f, 0x9f, 0x91, 0x6d, 0xaf, 0x6b,
		0x7c, 0xf9, 0x09, 0xb5, 0x41, 0xa7, 0x26, 0x91, 0xb6, 0xf9, 0xb7, 0xf5, 0x6b, 0xec, 0xc8, 0xc9
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xdf0ff7n;
	message = new Uint8Array([
		0xd1, 0x7e, 0x77, 0xc2, 0xae, 0x30, 0xcb, 0xc6, 0xe5, 0x06, 0x16, 0xbf, 0xa3, 0x0d, 0x7c, 0x59,
		0xb9, 0x61, 0xfe, 0x99, 0xe5, 0x59, 0xe5, 0xb6, 0x53, 0xff, 0x64, 0x2b, 0x63, 0xc3, 0x79, 0x0a,
		0xad, 0x70, 0x14, 0x93, 0x43, 0x5e, 0x7b, 0x05, 0x35, 0xea, 0xed, 0xb4, 0x5b, 0x23, 0x85, 0x5c,
		0x4e, 0xc6, 0x62, 0xb5, 0xb8, 0x6d, 0x05, 0x47, 0xce, 0x03, 0xfa, 0x80, 0x1a, 0x7b, 0xbb, 0x04,
		0x7e, 0xc1, 0xd1, 0x44, 0x76, 0xf1, 0x3c, 0x52, 0x9d, 0xc8, 0x15, 0xf4, 0x73, 0x58, 0x72, 0xf7,
		0x5d, 0xff, 0x8a, 0xc5, 0xed, 0x99, 0x1a, 0x3a, 0x64, 0xf5, 0x07, 0xb4, 0x75, 0x86, 0x44, 0x69,
		0x4c, 0x5b, 0xf6, 0xfe, 0xcf, 0x51, 0xd6, 0x55, 0x24, 0x88, 0xd7, 0xa6, 0x73, 0x13, 0x0a, 0xd1,
		0xed, 0xf4, 0xbe, 0xf2, 0x0d, 0x47, 0xeb, 0x36, 0x1d, 0xbd, 0xd1, 0xee, 0xfd, 0x4c, 0xdc, 0xe2
	]);
	signature = new Uint8Array([
		0x17, 0x39, 0xc5, 0xa5, 0x94, 0x9f, 0x98, 0x48, 0x29, 0xc5, 0xba, 0xee, 0x38, 0x0d, 0xa5, 0x56,
		0xde, 0x5b, 0x3f, 0xb3, 0x9d, 0xee, 0xac, 0xbb, 0xba, 0xf1, 0x40, 0x98, 0x28, 0xc9, 0x2d, 0xf1,
		0xd0, 0x01, 0x49, 0xaa, 0x41, 0x19, 0x5f, 0xb6, 0xfa, 0xc0, 0x35, 0xdf, 0x1e, 0x9e, 0xe2, 0x76,
		0xdf, 0x3d, 0x50, 0x89, 0x28, 0x24, 0x0b, 0xf0, 0x93, 0x2a, 0x2f, 0x92, 0x24, 0xfc, 0x5a, 0xab,
		0xc4, 0xf9, 0xed, 0x4c, 0x41, 0x33, 0x09, 0xc9, 0x93, 0x53, 0x6c, 0x8c, 0xd0, 0xd0, 0x55, 0x15,
		0x55, 0xa9, 0xea, 0x87, 0x97, 0xa6, 0xf7, 0xab, 0x60, 0xea, 0xda, 0x0a, 0x96, 0x9f, 0x36, 0x87,
		0xef, 0x75, 0x66, 0x9b, 0xff, 0x8d, 0x59, 0x7a, 0xec, 0x3f, 0x8d, 0x86, 0x8d, 0xac, 0xd1, 0xdd,
		0xbe, 0x5f, 0x81, 0x98, 0x17, 0xa8, 0x09, 0x3f, 0x63, 0xa4, 0x12, 0x7a, 0xe3, 0x9e, 0x8d, 0xfd,
		0x70, 0xc3, 0x8f, 0xd1, 0xe5, 0x6c, 0x8b, 0xb7, 0x42, 0xad, 0x9b, 0x85, 0xd6, 0x17, 0x64, 0xc3,
		0x91, 0x05, 0x04, 0x67, 0xd1, 0x8d, 0x78, 0xed, 0xe5, 0x6b, 0xb0, 0xf5, 0x98, 0x82, 0x35, 0x31,
		0xa6, 0x4a, 0x4d, 0x33, 0xeb, 0xda, 0x0a, 0x08, 0x82, 0x77, 0x5a, 0x52, 0xea, 0xd6, 0xc4, 0x04,
		0x91, 0x3e, 0x0b, 0xa8, 0x76, 0x68, 0x43, 0x21, 0x13, 0x20, 0x69, 0xe4, 0x20, 0xa8, 0xcb, 0x44,
		0xb1, 0xf7, 0xb5, 0xd0, 0xae, 0x43, 0x10, 0x16, 0xee, 0xb1, 0x37, 0xc9, 0xa7, 0x8a, 0x70, 0x19,
		0x36, 0xd5, 0xb7, 0x87, 0x9f, 0x3f, 0x9a, 0x1d, 0x67, 0x98, 0x60, 0x94, 0x9b, 0x8d, 0x26, 0x6c,
		0x36, 0x76, 0xf4, 0x66, 0x17, 0xad, 0xd4, 0xbd, 0x8a, 0xd7, 0x42, 0xd9, 0x5a, 0xaf, 0x4d, 0xbb,
		0xe6, 0xe1, 0x23, 0x89, 0x82, 0x40, 0xd1, 0x23, 0xce, 0x5c, 0x80, 0x4b, 0xf4, 0x48, 0x90, 0x49,
		0x45, 0xa9, 0x28, 0xa8, 0x97, 0xba, 0xa3, 0x7a, 0xac, 0xa3, 0x7a, 0xb1, 0xfc, 0x53, 0xf7, 0xc0,
		0xf2, 0xa7, 0xde, 0x49, 0x6e, 0xdf, 0x53, 0x77, 0xdc, 0xe9, 0xed, 0x73, 0xf8, 0x32, 0x1a, 0xb0,
		0x90, 0x83, 0x05, 0x7c, 0x44, 0x52, 0x9f, 0x65, 0xff, 0x08, 0x46, 0xcd, 0xa7, 0x6c, 0x11, 0xf5,
		0x79, 0xca, 0x00, 0xe4, 0xad, 0x4e, 0x76, 0x8a, 0xe3, 0xe1, 0x9a, 0x7a, 0xd0, 0xa3, 0x87, 0x6a,
		0x09, 0x96, 0xbb, 0x82, 0x9d, 0x03, 0xe9, 0x73, 0x6d, 0x63, 0xe8, 0x86, 0xbd, 0x2f, 0x98, 0x57,
		0xd3, 0x28, 0x0f, 0x18, 0x98, 0xb5, 0x1b, 0xe9, 0xd9, 0x5e, 0x66, 0xa4, 0x79, 0xfa, 0xa7, 0x6b,
		0xab, 0x6b, 0xc9, 0x91, 0xed, 0xde, 0x71, 0xa7, 0x15, 0x84, 0x6e, 0xd2, 0x0d, 0x76, 0xcb, 0xf1,
		0x6e, 0x4e, 0x4f, 0xdc, 0xf6, 0xe9, 0x11, 0x36, 0x35, 0x0c, 0x83, 0x88, 0xa4, 0xdb, 0x00, 0x5e
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xdf0ff7n;
	message = new Uint8Array([
		0x5e, 0x91, 0xf6, 0x7c, 0xbb, 0xbf, 0xdf, 0xaa, 0xb3, 0x86, 0xb3, 0xec, 0xf5, 0xf0, 0x2a, 0xaa,
		0x92, 0xd4, 0x8b, 0xa0, 0xa6, 0xf0, 0x6f, 0x91, 0x3b, 0x37, 0xc7, 0x3a, 0x6a, 0x6c, 0x20, 0x86,
		0xc3, 0xf0, 0x26, 0x00, 0xf0, 0xd9, 0x67, 0x8d, 0x94, 0x43, 0x5a, 0x5b, 0x79, 0xeb, 0xa0, 0x15,
		0xeb, 0xfa, 0x89, 0x59, 0x5f, 0x1e, 0xda, 0x6b, 0x59, 0xdf, 0xce, 0x2b, 0x8c, 0x31, 0x5a, 0x44,
		0x42, 0x45, 0xb5, 0xa7, 0xfe, 0xa5, 0x18, 0x38, 0x60, 0x80, 0xc3, 0xc6, 0x4a, 0x42, 0x40, 0x41,
		0x41, 0x68, 0xeb, 0x27, 0x16, 0x93, 0xb2, 0x40, 0xc5, 0xdb, 0x1a, 0x8b, 0x9d, 0x65, 0x82, 0x78,
		0xa1, 0x38, 0xac, 0x57, 0x2f, 0x4c, 0x79, 0x11, 0xdf, 0xe4, 0xf4, 0x16, 0xae, 0x1e, 0x92, 0x96,
		0x5c, 0xc9, 0xb9, 0xf4, 0x12, 0x76, 0x7e, 0x78, 0x48, 0xd2, 0xb3, 0x44, 0xe6, 0x33, 0x21, 0x89
	]);
	signature = new Uint8Array([
		0x56, 0xf1, 0x4f, 0x6b, 0xf9, 0x65, 0xb6, 0x7d, 0x83, 0xb1, 0x40, 0x1c, 0x8b, 0x23, 0xf4, 0x35,
		0x5c, 0x0f, 0x9c, 0x0d, 0x1d, 0xb6, 0x70, 0xf2, 0x3c, 0x89, 0x08, 0x6e, 0xc6, 0x27, 0xdf, 0x88,
		0xfb, 0xa5, 0xaf, 0xfc, 0x74, 0x26, 0x61, 0xb0, 0x36, 0x27, 0x28, 0xf8, 0x3c, 0x44, 0x74, 0x74,
		0x34, 0x8e, 0xe7, 0x00, 0xad, 0x8d, 0x58, 0xfa, 0x48, 0xe4, 0xa6, 0x5a, 0x1d, 0x5b, 0xdb, 0xee,
		0x40, 0xda, 0x75, 0x76, 0xd3, 0xb5, 0xc7, 0x07, 0x1f, 0xbc, 0x9d, 0x9f, 0x98, 0xf0, 0x83, 0xa9,
		0xad, 0x9a, 0x13, 0x97, 0xcf, 0x02, 0x3a, 0xbb, 0x81, 0xb2, 0xb0, 0x99, 0x8d, 0xb2, 0x38, 0xa0,
		0x53, 0xfc, 0x43, 0x03, 0xc0, 0x57, 0xea, 0x27, 0xc5, 0x42, 0x01, 0x3e, 0x5c, 0xfa, 0xb4, 0x6b,
		0xcc, 0xfe, 0xc5, 0xab, 0xaa, 0x38, 0x87, 0xf1, 0x8e, 0xaf, 0x28, 0x78, 0xa1, 0x14, 0xe5, 0xc2,
		0xef, 0x69, 0x57, 0xf4, 0x29, 0x7a, 0x7b, 0x6a, 0xb0, 0x06, 0x92, 0x0b, 0x2c, 0x4b, 0x0e, 0xc5,
		0x3c, 0xeb, 0x85, 0x39, 0xc6, 0x14, 0x32, 0x45, 0xbb, 0x35, 0x7a, 0xbe, 0xbd, 0xcd, 0x69, 0x92,
		0x19, 0xe5, 0xa6, 0x17, 0x84, 0x8f, 0xf3, 0xee, 0xdb, 0x93, 0x13, 0x73, 0xd3, 0xec, 0x38, 0xa0,
		0x67, 0x68, 0x58, 0x48, 0xc2, 0x1b, 0xe6, 0xf7, 0x87, 0xf6, 0x09, 0xb4, 0x82, 0x36, 0x3b, 0xf1,
		0x62, 0xb7, 0xdf, 0x1d, 0xb2, 0xf5, 0x79, 0x04, 0x1b, 0xf8, 0x34, 0x9c, 0x34, 0xb8, 0x8e, 0x48,
		0xa7, 0xda, 0xbf, 0x17, 0x8a, 0x3f, 0xff, 0x29, 0xdc, 0xa6, 0xaf, 0x55, 0xc4, 0x5b, 0x4f, 0x94,
		0xb2, 0x4c, 0x68, 0xfd, 0xe2, 0x9f, 0x25, 0xf2, 0x58, 0xcb, 0x3c, 0x44, 0xc8, 0xab, 0xb4, 0x60,
		0xc4, 0x27, 0x6a, 0x54, 0x67, 0xe8, 0x54, 0x7d, 0xff, 0x71, 0xf9, 0xdd, 0xf8, 0x06, 0xd8, 0x84,
		0xf3, 0x44, 0x51, 0xcb, 0x5a, 0xde, 0xcd, 0xf8, 0x54, 0xdd, 0xc8, 0x00, 0x4f, 0xdb, 0x0b, 0xd3,
		0x01, 0xf3, 0x62, 0x18, 0xac, 0x78, 0xc3, 0x7f, 0x05, 0x00, 0x0d, 0xec, 0x91, 0x24, 0x8c, 0x16,
		0xfb, 0x8f, 0xa2, 0x4d, 0x60, 0xb0, 0xb2, 0x24, 0x63, 0x87, 0x21, 0xf5, 0x4e, 0x87, 0x13, 0x71,
		0x25, 0xbc, 0x81, 0x5b, 0x2a, 0xda, 0xb6, 0x35, 0xb5, 0x96, 0x89, 0x02, 0x88, 0xfa, 0xc1, 0x55,
		0xb6, 0x13, 0x78, 0x5c, 0xbf, 0x52, 0x58, 0x2f, 0x81, 0x15, 0x92, 0x12, 0x23, 0x0b, 0xbd, 0x7d,
		0x9d, 0xe6, 0x87, 0xb8, 0x90, 0xd4, 0x09, 0xae, 0x47, 0x7a, 0x61, 0xf0, 0x89, 0xa1, 0x74, 0xd4,
		0xdc, 0x7b, 0x90, 0xbd, 0x49, 0x74, 0xd0, 0xb7, 0x9b, 0x2e, 0x82, 0x8d, 0x35, 0xc8, 0x53, 0xbc,
		0xbc, 0x46, 0xcb, 0xa6, 0xa3, 0xa3, 0x1b, 0x95, 0xd6, 0x31, 0xaf, 0x2a, 0xf2, 0x05, 0x1f, 0xa6
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(true);

	e =
		0xeb8f15n;
	message = new Uint8Array([
		0x5c, 0x5f, 0xf1, 0x16, 0x07, 0x46, 0xc6, 0x3b, 0xed, 0xd7, 0x87, 0xe2, 0x7c, 0xdd, 0x9f, 0x58,
		0x1f, 0x22, 0x86, 0xc7, 0xaa, 0x3d, 0x42, 0xaa, 0xf8, 0xab, 0x2e, 0x84, 0xd2, 0x21, 0xfa, 0xd2,
		0x13, 0x21, 0xf3, 0x3e, 0x0a, 0xcc, 0x84, 0x15, 0x20, 0xf7, 0xfd, 0xfb, 0xbb, 0x80, 0x94, 0xde,
		0x62, 0xe2, 0xaa, 0x28, 0x21, 0x08, 0x4f, 0x39, 0x2f, 0x5f, 0x07, 0x14, 0xce, 0x2f, 0xce, 0x58,
		0x73, 0x2b, 0x5b, 0x73, 0x27, 0x47, 0xa2, 0x12, 0x2d, 0xc9, 0x9c, 0xdb, 0xe5, 0xa3, 0x4a, 0x5f,
		0xf0, 0x00, 0xf8, 0x4a, 0x95, 0x1d, 0xbf, 0xdd, 0x63, 0x5a, 0x4d, 0x9f, 0x18, 0x91, 0xe9, 0x4f,
		0xc2, 0xa6, 0xb1, 0x1c, 0x24, 0x5f, 0x26, 0x19, 0x5b, 0x76, 0xeb, 0xeb, 0xc2, 0xed, 0xca, 0xc4,
		0x12, 0xa2, 0xf8, 0x96, 0xce, 0x23, 0x9a, 0x80, 0xde, 0xc3, 0x87, 0x8d, 0x79, 0xee, 0x50, 0x9d
	]);
	signature = new Uint8Array([
		0x82, 0x4b, 0x73, 0xc9, 0xa5, 0x00, 0x8b, 0x6b, 0xfe, 0xec, 0x66, 0x96, 0xce, 0x8c, 0x35, 0x60,
		0xd2, 0xda, 0x11, 0xf6, 0xdd, 0xe2, 0xf8, 0xbe, 0xc7, 0xb1, 0xd4, 0x47, 0x82, 0x01, 0x71, 0xd4,
		0x6f, 0x88, 0x65, 0x4b, 0x30, 0xbe, 0x09, 0xbd, 0x74, 0x96, 0x73, 0x9c, 0x86, 0xcc, 0x39, 0x3c,
		0xf0, 0x64, 0x96, 0xc7, 0xcc, 0x20, 0x3c, 0xdb, 0x73, 0x9a, 0x0b, 0x7a, 0xbb, 0x5b, 0xf8, 0x2d,
		0x04, 0x3b, 0xcd, 0xa5, 0x7b, 0x6a, 0x4f, 0x2d, 0x2c, 0x03, 0xf8, 0x13, 0xcf, 0x01, 0xc4, 0xe6,
		0x8e, 0x2a, 0x2e, 0xa5, 0xa2, 0x19, 0x9e, 0xd1, 0x79, 0x8c, 0x01, 0x77, 0x49, 0xe3, 0x5c, 0xff,
		0x02, 0xd0, 0xda, 0xf1, 0x95, 0x21, 0xab, 0x65, 0x23, 0x4a, 0xc7, 0xf4, 0xa2, 0xe9, 0x04, 0xce,
		0x4f, 0x7c, 0x2d, 0x55, 0x95, 0x37, 0xec, 0x16, 0x1b, 0x6a, 0xc5, 0x89, 0x56, 0x77, 0xee, 0x9a,
		0x3a, 0xd1, 0xe8, 0x93, 0x30, 0xa0, 0x25, 0x57, 0x84, 0x56, 0x01, 0xee, 0x76, 0xe5, 0xc4, 0x08,
		0x6d, 0x8a, 0x25, 0xbf, 0x49, 0xb2, 0x7d, 0x7f, 0x23, 0xbc, 0xef, 0x3f, 0xa7, 0x4f, 0xf1, 0xfe,
		0x75, 0x20, 0x69, 0x24, 0x55, 0x28, 0xf9, 0xb3, 0xe5, 0x77, 0x45, 0x91, 0xd8, 0x55, 0x47, 0x7b,
		0xdd, 0x7d, 0xf7, 0xb7, 0x62, 0x58, 0xf3, 0xc6, 0x54, 0x84, 0x0c, 0xe0, 0xc9, 0xad, 0xfc, 0x4e,
		0x8d, 0xe5, 0xc2, 0x0c, 0xf6, 0x19, 0xe7, 0xb7, 0xff, 0x6e, 0x9d, 0x3d, 0x4c, 0x65, 0x03, 0x55,
		0x1b, 0x38, 0x13, 0x4d, 0x47, 0xc6, 0xa9, 0x44, 0xaf, 0xb8, 0x43, 0x02, 0xdb, 0x1a, 0xc4, 0x8b,
		0x54, 0xf9, 0x80, 0x81, 0x93, 0x93, 0x14, 0x2c, 0x23, 0xcc, 0x6b, 0xd4, 0xbd, 0x3a, 0xb5, 0x19,
		0xd4, 0x2d, 0x9b, 0xfc, 0x9b, 0xe7, 0x5d, 0xf7, 0x22, 0xaa, 0x63, 0x36, 0xd3, 0x41, 0xd9, 0x70,
		0x38, 0x74, 0xe4, 0x1a, 0xe2, 0x89, 0x92, 0x48, 0xa9, 0x39, 0xb5, 0x73, 0x39, 0xd6, 0xae, 0x64,
		0x31, 0x51, 0x3d, 0x6a, 0xed, 0xdb, 0x91, 0xac, 0xcb, 0xe9, 0x90, 0x49, 0x1c, 0x0c, 0x1c, 0x06,
		0xaf, 0x81, 0x16, 0x79, 0x93, 0xee, 0xe6, 0x41, 0xca, 0x06, 0xa1, 0xfa, 0x6e, 0xce, 0xdf, 0xea,
		0x21, 0x62, 0xed, 0xef, 0x08, 0xdb, 0x09, 0xad, 0xcc, 0x23, 0x5e, 0xab, 0xc7, 0xf5, 0x11, 0xc8,
		0xaa, 0xd8, 0xcb, 0x0f, 0x9f, 0x96, 0x01, 0xe4, 0x00, 0xa2, 0x58, 0xaf, 0xc1, 0xb2, 0x49, 0xb4,
		0x71, 0x30, 0x47, 0x47, 0x47, 0xec, 0x71, 0x0c, 0x26, 0xe0, 0x52, 0x85, 0x95, 0xc9, 0x68, 0xf8,
		0x07, 0x63, 0x54, 0xb0, 0xba, 0x5f, 0x42, 0x2d, 0x41, 0x73, 0x02, 0xd4, 0x75, 0x72, 0xcb, 0x23,
		0x94, 0xd3, 0x73, 0xc1, 0x70, 0x96, 0xed, 0xfa, 0x8b, 0x4e, 0xbe, 0x2d, 0x74, 0xa9, 0xc8, 0xac
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xdf0ff7n;
	message = new Uint8Array([
		0x6a, 0x79, 0x89, 0x95, 0xea, 0xee, 0x88, 0xb8, 0x61, 0x27, 0x43, 0x98, 0xcf, 0xf6, 0xd0, 0x41,
		0x1e, 0x69, 0x95, 0xd5, 0xfa, 0x4f, 0xb9, 0x2f, 0xe2, 0xf7, 0xd8, 0xc5, 0x7f, 0x3b, 0xfb, 0xd3,
		0x35, 0xbd, 0xc7, 0xb6, 0xf9, 0x71, 0xf4, 0x95, 0x62, 0x5c, 0x01, 0x47, 0x02, 0x9b, 0x26, 0x71,
		0xf6, 0xa6, 0x8b, 0xef, 0xbc, 0xd6, 0xb7, 0x76, 0x45, 0x25, 0x4b, 0x77, 0x4b, 0x36, 0xf0, 0x46,
		0xe5, 0x95, 0x8e, 0x7b, 0x59, 0x3f, 0xbf, 0x99, 0x31, 0x65, 0x83, 0xed, 0x91, 0x6d, 0x35, 0xb9,
		0xc7, 0x3a, 0xbd, 0x92, 0x24, 0xad, 0x08, 0x07, 0x0a, 0x6b, 0xb5, 0x83, 0x47, 0xe1, 0x11, 0x75,
		0xa1, 0x86, 0x46, 0xad, 0xb2, 0x60, 0xcf, 0x09, 0xf7, 0xca, 0x2f, 0x52, 0x23, 0x74, 0xe3, 0x61,
		0xb9, 0xab, 0x95, 0x86, 0xd9, 0xdb, 0x92, 0x2a, 0x5a, 0x52, 0x7e, 0xb2, 0x1a, 0x46, 0x47, 0xa7
	]);
	signature = new Uint8Array([
		0x62, 0xf3, 0x5b, 0xc6, 0x27, 0xd3, 0xcc, 0x3e, 0x8f, 0xf8, 0xc9, 0x40, 0x52, 0x95, 0xf9, 0x67,
		0xd9, 0x5a, 0xbb, 0x90, 0xff, 0x3b, 0xbf, 0xfb, 0x53, 0x6f, 0x4a, 0x14, 0xd0, 0x5d, 0x6e, 0xa8,
		0x8d, 0xc0, 0x92, 0xa0, 0x5a, 0x46, 0x84, 0x7b, 0xaa, 0x76, 0x83, 0x73, 0x83, 0xe9, 0x52, 0x7b,
		0xb2, 0x67, 0xed, 0x8d, 0xb2, 0xfe, 0x4a, 0x94, 0xd4, 0x7d, 0xfc, 0xd8, 0xe2, 0x3e, 0xda, 0x67,
		0xf7, 0x5a, 0x4f, 0xc9, 0xe2, 0x76, 0xdd, 0x30, 0x06, 0xb0, 0xcb, 0x5a, 0xc2, 0x1c, 0xa4, 0x83,
		0xa8, 0x02, 0x0b, 0x4d, 0xf3, 0x48, 0x5c, 0x5f, 0xd6, 0x49, 0x55, 0x77, 0xd2, 0x9d, 0x32, 0xc6,
		0xd4, 0x42, 0x9b, 0x04, 0x2f, 0x3b, 0xe4, 0x67, 0x5c, 0xb5, 0x6e, 0xd5, 0xd3, 0x17, 0x8a, 0xec,
		0xe1, 0xe8, 0xc9, 0x38, 0x10, 0x6e, 0x5b, 0x8c, 0x11, 0x11, 0xf2, 0x26, 0x5f, 0x62, 0x04, 0xfc,
		0x7a, 0xb8, 0x78, 0x60, 0x30, 0x1a, 0x1b, 0x15, 0x57, 0x7c, 0x60, 0x5a, 0x0b, 0xe4, 0x93, 0x10,
		0x48, 0x75, 0x37, 0x62, 0xd7, 0xd4, 0xc2, 0xcf, 0xbf, 0x3e, 0x87, 0x3e, 0xd6, 0x3b, 0x2a, 0xd9,
		0x66, 0x99, 0x71, 0xa3, 0x2b, 0xe0, 0xc8, 0x24, 0x6b, 0x86, 0x2c, 0xd8, 0x82, 0xeb, 0xec, 0x16,
		0x4a, 0xda, 0xf7, 0x9e, 0x37, 0xb3, 0xb0, 0x7c, 0x9c, 0xa1, 0x93, 0x88, 0x7f, 0x37, 0x05, 0x73,
		0xf2, 0xfb, 0x9d, 0xcd, 0x9b, 0x3c, 0x9a, 0x0a, 0x15, 0x5d, 0x5d, 0x62, 0x2e, 0x11, 0x96, 0x21,
		0x64, 0x74, 0xfa, 0x2a, 0x09, 0x82, 0xda, 0xb3, 0x9e, 0x01, 0xd6, 0x65, 0x4e, 0xe4, 0xb3, 0x68,
		0x17, 0xbf, 0x5f, 0x0e, 0xb0, 0xef, 0x0c, 0x65, 0xb7, 0xdb, 0xe1, 0xdf, 0xd6, 0xa6, 0x52, 0x4d,
		0xf9, 0x98, 0x95, 0xff, 0xbc, 0x26, 0x4b, 0x93, 0xbd, 0xf6, 0x15, 0x02, 0xb7, 0xe2, 0xc9, 0xbc,
		0xd6, 0x3e, 0x71, 0x33, 0xc6, 0x11, 0xf5, 0xea, 0x7e, 0x32, 0x18, 0xd0, 0x01, 0xae, 0xab, 0x09,
		0xd8, 0x91, 0xc0, 0x45, 0xcf, 0xdc, 0xdc, 0xc0, 0x49, 0xe5, 0xce, 0xfd, 0xea, 0xbd, 0x61, 0x7a,
		0xf8, 0x3c, 0x96, 0xe2, 0x9a, 0x90, 0x13, 0x3d, 0x29, 0xe4, 0xa2, 0xe6, 0xdf, 0xfb, 0x37, 0x0b,
		0xbb, 0x64, 0xff, 0xee, 0x31, 0xe3, 0xa6, 0xbf, 0x92, 0x25, 0xdf, 0x8f, 0xcc, 0x0c, 0x0c, 0xcc,
		0x76, 0x06, 0xb3, 0xdc, 0xfd, 0x88, 0x3c, 0x39, 0x50, 0xc8, 0x06, 0x48, 0x04, 0x96, 0x73, 0xcc,
		0x65, 0xf0, 0xe4, 0x43, 0xed, 0xb6, 0x3b, 0x26, 0xbd, 0xa9, 0xb5, 0x54, 0xb2, 0x99, 0x69, 0x60,
		0xc7, 0xdd, 0xea, 0xbe, 0x84, 0x9e, 0x87, 0x11, 0x99, 0xfb, 0x54, 0x56, 0x69, 0x13, 0xa7, 0x99,
		0x2f, 0x00, 0x7b, 0x54, 0xfa, 0x8a, 0xef, 0xc7, 0xf9, 0x55, 0x61, 0xcc, 0x03, 0x0e, 0x80, 0xb8
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xdf0ff7n;
	message = new Uint8Array([
		0x14, 0x70, 0xf2, 0xd6, 0x5f, 0xd7, 0x22, 0x58, 0xe6, 0x62, 0x67, 0x19, 0x36, 0xf4, 0x6a, 0x2a,
		0xf0, 0x3f, 0x60, 0x00, 0x84, 0x7e, 0xea, 0xc8, 0x3d, 0x67, 0x3a, 0xfa, 0x7e, 0x5b, 0x78, 0x31,
		0x4b, 0xe1, 0x64, 0x3a, 0x0a, 0x52, 0x3c, 0x6a, 0x8b, 0xd6, 0xe0, 0x35, 0x47, 0x8e, 0x34, 0xfd,
		0xe5, 0x13, 0xc6, 0x28, 0x03, 0x20, 0xb1, 0x75, 0x32, 0x8b, 0xc1, 0x90, 0x42, 0x7a, 0xd7, 0xe4,
		0xc1, 0xd3, 0x8f, 0xb0, 0xbe, 0xf4, 0x21, 0x5d, 0xd2, 0xa5, 0x85, 0x0f, 0x62, 0x4a, 0xdb, 0x7a,
		0x1e, 0x5e, 0x09, 0xf7, 0xcd, 0x1c, 0xa6, 0xd6, 0x4d, 0x7f, 0x17, 0xf6, 0xd5, 0x6d, 0xf7, 0x94,
		0x7e, 0x2f, 0xbd, 0x61, 0x02, 0x25, 0x98, 0xd7, 0xc3, 0xb8, 0x9e, 0xcc, 0x0f, 0x8f, 0x26, 0x48,
		0xa2, 0x06, 0x72, 0x94, 0x6c, 0xdc, 0x92, 0x93, 0x95, 0x2b, 0x84, 0x55, 0xbf, 0x9e, 0xa0, 0xea
	]);
	signature = new Uint8Array([
		0x99, 0xa5, 0x8b, 0x03, 0x98, 0x83, 0x04, 0x37, 0xda, 0x35, 0xa7, 0x68, 0x92, 0x55, 0xde, 0x79,
		0x71, 0x8f, 0x66, 0xc9, 0x1c, 0xb0, 0x7f, 0x9d, 0xcb, 0x33, 0x29, 0x31, 0x94, 0xf1, 0xda, 0xcb,
		0xbb, 0xa0, 0x50, 0x13, 0xe8, 0xdf, 0x99, 0x3f, 0x06, 0x65, 0x4c, 0x45, 0x46, 0x2b, 0x37, 0x23,
		0xc5, 0x9c, 0x26, 0x9d, 0xf0, 0x7a, 0x5c, 0xa7, 0x42, 0xfd, 0xa3, 0x23, 0x6f, 0xf3, 0x2b, 0xd9,
		0x8b, 0xe7, 0xcc, 0x2e, 0x2e, 0x7d, 0x5c, 0x7f, 0x88, 0xf4, 0x09, 0xb2, 0xa0, 0xb9, 0xee, 0x85,
		0xbb, 0xe3, 0x3d, 0x0e, 0x84, 0x82, 0x3f, 0xe6, 0xae, 0x1b, 0x4e, 0x38, 0x29, 0x20, 0x75, 0xd0,
		0x31, 0x59, 0x59, 0x80, 0x62, 0x54, 0x77, 0x31, 0x75, 0xde, 0x32, 0x16, 0x2b, 0x66, 0xc7, 0xc6,
		0x8a, 0xe0, 0xa4, 0xee, 0xe7, 0xb1, 0xe9, 0x47, 0xf2, 0x03, 0x59, 0xa8, 0x35, 0x13, 0xe3, 0xba,
		0xfc, 0x36, 0x59, 0x33, 0xd3, 0x25, 0x57, 0x55, 0x1b, 0x9d, 0x3f, 0xba, 0x18, 0x37, 0x36, 0x20,
		0x1d, 0xec, 0xd6, 0xa1, 0xe1, 0x61, 0x6f, 0x18, 0xc6, 0x26, 0x4d, 0xb3, 0xe9, 0x05, 0xf3, 0x6f,
		0x98, 0xc4, 0x81, 0x8b, 0x6f, 0xa5, 0x40, 0x51, 0xe9, 0x5f, 0xea, 0xda, 0x6c, 0x64, 0x2e, 0xa1,
		0xa3, 0xfc, 0xfe, 0xe5, 0x95, 0xa1, 0x72, 0xea, 0x05, 0xab, 0x70, 0x51, 0x00, 0x1a, 0x55, 0x95,
		0x8c, 0x3a, 0x73, 0x3e, 0x69, 0x16, 0x1b, 0x44, 0x1f, 0xa1, 0xc9, 0x7d, 0xdb, 0x07, 0xf9, 0xd7,
		0x3d, 0xa7, 0x27, 0x3f, 0xda, 0x4e, 0x4b, 0x3a, 0x0e, 0x5a, 0x96, 0xc2, 0xd0, 0xe4, 0x62, 0x34,
		0x8e, 0xd0, 0x5f, 0xd5, 0xa2, 0x3a, 0x52, 0xbc, 0x6e, 0x08, 0xa7, 0x3e, 0x6b, 0x7c, 0x59, 0x5d,
		0xb4, 0x2b, 0xf3, 0x6e, 0x2f, 0xea, 0x51, 0x20, 0xb6, 0x05, 0xce, 0x1e, 0x85, 0x03, 0xf3, 0x4b,
		0x67, 0x63, 0x54, 0xf8, 0xf8, 0x61, 0xf6, 0x18, 0x5d, 0x1a, 0xed, 0xd9, 0x15, 0xd0, 0x7f, 0x97,
		0x83, 0x66, 0xda, 0x1a, 0x7d, 0x2e, 0x4a, 0x22, 0x0c, 0x43, 0xba, 0xbb, 0x4d, 0x60, 0xd2, 0xa5,
		0x43, 0xf0, 0x40, 0x6f, 0xbd, 0x20, 0x5b, 0x8c, 0x6a, 0x75, 0x93, 0x74, 0xe8, 0xf1, 0x7c, 0x5c,
		0x49, 0xef, 0xc0, 0xc0, 0xa2, 0xf3, 0x27, 0xeb, 0x0c, 0x0c, 0x68, 0x14, 0x83, 0xaf, 0x84, 0xc8,
		0x8e, 0xed, 0x6d, 0xa3, 0x3e, 0x22, 0x2f, 0xc8, 0x93, 0x7c, 0xe9, 0x02, 0x6e, 0x85, 0x33, 0x95,
		0x0b, 0x68, 0x4b, 0xcf, 0xcc, 0x7c, 0x45, 0x0a, 0xe5, 0xcd, 0x75, 0x0a, 0x73, 0x7f, 0x71, 0x8c,
		0x20, 0x1d, 0x33, 0x62, 0x5a, 0x95, 0xa4, 0xdd, 0x37, 0xde, 0x92, 0x0b, 0xa9, 0x7a, 0xf7, 0xde,
		0xdd, 0x96, 0x1d, 0x0e, 0x8f, 0x5b, 0x61, 0xf9, 0x00, 0x70, 0x13, 0xeb, 0xda, 0xd6, 0x10, 0x44
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	n =
		0xb43d4a446de45aa8f336b93a4c5923f3a5386ef8dd1e94c42300de0880e9bd0828fb32e36e4c50cbf666037a8f2e05f45773896c10aea975b3dbf4c4cdfc24a038c5c06d361baf84c38fc22c03a36b9dce38e090111d9c1323d7a77d3e04b713faf740965a9e1883ee3775489ab514ce480786f9eb741c60ab896a9d6eae3a53ed9268768c21f79e30759e0b01ab7fa224ea8229c293780058f258e9226d7374ac425ef1d2b6e06e5b263df0c6d66c00ed26cbf246a5af0a0163336886ef8d929b37749a08f0ec1db05973a8afc81778b6cc9106f92b1453f1528697b1dc8dd0b255e801060fe179b2d10a9c4c3e13f3c56fa6d55166f6461af4aaf4f4168fd5ea6dadedaa3f9f1de4de993d8844357c0af79a090ecc80570c641545beb42a1248a52de612f2e0f8834496331a7354f7eb91a1943b5cb3b6cf198451735fb554922f04f009a52a15d99369adc2e46b09bb871f4f3ec1905acd792b8c81a3d74b316ff9d20b93f48817ae618677dc9451f582ec9995f44552f4244953cde83f11n;
	e =
		0xffbn;
	message = new Uint8Array([
		0xaa, 0xfe, 0x2e, 0x08, 0x6c, 0xd9, 0x7a, 0xd0, 0x52, 0xb1, 0x92, 0xe4, 0x3e, 0xb1, 0x88, 0x61,
		0xed, 0x6e, 0x2a, 0x27, 0xcf, 0x6e, 0x7d, 0x7f, 0x16, 0xe7, 0x67, 0x02, 0x0d, 0xc8, 0xac, 0xb6,
		0xac, 0xfd, 0x1c, 0x79, 0x69, 0xef, 0x0a, 0xa3, 0x50, 0x4b, 0xff, 0xe7, 0x56, 0x05, 0xb0, 0x7a,
		0xeb, 0x9c, 0x2e, 0x77, 0xce, 0x9f, 0x5d, 0x83, 0x25, 0x70, 0xa7, 0xad, 0xcd, 0x48, 0xf1, 0x97,
		0xef, 0x7b, 0xce, 0xdb, 0xd4, 0xfe, 0xf3, 0xa8, 0xfa, 0x26, 0xec, 0xac, 0x67, 0xb2, 0x0d, 0x37,
		0x3d, 0x0c, 0xaa, 0x9d, 0x8f, 0xcc, 0x8b, 0xdc, 0x73, 0x7e, 0x9a, 0x7e, 0x58, 0xa5, 0xdf, 0xc1,
		0x9a, 0x00, 0xae, 0xf6, 0x54, 0x0b, 0x1f, 0x27, 0x76, 0xc9, 0xbf, 0xfc, 0x17, 0xc1, 0x85, 0xdf,
		0x0c, 0x46, 0x08, 0x5f, 0xb9, 0xfc, 0xee, 0xd2, 0x27, 0x98, 0xa8, 0x3f, 0x57, 0xe7, 0x5d, 0x7b
	]);
	signature = new Uint8Array([
		0x2b, 0x6d, 0xcd, 0x7b, 0x7b, 0x26, 0x1f, 0x67, 0xe9, 0x50, 0xce, 0x9c, 0xca, 0xfa, 0x86, 0x75,
		0xe2, 0xcb, 0x70, 0xf9, 0x71, 0x91, 0x7d, 0x55, 0x7b, 0xfe, 0x8f, 0xe8, 0x7f, 0x81, 0xf4, 0x37,
		0x0a, 0x04, 0xe0, 0xb0, 0x5b, 0xcb, 0x96, 0xe5, 0x99, 0x48, 0x3c, 0x18, 0xc3, 0xa4, 0xab, 0x39,
		0xdb, 0xd1, 0xb7, 0x40, 0x98, 0x46, 0x1f, 0xcd, 0x05, 0x01, 0x39, 0xfc, 0x8e, 0xd1, 0x6a, 0x62,
		0xab, 0x95, 0xc3, 0xab, 0xa5, 0x1e, 0x23, 0xe0, 0x3a, 0xd6, 0x15, 0x99, 0x04, 0x50, 0xbb, 0xc6,
		0x0b, 0xab, 0x43, 0xc1, 0xb8, 0xf4, 0xb9, 0x65, 0xb0, 0xd6, 0xba, 0x86, 0xb0, 0x60, 0x0c, 0xb3,
		0x60, 0xac, 0xde, 0x39, 0xb9, 0x95, 0x8e, 0x12, 0x70, 0x0a, 0xe7, 0xa9, 0x23, 0x6e, 0xff, 0xf9,
		0xac, 0x5f, 0x43, 0xa4, 0x4f, 0x7b, 0xa0, 0x11, 0x0b, 0x4e, 0xa1, 0xdd, 0x99, 0x93, 0xa5, 0xb6,
		0xfc, 0x5e, 0x74, 0x8e, 0xa2, 0xe4, 0x08, 0x5d, 0xb6, 0xfd, 0x48, 0x60, 0x61, 0xa5, 0x69, 0x25,
		0xd7, 0x05, 0xf3, 0xab, 0x13, 0x40, 0x14, 0x9d, 0x71, 0x33, 0xc0, 0x20, 0x75, 0x33, 0x0f, 0x9e,
		0x8b, 0xa5, 0x91, 0xb3, 0x61, 0xda, 0x73, 0x7a, 0x69, 0xc5, 0xa5, 0xff, 0x72, 0x67, 0xee, 0xdd,
		0x23, 0xc1, 0xa5, 0xcd, 0x45, 0x0c, 0x33, 0x9d, 0xc9, 0x3f, 0x72, 0xc6, 0xfd, 0xba, 0x6d, 0xba,
		0x2e, 0xfd, 0x89, 0x6f, 0x14, 0x36, 0xb8, 0x84, 0x04, 0x22, 0xc1, 0x5b, 0x93, 0x2a, 0xb9, 0x69,
		0x92, 0x96, 0x59, 0x62, 0x50, 0x09, 0x7a, 0xba, 0x06, 0xf6, 0x9e, 0x6c, 0x5a, 0x3e, 0x43, 0x37,
		0xe9, 0xc7, 0xa5, 0x2c, 0xc3, 0xd8, 0x0a, 0xd0, 0x7e, 0xec, 0x15, 0x91, 0xd5, 0x27, 0x0f, 0x32,
		0xe6, 0xcb, 0xf6, 0x33, 0xcb, 0xc3, 0x79, 0x24, 0xc0, 0x41, 0x69, 0x6c, 0x2e, 0xe6, 0x04, 0x63,
		0x08, 0x7d, 0x0d, 0x29, 0x34, 0x6e, 0x2c, 0x3f, 0x8e, 0xb8, 0x60, 0x21, 0xdd, 0x8b, 0x37, 0xb5,
		0xbc, 0x3f, 0xa3, 0x07, 0x8a, 0xfb, 0x51, 0x05, 0xaa, 0x6b, 0x64, 0x8f, 0xd6, 0xb7, 0x3a, 0x3d,
		0xef, 0xbd, 0x4f, 0x35, 0xe1, 0x42, 0x76, 0x89, 0x1b, 0x5c, 0x6f, 0x9f, 0xa1, 0x39, 0x4b, 0x9a,
		0x0e, 0xf1, 0x4c, 0xc1, 0xa6, 0x22, 0x7c, 0x7b, 0xf6, 0x82, 0xbd, 0xa8, 0x35, 0xf8, 0xb6, 0xb6,
		0xd8, 0xe9, 0xc8, 0xea, 0x7c, 0x0d, 0x5c, 0xa3, 0x21, 0x34, 0x27, 0xf8, 0xdd, 0x8c, 0x91, 0xc0,
		0x09, 0x6d, 0x5c, 0x64, 0xdf, 0x2f, 0x8e, 0x04, 0x84, 0xbb, 0xee, 0x60, 0x4d, 0x41, 0xb0, 0x09,
		0xfe, 0x43, 0x26, 0x20, 0x83, 0xed, 0xd5, 0x47, 0x9d, 0xf5, 0xa4, 0x91, 0x03, 0x44, 0x52, 0xdf,
		0x9f, 0x51, 0x11, 0x62, 0x3d, 0x87, 0x41, 0x3b, 0x50, 0xdd, 0xbe, 0x7c, 0x5b, 0x0e, 0x94, 0x8f
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000098ffbn;
	message = new Uint8Array([
		0x32, 0xaa, 0xbc, 0x83, 0xe5, 0x8c, 0x61, 0xf8, 0x9b, 0x68, 0x12, 0x52, 0x8b, 0xe8, 0xe6, 0x1b,
		0x9e, 0x9d, 0x38, 0x15, 0x26, 0xe6, 0xfa, 0x36, 0xcd, 0x14, 0x4b, 0xf1, 0xcb, 0xcb, 0x4c, 0xb7,
		0x5d, 0xab, 0x30, 0xbe, 0x72, 0x30, 0x93, 0x01, 0xa7, 0xd7, 0x0d, 0x88, 0x75, 0x83, 0x06, 0xe9,
		0xa9, 0x1e, 0xcc, 0x0f, 0x15, 0x83, 0xe2, 0x3a, 0x86, 0x9c, 0x9c, 0x47, 0xf6, 0xc7, 0xe8, 0x32,
		0x02, 0x7f, 0x6f, 0xd9, 0x9e, 0x38, 0xdd, 0x02, 0x07, 0x8a, 0x7c, 0xa0, 0xf9, 0x92, 0x08, 0x52,
		0x23, 0x96, 0xbf, 0x2d, 0xd8, 0xe7, 0xb7, 0xbb, 0x07, 0x0c, 0x74, 0x43, 0x6d, 0x1c, 0xba, 0x4b,
		0x09, 0x6c, 0xa0, 0x5c, 0xd0, 0x6a, 0xe6, 0x05, 0xa3, 0xc9, 0x88, 0x22, 0x7e, 0xdf, 0x93, 0x5f,
		0xf2, 0x4b, 0x38, 0xf7, 0xd5, 0xda, 0x1f, 0xc2, 0x38, 0xac, 0xfe, 0x6e, 0x99, 0x92, 0x69, 0x0c
	]);
	signature = new Uint8Array([
		0x61, 0xa6, 0xf6, 0x12, 0x68, 0xa5, 0x12, 0xa0, 0x30, 0x4f, 0xc5, 0xbd, 0x13, 0xcb, 0x23, 0x6d,
		0x74, 0x15, 0x79, 0x3c, 0xc3, 0x55, 0x93, 0xf0, 0xd5, 0x23, 0x29, 0x6c, 0x9d, 0x7e, 0xcd, 0xb8,
		0x20, 0x91, 0x65, 0x75, 0x7e, 0xc3, 0x7d, 0xb6, 0x71, 0xcb, 0xd2, 0xde, 0x9f, 0xfb, 0x35, 0xaa,
		0x24, 0x26, 0x2a, 0x8c, 0xd7, 0xd6, 0x0f, 0x52, 0x97, 0x5e, 0xa6, 0x41, 0x62, 0xbe, 0xb6, 0xa1,
		0x4b, 0x0c, 0x63, 0x79, 0xfd, 0x11, 0xc2, 0x46, 0x09, 0x8f, 0x01, 0xb3, 0x2f, 0xd4, 0x6c, 0xf5,
		0xf2, 0x33, 0x56, 0xfd, 0xdb, 0x33, 0xa7, 0xca, 0x26, 0x90, 0xd9, 0x2c, 0x70, 0xf5, 0xdc, 0x87,
		0xdf, 0xf3, 0x21, 0xbb, 0x0b, 0x33, 0xb5, 0xe3, 0xfa, 0x72, 0x54, 0x95, 0x4d, 0x45, 0xec, 0x8d,
		0xea, 0xb3, 0x69, 0x80, 0x76, 0x83, 0xf0, 0x7c, 0x6e, 0x03, 0x85, 0x3c, 0x34, 0x82, 0x84, 0x1a,
		0xec, 0x30, 0x7e, 0x53, 0xeb, 0x79, 0x8b, 0x23, 0xc3, 0x1f, 0x25, 0x70, 0xce, 0xe1, 0x03, 0x40,
		0xbe, 0xca, 0xe9, 0x9e, 0x98, 0x0d, 0x12, 0xf5, 0xd9, 0x52, 0x98, 0xa0, 0x9e, 0x3c, 0x4d, 0x3e,
		0x9d, 0x55, 0x7e, 0x38, 0x11, 0xa1, 0x25, 0xaa, 0x41, 0xe8, 0xc9, 0x05, 0x1a, 0xa0, 0x93, 0x04,
		0x41, 0xa5, 0xce, 0xec, 0x75, 0x1e, 0x1d, 0x73, 0xa3, 0x73, 0x73, 0xb1, 0x5c, 0xfd, 0x14, 0x2b,
		0x65, 0x16, 0x4f, 0xb9, 0x23, 0xb0, 0x5b, 0x55, 0xf8, 0xd6, 0x43, 0xa3, 0x86, 0x48, 0xd5, 0x41,
		0x86, 0xb5, 0xc2, 0x1f, 0xb7, 0x85, 0xab, 0x7f, 0x89, 0x9b, 0x36, 0x15, 0xc8, 0xa0, 0x03, 0xd4,
		0xa3, 0x76, 0x51, 0x23, 0x8f, 0xf0, 0xe4, 0xa5, 0x98, 0x66, 0x1a, 0x79, 0x73, 0x90, 0x05, 0xf7,
		0x75, 0x5f, 0xfe, 0xa7, 0x00, 0xa7, 0x0b, 0xae, 0x33, 0xb0, 0xec, 0x8c, 0x3b, 0x63, 0x06, 0x4a,
		0xca, 0x6b, 0xa4, 0xac, 0x02, 0x9e, 0x2d, 0x79, 0x64, 0x19, 0x3f, 0x18, 0x7e, 0xa8, 0x4f, 0x96,
		0x49, 0x00, 0xac, 0xb3, 0x70, 0x0e, 0x72, 0xae, 0x6e, 0x40, 0xab, 0x2a, 0xf3, 0x88, 0x6b, 0xc5,
		0xa1, 0xb9, 0x35, 0x95, 0x9e, 0x95, 0xc3, 0x38, 0xf9, 0x94, 0x8a, 0x74, 0x9c, 0x8e, 0x2d, 0x8a,
		0xbb, 0x91, 0xde, 0xef, 0x6b, 0x89, 0xfb, 0x21, 0x87, 0x7b, 0x4a, 0x84, 0xa2, 0x74, 0x02, 0xd9,
		0x87, 0x18, 0xe3, 0x2e, 0xe0, 0x51, 0x65, 0x5e, 0x78, 0x53, 0x3e, 0x92, 0x8a, 0xd4, 0x5f, 0x9a,
		0xda, 0xaf, 0x3b, 0x12, 0xd9, 0xbf, 0x98, 0x79, 0x55, 0xcb, 0x68, 0xce, 0x67, 0xff, 0xc7, 0xab,
		0xb8, 0x67, 0x0b, 0x80, 0xab, 0xb9, 0x1d, 0x7e, 0x41, 0xed, 0x85, 0x67, 0x2f, 0xb8, 0xee, 0x2a,
		0xa5, 0x4c, 0xf1, 0xe6, 0x42, 0x83, 0x9c, 0x71, 0x99, 0xb2, 0x51, 0xbc, 0x1a, 0x88, 0x7e, 0x06
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xffbn;
	message = new Uint8Array([
		0x1a, 0x94, 0x38, 0x37, 0xeb, 0x6a, 0x0b, 0xfc, 0x1f, 0x7f, 0xf3, 0x10, 0xc1, 0x43, 0xef, 0x83,
		0x6d, 0x6c, 0x2d, 0xdf, 0x59, 0xeb, 0x2b, 0xb9, 0x94, 0x1e, 0x1c, 0x85, 0x90, 0x47, 0x8d, 0xaf,
		0xdf, 0x3d, 0x48, 0xe7, 0x3a, 0x61, 0x78, 0xbc, 0xc7, 0xd4, 0x0f, 0x6c, 0x9c, 0xe7, 0x65, 0xfa,
		0x7f, 0xd3, 0x21, 0x82, 0xef, 0xab, 0x5d, 0xca, 0x69, 0x8e, 0x05, 0x19, 0xe4, 0x21, 0x80, 0x4c,
		0x9e, 0x3c, 0x93, 0x26, 0x1a, 0xe4, 0x82, 0xe8, 0x69, 0x7a, 0x78, 0x21, 0xaa, 0x31, 0x28, 0xc8,
		0xcd, 0xc6, 0xb5, 0x88, 0x9c, 0x6b, 0xcf, 0x5b, 0xfb, 0x04, 0x20, 0x5a, 0x6e, 0x95, 0xe6, 0xd4,
		0xdd, 0xfb, 0xe1, 0x9d, 0x94, 0xdb, 0x6f, 0xa8, 0x8e, 0xd9, 0xf6, 0xd8, 0xf3, 0x0a, 0x82, 0x14,
		0xdf, 0xab, 0xaf, 0x9a, 0x65, 0x13, 0xca, 0x95, 0xd4, 0xe6, 0x33, 0xf1, 0x38, 0x8c, 0x05, 0x6e
	]);
	signature = new Uint8Array([
		0x1f, 0x10, 0x59, 0x15, 0xef, 0x81, 0x9f, 0x8a, 0x24, 0x64, 0xf7, 0x6f, 0x02, 0xf3, 0x89, 0xa2,
		0xa2, 0x99, 0xdc, 0x8a, 0x0a, 0x5e, 0xd7, 0x02, 0x86, 0x81, 0xa6, 0x41, 0x4e, 0x3b, 0x75, 0xef,
		0xb8, 0x0c, 0x06, 0xd8, 0xa6, 0x4c, 0xbd, 0x84, 0x3a, 0xfa, 0x27, 0x5e, 0x49, 0xb5, 0x7b, 0x32,
		0x0e, 0xa1, 0xc6, 0x5b, 0x77, 0x6d, 0xb4, 0xbb, 0x41, 0xdc, 0xe0, 0x7d, 0xd7, 0xf4, 0xaf, 0xb6,
		0x53, 0xe3, 0xe0, 0xb8, 0x14, 0xd6, 0x78, 0xc4, 0x81, 0xa8, 0x3e, 0x74, 0xe1, 0x8e, 0xc1, 0xf6,
		0xb2, 0x93, 0x34, 0x70, 0xc9, 0x8e, 0x7e, 0x5b, 0x12, 0xba, 0x59, 0x4a, 0x94, 0x12, 0xa5, 0x23,
		0x93, 0x16, 0x5c, 0xc2, 0xd5, 0x70, 0x72, 0x4b, 0x92, 0x80, 0xd2, 0x07, 0x95, 0xb0, 0xa4, 0xee,
		0xa2, 0x02, 0x5b, 0xbb, 0x02, 0xbe, 0xe2, 0x59, 0xb8, 0x42, 0xd1, 0xf8, 0xe3, 0x15, 0xdd, 0x94,
		0x85, 0x78, 0x55, 0xb3, 0x7d, 0xfd, 0x49, 0x8c, 0x64, 0x03, 0x5d, 0xe3, 0x94, 0x35, 0xa1, 0x72,
		0x35, 0xd4, 0x52, 0x33, 0xe4, 0x63, 0x7b, 0x7b, 0x6d, 0x3f, 0xdf, 0x29, 0x5c, 0xcf, 0xb8, 0x21,
		0x33, 0xef, 0x2d, 0x97, 0xd8, 0xb1, 0xed, 0xf1, 0x2e, 0x4a, 0xb4, 0xec, 0x12, 0x95, 0x01, 0x80,
		0xe8, 0x0f, 0x2f, 0x2e, 0x43, 0xac, 0xc2, 0x94, 0x2e, 0x34, 0xb1, 0x5b, 0xf7, 0x05, 0x15, 0xbe,
		0x21, 0x00, 0x4e, 0x2f, 0x5b, 0x4f, 0x2e, 0x27, 0x2c, 0xaf, 0xe8, 0x4c, 0xde, 0xf2, 0x94, 0x10,
		0x36, 0xa2, 0x3e, 0xe9, 0x9f, 0xb1, 0x41, 0xf6, 0xfb, 0x70, 0xd8, 0xc0, 0x9b, 0x46, 0x1b, 0x50,
		0x36, 0x32, 0xba, 0xfe, 0x36, 0xa9, 0xa6, 0x1c, 0xe7, 0xa1, 0x48, 0xe4, 0xd3, 0xe2, 0x94, 0x68,
		0xc1, 0xa4, 0x7b, 0x17, 0x4c, 0x2b, 0xef, 0xdf, 0x47, 0xb0, 0x0d, 0x2a, 0x27, 0x16, 0x99, 0xcb,
		0x72, 0x3f, 0xb0, 0x83, 0x3c, 0xa9, 0x4f, 0xae, 0x4d, 0x1b, 0x5c, 0x36, 0x33, 0xf4, 0xab, 0x12,
		0x77, 0xf1, 0x6f, 0xf4, 0xeb, 0xed, 0xed, 0xba, 0x2e, 0xae, 0x21, 0xf1, 0xb5, 0x45, 0xae, 0x74,
		0x38, 0x4d, 0x85, 0xd0, 0xcd, 0x55, 0x67, 0xe3, 0xd8, 0xe7, 0xcd, 0x89, 0xd0, 0x3d, 0xf9, 0x83,
		0x4f, 0xf5, 0x44, 0xb2, 0x1d, 0xd0, 0xb9, 0x9d, 0x9d, 0xc3, 0x5c, 0xfd, 0xfc, 0x9c, 0x11, 0x69,
		0x03, 0x31, 0x62, 0x25, 0xe3, 0x03, 0x19, 0x8f, 0x18, 0xbc, 0xba, 0x8b, 0x84, 0x80, 0xa5, 0x86,
		0xf4, 0x52, 0xbf, 0xa4, 0xd5, 0x7a, 0xe7, 0xd6, 0x76, 0x8d, 0xd7, 0x2c, 0xcb, 0x96, 0x84, 0x98,
		0x05, 0x29, 0x1b, 0xf9, 0xd0, 0x30, 0x52, 0x89, 0x5c, 0xc6, 0x36, 0x7c, 0xe9, 0x7f, 0xef, 0x83,
		0x36, 0x3e, 0x8e, 0x8e, 0x61, 0x23, 0xb1, 0x4a, 0x9b, 0xe0, 0x69, 0x8f, 0xf4, 0x2e, 0x62, 0x22
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xffbn;
	message = new Uint8Array([
		0xdd, 0xdb, 0x05, 0xcb, 0x9b, 0xf1, 0x0c, 0x14, 0xe7, 0xdd, 0x1e, 0x9f, 0x3b, 0x3d, 0x2b, 0x32,
		0x9a, 0x17, 0xf3, 0x16, 0x76, 0x28, 0x10, 0x11, 0xd2, 0x78, 0x37, 0x94, 0xa4, 0x32, 0xbb, 0x34,
		0x7d, 0xb3, 0x52, 0x5e, 0x6b, 0xe1, 0x1c, 0x47, 0x1f, 0xbe, 0xe1, 0x23, 0x4b, 0x3d, 0x9b, 0x97,
		0x4e, 0x54, 0x34, 0x70, 0x13, 0x52, 0x90, 0x95, 0x36, 0x73, 0xce, 0x3a, 0x69, 0xb1, 0xcb, 0x57,
		0x17, 0xde, 0xe8, 0x59, 0x47, 0xf0, 0x0e, 0x17, 0xc2, 0x9c, 0xef, 0x07, 0x78, 0x26, 0x8e, 0xb2,
		0x20, 0x77, 0x01, 0x65, 0x1f, 0x70, 0x75, 0x2a, 0xab, 0x7e, 0x74, 0xf6, 0x30, 0x6e, 0x63, 0x24,
		0xf2, 0x83, 0x4f, 0x22, 0xf5, 0xc6, 0xe9, 0x6b, 0x1a, 0x9e, 0xce, 0xb5, 0x8a, 0xa0, 0x0c, 0x6b,
		0x57, 0xa8, 0xe2, 0x5d, 0x61, 0x29, 0xc8, 0xb7, 0x77, 0xc1, 0xaf, 0x2f, 0xbf, 0x11, 0x8a, 0x83
	]);
	signature = new Uint8Array([
		0x11, 0x10, 0x7c, 0x6d, 0xa7, 0xa7, 0x6d, 0xba, 0x8c, 0xe8, 0xde, 0x3d, 0x5c, 0x90, 0xc6, 0xbc,
		0xca, 0xf3, 0x3f, 0xb9, 0xa7, 0xec, 0x4d, 0x40, 0xa9, 0x7f, 0xbc, 0xde, 0xba, 0xf6, 0xe6, 0x5c,
		0x09, 0x5b, 0x67, 0xdf, 0xa1, 0x71, 0xc5, 0x4a, 0x33, 0x64, 0xa6, 0xde, 0xd7, 0x18, 0xe1, 0xbe,
		0xbb, 0xb4, 0x97, 0xd1, 0x5f, 0x1d, 0xe1, 0x33, 0xb5, 0x82, 0x97, 0xe0, 0x8c, 0x1b, 0x20, 0x0f,
		0x84, 0x66, 0x57, 0x9c, 0xb8, 0xe9, 0xc3, 0xdb, 0xe5, 0xf7, 0x24, 0x28, 0x2e, 0x5b, 0xb2, 0x85,
		0x70, 0xa4, 0x1d, 0x8d, 0x35, 0xad, 0x6e, 0x13, 0x1e, 0xb2, 0xa1, 0xd3, 0x29, 0xd8, 0xb0, 0x8d,
		0x10, 0xfa, 0xf7, 0x6f, 0xdb, 0xe7, 0x42, 0x17, 0xa2, 0x76, 0x93, 0x6b, 0x15, 0x93, 0xb1, 0xd3,
		0xa1, 0x18, 0x91, 0xd1, 0x86, 0x41, 0xc0, 0xbe, 0xe0, 0xc3, 0x7e, 0x68, 0xbf, 0x75, 0xad, 0xd9,
		0xe7, 0xdc, 0xf3, 0xb9, 0xb4, 0x41, 0x3f, 0xa3, 0xec, 0x90, 0x67, 0x60, 0x38, 0x16, 0x1f, 0x68,
		0xfe, 0x3a, 0xf6, 0x4d, 0x69, 0xa1, 0x6f, 0xc2, 0x2c, 0x8e, 0xa7, 0xc0, 0x6f, 0x86, 0xbc, 0xbb,
		0xa6, 0x67, 0x9b, 0x6f, 0xa4, 0x58, 0x58, 0xc8, 0x7e, 0xc2, 0xda, 0x88, 0x96, 0x92, 0x0d, 0xfd,
		0x77, 0xfd, 0x16, 0xd9, 0x53, 0xe9, 0x84, 0x62, 0x42, 0x03, 0xcc, 0x21, 0x78, 0xd2, 0x20, 0xfa,
		0x47, 0xba, 0x9a, 0x6d, 0xdb, 0xe7, 0x59, 0xdb, 0x3d, 0xc4, 0x22, 0x4c, 0x7c, 0xcb, 0x09, 0xb2,
		0x9e, 0x20, 0x07, 0x22, 0xa7, 0x45, 0xd3, 0x32, 0x92, 0x09, 0x32, 0x3a, 0x08, 0x2a, 0x3f, 0x7a,
		0x2c, 0x62, 0x4b, 0x40, 0x53, 0xfa, 0x42, 0x18, 0x3d, 0xd2, 0x2b, 0x7f, 0x49, 0xc4, 0x56, 0x9f,
		0x8c, 0x3d, 0x49, 0x51, 0x57, 0x53, 0xb9, 0x93, 0xef, 0x81, 0x22, 0xc3, 0x69, 0x85, 0xe9, 0x6a,
		0x32, 0x89, 0xaf, 0x8d, 0x6e, 0x22, 0x93, 0x4b, 0xbc, 0xf7, 0x55, 0x1b, 0x15, 0x70, 0x92, 0x31,
		0x58, 0xd1, 0xb5, 0x54, 0xc1, 0x3f, 0x4f, 0xe0, 0x8f, 0xaf, 0xf4, 0x89, 0x8b, 0xe9, 0x2f, 0x6e,
		0x66, 0xff, 0x74, 0xa8, 0x0b, 0x13, 0x70, 0x3e, 0x0d, 0x26, 0x65, 0xdb, 0x71, 0x5c, 0x55, 0x9e,
		0x68, 0xbe, 0xad, 0x6f, 0x6b, 0x75, 0x93, 0xf0, 0x2e, 0xfb, 0xd6, 0x8c, 0x67, 0x62, 0x56, 0xae,
		0x86, 0x95, 0xa5, 0x1d, 0xab, 0x90, 0xe3, 0x29, 0x86, 0x69, 0x7f, 0x4e, 0xde, 0x07, 0x66, 0x28,
		0x17, 0x6c, 0xa6, 0xb6, 0x51, 0x91, 0x8d, 0x74, 0x9f, 0xd0, 0x1a, 0x16, 0xa8, 0x7a, 0xda, 0xad,
		0x4a, 0xae, 0x93, 0xb8, 0xc0, 0x5d, 0x92, 0x56, 0x5e, 0xc6, 0x82, 0x17, 0xaa, 0xab, 0x96, 0x76,
		0x23, 0xda, 0x3e, 0x5a, 0x50, 0x95, 0x64, 0x2c, 0xc1, 0x7d, 0x73, 0x0a, 0x6d, 0x95, 0x9c, 0xfa
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(true);

	e =
		0xffbn;
	message = new Uint8Array([
		0x0b, 0x03, 0xb1, 0x95, 0x0e, 0x69, 0x74, 0xaf, 0xd6, 0x0e, 0xd2, 0xef, 0x4d, 0x40, 0xb3, 0x27,
		0x4e, 0x82, 0x5b, 0x24, 0xc3, 0x27, 0xa4, 0xdf, 0x0a, 0x20, 0x8a, 0xf7, 0x9e, 0x13, 0xed, 0x5f,
		0xf3, 0xad, 0x93, 0x54, 0xa1, 0x38, 0x6d, 0x93, 0xc5, 0x70, 0x1b, 0xc8, 0xa4, 0x92, 0xb1, 0x49,
		0x92, 0xb7, 0xbc, 0x04, 0x13, 0x60, 0x80, 0xb7, 0x3f, 0x52, 0x84, 0x5f, 0x6b, 0xa4, 0x51, 0xf2,
		0x05, 0x16, 0x76, 0x50, 0xc0, 0xa4, 0xcf, 0x77, 0xf1, 0x5b, 0x07, 0xf7, 0x39, 0x6c, 0x5c, 0xa7,
		0x65, 0x7f, 0xa2, 0x95, 0x92, 0x49, 0x8b, 0x43, 0x95, 0x61, 0x25, 0x10, 0x9a, 0x4f, 0xa4, 0xf4,
		0x0a, 0xe6, 0x62, 0x70, 0xb3, 0xd5, 0x24, 0xc5, 0x23, 0x78, 0x9f, 0x65, 0x54, 0xf4, 0x3b, 0xa7,
		0x8f, 0x82, 0x16, 0xbe, 0x8a, 0x0b, 0x4c, 0xec, 0xd4, 0xf6, 0x76, 0xf3, 0x72, 0x3e, 0x70, 0xcd
	]);
	signature = new Uint8Array([
		0x5c, 0xfe, 0xf1, 0xfe, 0x1c, 0xb8, 0x3d, 0x28, 0x3a, 0x0f, 0x55, 0xff, 0x2a, 0x30, 0x05, 0xb5,
		0xc0, 0xb6, 0x62, 0x66, 0x96, 0xde, 0x1b, 0x2e, 0x40, 0x33, 0xb6, 0xfb, 0xd6, 0x9a, 0xb4, 0x99,
		0x0b, 0xd5, 0xd6, 0x96, 0xd8, 0x2b, 0x44, 0x18, 0xd7, 0xa9, 0x96, 0xff, 0x4c, 0x47, 0xdd, 0xa4,
		0x03, 0x1b, 0xea, 0x00, 0xbc, 0x24, 0xd7, 0xcf, 0x86, 0x62, 0x95, 0x66, 0x8b, 0x34, 0x06, 0x64,
		0xc0, 0x47, 0x9b, 0x90, 0x84, 0x00, 0x1e, 0xd2, 0x93, 0xcf, 0xa8, 0x45, 0xcc, 0x4c, 0x7f, 0x57,
		0xb0, 0x27, 0x9c, 0x47, 0xfb, 0xc9, 0xf8, 0x70, 0x2a, 0xe1, 0x1e, 0x1c, 0xf6, 0xda, 0xa9, 0xe2,
		0xc7, 0x3e, 0x80, 0xb4, 0xfd, 0x14, 0x98, 0x7b, 0x08, 0xae, 0x56, 0xd7, 0x7a, 0xb3, 0x0a, 0x1a,
		0x22, 0x3d, 0x92, 0x20, 0xb7, 0xe1, 0xa4, 0x3d, 0x3d, 0x2a, 0x5b, 0xd8, 0x38, 0x33, 0x16, 0x70,
		0x74, 0x75, 0x6f, 0x95, 0x13, 0xa2, 0xb7, 0x4c, 0x64, 0x58, 0xc5, 0xe7, 0x4c, 0x25, 0xca, 0x56,
		0x16, 0x5a, 0x10, 0xec, 0xca, 0xee, 0x54, 0x43, 0xe1, 0xe3, 0x70, 0xc4, 0x47, 0x14, 0xc3, 0xd9,
		0xa3, 0xbf, 0xe6, 0x53, 0xd8, 0x22, 0x2d, 0xd6, 0x33, 0xc3, 0x12, 0x8e, 0xce, 0xea, 0xd3, 0x8f,
		0x36, 0xf4, 0x14, 0x16, 0x57, 0xf5, 0xed, 0xbd, 0x46, 0x9a, 0x5f, 0xf0, 0x73, 0x38, 0x28, 0xe6,
		0xc4, 0xcd, 0x35, 0xd5, 0x0c, 0x89, 0x03, 0xff, 0x5d, 0x70, 0x13, 0x6a, 0x83, 0xe7, 0x18, 0x61,
		0x35, 0x06, 0x9d, 0x96, 0x2e, 0xba, 0xfc, 0x9d, 0x02, 0x80, 0x55, 0x3a, 0xc6, 0x2d, 0x22, 0x1e,
		0x11, 0x6f, 0x77, 0x73, 0x4e, 0x20, 0x91, 0x45, 0x36, 0xdc, 0x5e, 0x36, 0x7d, 0x8d, 0x31, 0x88,
		0xf3, 0xf4, 0xe4, 0x5d, 0x80, 0x97, 0x0c, 0x60, 0x64, 0x61, 0x32, 0x1a, 0x41, 0x36, 0xea, 0x03,
		0x65, 0x32, 0x4d, 0x98, 0x9a, 0x1b, 0xeb, 0x81, 0x60, 0x0a, 0xfe, 0x21, 0x9c, 0xd1, 0x84, 0x29,
		0xa0, 0x93, 0x1e, 0x15, 0x47, 0x5e, 0x6d, 0x35, 0xe0, 0x4b, 0x1d, 0xfa, 0x2a, 0xa6, 0x05, 0xfd,
		0x3d, 0xd9, 0x83, 0x45, 0xf5, 0x71, 0x09, 0x52, 0x8d, 0x45, 0xd6, 0x02, 0x39, 0xe5, 0x04, 0x42,
		0x88, 0x9f, 0xb8, 0xfb, 0xdc, 0x3c, 0x61, 0xc9, 0xc6, 0xc4, 0x0e, 0xa0, 0xe5, 0x31, 0xea, 0x1e,
		0x09, 0xa2, 0x02, 0x16, 0xea, 0x87, 0xd4, 0xc5, 0xd7, 0xf1, 0x66, 0x69, 0xb4, 0x6b, 0xe9, 0x66,
		0x53, 0x08, 0x53, 0x23, 0x28, 0xe6, 0x2d, 0x2c, 0x50, 0x02, 0x8c, 0x0e, 0xbb, 0xa5, 0x2b, 0x14,
		0xd6, 0x6a, 0x4b, 0xd0, 0x84, 0x9a, 0x54, 0x13, 0xa0, 0xa7, 0xfb, 0xd7, 0x70, 0x01, 0x5e, 0xc0,
		0xe3, 0x82, 0x15, 0x89, 0x8c, 0x16, 0x62, 0xa0, 0xd1, 0xa5, 0xed, 0xdf, 0xaf, 0xe6, 0x7c, 0x0e
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xbe93n;
	message = new Uint8Array([
		0xcf, 0xec, 0xd7, 0x02, 0xac, 0x5e, 0xa7, 0x60, 0x6b, 0xd7, 0x5b, 0x26, 0xb2, 0x74, 0x6b, 0x7b,
		0x5d, 0xb3, 0x30, 0xe9, 0x20, 0x85, 0xa4, 0x0e, 0x6e, 0xa5, 0x6a, 0x94, 0x9a, 0x27, 0x0e, 0x63,
		0x3d, 0x54, 0x8d, 0x14, 0xd7, 0xb5, 0x18, 0xa9, 0xb9, 0x6e, 0x15, 0x7c, 0x22, 0xce, 0x67, 0x76,
		0xa8, 0x23, 0xef, 0x81, 0xd9, 0xd3, 0x52, 0x40, 0x23, 0xa8, 0xfd, 0xfd, 0xf1, 0x6c, 0x67, 0xe3,
		0x17, 0xb6, 0x96, 0x6d, 0x70, 0x03, 0xe5, 0x1e, 0xc5, 0x08, 0x04, 0x73, 0xf1, 0x47, 0x40, 0x16,
		0x43, 0xe1, 0x05, 0x54, 0x24, 0xab, 0xa1, 0xd1, 0xfa, 0x83, 0x4a, 0x7a, 0x4c, 0xe5, 0x63, 0xbc,
		0x26, 0xb9, 0xfb, 0xf3, 0xbf, 0x6f, 0x97, 0x26, 0x59, 0x4e, 0x31, 0xf1, 0x69, 0x09, 0x80, 0xc2,
		0xf8, 0x94, 0x7a, 0x49, 0x49, 0x35, 0x18, 0x29, 0xbc, 0xde, 0x59, 0xf4, 0xf2, 0xba, 0x89, 0x56
	]);
	signature = new Uint8Array([
		0x1b, 0x94, 0xc9, 0x23, 0x25, 0x1a, 0x32, 0xc3, 0xcf, 0xe4, 0xdb, 0xfb, 0xc7, 0x8e, 0x57, 0x7a,
		0xa9, 0x95, 0x3d, 0x6f, 0x47, 0xe3, 0x8a, 0x8d, 0x3e, 0x84, 0x4a, 0x98, 0x5d, 0x60, 0xea, 0xbd,
		0x69, 0x69, 0x6f, 0x96, 0x8d, 0x5a, 0x9f, 0x47, 0x6b, 0xaf, 0x15, 0xb2, 0xd1, 0xb1, 0xfe, 0xbc,
		0x95, 0xa2, 0xdd, 0x13, 0x3a, 0x87, 0x0b, 0x14, 0xd6, 0x7a, 0x3c, 0xae, 0x49, 0xb3, 0xd4, 0x73,
		0xaf, 0xc3, 0xac, 0xe7, 0xf0, 0xb2, 0x88, 0x4d, 0xa8, 0x84, 0x94, 0xc4, 0x26, 0xb9, 0xad, 0xcd,
		0x1b, 0x40, 0xd5, 0xef, 0xc4, 0x09, 0x62, 0x27, 0x88, 0xfa, 0xec, 0x52, 0xa6, 0x82, 0x5a, 0x13,
		0x25, 0xe9, 0x22, 0xbd, 0xe9, 0xd1, 0xbe, 0x6d, 0xe3, 0x3e, 0x1a, 0xc0, 0x5a, 0xd9, 0xac, 0x5d,
		0x22, 0x29, 0x80, 0x69, 0x62, 0x26, 0xfb, 0xbe, 0x19, 0x15, 0x81, 0xb0, 0x30, 0xa8, 0x22, 0x19,
		0xc9, 0x51, 0xc2, 0x51, 0x14, 0xea, 0x44, 0x12, 0xb5, 0x3a, 0xa4, 0x11, 0xa1, 0x07, 0x92, 0x7c,
		0x03, 0x08, 0x4b, 0x98, 0x6e, 0xca, 0xcc, 0x7c, 0x2f, 0x36, 0xdf, 0x18, 0x17, 0x22, 0x80, 0x60,
		0x73, 0x7c, 0x58, 0xbf, 0xc3, 0x82, 0x3f, 0x7d, 0x16, 0x63, 0x09, 0x49, 0xb1, 0x86, 0xc1, 0x95,
		0xcc, 0x34, 0xf1, 0xbc, 0x82, 0x9d, 0xca, 0xfd, 0xc6, 0xc7, 0x35, 0xaf, 0xfc, 0x00, 0x84, 0x12,
		0xb9, 0x6e, 0x9f, 0x27, 0x94, 0x74, 0xe5, 0x15, 0xfb, 0xfc, 0x59, 0x88, 0x86, 0xfb, 0xf6, 0x22,
		0xe5, 0x36, 0x72, 0x35, 0xc4, 0x61, 0x7d, 0xac, 0xa7, 0x7f, 0x2c, 0xd1, 0xd5, 0x64, 0x4c, 0xe3,
		0x2c, 0xd2, 0xa7, 0x10, 0x45, 0x01, 0x39, 0x16, 0x85, 0xad, 0x7c, 0xd8, 0x2e, 0x0d, 0x21, 0xbf,
		0x08, 0x5f, 0x58, 0xdd, 0x3c, 0xb1, 0xd1, 0x10, 0x05, 0xf2, 0xad, 0xb0, 0xe9, 0xf9, 0x62, 0xb6,
		0x55, 0x26, 0xcb, 0x39, 0xfe, 0x1f, 0x34, 0xac, 0xc2, 0xd1, 0x93, 0x2b, 0xea, 0x55, 0xbd, 0xed,
		0x86, 0x90, 0x82, 0x6c, 0x8f, 0xe8, 0x17, 0x51, 0x1a, 0x85, 0x0e, 0x7a, 0xa8, 0xfe, 0xdb, 0x9b,
		0x1a, 0x83, 0xcb, 0x2b, 0x05, 0xb5, 0x8b, 0x30, 0x2c, 0x0b, 0x9f, 0xea, 0xdf, 0x26, 0x21, 0xc1,
		0x41, 0x2c, 0x78, 0x9d, 0x2c, 0xa5, 0xde, 0xc0, 0x4d, 0x02, 0x87, 0x97, 0x78, 0x18, 0x43, 0xc1,
		0x9c, 0x4b, 0x8e, 0x7e, 0xcf, 0xaf, 0x14, 0xdd, 0x46, 0xfe, 0x4c, 0x43, 0x75, 0xa9, 0x13, 0x8f,
		0xb0, 0x58, 0xe4, 0x7b, 0xcf, 0xdc, 0xf1, 0x8c, 0x56, 0x3a, 0x0d, 0x54, 0x17, 0x02, 0x83, 0xc8,
		0xbb, 0x2f, 0x0e, 0xd2, 0xb8, 0x01, 0xe2, 0x8a, 0xfe, 0xbe, 0xbc, 0xce, 0x9e, 0x1f, 0x9b, 0x70,
		0x7b, 0xd1, 0xfd, 0x67, 0xa5, 0x34, 0xdb, 0x9d, 0x9a, 0xc6, 0x10, 0x87, 0x41, 0x5d, 0x2b, 0x1d
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	n =
		0x9004e5334381fb90f60926f3281e51d363671c87bc10554aff5f3b4391d894a94866de27900bf627d468dcf19a826dc399c0580883c945688f3795522193b0887f5eb29bb7be2b6ab48abb2e86b8a3cc6dbd2aa3522c0fa6f6493679a25b1933de78282b00fb5e6dbc58246a26805eb61cbacf492ffee3a21b829e3b776dc814b0e1527565f713d8f761fd58b9ca1f20b79d798f627b77a1ed7d53dd17f429a738e3e4e86cc4da308c60e55b77f2d180e96f2da0ae282831d5ab523cbf2aac900f6c304366738710152efa1094232dba6d405381223f3c687dedd2d856caab657ad0a1d7a67f01fffe6903f173faf1476b8ca656d4d9af713b4f80860be5e79ac3bf1b507f46a19bb67a90b273a0f0d416c479c8d75c6c99943ce774928fddedc00c06d7acc68ea15828de379ef436ecceec8bb22ea984eb1af01dc3efbaefd031030abff09bc464235f407c8a9033796d87bb6373ba6eb6ee143a79703a8130b8e29bcad3970c69001d80b4dac9e30fc616ad9bcc215fc20109aa7788234099n;
	e =
		0xa996bn;
	message = new Uint8Array([
		0xcd, 0xe6, 0x3c, 0x4c, 0x12, 0x4d, 0xa9, 0x5b, 0x23, 0xa8, 0x32, 0x3a, 0x5d, 0xb0, 0x37, 0x14,
		0x55, 0x76, 0x15, 0x22, 0x6d, 0xa7, 0x58, 0x15, 0xa5, 0x0f, 0x2c, 0xb4, 0xb4, 0x5d, 0x15, 0xc6,
		0x58, 0x26, 0xe0, 0x32, 0xea, 0x2c, 0xda, 0x65, 0x35, 0xdf, 0x3f, 0xf4, 0x88, 0x24, 0xf5, 0x82,
		0x0a, 0x56, 0x7a, 0xe5, 0x4e, 0x8a, 0x1c, 0x84, 0x27, 0x18, 0x68, 0x03, 0xbe, 0x57, 0xe4, 0x23,
		0xe1, 0xa7, 0x01, 0xe3, 0x9e, 0xb5, 0x4b, 0xec, 0x11, 0xfa, 0xe3, 0x2b, 0x7a, 0x85, 0x2f, 0xc0,
		0x92, 0xfb, 0xd0, 0x17, 0x20, 0xdc, 0xd4, 0x54, 0xc7, 0x07, 0x2d, 0xf5, 0x22, 0x81, 0x62, 0xb2,
		0x13, 0x72, 0x85, 0xa8, 0x57, 0x70, 0x65, 0xb7, 0x5e, 0x00, 0x04, 0x29, 0x5a, 0x5a, 0x4c, 0x94,
		0x97, 0x6d, 0xfd, 0x01, 0x0a, 0x23, 0xea, 0x4d, 0x2c, 0xe6, 0x65, 0xd0, 0x09, 0x63, 0xf8, 0x3d
	]);
	signature = new Uint8Array([
		0x6e, 0xa3, 0x08, 0xd9, 0x5a, 0x96, 0x3e, 0x1f, 0xd1, 0x8e, 0xdb, 0xd6, 0x82, 0x94, 0x00, 0x07,
		0x1e, 0x0f, 0x14, 0x45, 0x71, 0x21, 0x9f, 0x69, 0x09, 0x02, 0x40, 0x64, 0xb2, 0x8f, 0x72, 0xa8,
		0xc0, 0xd6, 0x96, 0x9b, 0xdf, 0xb7, 0x05, 0xce, 0x06, 0xb3, 0x6c, 0x0a, 0x9d, 0x65, 0xa5, 0xc9,
		0x33, 0x1c, 0xc1, 0x46, 0xd5, 0xf2, 0xc2, 0xeb, 0x96, 0x22, 0x6c, 0x5a, 0x09, 0x95, 0x7a, 0x94,
		0x54, 0x61, 0xa7, 0x4a, 0xa2, 0x0e, 0x96, 0x63, 0x34, 0x74, 0x1f, 0x42, 0x44, 0x31, 0x1e, 0x2a,
		0xc7, 0x0f, 0x03, 0x29, 0xcc, 0x62, 0x28, 0x64, 0xcd, 0xf6, 0x14, 0x63, 0x1c, 0x1e, 0x2e, 0x54,
		0x55, 0x64, 0xa6, 0x82, 0xff, 0x11, 0xda, 0xe5, 0xf8, 0xdf, 0xc3, 0xfc, 0x14, 0x28, 0xa2, 0xf0,
		0x28, 0xab, 0x3f, 0x95, 0x7c, 0xf9, 0x70, 0xcd, 0x22, 0xe1, 0xf1, 0x6e, 0x8e, 0x42, 0xf5, 0xba,
		0x87, 0x9b, 0xc5, 0xc2, 0x6c, 0x37, 0xaa, 0xb6, 0xfe, 0x2b, 0x3f, 0x5b, 0x9f, 0x84, 0x2c, 0x15,
		0x85, 0x15, 0x61, 0x1c, 0x41, 0xe2, 0x5b, 0xdb, 0x2e, 0x20, 0x96, 0x2d, 0x79, 0x4e, 0xbe, 0x1d,
		0x62, 0x6a, 0x4d, 0x36, 0xc0, 0x7b, 0x63, 0x35, 0x4f, 0xf9, 0xc3, 0x33, 0xbb, 0xa4, 0x41, 0x29,
		0xfa, 0x32, 0x10, 0xd0, 0xa0, 0xe1, 0x04, 0x53, 0xef, 0xa1, 0x7e, 0x05, 0x3c, 0xa1, 0x25, 0x13,
		0xe0, 0x80, 0x3c, 0x20, 0x6a, 0x90, 0xed, 0xab, 0xe6, 0x04, 0xf6, 0x33, 0xa1, 0xd7, 0x22, 0x36,
		0x3a, 0x2d, 0xbf, 0xa9, 0xb6, 0xb8, 0x86, 0x2f, 0x5e, 0x2f, 0x40, 0xcf, 0x57, 0xf5, 0xc6, 0x68,
		0xaf, 0x65, 0xfb, 0x72, 0x92, 0xc5, 0x8c, 0x67, 0x50, 0xa6, 0x63, 0x01, 0x59, 0x25, 0x9c, 0x26,
		0xa8, 0xea, 0xd1, 0xe4, 0xac, 0x6d, 0xff, 0xfd, 0x96, 0x23, 0x49, 0x78, 0xf1, 0x5b, 0x9c, 0x9d,
		0x80, 0xfe, 0x21, 0xb6, 0xce, 0x9a, 0xa1, 0xa8, 0x5a, 0x7f, 0x84, 0xf1, 0x95, 0x40, 0x44, 0xbc,
		0x13, 0xb4, 0x2e, 0x18, 0x1a, 0x32, 0x3f, 0x2f, 0x9a, 0x4e, 0x1d, 0x72, 0x72, 0xc8, 0x73, 0x1d,
		0x14, 0x65, 0x1d, 0x53, 0x02, 0xec, 0xad, 0x25, 0xd7, 0xf1, 0x23, 0x1b, 0x3f, 0x68, 0x66, 0x90,
		0xe6, 0x9c, 0x38, 0x83, 0x61, 0x4d, 0x8b, 0x85, 0xb6, 0x56, 0x8b, 0x78, 0x8d, 0x87, 0x4e, 0xd7,
		0x37, 0xaa, 0xee, 0x11, 0xa1, 0x1d, 0x7f, 0x9a, 0x8c, 0x67, 0x47, 0x96, 0x62, 0xc7, 0x73, 0x08,
		0x31, 0x8f, 0xe8, 0xbd, 0x5c, 0xea, 0xf4, 0x47, 0xf9, 0x59, 0x23, 0x96, 0xec, 0x32, 0x61, 0xf2,
		0xb9, 0x1e, 0xe2, 0x5b, 0x54, 0xdf, 0xfc, 0x26, 0x9a, 0x9e, 0x7f, 0x96, 0x5d, 0xc0, 0x0d, 0x58,
		0x6d, 0xa7, 0x7d, 0x1a, 0x40, 0x46, 0x9e, 0x68, 0xb0, 0xef, 0x5d, 0x4f, 0x66, 0x0c, 0x93, 0x5f
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xa996bn;
	message = new Uint8Array([
		0xf6, 0x76, 0xf3, 0x72, 0x3e, 0x70, 0xcd, 0xcb, 0xc7, 0x60, 0x9c, 0xc1, 0xf2, 0xf3, 0xe4, 0x21,
		0x6f, 0xea, 0xf8, 0x3d, 0x52, 0xd6, 0xb2, 0xd7, 0x69, 0x1f, 0x67, 0x41, 0xcd, 0x4b, 0x1a, 0xc3,
		0xb8, 0x7d, 0xf0, 0x3d, 0x96, 0x3c, 0xe4, 0x0d, 0x5f, 0x76, 0xbc, 0x33, 0x23, 0xc5, 0x3c, 0xb3,
		0xe7, 0xf0, 0x99, 0x3b, 0xaf, 0xb5, 0x31, 0x06, 0xdc, 0xc6, 0x78, 0x00, 0xb8, 0x11, 0x36, 0x2b,
		0x50, 0x44, 0xf0, 0x41, 0x82, 0x91, 0xa3, 0x9b, 0x56, 0xaf, 0xb9, 0x51, 0x92, 0x21, 0x35, 0xa3,
		0x88, 0xba, 0x31, 0x98, 0x33, 0x61, 0x8a, 0xe4, 0x82, 0x12, 0xda, 0x0f, 0xf4, 0x25, 0xa6, 0xd4,
		0x65, 0xd3, 0xd9, 0xc8, 0x28, 0xf6, 0x71, 0x3c, 0x55, 0x10, 0x79, 0x63, 0x64, 0x8f, 0x37, 0xb8,
		0xfb, 0x4f, 0xa6, 0x9a, 0x05, 0x61, 0x27, 0x39, 0x04, 0x0b, 0x73, 0xb6, 0xa8, 0x0f, 0xd4, 0x86
	]);
	signature = new Uint8Array([
		0x6a, 0x2a, 0x7f, 0xf1, 0x4c, 0x40, 0x28, 0xa6, 0x74, 0x01, 0xae, 0x18, 0xa6, 0xe3, 0x45, 0x09,
		0x13, 0xaf, 0xd0, 0x48, 0xf3, 0x63, 0x60, 0x7b, 0xe8, 0x1e, 0xdf, 0x18, 0x77, 0x90, 0xa4, 0xaa,
		0xa5, 0x7e, 0xef, 0xf8, 0x02, 0x05, 0x0b, 0xcd, 0xd6, 0xc4, 0xbf, 0xb9, 0x21, 0xdf, 0x1a, 0x24,
		0xd6, 0x27, 0x63, 0xe1, 0xae, 0xe6, 0xf8, 0x87, 0x8b, 0xfb, 0xc7, 0x0c, 0x26, 0xeb, 0x9f, 0x27,
		0x0b, 0xc8, 0x98, 0x75, 0x3f, 0x55, 0x83, 0xd5, 0xc5, 0xb4, 0x0a, 0xc3, 0x2e, 0x7c, 0x4d, 0xe0,
		0xff, 0xb0, 0x73, 0xc0, 0x76, 0xd5, 0xe7, 0x50, 0xb2, 0xc0, 0xb0, 0x75, 0x4a, 0x74, 0x91, 0xbe,
		0xa4, 0x20, 0xa3, 0x29, 0xae, 0x68, 0xf5, 0xc5, 0x19, 0x0c, 0x74, 0xa7, 0x5b, 0x7d, 0xb6, 0x1c,
		0x84, 0xf2, 0xe0, 0x17, 0xde, 0xb4, 0xea, 0x5d, 0x94, 0x52, 0x67, 0x9a, 0x54, 0xb5, 0xb7, 0xdb,
		0x1f, 0xf6, 0x6c, 0x7d, 0x7a, 0x92, 0x9c, 0xc3, 0xd7, 0x83, 0x57, 0xca, 0x68, 0xe3, 0x9d, 0x75,
		0xf1, 0xe9, 0x2d, 0x32, 0xca, 0xd5, 0xbc, 0x11, 0x08, 0x0b, 0x05, 0x40, 0x44, 0xed, 0x5f, 0xc3,
		0x51, 0xaf, 0xa5, 0x3b, 0x29, 0x41, 0x65, 0x51, 0x0c, 0xca, 0x83, 0xdb, 0xd9, 0x18, 0x43, 0x29,
		0x7d, 0x92, 0x49, 0xcc, 0xfa, 0x69, 0x2b, 0x82, 0xd7, 0x53, 0x45, 0x82, 0x30, 0x86, 0xd9, 0x23,
		0x4f, 0x5e, 0x2e, 0x0d, 0xfc, 0xc6, 0xfa, 0x19, 0x48, 0x68, 0xc0, 0x40, 0x50, 0xe6, 0xe8, 0x04,
		0x25, 0xa7, 0x15, 0x29, 0xad, 0x67, 0x2c, 0x6e, 0x3b, 0x32, 0xf6, 0xfd, 0x60, 0x6c, 0xd8, 0x4e,
		0xad, 0x5d, 0xe2, 0x51, 0x2c, 0xd0, 0x98, 0x91, 0xca, 0xc6, 0x9d, 0xef, 0x77, 0xd0, 0x9c, 0xdd,
		0xd0, 0xe2, 0xa6, 0x38, 0x3d, 0x1b, 0x60, 0xae, 0x83, 0x1c, 0x05, 0xbe, 0x4e, 0xe5, 0x83, 0x6e,
		0x18, 0x10, 0xf6, 0x0a, 0xd1, 0x6b, 0xdc, 0x25, 0x3f, 0xe3, 0x9e, 0x1f, 0xe1, 0x02, 0x05, 0xab,
		0x6d, 0xbc, 0xcd, 0x29, 0x71, 0xd7, 0xc2, 0x80, 0x74, 0x11, 0x74, 0x23, 0x58, 0xd7, 0x16, 0x2d,
		0x95, 0xdc, 0xbc, 0xa5, 0xa8, 0x92, 0x42, 0x13, 0x11, 0x31, 0x97, 0x42, 0x42, 0x60, 0xac, 0x81,
		0xcd, 0x99, 0x9e, 0xf5, 0x05, 0xde, 0x9a, 0xc5, 0x31, 0xce, 0x80, 0x30, 0x26, 0xc9, 0xe9, 0x80,
		0x5a, 0xc8, 0x4e, 0x0d, 0x6c, 0x94, 0xf5, 0x1f, 0x79, 0xea, 0x75, 0x0a, 0xb2, 0x9b, 0x38, 0x40,
		0x59, 0x84, 0x3b, 0x22, 0xaa, 0xb8, 0x02, 0x44, 0x3d, 0xf0, 0x6b, 0xfa, 0x1a, 0xdc, 0xb6, 0xaa,
		0xfa, 0x5f, 0xa2, 0x67, 0xa7, 0xbc, 0x23, 0x0b, 0xb2, 0x6d, 0xe3, 0x79, 0x73, 0xd6, 0xd5, 0xcb,
		0xae, 0x0b, 0x7a, 0x25, 0x8a, 0xc9, 0x6c, 0xba, 0xab, 0x35, 0xde, 0x8d, 0x41, 0x8d, 0xd7, 0xf5
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xe22ca1n;
	message = new Uint8Array([
		0x51, 0xec, 0x15, 0x20, 0x1b, 0xc6, 0x1b, 0x8d, 0x95, 0x53, 0xc9, 0xcd, 0x3e, 0x64, 0xb3, 0xee,
		0x76, 0x28, 0x65, 0x24, 0x35, 0x08, 0xaf, 0xc9, 0xfc, 0xcf, 0x40, 0xa2, 0x0c, 0x0e, 0x76, 0x64,
		0xd7, 0xbf, 0x75, 0x76, 0xb4, 0x28, 0x77, 0xf9, 0xd6, 0x02, 0x63, 0x06, 0x7f, 0xdb, 0xa0, 0x36,
		0x71, 0xb9, 0x2b, 0x68, 0xa6, 0x00, 0xe7, 0xbe, 0x40, 0x95, 0x35, 0xe9, 0xc3, 0x44, 0xc5, 0xa7,
		0x82, 0x5f, 0xac, 0x89, 0x57, 0xa8, 0xb6, 0xfa, 0x97, 0x71, 0xfd, 0x7d, 0x45, 0x02, 0xba, 0x36,
		0x86, 0x3b, 0x5c, 0xac, 0x55, 0x7b, 0xd7, 0xcd, 0x78, 0xc0, 0x3f, 0x33, 0xb3, 0x0f, 0x95, 0xa5,
		0x3b, 0x16, 0xe1, 0xe1, 0x6d, 0x10, 0x80, 0x98, 0xc0, 0xe9, 0xc0, 0xbb, 0xf9, 0xa2, 0xaa, 0xf5,
		0x9e, 0xf8, 0x1f, 0x79, 0xac, 0x40, 0x27, 0xfd, 0x8c, 0x96, 0x85, 0x06, 0x44, 0x36, 0x8f, 0x67
	]);
	signature = new Uint8Array([
		0x71, 0x72, 0x19, 0x88, 0x73, 0x88, 0x50, 0xd9, 0x7a, 0x12, 0xfa, 0x89, 0x24, 0x5a, 0x87, 0xcf,
		0x3b, 0x03, 0x2d, 0xa8, 0x3b, 0x75, 0x61, 0xc6, 0x0e, 0x55, 0x47, 0x3c, 0x5d, 0xd8, 0xa8, 0xd3,
		0x08, 0x5d, 0xe9, 0x31, 0xaf, 0xce, 0xe9, 0xa4, 0x01, 0xf4, 0x6d, 0x22, 0x73, 0x70, 0xb3, 0x1d,
		0xce, 0xca, 0x02, 0x31, 0xd4, 0xb1, 0x3a, 0xaf, 0x29, 0x3f, 0x0f, 0x2b, 0xfd, 0x74, 0x2a, 0x99,
		0x6b, 0x65, 0x5b, 0x7e, 0x36, 0x31, 0x10, 0xc5, 0x7b, 0xeb, 0xe9, 0xb8, 0x6e, 0xe9, 0xf4, 0x60,
		0xaf, 0xc2, 0x98, 0x89, 0x40, 0xcf, 0xd5, 0x6c, 0x3e, 0x4b, 0x30, 0xc6, 0xdc, 0x99, 0x00, 0x89,
		0xe5, 0x25, 0xb7, 0x7f, 0xbb, 0x63, 0x3b, 0xb8, 0x9d, 0x38, 0xaa, 0xe1, 0x43, 0xeb, 0x6d, 0xc6,
		0xe3, 0x38, 0x8b, 0x01, 0xf7, 0xcc, 0xf5, 0x16, 0x37, 0xf0, 0x95, 0x5c, 0xc3, 0x80, 0x8f, 0xa8,
		0xa9, 0xa6, 0x12, 0x90, 0xa8, 0x2c, 0x5f, 0x16, 0x3c, 0x4b, 0x10, 0xfb, 0xd1, 0xab, 0xef, 0x65,
		0xf8, 0x5e, 0x8f, 0xe8, 0x18, 0x4c, 0xa9, 0xb0, 0xbe, 0xe0, 0xce, 0x17, 0x3a, 0x6a, 0xf1, 0x98,
		0x65, 0xca, 0x32, 0xa2, 0xa9, 0xa0, 0xd7, 0xce, 0xdc, 0xd4, 0x98, 0x9b, 0x32, 0xc5, 0x47, 0x2e,
		0x57, 0xd0, 0x25, 0xec, 0x51, 0x06, 0xbd, 0xa3, 0x7f, 0xbd, 0x2d, 0x7b, 0x69, 0xc0, 0x52, 0x8e,
		0xbd, 0x81, 0x20, 0xbc, 0x9d, 0x3d, 0xfc, 0x08, 0x01, 0x8c, 0xb0, 0x10, 0x7c, 0xab, 0x8b, 0xb7,
		0x0a, 0x27, 0x7e, 0x58, 0xc9, 0xcc, 0xc7, 0xa5, 0xf6, 0xc9, 0x2f, 0xe7, 0x91, 0xd6, 0x83, 0x84,
		0xf3, 0xfc, 0x5e, 0xa3, 0x15, 0xe3, 0x7c, 0x02, 0xfa, 0x83, 0xc0, 0x19, 0xb5, 0x90, 0x60, 0xbf,
		0x0f, 0xb2, 0xd0, 0x33, 0xb8, 0xf5, 0xd3, 0xa7, 0xe2, 0x54, 0x9f, 0x5a, 0xea, 0x22, 0xd8, 0xcb,
		0x32, 0x3b, 0xcd, 0x4f, 0x0c, 0x3d, 0x9a, 0x9d, 0x5c, 0x1e, 0xa2, 0x56, 0x24, 0x1a, 0x22, 0xc3,
		0x31, 0x13, 0x58, 0xfd, 0xf0, 0x4f, 0x23, 0xc1, 0x31, 0x33, 0x35, 0x15, 0x9e, 0xd1, 0x56, 0xbb,
		0xcc, 0xe4, 0x67, 0x1b, 0xde, 0x5e, 0x78, 0xe1, 0xe6, 0xff, 0x11, 0x33, 0x9b, 0xc6, 0x4d, 0x69,
		0x9e, 0xf3, 0x68, 0x26, 0x94, 0x00, 0x64, 0xdb, 0x75, 0x80, 0xdf, 0x64, 0x44, 0x87, 0x64, 0xe8,
		0x4d, 0xea, 0x82, 0x8d, 0x07, 0x57, 0xd5, 0x33, 0xd6, 0x26, 0x17, 0xf5, 0xdb, 0x65, 0x88, 0x10,
		0xa0, 0x92, 0xfc, 0x2e, 0xd3, 0x5b, 0x9e, 0x08, 0xd4, 0x5f, 0x85, 0xe6, 0x72, 0x0f, 0x58, 0xf2,
		0x90, 0x44, 0x2e, 0xcd, 0x44, 0xeb, 0xd0, 0xae, 0xf1, 0xdb, 0x6b, 0xd1, 0xc7, 0x6f, 0xd8, 0x1e,
		0x67, 0x4b, 0x1f, 0x92, 0x26, 0xab, 0x14, 0x3b, 0x76, 0x56, 0x18, 0xfb, 0x24, 0x3b, 0xdf, 0xd4
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xa996bn;
	message = new Uint8Array([
		0x2f, 0x7a, 0xb1, 0x38, 0xcf, 0x77, 0x67, 0x50, 0x16, 0x2e, 0xdc, 0x63, 0xc3, 0xb5, 0xdb, 0xe3,
		0x11, 0xab, 0x9f, 0xee, 0x2e, 0xd4, 0xe5, 0x1a, 0xee, 0x03, 0x45, 0x72, 0xc1, 0x3d, 0xc1, 0xbc,
		0xe3, 0x1b, 0x9f, 0xfe, 0xd2, 0x70, 0x74, 0x40, 0x05, 0x2c, 0x82, 0x92, 0xdb, 0x80, 0x43, 0x51,
		0xd2, 0x43, 0x46, 0xa7, 0xf9, 0x95, 0x3a, 0x51, 0xa8, 0xc2, 0x49, 0xa5, 0x6e, 0x69, 0xa7, 0xd3,
		0x4b, 0xdd, 0x6a, 0x6b, 0x1f, 0xcb, 0x9c, 0x1f, 0x63, 0x1d, 0x8e, 0xcb, 0x17, 0x1f, 0x70, 0xb2,
		0xfb, 0xe0, 0x1f, 0x0a, 0x02, 0xdc, 0x3e, 0xbc, 0x04, 0xd7, 0x88, 0x65, 0xb3, 0x0c, 0x64, 0xa0,
		0xd0, 0x87, 0xba, 0x87, 0x9f, 0xd0, 0x06, 0x77, 0x98, 0xc9, 0xab, 0x14, 0x5f, 0xd9, 0x89, 0x8d,
		0xf6, 0x4a, 0xd1, 0x22, 0x32, 0xf0, 0x18, 0xe3, 0x6b, 0x0c, 0xab, 0xba, 0x78, 0x6f, 0x23, 0xab
	]);
	signature = new Uint8Array([
		0x76, 0x5c, 0x62, 0xcd, 0x7e, 0x50, 0xbb, 0xbc, 0x4d, 0x77, 0x31, 0xe5, 0x3f, 0xb4, 0x68, 0xdf,
		0x25, 0x6b, 0x53, 0xbf, 0x41, 0xa4, 0x9c, 0x89, 0x50, 0x33, 0x9f, 0x25, 0xa4, 0xa8, 0xce, 0x8a,
		0x6b, 0x31, 0x67, 0x2e, 0x1e, 0xe7, 0x2d, 0xa8, 0x41, 0x95, 0xfc, 0x3c, 0x67, 0x9c, 0xe1, 0x07,
		0xdf, 0xc7, 0x6d, 0xbe, 0x85, 0x8e, 0xc2, 0x67, 0x1d, 0x7a, 0x54, 0xf2, 0x3d, 0x2e, 0x57, 0xae,
		0xca, 0x98, 0x4c, 0x49, 0x73, 0xf7, 0x93, 0x58, 0xdd, 0x44, 0x5a, 0xc0, 0x57, 0x56, 0x24, 0xb6,
		0x25, 0x2b, 0xf4, 0x8e, 0xd7, 0x4f, 0x70, 0x81, 0xcb, 0x29, 0xe2, 0xda, 0x05, 0xac, 0xa4, 0x67,
		0x49, 0xd4, 0x97, 0x71, 0x73, 0xbe, 0x27, 0x33, 0x1c, 0xef, 0x84, 0x7d, 0xc7, 0xec, 0x77, 0x48,
		0xea, 0xa0, 0xa9, 0x03, 0x64, 0x3f, 0x45, 0xf6, 0x9a, 0x61, 0x60, 0x21, 0x12, 0xc4, 0x12, 0xa4,
		0x6c, 0x25, 0x41, 0xdb, 0xce, 0x86, 0x5c, 0xb3, 0x0e, 0x87, 0xa4, 0x00, 0x2d, 0xe4, 0x4a, 0xa9,
		0xce, 0xf0, 0xb0, 0x6b, 0x9a, 0x12, 0x20, 0xdd, 0xcf, 0x3c, 0xbe, 0xc4, 0x6f, 0xab, 0xb0, 0x21,
		0x69, 0x20, 0xd7, 0x87, 0xc0, 0xeb, 0xae, 0xb6, 0x82, 0x3f, 0x11, 0x18, 0x0d, 0xe5, 0x8e, 0x6c,
		0xbb, 0x4b, 0x43, 0x23, 0x91, 0xaf, 0x39, 0x4b, 0x59, 0x36, 0xe6, 0x13, 0x25, 0x30, 0xdd, 0xa9,
		0xf1, 0x3a, 0x5d, 0x89, 0x14, 0xb2, 0xf4, 0xc0, 0x97, 0xb0, 0x10, 0x46, 0xa6, 0x03, 0x11, 0x37,
		0x1c, 0x67, 0x8e, 0x6a, 0x04, 0xb0, 0xfc, 0x2e, 0xb0, 0x32, 0x27, 0x68, 0x6f, 0x67, 0x50, 0x3d,
		0xcd, 0xed, 0x15, 0x87, 0x3d, 0x57, 0xe9, 0xe8, 0x00, 0x8d, 0x07, 0xfb, 0xf4, 0xba, 0xb4, 0x27,
		0x3f, 0x61, 0xbd, 0xfd, 0x93, 0x18, 0x1e, 0x3b, 0x0c, 0x37, 0xeb, 0xe1, 0x46, 0x22, 0x6b, 0xa1,
		0x73, 0x0a, 0x73, 0x1a, 0x01, 0xed, 0xa1, 0x93, 0xec, 0xa6, 0xae, 0x77, 0xc9, 0x08, 0x5d, 0x74,
		0x19, 0x5a, 0x3e, 0x8b, 0x80, 0x36, 0xdc, 0xce, 0x07, 0x25, 0x0d, 0x99, 0xd6, 0x0a, 0x1c, 0x6a,
		0x6f, 0x3c, 0x02, 0xab, 0xcc, 0x90, 0x2e, 0x26, 0xf3, 0x7b, 0xdc, 0x97, 0x9f, 0x82, 0x31, 0x21,
		0x31, 0xd0, 0xd0, 0x02, 0x64, 0xf7, 0x98, 0xad, 0x09, 0xe7, 0xdc, 0xeb, 0x29, 0xe0, 0x99, 0x4d,
		0x52, 0x7e, 0x15, 0x44, 0x2b, 0x87, 0x76, 0x56, 0x62, 0x14, 0x27, 0x75, 0x7f, 0x50, 0x77, 0x99,
		0x45, 0x35, 0x59, 0x03, 0x78, 0x04, 0xad, 0x14, 0x7c, 0xce, 0xa6, 0xfc, 0xeb, 0x52, 0x2c, 0x6d,
		0xdb, 0xe8, 0xd9, 0x0b, 0x0d, 0x45, 0xc8, 0x0c, 0xb5, 0xe1, 0x55, 0x06, 0x8d, 0xaf, 0x70, 0x43,
		0xc6, 0xb3, 0x7e, 0x7e, 0x17, 0xc4, 0x9a, 0x22, 0xf7, 0xea, 0x04, 0x21, 0xc8, 0x06, 0x2a, 0x81
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0xa996bn;
	message = new Uint8Array([
		0xef, 0xf9, 0x3e, 0xe5, 0x7b, 0x47, 0xac, 0xcf, 0x61, 0xe8, 0x0d, 0x26, 0x31, 0x3a, 0x10, 0x6a,
		0xbb, 0xdb, 0xb1, 0x39, 0x75, 0x77, 0xbc, 0xc2, 0x21, 0xde, 0x8c, 0x7d, 0xa9, 0x5a, 0x19, 0x1a,
		0x4e, 0x3f, 0x32, 0xb7, 0x01, 0xc3, 0x06, 0x55, 0x11, 0x10, 0xe9, 0x8d, 0x07, 0x98, 0x55, 0x7f,
		0xcf, 0xa9, 0x2f, 0x0c, 0x18, 0x41, 0x4c, 0x45, 0xfc, 0x23, 0x34, 0x22, 0xe4, 0x2a, 0x26, 0x78,
		0xa6, 0xde, 0x5c, 0x25, 0xf1, 0x45, 0x8f, 0x8d, 0xeb, 0xfc, 0xbe, 0x4b, 0x18, 0x85, 0x2c, 0x20,
		0x7e, 0xe3, 0xa8, 0x2f, 0x07, 0x64, 0x10, 0x6d, 0x26, 0xbf, 0x18, 0x53, 0xbd, 0x5e, 0x48, 0xd6,
		0x3f, 0xfd, 0x44, 0x98, 0x12, 0x74, 0x50, 0x60, 0x37, 0xd1, 0x13, 0xc8, 0x2c, 0xaa, 0x9b, 0x35,
		0x11, 0xb2, 0xa2, 0x0c, 0x0b, 0x89, 0x10, 0x23, 0xe6, 0xd9, 0xc1, 0x76, 0xfe, 0x9e, 0x87, 0x1c
	]);
	signature = new Uint8Array([
		0x78, 0xf7, 0xca, 0x72, 0x5c, 0xe3, 0x80, 0x71, 0x1a, 0xfc, 0xcd, 0x67, 0xbe, 0x01, 0x56, 0xc7,
		0xe5, 0xaa, 0x8b, 0x8f, 0x98, 0x1c, 0x80, 0x2e, 0xf0, 0x45, 0x60, 0x00, 0xb7, 0x49, 0xc0, 0xe1,
		0x0e, 0x8a, 0x87, 0xa9, 0x9b, 0x0a, 0xba, 0xd8, 0x04, 0x25, 0xb5, 0xa1, 0x42, 0xbf, 0xed, 0x87,
		0xbd, 0x86, 0x72, 0x70, 0x18, 0x08, 0x43, 0x5e, 0x8f, 0x06, 0xe2, 0x8b, 0x35, 0x47, 0xa9, 0x43,
		0xfa, 0xfe, 0x99, 0xd1, 0x3f, 0xd5, 0x43, 0xd5, 0x68, 0x76, 0xed, 0x08, 0x57, 0xf8, 0x5b, 0xa1,
		0xc9, 0x39, 0xfd, 0x98, 0xe9, 0x0f, 0x4b, 0x8a, 0xd8, 0x64, 0xd4, 0xaa, 0x47, 0xfa, 0x4c, 0x50,
		0x9f, 0x73, 0xcc, 0xec, 0x5f, 0x74, 0x61, 0xe0, 0x49, 0xac, 0x06, 0xee, 0x8d, 0x52, 0xcb, 0x64,
		0xb2, 0xb1, 0xfa, 0x94, 0x18, 0x01, 0x64, 0x8f, 0x2d, 0xdd, 0x5a, 0x37, 0x12, 0x02, 0xee, 0x74,
		0xb5, 0xb0, 0xf9, 0x53, 0x13, 0xee, 0xf8, 0x42, 0x70, 0x1d, 0xdd, 0xcf, 0x83, 0xc2, 0xa6, 0x11,
		0x46, 0x75, 0xca, 0x1e, 0xec, 0xdf, 0x56, 0x4a, 0x6e, 0x5a, 0x3c, 0x44, 0xc3, 0x4c, 0xfb, 0xb3,
		0x4d, 0x16, 0x83, 0x85, 0x92, 0x59, 0xd4, 0x2e, 0x94, 0xc1, 0x33, 0x54, 0x3f, 0xc8, 0x4a, 0xa4,
		0xa8, 0xa3, 0xb0, 0xb9, 0x8a, 0xe3, 0x55, 0x31, 0x4b, 0xb7, 0x74, 0xd7, 0xba, 0x6c, 0xc5, 0xbd,
		0x24, 0xfa, 0xae, 0xa1, 0x41, 0x27, 0x6e, 0x83, 0x31, 0xa6, 0x8f, 0x0b, 0x4a, 0x6a, 0x5e, 0x5c,
		0xcb, 0x50, 0xd7, 0x80, 0x28, 0xbd, 0x9d, 0xcf, 0xee, 0xe3, 0x4d, 0xc7, 0x13, 0x4f, 0x7e, 0xe2,
		0xf9, 0x4f, 0x3b, 0xe4, 0x43, 0xc0, 0xdc, 0x61, 0x56, 0xbd, 0xf5, 0x22, 0x5c, 0xb4, 0x89, 0xe7,
		0xe7, 0x0a, 0xcc, 0x37, 0xf3, 0x5e, 0x09, 0x66, 0x86, 0x49, 0xb5, 0x94, 0x2a, 0x68, 0x3d, 0xab,
		0x9e, 0x62, 0x15, 0xff, 0x07, 0x5c, 0xcd, 0x6c, 0x3f, 0x0b, 0xe3, 0xa4, 0x3a, 0xca, 0x52, 0x58,
		0x43, 0x47, 0x7a, 0x20, 0x28, 0x9b, 0x03, 0xe5, 0xf4, 0xf1, 0x7e, 0x12, 0xaf, 0x80, 0x15, 0x81,
		0x91, 0xef, 0xf3, 0xe1, 0xb7, 0xf4, 0xbf, 0xab, 0xcd, 0x8d, 0x68, 0x1d, 0xb7, 0x05, 0x01, 0x53,
		0xa9, 0xbe, 0xb7, 0x39, 0xff, 0xb4, 0x8c, 0xd9, 0x77, 0xfa, 0xc9, 0xd4, 0xed, 0x74, 0xb0, 0xc8,
		0x5b, 0xc5, 0xb4, 0x46, 0xb3, 0xb7, 0xc5, 0x82, 0x4f, 0x84, 0xe5, 0x8a, 0x8e, 0x41, 0xcd, 0xe5,
		0x9e, 0x0e, 0xd3, 0x64, 0x26, 0x07, 0xa8, 0x97, 0xe6, 0x00, 0x74, 0x2f, 0x37, 0x27, 0xde, 0xab,
		0x18, 0xf6, 0xd0, 0x51, 0xc0, 0xe4, 0xc0, 0x92, 0xb6, 0x66, 0x7b, 0x24, 0x7d, 0xcc, 0x78, 0xe1,
		0xa0, 0x0b, 0xd1, 0x2f, 0x8d, 0x9e, 0x47, 0xfb, 0xba, 0xa9, 0xed, 0xf6, 0x91, 0x1e, 0x7d, 0x94
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a996bn;
	message = new Uint8Array([
		0x6f, 0x8c, 0x5a, 0xb0, 0xde, 0x74, 0x3f, 0x69, 0xbf, 0xeb, 0xc9, 0x3d, 0x28, 0x42, 0x53, 0x30,
		0xdf, 0xb2, 0x84, 0x5b, 0x64, 0x4e, 0x73, 0x87, 0x31, 0x35, 0x0f, 0xfa, 0x40, 0x0c, 0xbf, 0x91,
		0xce, 0xac, 0x45, 0x0f, 0x5f, 0x17, 0xe8, 0xb5, 0x02, 0xb1, 0xd2, 0x13, 0xd6, 0xad, 0xb7, 0x1d,
		0xcd, 0xc5, 0xb7, 0x81, 0xb0, 0x2e, 0x86, 0x38, 0x63, 0xcb, 0xca, 0x5b, 0x6b, 0xa1, 0xc4, 0x39,
		0xad, 0x8b, 0x33, 0xa6, 0x78, 0x2e, 0x75, 0x96, 0xc6, 0x30, 0xf0, 0xea, 0xbf, 0xa5, 0xb0, 0x89,
		0x7f, 0xca, 0x51, 0xb3, 0x19, 0xf6, 0x20, 0x92, 0xdc, 0xcd, 0x7d, 0x12, 0xd5, 0xb7, 0x84, 0xf3,
		0x94, 0x91, 0xec, 0x1d, 0x33, 0xa2, 0x2e, 0x33, 0x95, 0xd0, 0xea, 0x6a, 0xec, 0x13, 0x87, 0x9c,
		0x7e, 0x2b, 0x1b, 0x98, 0xa8, 0x8e, 0x8a, 0xbd, 0x23, 0xa5, 0xf1, 0xc7, 0x86, 0x37, 0x45, 0xe8
	]);
	signature = new Uint8Array([
		0x75, 0xca, 0x1d, 0x0f, 0x75, 0x6c, 0xb3, 0x22, 0xef, 0x45, 0x8d, 0x04, 0x21, 0xaf, 0x9a, 0xa6,
		0xd0, 0x42, 0x5c, 0x52, 0x86, 0x43, 0x22, 0x12, 0x9c, 0x63, 0xae, 0x30, 0xe4, 0x42, 0xe0, 0x33,
		0x42, 0x36, 0x92, 0x83, 0xca, 0x78, 0xef, 0x95, 0xa2, 0x9a, 0x2f, 0x58, 0x61, 0x58, 0x47, 0xbc,
		0x9a, 0x0f, 0x73, 0xd6, 0xec, 0x82, 0x13, 0xd6, 0x86, 0x3c, 0x30, 0xb8, 0x4d, 0x56, 0xea, 0x31,
		0x68, 0x4e, 0x6a, 0xd2, 0x7b, 0x09, 0xa9, 0x6b, 0xd8, 0xbb, 0x39, 0xb5, 0xae, 0xf2, 0xb2, 0x5d,
		0x40, 0xd3, 0xa7, 0xe1, 0xd4, 0x7b, 0x3b, 0xfd, 0x6e, 0xdd, 0x51, 0x70, 0xa8, 0x4e, 0x66, 0x9b,
		0x7d, 0x5f, 0x7e, 0x81, 0x81, 0x02, 0x80, 0xe4, 0x10, 0x89, 0xff, 0x7e, 0x4b, 0xce, 0x71, 0x8b,
		0x79, 0xd1, 0x16, 0xc9, 0xce, 0xd7, 0xdc, 0x1e, 0x7e, 0xd6, 0x25, 0x6a, 0x4a, 0xe4, 0x80, 0xe9,
		0xef, 0x3e, 0x3a, 0xf9, 0x5d, 0xe3, 0xab, 0x5d, 0xbe, 0xcc, 0xb5, 0xa3, 0x6e, 0x60, 0x84, 0x0b,
		0x64, 0x6a, 0xd4, 0x18, 0xed, 0x71, 0xc5, 0x48, 0xfd, 0x68, 0x43, 0x9e, 0x80, 0x98, 0xe6, 0x3e,
		0x55, 0xb3, 0x59, 0x3a, 0x45, 0x3c, 0xf8, 0x7e, 0x9b, 0x8d, 0x7c, 0xea, 0xea, 0x8c, 0xd8, 0x14,
		0x51, 0x73, 0xa6, 0xb3, 0x6b, 0xf4, 0xc6, 0xd8, 0xb7, 0xe7, 0x23, 0x1d, 0x33, 0x91, 0x44, 0x02,
		0x27, 0xca, 0x83, 0x88, 0xd5, 0x73, 0xb3, 0x4e, 0x48, 0x38, 0xcd, 0x7e, 0x0a, 0x44, 0x02, 0xc4,
		0x5b, 0xf5, 0x8c, 0x16, 0x12, 0x0b, 0x60, 0x93, 0x68, 0x63, 0x09, 0xc0, 0xcf, 0xab, 0xcf, 0x7e,
		0x2f, 0x15, 0xde, 0x23, 0x02, 0x89, 0xf5, 0x9f, 0x5f, 0x9c, 0xf1, 0x28, 0x41, 0xc7, 0x58, 0x15,
		0xb2, 0xda, 0x9c, 0x7d, 0x4f, 0x76, 0x99, 0x81, 0x34, 0xd8, 0xdf, 0x28, 0x2e, 0x2a, 0x42, 0xcc,
		0xeb, 0x28, 0xd4, 0xf2, 0x97, 0x40, 0x43, 0x44, 0x22, 0xb1, 0xa8, 0xe7, 0xff, 0xc1, 0xef, 0x42,
		0x38, 0x3c, 0x4a, 0x31, 0x07, 0x34, 0x21, 0xb0, 0x34, 0xf7, 0x09, 0xf6, 0x19, 0x23, 0x08, 0x36,
		0x7d, 0x4f, 0x72, 0x83, 0xd0, 0x68, 0xd4, 0xf1, 0x28, 0xfa, 0x65, 0x74, 0xa2, 0xa3, 0x05, 0xec,
		0x70, 0x33, 0x36, 0x89, 0x23, 0x91, 0x8a, 0xce, 0x17, 0x76, 0xcb, 0xa3, 0x1b, 0xde, 0x0b, 0xca,
		0xa8, 0x33, 0xb5, 0xa9, 0xbc, 0xad, 0xa3, 0x59, 0xb2, 0x61, 0x57, 0x48, 0x7f, 0xbe, 0x01, 0xbd,
		0x94, 0x16, 0x9d, 0xe9, 0x1a, 0x1c, 0x45, 0xd9, 0x28, 0xef, 0x69, 0xde, 0x1f, 0x91, 0xb2, 0x31,
		0xb0, 0xb4, 0x3e, 0x8d, 0x82, 0x7d, 0x4f, 0x08, 0xba, 0x15, 0xcc, 0xa4, 0x60, 0x52, 0x5a, 0x03,
		0xc4, 0xe3, 0x81, 0xa4, 0x4c, 0x1f, 0xac, 0x35, 0x15, 0xbb, 0x3d, 0x61, 0xa8, 0xd5, 0x20, 0xc1
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA1, SHA1, saltLength, message, signature)
	).toBe(true);

	n =
		0xa5ca328ec852ed50cd50ff2e2aa25a99905b8d8dcc6aa2f2ae651da27e21e60dcec641be2f850f603dd15c763b1f7868dfe49392cbf0ed1410b151c501a627994efcae1a332ccf0d37b966a99f4d6b72659cd9044a72b97ac3e00e1b752bca194066c60dbb870e8205b0078551a41bc7a36424dcebeb26e55618f9b27c630a7c0f5bd23f5175621867e100f63d8c07d9392c5638576b66bb4bc89682c66ecef97f378595ecf10406fcb75450bdd7ff558d9eb2e76ad4fb7c92fe5a946cc95bd14f81f7fb7e6ba15fcd5c73b5ff41588a5c8acf1ed1dcae4dde453411ec26fe8faa3640dff3e153ba39c766c9f99c05a023bf45a19b30889d710c3fb528fbc147fea1699bc38d3e41d11bb1faab7d9e850f0c2b0893b5fe3a2039e6d8d90f280faed4d7fd34dd2a886b7a0bf8889bd75976d4ce412b7301e88eaa8e1e9bac6d0a351e7c8391b744035f2dc1b8cbde6f99484770b81828d6e1fab40a7e0d69ed798de7c2f80ac750c8243af4b2d4986223d9a33a34dd2d6c36b624545f6411d3a7n;
	e =
		0xa07n;
	message = new Uint8Array([
		0xed, 0x55, 0xf2, 0xcd, 0x9d, 0xb6, 0xbb, 0xe8, 0x1d, 0xfc, 0xd8, 0x09, 0x97, 0x3b, 0x5c, 0x02,
		0x62, 0xf8, 0x04, 0xa9, 0xcc, 0xe0, 0x1d, 0x2d, 0x17, 0xba, 0xa1, 0xaa, 0xc1, 0x9a, 0xa4, 0xfa,
		0x09, 0x57, 0xee, 0xcf, 0xae, 0x40, 0xea, 0xfe, 0xfa, 0x0b, 0xbf, 0x1e, 0xff, 0x0e, 0xbc, 0x52,
		0x21, 0xb2, 0xf9, 0x63, 0xd4, 0x24, 0x3b, 0x12, 0xa7, 0x4d, 0x19, 0xac, 0x82, 0x05, 0x5d, 0xde,
		0x2b, 0x83, 0xad, 0xcb, 0x0f, 0x18, 0x6b, 0x5c, 0x40, 0x1e, 0xd9, 0xd7, 0xba, 0x2b, 0x81, 0xb4,
		0xea, 0x8a, 0xd4, 0xac, 0x71, 0xeb, 0x11, 0x12, 0x25, 0x59, 0x68, 0x66, 0x58, 0x6d, 0x60, 0x28,
		0x5e, 0xc1, 0x76, 0xea, 0x49, 0xa8, 0x06, 0xa9, 0xf7, 0x1c, 0x6f, 0x5d, 0x4f, 0xf8, 0x73, 0xcf,
		0xc7, 0x68, 0xdc, 0xab, 0x29, 0x9d, 0x65, 0xd6, 0x98, 0xc5, 0xd7, 0x01, 0xce, 0x3a, 0x73, 0x7f
	]);
	signature = new Uint8Array([
		0x1b, 0xa9, 0x0d, 0xc1, 0x0f, 0xf5, 0x82, 0x5c, 0xd6, 0x04, 0x2d, 0xbf, 0xbf, 0xd6, 0xbc, 0x48,
		0xed, 0x77, 0xe1, 0xa7, 0xe2, 0xe6, 0xef, 0x0a, 0x00, 0x24, 0x84, 0xe2, 0x1a, 0x38, 0xae, 0x12,
		0x31, 0x11, 0xdc, 0xa0, 0xb9, 0xe3, 0x4f, 0x6d, 0x8f, 0xd5, 0x47, 0xee, 0x0d, 0xa1, 0xd4, 0x4f,
		0x18, 0xb8, 0x4e, 0xdb, 0x71, 0x92, 0x3d, 0x07, 0xe6, 0x7d, 0xdb, 0x8a, 0xd0, 0xaa, 0x44, 0x33,
		0x65, 0x51, 0x24, 0x8d, 0xb0, 0x20, 0x03, 0x10, 0x01, 0x6a, 0x81, 0x37, 0x2d, 0x59, 0x06, 0x29,
		0x53, 0x42, 0xa8, 0x4d, 0x97, 0x47, 0x12, 0x3b, 0xc7, 0xee, 0xfe, 0x47, 0xa8, 0x54, 0x3b, 0x84,
		0x9b, 0x13, 0xbf, 0xfb, 0x9c, 0x9a, 0x29, 0x2a, 0xa5, 0xae, 0x80, 0x9f, 0x09, 0xce, 0x36, 0x86,
		0x7e, 0x58, 0x4a, 0xaf, 0x8b, 0x32, 0x52, 0x4d, 0xff, 0x72, 0xdb, 0x78, 0x49, 0xd1, 0xef, 0x7b,
		0x22, 0xef, 0xc1, 0x47, 0x5e, 0x67, 0xea, 0x66, 0x06, 0xc8, 0xe0, 0xf4, 0xc9, 0x6f, 0x7a, 0xcc,
		0x8a, 0x74, 0x5a, 0x47, 0xa1, 0x3c, 0x00, 0x30, 0xeb, 0x23, 0xa6, 0x8b, 0x66, 0x4c, 0x12, 0x38,
		0x7a, 0x3a, 0xb8, 0xe4, 0x38, 0x54, 0x50, 0x09, 0xdd, 0x28, 0x24, 0xf1, 0xc1, 0x49, 0x4e, 0x06,
		0x4e, 0x5d, 0x40, 0x0f, 0xa4, 0xd8, 0x1a, 0xd3, 0xe0, 0x24, 0xe4, 0x49, 0x1e, 0x75, 0x21, 0xb4,
		0x10, 0xcd, 0xbb, 0xc6, 0x95, 0x5d, 0x3c, 0xa1, 0x1b, 0x92, 0x8a, 0x68, 0xda, 0x56, 0xab, 0x73,
		0x46, 0xbe, 0xab, 0xf1, 0x4b, 0x26, 0x63, 0xb4, 0x5d, 0x62, 0x90, 0x3a, 0x04, 0x6d, 0x3c, 0xa1,
		0x70, 0x7c, 0x33, 0x01, 0x4d, 0xa7, 0xe7, 0x57, 0xca, 0x5a, 0xed, 0x8f, 0xe9, 0x4f, 0x7a, 0xed,
		0x8c, 0x58, 0x6f, 0xff, 0xfd, 0x52, 0x87, 0xc8, 0xd6, 0x3b, 0x6c, 0xfa, 0x0b, 0x41, 0xf5, 0xcd,
		0x1c, 0x66, 0xb0, 0xc5, 0x6b, 0xbc, 0x29, 0x34, 0x63, 0x93, 0x3f, 0xe3, 0xee, 0x50, 0x97, 0x87,
		0x6c, 0xb4, 0xe3, 0x4f, 0x23, 0x00, 0x8a, 0x36, 0x47, 0xf4, 0x46, 0x04, 0x6f, 0x1b, 0x75, 0xe4,
		0xca, 0xff, 0x3a, 0x31, 0x72, 0xa5, 0x84, 0x29, 0x56, 0x2c, 0x0e, 0x51, 0x57, 0x1a, 0xff, 0x92,
		0xb9, 0x27, 0xc3, 0x85, 0x85, 0xce, 0x81, 0xbe, 0x9d, 0x41, 0x39, 0x5d, 0xda, 0xbb, 0xb6, 0xbe,
		0x7f, 0x17, 0xee, 0x89, 0x03, 0xa6, 0xd8, 0x24, 0xdc, 0xc3, 0xcc, 0xca, 0xb7, 0x2a, 0x9c, 0x3a,
		0xf1, 0x2d, 0x5e, 0x71, 0x85, 0xee, 0xef, 0xeb, 0x01, 0xa1, 0x51, 0x3f, 0xc9, 0x99, 0x65, 0x04,
		0xf6, 0x85, 0x77, 0x23, 0xee, 0xf6, 0x30, 0xa1, 0xd9, 0x93, 0xae, 0x22, 0xae, 0x30, 0x8a, 0x95,
		0x5b, 0xc0, 0x10, 0x45, 0x63, 0x1f, 0x26, 0x30, 0x80, 0x14, 0xd8, 0xda, 0xf1, 0xe0, 0xcc, 0x32
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xe324c1n;
	message = new Uint8Array([
		0x70, 0x46, 0xb5, 0xc4, 0xed, 0x23, 0x5e, 0x49, 0x27, 0x5f, 0x2c, 0x98, 0x49, 0x0a, 0x3e, 0x6b,
		0xfb, 0xb7, 0x2a, 0x0b, 0x2b, 0x30, 0xe4, 0xae, 0x0d, 0x68, 0xe2, 0x04, 0x60, 0xb1, 0x7d, 0x0d,
		0xf4, 0x2f, 0x9b, 0x2d, 0x69, 0x8d, 0x8b, 0x82, 0x39, 0xee, 0x30, 0x75, 0xf9, 0x27, 0x62, 0x8f,
		0xdb, 0x2b, 0x91, 0x8f, 0x78, 0xc6, 0xab, 0xb9, 0xcc, 0x8f, 0x40, 0x70, 0x82, 0x18, 0xe5, 0x07,
		0x72, 0x67, 0xd6, 0xd5, 0x69, 0xaa, 0xdf, 0x87, 0x28, 0x26, 0x7c, 0xba, 0xaf, 0x71, 0x3f, 0xca,
		0xbb, 0xe1, 0x72, 0xe4, 0x8d, 0x44, 0xfe, 0x63, 0xed, 0xd1, 0x8b, 0x59, 0x6f, 0x5f, 0xe9, 0x6b,
		0xf5, 0xd5, 0xae, 0xe3, 0x75, 0xe2, 0x21, 0x00, 0xfc, 0xee, 0x57, 0x90, 0xf3, 0x50, 0x9c, 0xc1,
		0xa2, 0xc1, 0x15, 0x35, 0xf2, 0x10, 0xa3, 0x54, 0x77, 0x18, 0x09, 0xe6, 0xad, 0xf0, 0x52, 0xe1
	]);
	signature = new Uint8Array([
		0x9f, 0x26, 0xdf, 0x01, 0x8b, 0xd9, 0x48, 0x29, 0x16, 0x8a, 0x13, 0xfe, 0x22, 0xad, 0x20, 0x6d,
		0xa9, 0x44, 0x83, 0x1f, 0x09, 0xc2, 0xdd, 0x82, 0x8d, 0x36, 0x77, 0xa1, 0xb4, 0xc4, 0x36, 0x40,
		0x06, 0x87, 0x49, 0x9a, 0x71, 0x0e, 0xb2, 0xae, 0xe5, 0xa4, 0x82, 0x3e, 0xe0, 0xd1, 0xac, 0xde,
		0xd8, 0x6d, 0xe2, 0xec, 0xf5, 0x1d, 0x2b, 0x32, 0x40, 0x8b, 0x7a, 0x0c, 0xd8, 0x81, 0x1f, 0xfd,
		0xfb, 0xc0, 0x44, 0x13, 0x95, 0x69, 0x52, 0x7b, 0xef, 0xbf, 0x52, 0xb2, 0x44, 0xe9, 0x19, 0xe4,
		0xa2, 0xa2, 0x2d, 0x24, 0x05, 0x57, 0x6b, 0x72, 0xb4, 0xd2, 0xb4, 0x47, 0x31, 0xa5, 0x7a, 0xe4,
		0xd3, 0x4d, 0x61, 0x81, 0x94, 0x19, 0x3e, 0x1d, 0xe8, 0xb7, 0x2d, 0x14, 0x1c, 0x78, 0x05, 0xb4,
		0x6e, 0x9b, 0x46, 0xd4, 0x04, 0x46, 0x2f, 0x50, 0xdf, 0x48, 0x27, 0x93, 0x02, 0xe4, 0x7b, 0x09,
		0x0e, 0xfe, 0x54, 0x30, 0x39, 0x07, 0x1a, 0xa8, 0xf7, 0xb3, 0xa5, 0xa6, 0x2e, 0xaf, 0xa8, 0xf9,
		0x8e, 0xd6, 0x81, 0xcb, 0x0f, 0x11, 0xb0, 0x18, 0xe2, 0xb5, 0xd6, 0xbb, 0x1a, 0x63, 0x4a, 0xe2,
		0x42, 0x26, 0x9b, 0x6d, 0xac, 0x07, 0xf1, 0xd1, 0xdb, 0x4e, 0x82, 0x16, 0xa2, 0xee, 0x91, 0xae,
		0xba, 0x2c, 0x13, 0x50, 0x1f, 0xc3, 0xfc, 0xc0, 0x2e, 0x6d, 0xda, 0x68, 0x05, 0x06, 0xef, 0xe6,
		0xcf, 0xed, 0x1b, 0x5c, 0x6e, 0xfb, 0xe0, 0x96, 0xf2, 0x5d, 0x1c, 0x98, 0x72, 0x54, 0x35, 0x00,
		0x48, 0x54, 0xaa, 0xf7, 0x5f, 0xe0, 0xce, 0x91, 0x38, 0xb5, 0xac, 0x50, 0x27, 0xf3, 0x6d, 0xcf,
		0x82, 0x20, 0xc6, 0x86, 0x8a, 0x74, 0xb7, 0xd8, 0x9f, 0xf2, 0x61, 0x93, 0xe0, 0x0f, 0xbe, 0xb5,
		0x81, 0xf0, 0x17, 0x3f, 0xa5, 0x57, 0x8e, 0xa7, 0x88, 0x45, 0x20, 0xb3, 0x37, 0x67, 0xf5, 0xb0,
		0x60, 0xb8, 0x23, 0x84, 0x3e, 0x71, 0x50, 0x50, 0xfb, 0x56, 0x9e, 0x06, 0x30, 0xe1, 0x83, 0xcb,
		0xb8, 0xec, 0xc4, 0x04, 0xb0, 0x2e, 0x33, 0xee, 0x48, 0xf5, 0x52, 0xec, 0xa8, 0x4a, 0x2c, 0x01,
		0x60, 0xfd, 0x6e, 0xc0, 0x08, 0xdc, 0xdd, 0x7a, 0xc0, 0xec, 0xe4, 0x2b, 0xd3, 0xfd, 0x32, 0x87,
		0x06, 0x9e, 0x19, 0x51, 0x22, 0x66, 0x2f, 0x09, 0x61, 0x6a, 0x12, 0x45, 0xd3, 0x31, 0xed, 0xef,
		0x4c, 0x11, 0xcf, 0x2f, 0x9c, 0x22, 0x31, 0xac, 0x07, 0x9e, 0x66, 0x04, 0xb3, 0xea, 0x28, 0x93,
		0xea, 0x1f, 0x51, 0x1c, 0xb2, 0xe1, 0xf2, 0xd7, 0x90, 0xfd, 0x00, 0x9a, 0x18, 0x25, 0x1b, 0xee,
		0x4e, 0xdb, 0x52, 0x39, 0x35, 0x92, 0xf5, 0x90, 0xed, 0xff, 0x2c, 0x8d, 0x31, 0x5d, 0x20, 0x28,
		0x6d, 0x99, 0xd8, 0x25, 0x20, 0xc3, 0x43, 0x78, 0xd7, 0xf4, 0x6f, 0x34, 0xfb, 0x20, 0xd2, 0xa5
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xa07n;
	message = new Uint8Array([
		0x2d, 0xd8, 0xa3, 0x0c, 0xe4, 0xd9, 0x71, 0x71, 0x8b, 0x9c, 0x3a, 0x1f, 0xa3, 0x35, 0x12, 0xf0,
		0x67, 0x7c, 0xc1, 0x95, 0x9a, 0xbd, 0xb2, 0xe6, 0x82, 0xb1, 0x0c, 0x77, 0x35, 0xad, 0x1e, 0x6c,
		0x13, 0x1a, 0x00, 0x8e, 0x94, 0x25, 0x77, 0x9e, 0x44, 0xb7, 0x1a, 0xe9, 0x0b, 0xa8, 0xb3, 0x1c,
		0xb2, 0x30, 0xe8, 0x5a, 0xa3, 0x9e, 0x1b, 0x8c, 0xf0, 0x4c, 0x8e, 0xf8, 0x97, 0xd2, 0xcb, 0x16,
		0x05, 0x7a, 0x43, 0x9e, 0xd8, 0xf4, 0x35, 0xe6, 0xe9, 0x4b, 0xd1, 0x6b, 0x8a, 0x18, 0x9e, 0xad,
		0x0c, 0xf6, 0x19, 0x41, 0x85, 0x35, 0x9f, 0x21, 0xcf, 0xd3, 0x8c, 0x46, 0xd4, 0xa7, 0xa5, 0x79,
		0x09, 0xe0, 0xb3, 0x66, 0x39, 0xae, 0x71, 0xf2, 0x84, 0x3f, 0xa8, 0xce, 0xa7, 0xed, 0x99, 0x4c,
		0x7e, 0xb6, 0x9b, 0x72, 0xc7, 0xec, 0x05, 0x4e, 0x28, 0x2d, 0x4e, 0x88, 0x74, 0x96, 0x73, 0x3e
	]);
	signature = new Uint8Array([
		0x9a, 0xa4, 0x03, 0x9c, 0x0c, 0x5a, 0x61, 0x7c, 0x1b, 0xa2, 0xd6, 0xf7, 0x13, 0x62, 0xca, 0x1e,
		0xe7, 0x6f, 0x66, 0x05, 0xde, 0xd0, 0xb5, 0x1e, 0x88, 0x1a, 0x5e, 0xb8, 0x00, 0x29, 0x7b, 0x4d,
		0x74, 0xde, 0x77, 0x68, 0x51, 0x35, 0x5c, 0xb7, 0x44, 0xe3, 0xf7, 0x97, 0x6b, 0x37, 0x9b, 0x54,
		0xa5, 0x6f, 0x5c, 0xf7, 0x05, 0xb9, 0xe0, 0x80, 0x92, 0x4a, 0xcf, 0x12, 0xd7, 0x4e, 0x06, 0x4e,
		0x3a, 0x45, 0x71, 0x43, 0x20, 0x96, 0xc6, 0x3b, 0x9b, 0xe3, 0x30, 0x1c, 0xc2, 0xc8, 0xd9, 0x15,
		0x91, 0xdb, 0xdd, 0xe6, 0x45, 0x7e, 0xc7, 0x9a, 0xab, 0x96, 0xb9, 0xa9, 0x13, 0x2f, 0x7f, 0xee,
		0xa6, 0x3f, 0xb5, 0xbc, 0xfa, 0x19, 0x2b, 0xd1, 0x26, 0xa0, 0xed, 0x82, 0xb0, 0xf3, 0x77, 0x9c,
		0x17, 0xa5, 0x76, 0x97, 0x33, 0xbd, 0x06, 0x18, 0x59, 0x50, 0xf3, 0xad, 0xc8, 0xbb, 0x62, 0x98,
		0x1c, 0x33, 0xc8, 0x1e, 0x40, 0xa6, 0xfc, 0x5c, 0x87, 0xa2, 0x73, 0x3a, 0x93, 0x80, 0x54, 0xb0,
		0xdb, 0x4f, 0xa7, 0x9b, 0x63, 0xb8, 0x22, 0xc0, 0xb6, 0x9c, 0xdf, 0x53, 0x67, 0x6b, 0xeb, 0xda,
		0xa8, 0x88, 0x9b, 0x18, 0x1b, 0x07, 0x60, 0xb7, 0xcb, 0x11, 0xc8, 0xc1, 0xc8, 0x90, 0x95, 0xf8,
		0xfd, 0x76, 0xc4, 0xee, 0x02, 0xf5, 0xd0, 0xa4, 0x14, 0x38, 0x95, 0x43, 0x1d, 0xe8, 0xb5, 0x38,
		0xef, 0xc6, 0x16, 0x0e, 0x0f, 0x3e, 0xf8, 0xd3, 0xf2, 0xe1, 0xfd, 0xc7, 0xcc, 0x72, 0xa5, 0x68,
		0x93, 0x49, 0x05, 0xc2, 0xca, 0x59, 0x8e, 0x36, 0x48, 0x21, 0x13, 0xb8, 0x59, 0x28, 0x49, 0xdc,
		0x21, 0x94, 0x3f, 0x5b, 0x30, 0x25, 0x09, 0x1a, 0x22, 0xbb, 0xd3, 0xb8, 0xeb, 0xdf, 0x2e, 0x96,
		0x6b, 0xdc, 0xea, 0x23, 0x50, 0xbc, 0x2e, 0xa5, 0x94, 0x13, 0xab, 0xeb, 0xb6, 0xb2, 0xcc, 0x33,
		0x2f, 0x3d, 0xbe, 0xf6, 0x52, 0xcd, 0x90, 0xe8, 0x5f, 0x86, 0x0d, 0x84, 0x3f, 0x24, 0x59, 0xc4,
		0x31, 0xde, 0xce, 0x9c, 0x43, 0x2e, 0xa5, 0xb6, 0xd7, 0xf3, 0x61, 0xeb, 0x85, 0x1a, 0xd5, 0xb0,
		0x36, 0x67, 0xc7, 0x13, 0x4f, 0x9c, 0xdf, 0x27, 0xf5, 0x75, 0xf4, 0xb0, 0x93, 0x69, 0x3f, 0x35,
		0xea, 0x7f, 0x2d, 0x74, 0x91, 0xa5, 0x97, 0x30, 0x2e, 0x23, 0x47, 0xc1, 0x82, 0xdd, 0x0b, 0x07,
		0x40, 0x11, 0x75, 0xbc, 0xd6, 0x25, 0xdc, 0x66, 0x44, 0x9e, 0xbc, 0x20, 0x14, 0x41, 0xfc, 0x13,
		0x2d, 0x1a, 0x5d, 0x5e, 0xab, 0x92, 0xeb, 0xb7, 0x59, 0xf9, 0x93, 0x1c, 0x28, 0x03, 0x94, 0x34,
		0xca, 0x7c, 0xf2, 0x49, 0xc9, 0xc7, 0x99, 0x4a, 0xea, 0xc0, 0x6c, 0x55, 0x11, 0x1a, 0x73, 0xa8,
		0xd2, 0xd2, 0x79, 0x12, 0xce, 0x92, 0x19, 0x14, 0x2f, 0xf1, 0xda, 0xac, 0x82, 0x43, 0x1a, 0x3c
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000026a07n;
	message = new Uint8Array([
		0x57, 0x07, 0xc0, 0xd7, 0xc2, 0xa3, 0x88, 0xeb, 0x7b, 0xd5, 0x16, 0x16, 0xc0, 0xf3, 0x3a, 0x71,
		0x97, 0xf4, 0xdc, 0xd9, 0xb7, 0xcb, 0xf7, 0xe8, 0xa5, 0xf4, 0xe6, 0x23, 0x1d, 0x4c, 0xdf, 0x75,
		0xb3, 0x25, 0xbd, 0xdd, 0xba, 0x9a, 0x02, 0x63, 0x65, 0x20, 0x1c, 0x50, 0x2c, 0x5e, 0xe7, 0x9e,
		0x71, 0x3f, 0x74, 0xae, 0x64, 0x45, 0x09, 0x39, 0x24, 0x20, 0x68, 0x89, 0x27, 0x7f, 0x54, 0xe9,
		0xdb, 0x26, 0x52, 0x5a, 0x8d, 0x40, 0xad, 0x87, 0x8b, 0xf7, 0xbc, 0xfb, 0x85, 0x43, 0x67, 0x92,
		0x39, 0xff, 0xe8, 0x2d, 0x50, 0x42, 0xcf, 0xaa, 0x82, 0xec, 0x49, 0x14, 0x01, 0x7f, 0xa1, 0x16,
		0x15, 0x31, 0x07, 0xb6, 0x03, 0x3f, 0x91, 0x40, 0x34, 0x83, 0x7f, 0x7f, 0x93, 0x49, 0xc3, 0x33,
		0x37, 0x5f, 0xc1, 0xc0, 0x42, 0x6b, 0x53, 0x24, 0x09, 0x81, 0x10, 0x2b, 0x75, 0xf5, 0xce, 0xe6
	]);
	signature = new Uint8Array([
		0x01, 0xcd, 0xf5, 0xe7, 0xf2, 0x70, 0x2e, 0x03, 0xc7, 0xb9, 0x8e, 0x8f, 0xde, 0x04, 0x7b, 0x8a,
		0x7d, 0xf6, 0x98, 0xce, 0x37, 0xa5, 0x1e, 0x39, 0x31, 0xb6, 0xb8, 0xca, 0xac, 0x44, 0x27, 0x8d,
		0x21, 0x63, 0x26, 0x64, 0x4d, 0x28, 0xce, 0xc1, 0x2a, 0x63, 0xb8, 0xe5, 0x83, 0x59, 0x85, 0x63,
		0x17, 0xa6, 0xa5, 0xc7, 0xdd, 0xbf, 0x32, 0xfa, 0x26, 0x4f, 0xed, 0xdd, 0xa8, 0x35, 0x40, 0x97,
		0x9d, 0x68, 0xdc, 0x4e, 0xa9, 0x2d, 0x75, 0xdf, 0xeb, 0x07, 0x3f, 0x05, 0x50, 0x71, 0x29, 0x79,
		0x03, 0x0a, 0x23, 0xde, 0x1c, 0x39, 0xe2, 0x8f, 0x4a, 0xbf, 0x70, 0x64, 0xcb, 0x0e, 0xe1, 0xea,
		0x19, 0xf1, 0xc1, 0x69, 0x47, 0x47, 0xa5, 0x3d, 0xe5, 0x0c, 0xae, 0xe9, 0xf3, 0x46, 0xc2, 0x40,
		0x89, 0x38, 0x9f, 0x6c, 0x37, 0x51, 0x9c, 0x75, 0x09, 0xfe, 0x49, 0x22, 0xfe, 0x51, 0x0b, 0x31,
		0x39, 0x9d, 0xec, 0x4e, 0x07, 0x9c, 0x08, 0x08, 0xdd, 0x4b, 0xde, 0x6e, 0x71, 0x3d, 0x2e, 0x58,
		0xa6, 0xb5, 0x4d, 0xd1, 0x1b, 0x6e, 0xd8, 0x79, 0x6d, 0xc7, 0x93, 0x26, 0x5f, 0x1e, 0xda, 0xb0,
		0xa2, 0xe5, 0xde, 0xde, 0x07, 0x6c, 0xe9, 0xa9, 0x3e, 0x11, 0x2b, 0xa3, 0xe2, 0xe7, 0x61, 0xc8,
		0xd5, 0x30, 0x87, 0x1f, 0x14, 0xfd, 0x17, 0xa5, 0xfb, 0x58, 0x29, 0x46, 0xfc, 0x40, 0xe9, 0x51,
		0xb2, 0xf3, 0x56, 0x51, 0xcc, 0x9b, 0xfa, 0xf8, 0xa4, 0x6d, 0x82, 0xd7, 0xe0, 0x25, 0xa4, 0xf1,
		0xf8, 0x6b, 0x98, 0x05, 0xc9, 0xa2, 0x31, 0x78, 0x53, 0x98, 0x85, 0x28, 0x8c, 0x87, 0x3e, 0x10,
		0x2c, 0x4c, 0xf5, 0x00, 0xc6, 0x12, 0xdb, 0x01, 0xf6, 0xe6, 0xa6, 0xb9, 0xc7, 0x23, 0x9a, 0x0f,
		0x0d, 0xdb, 0x6f, 0x47, 0x00, 0xfa, 0x52, 0x63, 0x36, 0xa8, 0xe2, 0xa1, 0x85, 0x1c, 0x08, 0x29,
		0x1b, 0xbe, 0xd4, 0xe0, 0x1f, 0xf0, 0xbf, 0x5e, 0x9d, 0x32, 0x78, 0xbf, 0xa8, 0x8a, 0x21, 0xe8,
		0xf7, 0x8b, 0x36, 0x0d, 0x31, 0xec, 0xfa, 0x3f, 0xef, 0x98, 0xa6, 0x1a, 0xee, 0xde, 0x75, 0x2e,
		0x93, 0xbd, 0xfa, 0xcf, 0xb5, 0xe7, 0xa8, 0x2c, 0x3e, 0x25, 0x75, 0x9a, 0x99, 0x21, 0xb9, 0x6f,
		0x94, 0xce, 0xe5, 0x37, 0xe1, 0x27, 0xbb, 0xae, 0x2d, 0xcc, 0x4a, 0xe6, 0xa8, 0xcc, 0x93, 0x41,
		0x61, 0x60, 0xf5, 0x9a, 0x35, 0x82, 0xcf, 0xb9, 0x4d, 0x91, 0x4d, 0x42, 0xff, 0x8c, 0x68, 0xbe,
		0x2c, 0x91, 0xc5, 0xfd, 0xca, 0x79, 0x46, 0x13, 0x08, 0x21, 0xdf, 0x91, 0x0b, 0x64, 0x86, 0x2f,
		0xcd, 0x14, 0xfe, 0x72, 0xfe, 0x31, 0xd3, 0x5b, 0x05, 0x04, 0xeb, 0x38, 0x79, 0x15, 0xcd, 0xb1,
		0x9d, 0x64, 0xa7, 0xc3, 0x30, 0xc1, 0x81, 0x19, 0x50, 0xa1, 0xca, 0xd3, 0x97, 0x7f, 0x9e, 0xa8
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	e =
		0xa07n;
	message = new Uint8Array([
		0xe2, 0x8b, 0x42, 0x77, 0x7e, 0x68, 0xda, 0x66, 0xc9, 0x78, 0x14, 0xb9, 0x10, 0x25, 0xc3, 0xc4,
		0xe3, 0x13, 0x10, 0xe1, 0xc5, 0x00, 0xc9, 0x70, 0x27, 0xef, 0xfc, 0x1b, 0x98, 0x85, 0xc5, 0x5f,
		0x36, 0xb3, 0x64, 0x47, 0x68, 0x95, 0x92, 0x7b, 0xcf, 0x9a, 0x16, 0x7a, 0x79, 0xe6, 0x93, 0x24,
		0x58, 0xf4, 0xa4, 0x7b, 0xf3, 0x80, 0x2a, 0xaa, 0x5c, 0xa4, 0xe5, 0x47, 0x62, 0x41, 0x42, 0xd5,
		0x07, 0xa0, 0x74, 0x8d, 0x35, 0x59, 0xc6, 0x5e, 0xac, 0x74, 0x30, 0x32, 0x3f, 0xcf, 0x28, 0x73,
		0x40, 0xbf, 0xba, 0xcd, 0x39, 0xfa, 0xdb, 0x36, 0xdc, 0xb5, 0xfb, 0x2c, 0x3d, 0x09, 0xd9, 0x3e,
		0x3f, 0x9b, 0x9b, 0xce, 0x4c, 0x7c, 0x1e, 0x15, 0x4a, 0x4e, 0x8b, 0x68, 0xca, 0xa9, 0x2b, 0xb9,
		0x82, 0xbd, 0x7c, 0x60, 0xfd, 0x38, 0x84, 0x1c, 0x91, 0x6a, 0x65, 0x54, 0x92, 0xa6, 0x32, 0xa3
	]);
	signature = new Uint8Array([
		0x7c, 0xf8, 0x44, 0x0f, 0xa3, 0x40, 0x25, 0xc9, 0x81, 0x1a, 0xec, 0x02, 0x02, 0x8b, 0xb2, 0xb7,
		0xf3, 0x67, 0x4a, 0xa2, 0x9e, 0x75, 0x5b, 0x88, 0x50, 0xb4, 0x3e, 0x0e, 0xf2, 0x97, 0xe0, 0x89,
		0x25, 0x74, 0x50, 0x03, 0x74, 0x04, 0x17, 0xbe, 0x74, 0x4e, 0xd2, 0xd6, 0x91, 0x89, 0xdc, 0xff,
		0xbf, 0x76, 0x02, 0x6d, 0xb7, 0x5a, 0x52, 0x10, 0xc4, 0x8f, 0x55, 0xb8, 0x94, 0xe5, 0x8b, 0x46,
		0x7e, 0x41, 0x52, 0x75, 0x56, 0x4e, 0x9e, 0x91, 0x9f, 0x92, 0x4b, 0x32, 0x72, 0xac, 0x21, 0xaa,
		0x15, 0x2b, 0x86, 0x53, 0x03, 0x97, 0x5d, 0x9c, 0x3d, 0xc7, 0xe0, 0xc1, 0xff, 0xfe, 0xb6, 0x0b,
		0xb0, 0xe7, 0xd1, 0xe1, 0xfc, 0x15, 0x9d, 0x85, 0xf6, 0x9b, 0xbd, 0x19, 0x55, 0x53, 0x26, 0xf0,
		0x10, 0xb3, 0x58, 0x3c, 0x14, 0x59, 0x89, 0xff, 0x0b, 0x37, 0xe2, 0x2f, 0x15, 0x6e, 0xa4, 0xb6,
		0x7f, 0x31, 0xb9, 0x18, 0xd2, 0x63, 0xb3, 0x37, 0xd4, 0xd5, 0x05, 0xc0, 0x3b, 0xc0, 0x91, 0x09,
		0xcd, 0x56, 0x3a, 0x3b, 0x83, 0xab, 0x3d, 0x9e, 0xdd, 0xbe, 0x83, 0xc1, 0xea, 0xb3, 0x5f, 0x2f,
		0x86, 0x1b, 0xcc, 0x8a, 0xef, 0xac, 0xc5, 0x3d, 0x91, 0x9f, 0x9f, 0x3d, 0x92, 0xfb, 0xa0, 0x6b,
		0x52, 0xb1, 0x1b, 0xd9, 0x1a, 0xdf, 0x5f, 0x91, 0xc8, 0x83, 0xac, 0xe2, 0x0c, 0x52, 0x8a, 0x62,
		0x10, 0xd8, 0x98, 0x78, 0xca, 0x14, 0x95, 0xa4, 0x4d, 0xba, 0x51, 0xe8, 0x54, 0x43, 0x00, 0x64,
		0x9d, 0xb4, 0x6e, 0x2a, 0x7e, 0x5d, 0x05, 0xc1, 0x65, 0xca, 0x7f, 0x68, 0x40, 0x97, 0x54, 0x02,
		0x64, 0xfd, 0xe4, 0x1f, 0xf4, 0xfc, 0x9c, 0xad, 0x42, 0xb2, 0xa6, 0x69, 0xb9, 0xcd, 0xd1, 0x7b,
		0x16, 0x8e, 0x73, 0x0a, 0x4d, 0xe4, 0x1f, 0xc0, 0xea, 0x8f, 0xaa, 0x07, 0xea, 0xf0, 0xff, 0x64,
		0xb3, 0x27, 0x9b, 0x2b, 0xae, 0x26, 0x2e, 0x78, 0xce, 0x31, 0x7f, 0xda, 0xba, 0x6c, 0x2f, 0x86,
		0x93, 0x29, 0x6e, 0x2a, 0x2b, 0x74, 0xd5, 0x41, 0x8b, 0x5f, 0xc7, 0xe2, 0xd8, 0x47, 0xb5, 0xbe,
		0x75, 0x95, 0xc6, 0x9b, 0xd7, 0xc4, 0xe0, 0xa4, 0x36, 0x73, 0x25, 0x41, 0x1d, 0x50, 0x27, 0x3b,
		0xa1, 0x70, 0x8d, 0x77, 0x3f, 0xa0, 0x72, 0x09, 0xf9, 0x2b, 0xa4, 0xd8, 0x9a, 0xaf, 0xa4, 0x6a,
		0x65, 0x83, 0x41, 0x2a, 0xba, 0x1f, 0xab, 0x69, 0x1e, 0xe1, 0xee, 0x09, 0x94, 0xe6, 0x5c, 0xcb,
		0xb8, 0xf3, 0x1c, 0xa1, 0xe3, 0xb4, 0x05, 0x63, 0x6a, 0x24, 0x64, 0x8e, 0x02, 0x4b, 0x3e, 0x52,
		0x3b, 0xe2, 0x41, 0x91, 0x95, 0x11, 0xe0, 0x44, 0xad, 0xb3, 0xdf, 0xdb, 0x56, 0x83, 0x6c, 0x6c,
		0xf9, 0xf0, 0x70, 0x90, 0xb5, 0xd1, 0xf7, 0x29, 0xad, 0x1d, 0x38, 0xf3, 0xc0, 0x7e, 0xed, 0x85
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(true);

	e =
		0xa07n;
	message = new Uint8Array([
		0xdb, 0xf8, 0x39, 0x1b, 0x35, 0x92, 0xaf, 0x32, 0xc8, 0x93, 0xb9, 0x23, 0x01, 0x06, 0x4e, 0xde,
		0xa2, 0xef, 0x6c, 0x38, 0xb9, 0x76, 0xad, 0x33, 0xd3, 0x48, 0x1a, 0x80, 0x6d, 0x3b, 0x43, 0x42,
		0xab, 0x31, 0x90, 0x15, 0x4d, 0x3e, 0xd2, 0x4f, 0xde, 0x0d, 0x1d, 0x86, 0x2e, 0x7f, 0xda, 0x52,
		0x03, 0x96, 0x18, 0x53, 0x0c, 0x92, 0x23, 0x76, 0x16, 0x59, 0x58, 0x75, 0x82, 0x1c, 0x37, 0x9d,
		0xf7, 0x38, 0xba, 0xd4, 0x54, 0x5a, 0xe5, 0xda, 0xe9, 0xe7, 0x9f, 0xcf, 0xe6, 0x9b, 0xc0, 0xf6,
		0x13, 0x70, 0x6b, 0xb8, 0xc2, 0xc1, 0x9e, 0xec, 0x03, 0xaf, 0x07, 0x55, 0x16, 0xc4, 0x1a, 0x6c,
		0x26, 0xd6, 0x60, 0x60, 0x34, 0x2e, 0x12, 0x5c, 0x51, 0xea, 0xe6, 0x08, 0x10, 0xa0, 0x29, 0x52,
		0x3b, 0x44, 0x0e, 0x6e, 0xc5, 0x4c, 0x46, 0x1b, 0x00, 0x11, 0xd0, 0x29, 0x10, 0x79, 0x13, 0x38
	]);
	signature = new Uint8Array([
		0x24, 0x48, 0x87, 0x02, 0xf7, 0x36, 0xa2, 0x3b, 0xbd, 0xdc, 0x56, 0xd6, 0x47, 0x2b, 0x08, 0x3d,
		0x92, 0xa7, 0x6b, 0xe7, 0xe5, 0x1f, 0xf7, 0x87, 0x15, 0x3f, 0x3c, 0xdd, 0xd8, 0xd0, 0xba, 0x1b,
		0x7b, 0xa5, 0x66, 0x85, 0xf6, 0x78, 0xa1, 0x59, 0xf8, 0xe6, 0x3d, 0xc6, 0x11, 0xad, 0x4f, 0xd1,
		0xed, 0x9d, 0x86, 0xe5, 0x97, 0x67, 0x2f, 0x6a, 0x11, 0xc5, 0xcd, 0xa9, 0xf5, 0x5f, 0x02, 0x70,
		0x53, 0xf1, 0x59, 0x64, 0x48, 0xda, 0x82, 0x33, 0xd2, 0xa1, 0x9b, 0x0a, 0x4d, 0xe8, 0xd1, 0x79,
		0x40, 0x3b, 0x97, 0x73, 0x51, 0x7c, 0x0a, 0x26, 0xdc, 0xf0, 0x06, 0x37, 0xa9, 0x0f, 0x08, 0x32,
		0xcd, 0x39, 0x18, 0xd3, 0x5f, 0xe8, 0xe1, 0x29, 0x31, 0x76, 0xda, 0xc3, 0x3f, 0x6a, 0x0a, 0x56,
		0x2a, 0xdf, 0xaf, 0xcc, 0x97, 0xd7, 0xcd, 0xf8, 0x62, 0xd3, 0x38, 0x59, 0x9d, 0x8b, 0xf9, 0x4f,
		0xcc, 0xcc, 0x58, 0xb0, 0xae, 0xb6, 0x54, 0x2e, 0x9d, 0x6c, 0x65, 0xd2, 0x90, 0x9e, 0x5b, 0x25,
		0x8f, 0x32, 0xf1, 0x72, 0x31, 0xa2, 0x74, 0xf5, 0x30, 0x24, 0x75, 0x1b, 0x87, 0x1c, 0xce, 0x29,
		0x0a, 0x97, 0x6e, 0xd9, 0x8c, 0xc3, 0x94, 0xa5, 0xcc, 0x5b, 0x5b, 0x6f, 0x5c, 0x6b, 0xf0, 0xae,
		0x9a, 0x21, 0xe2, 0xbe, 0x3d, 0x1d, 0x12, 0xf3, 0x0a, 0x29, 0x5d, 0x84, 0xcd, 0x8a, 0x68, 0x6f,
		0xcf, 0x61, 0x88, 0x30, 0x37, 0xce, 0xb0, 0x00, 0x7d, 0x1a, 0x44, 0x3e, 0xba, 0x92, 0xf6, 0x10,
		0x5d, 0x1b, 0x28, 0x2c, 0x32, 0x6a, 0x3c, 0xee, 0x65, 0xc4, 0x5b, 0x5f, 0xc5, 0x3d, 0xd1, 0x39,
		0x09, 0xdf, 0xa9, 0x7d, 0xdb, 0x46, 0xf8, 0xc6, 0x88, 0x9c, 0x03, 0x77, 0x6d, 0xeb, 0x2f, 0x02,
		0x20, 0xe5, 0xf2, 0xe8, 0x6b, 0x64, 0x07, 0xdc, 0x19, 0x35, 0x35, 0x2a, 0x13, 0x08, 0x6e, 0x13,
		0x01, 0xd2, 0xa9, 0xe0, 0x15, 0xcf, 0x3d, 0xed, 0x73, 0x60, 0xbf, 0xd5, 0xb0, 0xeb, 0x29, 0x36,
		0x7c, 0x69, 0xf1, 0xfd, 0x22, 0x26, 0xc5, 0xcc, 0x86, 0x9c, 0xd0, 0x3e, 0x08, 0xa6, 0x89, 0x39,
		0x6f, 0x1c, 0xdc, 0x33, 0x2a, 0x4e, 0x4b, 0x15, 0x0c, 0x70, 0x0a, 0x97, 0x95, 0xd3, 0x2e, 0x35,
		0x63, 0x91, 0xf2, 0x69, 0x6d, 0x4f, 0x8f, 0x3e, 0xbd, 0x6c, 0x81, 0x7a, 0x39, 0x20, 0xf2, 0x43,
		0xc4, 0xea, 0xcd, 0x37, 0x3c, 0x6a, 0xca, 0xeb, 0x9e, 0xbe, 0xed, 0xdb, 0x06, 0x45, 0x7b, 0xa3,
		0x1a, 0xc3, 0xee, 0x06, 0xcc, 0x68, 0x10, 0x41, 0xfd, 0x03, 0x54, 0xed, 0xf9, 0x09, 0x8b, 0x2a,
		0xba, 0x6d, 0x9e, 0x76, 0x6b, 0x15, 0x38, 0x3b, 0x27, 0x4a, 0x88, 0xf2, 0xad, 0x86, 0x4c, 0x7b,
		0xc1, 0x5c, 0x91, 0x2f, 0xbc, 0xcb, 0x81, 0xae, 0x90, 0x41, 0x1c, 0x07, 0xe2, 0x57, 0x1c, 0xca
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA224, SHA224, saltLength, message, signature)
	).toBe(false);

	n =
		0xcd6141e4c8dc6997fc65300a6e2c746f391022f15661231a832be966aa498e678777766944db54a599cd6ddbdaf7533f429e6e1197b7eb061913f50b09be04ab70b1b702fce9ada279ea8089677a37701e64190f243dfabe7cc254f08a6143c9c589ac4a90881c0d2b62e98013e92d049ee9ca11a425ad450ec5a699ae17672d86efde3fbc81203f2b500ef41746b9e9af2642b30cbf75e7889e500836d6dd32bcc5d8b69021b764a591d6850776cddf0b7240c75dda9e2d197f2cd9c6787b16445b55eaeccdfdd17fb72d7fe5189aa1a2a6ad06b4f2bfc8f6c91c3a2a80a83a3113e0b420b70654d6a5075d38d9a12d1e0fddd2cb23b7f3ef949991bf49048dc40020dcf042caf00883363591dd6a90789ac212a0ced95fb40bcadaac2c97ee7ff302c37cf2aa7298311db85a2d4d1b9f037023c21bf2e9b9abecc780a70cf2a54002634272d7dcf25ee4c7dbb04437f30f50bdcf4962d432484a5dab7b60b31d8025b984c821fadbf2b623f2f92a6531dce11a1f252e603016078f3986e081n;
	e =
		0xcc92fn;
	message = new Uint8Array([
		0x9f, 0xe9, 0xf9, 0x33, 0xb9, 0x3d, 0x5c, 0x2a, 0xb2, 0xf6, 0x81, 0x08, 0x6e, 0xfb, 0x04, 0x09,
		0x0c, 0x80, 0x97, 0x27, 0x69, 0x7d, 0xa5, 0x34, 0xe6, 0x5f, 0x35, 0x26, 0x6c, 0xfd, 0x10, 0xb2,
		0xad, 0xcd, 0x26, 0x1c, 0xac, 0x58, 0x2e, 0x4d, 0x7f, 0xeb, 0x8d, 0x26, 0x53, 0x90, 0x79, 0x14,
		0xb2, 0x3c, 0x5e, 0xe4, 0x01, 0x4a, 0x80, 0xd9, 0x4d, 0x28, 0xe3, 0xfc, 0x47, 0x51, 0x68, 0xb4,
		0x8c, 0x7b, 0x38, 0x96, 0x2a, 0x11, 0x65, 0x7e, 0x60, 0xe3, 0xcf, 0xdf, 0xa6, 0x1d, 0x45, 0x57,
		0xed, 0x75, 0xed, 0x87, 0x28, 0xa9, 0xe6, 0x21, 0x0b, 0x29, 0x2b, 0x42, 0x13, 0x10, 0xbb, 0x03,
		0xc6, 0x59, 0xf7, 0x4b, 0x3c, 0x50, 0x4b, 0xe7, 0xde, 0x46, 0x10, 0xdc, 0x6e, 0x89, 0xb1, 0xfb,
		0x48, 0x94, 0x0d, 0xb7, 0xe7, 0x82, 0x1d, 0x34, 0xaa, 0xc9, 0xd7, 0xa0, 0xd8, 0x24, 0x52, 0xc6
	]);
	signature = new Uint8Array([
		0x43, 0x11, 0xcc, 0x3c, 0xcb, 0x4a, 0x22, 0x15, 0xd6, 0x41, 0x84, 0xa2, 0x2d, 0x09, 0x10, 0xe2,
		0xf3, 0x29, 0x31, 0xbe, 0x4e, 0x17, 0x51, 0xb8, 0x57, 0x46, 0xc5, 0xeb, 0x69, 0xc2, 0xa3, 0x88,
		0xd6, 0xcf, 0xe8, 0xf0, 0xf7, 0xd4, 0x92, 0x08, 0x5e, 0x2d, 0xeb, 0xbc, 0xdc, 0xad, 0x65, 0xed,
		0x58, 0x81, 0x03, 0xdf, 0x67, 0x09, 0x9d, 0x5c, 0x9a, 0xa6, 0xc7, 0x94, 0x0e, 0x77, 0x7f, 0x91,
		0x41, 0xf6, 0xd0, 0x0f, 0x2c, 0x30, 0xc7, 0x49, 0x22, 0x86, 0x56, 0xcc, 0x47, 0x3d, 0xc2, 0x6c,
		0x3b, 0xcb, 0xae, 0x8b, 0x46, 0xb9, 0x75, 0x2a, 0x29, 0xcd, 0x0d, 0xe5, 0x10, 0x23, 0xe4, 0x42,
		0x75, 0x2d, 0xc6, 0x49, 0x39, 0x81, 0x08, 0x9e, 0xc6, 0xa0, 0x00, 0xbb, 0x53, 0xcc, 0xfc, 0x7f,
		0x48, 0xeb, 0x32, 0x03, 0x02, 0xae, 0xb1, 0x3e, 0xc9, 0xca, 0x31, 0x44, 0x6a, 0x39, 0x91, 0xcf,
		0x78, 0x40, 0x6a, 0x6d, 0x7d, 0x35, 0x91, 0xd8, 0xbc, 0xbb, 0x64, 0x34, 0x80, 0x08, 0x4e, 0x66,
		0x3e, 0xdd, 0xa4, 0x9c, 0xb7, 0x54, 0x9d, 0x42, 0x10, 0x83, 0x83, 0xa8, 0x13, 0xef, 0x47, 0x09,
		0x13, 0x5d, 0xc9, 0xbe, 0x76, 0x9d, 0x85, 0x73, 0xba, 0x94, 0x73, 0x82, 0xd6, 0x3e, 0x81, 0x7c,
		0x4c, 0xa5, 0x1d, 0x66, 0x72, 0xb1, 0xa0, 0x61, 0xcc, 0xfb, 0x13, 0x62, 0x72, 0x3b, 0x35, 0xd1,
		0x8e, 0xaf, 0x71, 0x3c, 0x86, 0xc9, 0xb8, 0xfc, 0x38, 0x48, 0x58, 0x64, 0xbe, 0xdf, 0x5d, 0x43,
		0x76, 0x57, 0x50, 0x25, 0xb0, 0x46, 0xa8, 0x03, 0x28, 0x0c, 0x20, 0xfc, 0xb2, 0xe2, 0x43, 0xb3,
		0x9c, 0x5d, 0xdd, 0x52, 0xc2, 0x96, 0x1d, 0xd7, 0xdc, 0xcb, 0xad, 0x7d, 0x0d, 0xae, 0xc3, 0x57,
		0x5e, 0xc5, 0x64, 0xef, 0x26, 0x8b, 0x9d, 0x0b, 0x5f, 0x4f, 0xd1, 0xde, 0xce, 0xf2, 0xad, 0x8f,
		0x22, 0xaf, 0x11, 0x16, 0x9b, 0x47, 0x1b, 0x60, 0x2e, 0xcf, 0xa9, 0x61, 0xd5, 0xf5, 0x9d, 0xf6,
		0x10, 0x3b, 0xb7, 0x3c, 0x75, 0x55, 0x7b, 0x93, 0x01, 0x9d, 0xd0, 0xad, 0x4a, 0xb1, 0xce, 0x9c,
		0x1b, 0xa4, 0x66, 0xe0, 0x1a, 0xea, 0xa5, 0xbe, 0xca, 0x93, 0x4a, 0x4b, 0xa2, 0x5f, 0x5d, 0xd3,
		0x29, 0x0b, 0x21, 0x18, 0x55, 0xae, 0x55, 0xe7, 0x30, 0x24, 0x55, 0x34, 0x88, 0x9b, 0xff, 0x62,
		0x6b, 0xf5, 0x3c, 0xdd, 0xc2, 0xe8, 0x16, 0x3f, 0x11, 0x7c, 0x4d, 0x23, 0x09, 0xdb, 0x47, 0x71,
		0xf0, 0x6f, 0xd3, 0x26, 0xaf, 0x01, 0x5c, 0xd4, 0x60, 0x36, 0xb4, 0x57, 0xef, 0x1d, 0xa7, 0xb6,
		0x06, 0x44, 0x97, 0xe3, 0x22, 0x64, 0x48, 0x97, 0x96, 0x6b, 0xbb, 0x99, 0xf9, 0x8e, 0x04, 0xa9,
		0x1a, 0x72, 0x40, 0xf1, 0x25, 0x59, 0xac, 0x44, 0x46, 0xa1, 0x44, 0x5f, 0x1e, 0x37, 0x8b, 0x21
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xe6f03fn;
	message = new Uint8Array([
		0xe6, 0x2f, 0x04, 0xe5, 0xd8, 0x2c, 0xd1, 0x6e, 0xa4, 0xcf, 0x1b, 0x3e, 0x74, 0xe5, 0x88, 0x2a,
		0x52, 0xa0, 0x92, 0x9a, 0x9b, 0x3d, 0x95, 0x47, 0xb1, 0xe3, 0x26, 0x42, 0xf1, 0xcf, 0xa7, 0x39,
		0xe5, 0xae, 0x18, 0xf6, 0xba, 0x4a, 0x30, 0x28, 0xf4, 0x69, 0xad, 0x66, 0x60, 0xf2, 0xe8, 0x71,
		0x4a, 0x52, 0xac, 0xb9, 0xf1, 0x1e, 0x48, 0x23, 0x38, 0xfa, 0xe3, 0x0a, 0x9e, 0xb9, 0x10, 0x84,
		0x70, 0xc6, 0xa3, 0xe6, 0x3e, 0xc2, 0xc2, 0x8a, 0x8b, 0x6e, 0x3f, 0xcf, 0xc8, 0xcc, 0x25, 0x62,
		0x84, 0x81, 0x90, 0xbc, 0xdd, 0x7e, 0xc2, 0xec, 0x3a, 0xdf, 0x74, 0x97, 0x3c, 0x13, 0x6a, 0x3d,
		0xf1, 0x3e, 0x4a, 0xbd, 0x4b, 0xdb, 0xae, 0x1c, 0xd1, 0xa6, 0x78, 0x82, 0x95, 0xb9, 0x66, 0x85,
		0x66, 0xf5, 0xe6, 0xaa, 0x46, 0xa3, 0x2b, 0x29, 0x1f, 0x5b, 0x80, 0xf1, 0xb1, 0x25, 0xdc, 0xec
	]);
	signature = new Uint8Array([
		0x8f, 0x20, 0xb4, 0x34, 0xb6, 0x95, 0x2a, 0x06, 0x47, 0x61, 0x01, 0x22, 0xd5, 0xf8, 0x36, 0x96,
		0x5e, 0xf6, 0x9c, 0x27, 0x17, 0xf2, 0x88, 0xc2, 0x26, 0xb1, 0xc1, 0xd8, 0x7d, 0x53, 0x13, 0xda,
		0xed, 0x25, 0x9f, 0xce, 0x61, 0x85, 0x0a, 0x70, 0x78, 0x12, 0x44, 0x95, 0x44, 0x02, 0xa0, 0xc2,
		0x10, 0xd1, 0xca, 0xc1, 0x34, 0xca, 0xd6, 0xcd, 0xea, 0xa6, 0x70, 0xcc, 0x7e, 0x4f, 0x68, 0x2c,
		0xc2, 0x6b, 0x21, 0x08, 0xee, 0xe4, 0xae, 0xa7, 0xab, 0xd8, 0x47, 0x7e, 0x5f, 0x52, 0xf6, 0xee,
		0x53, 0x9d, 0x9e, 0x17, 0x99, 0x58, 0x0d, 0xb1, 0xc3, 0xfa, 0x5b, 0x7b, 0xa0, 0x18, 0xc1, 0x6b,
		0xc3, 0xdf, 0xcc, 0x67, 0xb8, 0xca, 0x01, 0x6d, 0x5c, 0x26, 0x55, 0x44, 0x22, 0xa7, 0x45, 0x93,
		0xe0, 0xe0, 0x56, 0xa2, 0x39, 0xfa, 0x73, 0x1a, 0xb3, 0xe7, 0x80, 0xaa, 0xfa, 0x71, 0x1a, 0x76,
		0x2e, 0x17, 0x4b, 0x48, 0x7f, 0x95, 0x19, 0x4f, 0x90, 0x2b, 0xc7, 0x18, 0x6f, 0xc7, 0x78, 0x39,
		0xe2, 0x88, 0x5a, 0xc0, 0xdb, 0x32, 0x8c, 0x71, 0xf4, 0x06, 0x0e, 0xb8, 0xef, 0x7c, 0xaf, 0xe1,
		0x09, 0xcd, 0xc8, 0xe4, 0xac, 0xb5, 0xc2, 0x1b, 0xc9, 0x64, 0xfe, 0xec, 0x80, 0x47, 0x4d, 0xaf,
		0x73, 0x7e, 0xa0, 0x85, 0x62, 0x88, 0x8b, 0x42, 0x96, 0xf0, 0x41, 0x58, 0x1c, 0xcd, 0xe0, 0xa2,
		0xfd, 0x61, 0x45, 0x5f, 0x6b, 0xf5, 0x69, 0x86, 0xdc, 0x05, 0x06, 0xf4, 0xe6, 0xf6, 0xb5, 0x5b,
		0x4b, 0x0e, 0x7e, 0xce, 0x52, 0x1e, 0xe8, 0x26, 0x5a, 0x0e, 0x63, 0xfa, 0x87, 0x41, 0x90, 0x32,
		0xc2, 0x8c, 0xf0, 0x53, 0x6c, 0xae, 0x35, 0xd0, 0xed, 0x99, 0x41, 0x02, 0x7e, 0xa6, 0x80, 0xc0,
		0x78, 0x5a, 0x96, 0xd0, 0x75, 0xde, 0x14, 0xf2, 0xa0, 0x9f, 0x36, 0xff, 0xa4, 0x06, 0xa9, 0x54,
		0xf7, 0xd3, 0x65, 0x4a, 0x78, 0xa9, 0x68, 0x00, 0x2b, 0xad, 0x6c, 0xc6, 0x63, 0x9f, 0xe8, 0xfc,
		0x0e, 0xa7, 0xda, 0x6a, 0xa9, 0x00, 0xae, 0xbe, 0x13, 0x63, 0x68, 0xea, 0x8c, 0x34, 0x17, 0xf2,
		0x0a, 0xf0, 0x1a, 0x0e, 0xa5, 0xea, 0x48, 0x54, 0x16, 0xd5, 0x77, 0x93, 0x1f, 0x9f, 0x94, 0x2d,
		0x1c, 0x6a, 0x44, 0x0c, 0x1d, 0x6f, 0x2e, 0xdd, 0x56, 0x31, 0xfe, 0xad, 0x4c, 0x21, 0xf7, 0x12,
		0x97, 0xe0, 0xd8, 0xed, 0x75, 0x3b, 0xe4, 0x10, 0x0e, 0x5f, 0x8d, 0x6d, 0x7a, 0xcf, 0x70, 0x30,
		0xeb, 0x26, 0x4b, 0x4e, 0xdf, 0x13, 0xc1, 0xa5, 0xb9, 0xc1, 0x22, 0x80, 0xcf, 0xb5, 0xff, 0xfc,
		0x7d, 0x69, 0x1b, 0xbb, 0x78, 0x1f, 0x5a, 0xcc, 0x4b, 0x55, 0xf6, 0x4c, 0xf2, 0x8f, 0xb8, 0xea,
		0x76, 0x4d, 0x79, 0xdd, 0xad, 0x4a, 0x0a, 0x59, 0xe5, 0x62, 0xe4, 0x50, 0x93, 0xac, 0x7a, 0xd8
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002cc92fn;
	message = new Uint8Array([
		0x5d, 0xf6, 0xc2, 0xf1, 0x5c, 0x25, 0xe0, 0xd7, 0x2a, 0x7e, 0xcd, 0x6a, 0xa3, 0xb4, 0x80, 0x94,
		0x9f, 0x97, 0x99, 0x45, 0xdb, 0x38, 0xf4, 0xb8, 0x36, 0x4e, 0x7e, 0xf7, 0x20, 0xd8, 0x47, 0xa1,
		0x4f, 0x04, 0xd9, 0xeb, 0xb3, 0x50, 0xc9, 0xe5, 0xad, 0xef, 0x8b, 0xff, 0x7c, 0x6e, 0x8a, 0xcb,
		0xf8, 0x97, 0x78, 0x04, 0x82, 0x96, 0xe3, 0xd0, 0x3b, 0x5a, 0x0a, 0x42, 0x74, 0x3e, 0xee, 0x23,
		0x66, 0xe9, 0xac, 0xf2, 0x23, 0x72, 0x09, 0x29, 0xcd, 0xc8, 0x4f, 0xc2, 0x06, 0x52, 0x58, 0xfa,
		0xa7, 0xd2, 0xe8, 0x55, 0xb5, 0x8f, 0x40, 0xe2, 0x91, 0xb3, 0xef, 0xc0, 0x6e, 0xf2, 0xec, 0xe1,
		0x08, 0x6c, 0xe2, 0x0e, 0x94, 0xd5, 0xcb, 0x2b, 0xf2, 0xd3, 0xc0, 0xbd, 0x2a, 0xa7, 0x0f, 0xa9,
		0x16, 0x10, 0x8f, 0x3e, 0x5c, 0x6c, 0x30, 0x76, 0xa0, 0x21, 0xd6, 0x79, 0xf7, 0x3b, 0x68, 0x63
	]);
	signature = new Uint8Array([
		0x44, 0x44, 0x4d, 0xee, 0x1f, 0x63, 0x27, 0x4a, 0xe5, 0x03, 0xaf, 0xa3, 0xc9, 0x82, 0xb9, 0x6e,
		0xb6, 0x0f, 0xa8, 0xbe, 0xb0, 0xd4, 0x14, 0x6b, 0x48, 0x47, 0x3f, 0x81, 0x69, 0x46, 0x27, 0x40,
		0x04, 0xd0, 0xce, 0xa3, 0x0c, 0x1b, 0x70, 0xd1, 0x29, 0x1c, 0xaa, 0x38, 0x01, 0x2f, 0x84, 0x88,
		0x15, 0xd3, 0x3e, 0x10, 0x5b, 0xdb, 0xf2, 0x84, 0x0a, 0x1f, 0x84, 0x7c, 0xbc, 0x35, 0x3f, 0xb8,
		0xa7, 0x68, 0x8d, 0xb9, 0xe2, 0x7f, 0x9e, 0xd3, 0xec, 0x0c, 0x64, 0x9a, 0xa7, 0x65, 0x0f, 0x10,
		0x23, 0x74, 0x93, 0x6d, 0xcf, 0xfc, 0xcc, 0x58, 0x48, 0x95, 0x3f, 0x7d, 0xca, 0xc5, 0x09, 0x74,
		0xbd, 0x76, 0x0c, 0x49, 0x31, 0x30, 0x8c, 0x75, 0x83, 0xb7, 0x65, 0x10, 0xea, 0xa1, 0x31, 0x1d,
		0x14, 0xee, 0x4d, 0x8c, 0xd7, 0x40, 0x3d, 0xf1, 0xb0, 0xb7, 0xe9, 0x7a, 0xa7, 0xac, 0xf6, 0x27,
		0x9e, 0x48, 0x49, 0xe4, 0x04, 0x21, 0x7b, 0x8f, 0xe0, 0x72, 0x20, 0x7b, 0x1a, 0xf4, 0x8a, 0x15,
		0x4c, 0xa9, 0x13, 0x16, 0xa1, 0x95, 0x7f, 0x25, 0xe8, 0x2b, 0xf3, 0x04, 0x68, 0xa7, 0x5c, 0x51,
		0xfc, 0x70, 0x31, 0x25, 0x3f, 0x49, 0x2e, 0x75, 0xbb, 0xb6, 0x56, 0xbd, 0x29, 0x11, 0x10, 0xfd,
		0xa3, 0x22, 0x05, 0x23, 0x24, 0xbf, 0xf3, 0x73, 0xb4, 0x93, 0xc7, 0x13, 0xbc, 0xe0, 0x02, 0x76,
		0x85, 0x48, 0x02, 0xa4, 0x6f, 0xe0, 0x5f, 0x49, 0x52, 0xd6, 0xe8, 0x0e, 0xfb, 0x1e, 0x12, 0xa9,
		0xd6, 0x12, 0x2a, 0x55, 0x4a, 0x6a, 0x73, 0x22, 0x55, 0x86, 0xfa, 0x69, 0x0a, 0xe4, 0xe8, 0x09,
		0xb7, 0x49, 0x99, 0x31, 0x7e, 0x6f, 0xbe, 0x12, 0x29, 0x17, 0x7b, 0xbb, 0xf8, 0x76, 0x0f, 0x7c,
		0xad, 0xd7, 0x15, 0xfd, 0x12, 0x96, 0x66, 0x40, 0x05, 0x15, 0x0b, 0xb3, 0x86, 0x63, 0xa8, 0x90,
		0xa7, 0x65, 0xbb, 0x46, 0x46, 0xf4, 0xb3, 0x83, 0xae, 0xb1, 0xc7, 0x70, 0x2f, 0xa2, 0x09, 0x22,
		0x99, 0x47, 0x1d, 0xf6, 0x82, 0x73, 0x2d, 0xf8, 0x83, 0x57, 0x37, 0xd3, 0xab, 0x84, 0x2e, 0xc8,
		0x3c, 0x3f, 0x20, 0x21, 0xaa, 0x6a, 0x61, 0x83, 0x25, 0xfa, 0x36, 0xb4, 0xce, 0x34, 0xdc, 0x2a,
		0x8a, 0x40, 0xd5, 0xbd, 0xc9, 0x5b, 0xa6, 0x21, 0xaf, 0x1a, 0xe7, 0xe3, 0xf6, 0x5a, 0x61, 0xd6,
		0x1c, 0x7e, 0x0c, 0x8e, 0x42, 0xfe, 0x0e, 0xd0, 0x54, 0xf3, 0xe6, 0x8f, 0x8f, 0x8f, 0x64, 0xa2,
		0x1f, 0x79, 0x31, 0xab, 0xe6, 0x03, 0xe1, 0x30, 0x94, 0xb9, 0x73, 0x0c, 0x1d, 0xc8, 0xbe, 0x59,
		0x18, 0xc7, 0x38, 0x6d, 0xbf, 0xb4, 0x36, 0x57, 0x0c, 0xdc, 0x2a, 0x3e, 0x5e, 0x4a, 0xe1, 0xc9,
		0x37, 0xa6, 0x54, 0xee, 0xf7, 0x35, 0x42, 0x73, 0xc4, 0x00, 0x2c, 0xa6, 0xc7, 0x9e, 0xc2, 0x73
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xcc92fn;
	message = new Uint8Array([
		0xda, 0x17, 0x21, 0xb3, 0x19, 0x06, 0x94, 0xd8, 0x73, 0xda, 0xae, 0x06, 0xb0, 0x10, 0x89, 0x45,
		0xc6, 0x93, 0xed, 0x88, 0xef, 0x85, 0x0c, 0x8c, 0xff, 0x3d, 0x70, 0x03, 0xf5, 0x8c, 0x31, 0xf2,
		0xd0, 0x45, 0x6b, 0x58, 0xa4, 0xfc, 0xef, 0x10, 0xec, 0x0d, 0x39, 0xf8, 0x22, 0xe1, 0xa3, 0x53,
		0x8d, 0x6c, 0xd8, 0x6c, 0x5b, 0xfa, 0x8a, 0x7d, 0xef, 0x2c, 0x68, 0xce, 0x7c, 0x3d, 0x4a, 0x21,
		0xd3, 0x8a, 0xaf, 0x4e, 0x79, 0x52, 0x6a, 0x2b, 0xfd, 0xba, 0x98, 0xae, 0x88, 0x14, 0xd5, 0x56,
		0xb6, 0x60, 0xb0, 0xc6, 0xa4, 0x13, 0x5c, 0xb4, 0x4b, 0x18, 0xa8, 0x01, 0x0c, 0x15, 0x30, 0x29,
		0x8b, 0xef, 0xd5, 0xde, 0xc1, 0x90, 0x6c, 0xf0, 0x4d, 0xe8, 0xb3, 0x70, 0x0b, 0x31, 0x89, 0x15,
		0xe8, 0x78, 0x5e, 0xde, 0xf5, 0x59, 0xe8, 0xf9, 0xba, 0x0a, 0x17, 0xe4, 0xcc, 0x9b, 0x4c, 0xd2
	]);
	signature = new Uint8Array([
		0x50, 0x9d, 0x9b, 0x9a, 0xf5, 0x7c, 0xe7, 0x31, 0x26, 0x33, 0x00, 0x03, 0x22, 0x80, 0xae, 0x4b,
		0xc3, 0x53, 0x18, 0x9a, 0x6d, 0x25, 0xb5, 0x0b, 0x66, 0x83, 0x4b, 0x2a, 0x9e, 0x76, 0x26, 0x93,
		0x75, 0x78, 0xc8, 0x2f, 0x33, 0xc0, 0x36, 0x98, 0x03, 0xa2, 0xb9, 0x7d, 0x71, 0x09, 0x3e, 0x79,
		0xe6, 0x56, 0xd5, 0x6b, 0xea, 0x28, 0x6a, 0x6c, 0x31, 0x27, 0x6e, 0xa3, 0x79, 0x6d, 0x06, 0x84,
		0xa3, 0x0e, 0xec, 0x60, 0x66, 0x65, 0xb8, 0x29, 0xc8, 0x26, 0x21, 0xbc, 0x62, 0x74, 0xe9, 0x3b,
		0x4f, 0x1a, 0xdd, 0x1b, 0xe8, 0xd7, 0xce, 0xb6, 0x6d, 0xa8, 0xf1, 0xf6, 0xeb, 0x7b, 0x94, 0x93,
		0x66, 0x99, 0x25, 0xa8, 0xb3, 0xdc, 0x0c, 0x21, 0xa4, 0xd6, 0xcc, 0x19, 0x84, 0x0b, 0x71, 0xa0,
		0xb3, 0x12, 0xf9, 0x11, 0xa3, 0x28, 0xc7, 0xe5, 0x87, 0x35, 0xce, 0xc4, 0x73, 0x03, 0x06, 0x5e,
		0x6f, 0xb0, 0x14, 0x57, 0xb3, 0xd9, 0x7b, 0x93, 0x81, 0x4c, 0xb6, 0xae, 0x6f, 0x42, 0xb3, 0x73,
		0x3d, 0x21, 0x01, 0x15, 0x9b, 0x08, 0xbd, 0x33, 0x40, 0x3e, 0x22, 0xb9, 0xf0, 0xa2, 0x88, 0xec,
		0x02, 0xd3, 0x86, 0xa5, 0x9c, 0x4d, 0xdd, 0xdf, 0x9c, 0x83, 0xc3, 0x15, 0x4e, 0xbf, 0xbb, 0x81,
		0x91, 0x43, 0x73, 0xb9, 0x1f, 0xc1, 0x87, 0xdf, 0xf0, 0x0d, 0x93, 0xb8, 0xba, 0x34, 0x4a, 0xed,
		0x76, 0x33, 0x62, 0xc6, 0x7a, 0x62, 0x3c, 0x1b, 0x90, 0xe7, 0xd6, 0xb7, 0x81, 0xf3, 0x68, 0x82,
		0x54, 0xc8, 0xa0, 0x13, 0x97, 0x6c, 0xfe, 0xf3, 0x8f, 0x8c, 0xb9, 0x47, 0xe7, 0x70, 0x4e, 0xd5,
		0xd6, 0xcf, 0x4b, 0x24, 0x80, 0xa9, 0x56, 0xc0, 0xbe, 0x55, 0x1e, 0x98, 0x6b, 0x5a, 0x05, 0x4a,
		0xb5, 0x9b, 0x2e, 0x9b, 0x97, 0x90, 0x62, 0xfa, 0x6a, 0xe9, 0xf8, 0x20, 0x4e, 0x09, 0xa5, 0x96,
		0x2a, 0x8a, 0xf8, 0x93, 0x21, 0x56, 0x46, 0xb9, 0x1a, 0xaa, 0x27, 0x43, 0xdf, 0x17, 0x45, 0x44,
		0x9a, 0x30, 0xfd, 0x13, 0x78, 0x5b, 0x2c, 0x4b, 0x83, 0x96, 0x17, 0xd3, 0x80, 0xb1, 0xae, 0xeb,
		0x42, 0x96, 0x90, 0x8f, 0xe4, 0x94, 0xa8, 0x10, 0xa6, 0xcb, 0x80, 0xd7, 0x23, 0xce, 0x74, 0x71,
		0x6f, 0x89, 0xf7, 0xb5, 0x07, 0x70, 0xb5, 0x77, 0xdd, 0x5d, 0xd9, 0x00, 0x52, 0x9d, 0x6d, 0x67,
		0x32, 0x30, 0x94, 0xe8, 0xd4, 0x6c, 0x60, 0x53, 0x9c, 0x9c, 0x9d, 0xbf, 0x44, 0x80, 0x1c, 0xec,
		0x40, 0x82, 0xf6, 0xa7, 0x39, 0x10, 0xec, 0x45, 0x2a, 0x2f, 0xad, 0xa9, 0x0f, 0x28, 0x32, 0xa3,
		0xdf, 0xf0, 0x7f, 0xa1, 0xf0, 0xff, 0xa1, 0x47, 0x69, 0x94, 0xe2, 0x0a, 0x33, 0x5d, 0x69, 0xe6,
		0x71, 0x36, 0x6c, 0x95, 0xa2, 0xcf, 0x4c, 0x16, 0xdd, 0x40, 0x43, 0xe5, 0x75, 0x01, 0x18, 0x4d
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002cc92fn;
	message = new Uint8Array([
		0x69, 0x7e, 0x6f, 0xfd, 0x61, 0x7d, 0x01, 0xd6, 0x66, 0xfb, 0x1c, 0x06, 0x94, 0x77, 0xd3, 0xa5,
		0xb3, 0x6b, 0x45, 0xa0, 0x0a, 0xd2, 0x17, 0x5e, 0x73, 0xe6, 0x22, 0xa3, 0xb5, 0x2e, 0x68, 0xb5,
		0x0d, 0xb8, 0x4d, 0xbe, 0x0e, 0xa4, 0x04, 0x72, 0xac, 0xe2, 0x47, 0xf1, 0x93, 0x3b, 0x4b, 0xef,
		0xbd, 0x96, 0xf3, 0x12, 0x43, 0x74, 0x44, 0x9b, 0x73, 0xbe, 0x19, 0x49, 0x24, 0xc0, 0x17, 0x7a,
		0x46, 0x75, 0xe4, 0x94, 0xbd, 0x05, 0x94, 0xa3, 0x70, 0x8c, 0x64, 0x44, 0x9c, 0x1d, 0xab, 0xc1,
		0x6f, 0x07, 0x0d, 0x7d, 0xd2, 0x56, 0xf2, 0x93, 0x86, 0x9d, 0x36, 0xba, 0x72, 0xf3, 0x23, 0x6c,
		0x3b, 0x3c, 0x9c, 0x47, 0x16, 0xaa, 0x9a, 0xb3, 0xda, 0x83, 0xdd, 0xc5, 0x5a, 0x24, 0xdb, 0x63,
		0xf1, 0x46, 0xfd, 0xa9, 0x5e, 0x80, 0x0a, 0x8c, 0xd2, 0x0d, 0xe3, 0xbd, 0x48, 0xd0, 0x72, 0xd0
	]);
	signature = new Uint8Array([
		0x35, 0x9a, 0xc6, 0x73, 0x1f, 0xdb, 0x0c, 0x33, 0x60, 0xc8, 0xc2, 0x43, 0x11, 0xe4, 0x8e, 0x84,
		0xb2, 0xad, 0x4d, 0x1b, 0x19, 0x04, 0x10, 0x09, 0xe5, 0xfa, 0x2d, 0x6b, 0x94, 0xdd, 0xd8, 0x7d,
		0xc9, 0xbe, 0x92, 0x06, 0x63, 0x3f, 0xa8, 0x70, 0x59, 0xd1, 0x84, 0xdc, 0x58, 0x3b, 0x9f, 0x24,
		0xe6, 0x90, 0x9f, 0xd5, 0xa5, 0x33, 0xda, 0x78, 0xe1, 0x68, 0x7b, 0x1c, 0x01, 0xe4, 0xc5, 0xa5,
		0xd5, 0x8d, 0xe0, 0xae, 0xdb, 0xa5, 0xd7, 0xb1, 0x9b, 0x26, 0x89, 0x57, 0xc9, 0xe7, 0x9b, 0xb6,
		0x31, 0xbd, 0xbd, 0x42, 0x3e, 0x3a, 0x26, 0x7f, 0x9b, 0xa4, 0xa1, 0x26, 0x6e, 0x2c, 0x3a, 0xa8,
		0x09, 0x29, 0xe5, 0xf7, 0x26, 0x0a, 0xd9, 0x68, 0x1a, 0xf2, 0xeb, 0x2b, 0x89, 0x36, 0x59, 0x6e,
		0x3b, 0x16, 0x22, 0xe0, 0x76, 0xb8, 0xa3, 0x3d, 0xd8, 0x6d, 0xed, 0x2b, 0x06, 0x06, 0x0c, 0x8e,
		0x74, 0xb1, 0xfd, 0x0f, 0x2c, 0xa8, 0x8a, 0x8e, 0xfa, 0x3c, 0x46, 0x2b, 0x12, 0x27, 0xf8, 0xce,
		0xce, 0xe0, 0xf7, 0x7e, 0xf1, 0x76, 0x06, 0xc2, 0x18, 0xab, 0xfd, 0xdc, 0x8c, 0xfd, 0xf9, 0x90,
		0x10, 0x25, 0x24, 0xec, 0xff, 0x31, 0x18, 0xf8, 0x1b, 0x48, 0xad, 0xf2, 0x86, 0xd6, 0xb2, 0x1c,
		0xb8, 0xdd, 0x81, 0x5c, 0xc1, 0x23, 0x52, 0x89, 0xac, 0x15, 0xf6, 0xdb, 0xf4, 0x20, 0xdb, 0x9a,
		0x60, 0x8f, 0xf2, 0x66, 0x67, 0xd7, 0xc8, 0x0f, 0xd5, 0x61, 0x24, 0x74, 0x1b, 0xfc, 0xd4, 0x7b,
		0x42, 0xbd, 0xb0, 0xc1, 0x7d, 0x66, 0xbf, 0x45, 0xb2, 0xf8, 0x8d, 0x63, 0x3e, 0x19, 0x54, 0x17,
		0x2f, 0xf8, 0x08, 0xe7, 0x90, 0x4d, 0xb9, 0x6d, 0x33, 0x96, 0xfb, 0x9f, 0x7d, 0x0d, 0xa5, 0x74,
		0x2a, 0x93, 0x76, 0x91, 0xfc, 0xeb, 0x97, 0x89, 0x4a, 0xc6, 0x77, 0x4a, 0xa9, 0xda, 0xa7, 0xd1,
		0x8d, 0x88, 0x95, 0x43, 0xcf, 0x3a, 0x7a, 0xd9, 0x6d, 0x6a, 0x6e, 0x6f, 0xeb, 0x4e, 0xe1, 0x69,
		0x00, 0xad, 0x07, 0x0e, 0xcb, 0xcd, 0x16, 0x5b, 0xf8, 0x2f, 0xd0, 0x75, 0x04, 0x64, 0x78, 0xc4,
		0x2f, 0xe8, 0x58, 0x40, 0x23, 0x91, 0x0c, 0x32, 0x09, 0x01, 0xb2, 0x2f, 0x3a, 0x46, 0x90, 0x59,
		0x7f, 0xc7, 0x8b, 0x49, 0xcc, 0x2a, 0xca, 0x4e, 0x9b, 0x97, 0xbd, 0xe0, 0xe6, 0x9d, 0x62, 0xc9,
		0xfe, 0x1a, 0xd0, 0x7b, 0x5f, 0x09, 0x17, 0xe1, 0x75, 0xd0, 0x1f, 0x1f, 0xe5, 0xdb, 0xaf, 0x8a,
		0xbc, 0x3c, 0x71, 0xef, 0xbe, 0x0b, 0x55, 0xea, 0x48, 0xf2, 0x36, 0x01, 0xea, 0xa5, 0xc7, 0x0f,
		0xdc, 0x84, 0x1b, 0xe8, 0xd1, 0xb8, 0x9d, 0x01, 0xcb, 0x92, 0x2e, 0x9c, 0xe4, 0x40, 0x67, 0x47,
		0x11, 0x4f, 0xa0, 0x5f, 0x55, 0xc7, 0x39, 0x22, 0xfb, 0x28, 0xa4, 0x2c, 0x21, 0x38, 0xa5, 0xc6
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(false);

	e =
		0xcc92fn;
	message = new Uint8Array([
		0xd1, 0xac, 0xd4, 0xa6, 0x03, 0x5f, 0x23, 0xbf, 0xe6, 0x70, 0x06, 0x13, 0x2a, 0x1c, 0xd4, 0x74,
		0xef, 0x58, 0xc0, 0x11, 0x36, 0x70, 0xf5, 0x3c, 0x95, 0xee, 0xe5, 0x70, 0x30, 0xbd, 0xdd, 0x92,
		0xe4, 0x8e, 0xdd, 0x77, 0xc5, 0x7b, 0xa8, 0xa7, 0xcb, 0xea, 0x17, 0x60, 0xc8, 0xb5, 0xb2, 0xde,
		0x9d, 0x88, 0x81, 0xda, 0xae, 0x8a, 0x20, 0x51, 0x93, 0x3f, 0x12, 0x86, 0x11, 0xad, 0x57, 0x4a,
		0x48, 0xbd, 0x41, 0x7b, 0x2d, 0xe5, 0x83, 0xcb, 0x3b, 0x04, 0x8b, 0xc2, 0x66, 0x8d, 0x12, 0x07,
		0x51, 0xe8, 0xf1, 0xdb, 0xc0, 0x15, 0x36, 0xe6, 0x50, 0x93, 0x77, 0x36, 0x66, 0x80, 0x66, 0x85,
		0x65, 0x01, 0xa6, 0xba, 0x24, 0xe4, 0xdd, 0xb3, 0x9f, 0x84, 0x0b, 0x42, 0xec, 0xed, 0x1a, 0x75,
		0x71, 0x41, 0xb6, 0x1b, 0x55, 0x5b, 0x5e, 0x83, 0x34, 0xb1, 0xbb, 0x87, 0x17, 0x7f, 0x31, 0xc9
	]);
	signature = new Uint8Array([
		0x55, 0x61, 0x3f, 0x64, 0x33, 0x1a, 0xbd, 0x97, 0x1e, 0x82, 0x2c, 0xc3, 0xd9, 0x72, 0xf6, 0x7e,
		0x78, 0x2b, 0x6a, 0xf8, 0x1a, 0xac, 0x0b, 0x80, 0xe2, 0xf6, 0x32, 0x4d, 0xa6, 0xd9, 0xf3, 0x3c,
		0x46, 0xf8, 0xb7, 0xe2, 0x4c, 0x94, 0xde, 0xee, 0x7e, 0x98, 0x52, 0x5a, 0xaf, 0x4c, 0xa6, 0x84,
		0x37, 0x53, 0xdf, 0x3d, 0x44, 0x4e, 0x1e, 0x05, 0x40, 0xf9, 0xc1, 0x96, 0xff, 0xbb, 0xcb, 0x4f,
		0xca, 0x7a, 0xad, 0x4b, 0xa9, 0x42, 0x88, 0xf9, 0x11, 0x65, 0x0e, 0x3c, 0xaf, 0x6d, 0xd2, 0x2f,
		0x87, 0x92, 0x3f, 0xa4, 0xb1, 0x2e, 0x2d, 0x6b, 0x11, 0x5f, 0x2f, 0xe7, 0x73, 0xaf, 0x25, 0x63,
		0xcc, 0x76, 0x0d, 0xe8, 0x8c, 0xfa, 0x6e, 0x16, 0x87, 0x8d, 0xd9, 0xc0, 0x7f, 0x0d, 0x45, 0xb1,
		0x0a, 0x22, 0x4d, 0x1a, 0x7e, 0xe1, 0xd2, 0x6f, 0xfa, 0xdf, 0xd3, 0x8b, 0x78, 0x00, 0x4a, 0x20,
		0x45, 0xb3, 0x5d, 0x9c, 0xb9, 0xfc, 0xcd, 0xc7, 0x15, 0x66, 0x8a, 0x74, 0x01, 0xdb, 0x7a, 0xde,
		0xf1, 0x09, 0xeb, 0xca, 0xaf, 0xc5, 0x26, 0x9d, 0x37, 0x7c, 0x1e, 0x8f, 0x7d, 0x42, 0x92, 0x45,
		0x9c, 0x80, 0x1a, 0x93, 0xc4, 0xd0, 0x7e, 0xf4, 0x77, 0xf8, 0x71, 0x75, 0xaa, 0x35, 0xe0, 0x02,
		0xa0, 0x3c, 0x20, 0x51, 0x98, 0x5f, 0xcb, 0x69, 0x63, 0xe9, 0xbf, 0x96, 0xe2, 0x8e, 0x55, 0xeb,
		0x52, 0xa3, 0x55, 0x44, 0x75, 0xf9, 0x09, 0x5f, 0x24, 0xa9, 0xe4, 0x22, 0xfa, 0x84, 0xb6, 0x05,
		0x90, 0xe8, 0xb8, 0xd6, 0xec, 0x91, 0xdc, 0xf6, 0xa5, 0x84, 0xcc, 0x8a, 0x93, 0x4e, 0x55, 0x1b,
		0xef, 0xee, 0xdc, 0x0f, 0x0f, 0x48, 0xda, 0xdf, 0x29, 0x3f, 0x0f, 0x92, 0x60, 0xee, 0x22, 0xd7,
		0x2e, 0xa4, 0x6e, 0x27, 0x10, 0x45, 0xb6, 0x65, 0x16, 0xb2, 0xbe, 0xbe, 0xed, 0x52, 0x72, 0x2a,
		0xec, 0x5f, 0x08, 0x40, 0x85, 0xf8, 0xfa, 0xa6, 0x89, 0x30, 0x8b, 0xc1, 0x3f, 0xa5, 0xb9, 0xe5,
		0xb0, 0xaa, 0xdf, 0x27, 0x66, 0x25, 0x8e, 0x01, 0xd4, 0xb8, 0xdd, 0xbe, 0x0d, 0x32, 0x8a, 0xa1,
		0x12, 0x23, 0x7e, 0xc1, 0x0b, 0x11, 0x5b, 0xe8, 0x3f, 0xae, 0x8a, 0x01, 0x13, 0xf8, 0x89, 0x0e,
		0xda, 0xb7, 0x9d, 0x04, 0x63, 0xc9, 0xec, 0x6e, 0x2d, 0xb4, 0x50, 0x46, 0x93, 0x53, 0x5d, 0xcf,
		0x76, 0x95, 0xf8, 0x44, 0x25, 0xe9, 0xf7, 0xb7, 0x3e, 0x4f, 0x18, 0xbc, 0x07, 0x2f, 0x51, 0x31,
		0x98, 0x9b, 0x0c, 0xdb, 0x07, 0xf4, 0x96, 0xf1, 0x5e, 0x56, 0x2d, 0x07, 0xf0, 0x71, 0x1c, 0xf9,
		0x79, 0xf1, 0xaa, 0x4d, 0x14, 0x0d, 0x97, 0x83, 0xef, 0xd6, 0xf9, 0x6c, 0x41, 0xfe, 0x5f, 0xb7,
		0x9e, 0x5d, 0x5d, 0x68, 0x9d, 0xd5, 0xa7, 0x05, 0xf1, 0xff, 0x83, 0x77, 0x54, 0x03, 0x1a, 0x39
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA256, SHA256, saltLength, message, signature)
	).toBe(true);

	n =
		0xa458e38be5e581c433d88dfe24e7e1bd0713bde19fd7dcd794b4fc97ac6546fe7874ab10783407221aa6a526de912097761a1f0a10166cb368f5af6a60a944493173f9d9e04a9061109131de32ddb21f06c571ea83aa42d9c172d0ccb79fd0bc421dca68179ab6329d0af92b8d2caadeeff6c0a46a6bccdbdc46e7afdfb6dd8b1c20695837cff9a153b5ad8b6fc0344006c3916aad0f6f19d84fe8b93bd6627331283c090a7096af3139c714fa1045ce449ac953d7068db92ecd2b687b0902509cb5ac0bcd16c9751afc847d0164f5add3c038efb41e7ba5fdf8567446aea2c9d7252320e5503ff0ff236871541c2590a5d4c1ba9a315f885d732fbe15c2f5bd5d70b158fc33e30a44b25cf56ff600003369a935c2e017a3984593b2beaaf9af0e6a5c9d19bde051ef1fc5bcd63391488f410e8a97cda45bdd9233e8401b5f5fea4b55d091605700a903615c5f8b6c18281b5f3d77b85f087822ae5ea14ca26795504abd011f42de239f3170afda6ddf17f69470d46034aae629f8ae2f9d0d61n;
	e =
		0xe59685n;
	message = new Uint8Array([
		0x6e, 0xc1, 0x91, 0x3b, 0x9a, 0x55, 0xcf, 0xce, 0x3b, 0xaa, 0x6a, 0x74, 0x24, 0x98, 0xe6, 0x71,
		0x21, 0x09, 0x94, 0x9f, 0x2e, 0x5e, 0x66, 0xfa, 0xe7, 0x0e, 0x01, 0x62, 0x40, 0x90, 0x14, 0x9d,
		0x76, 0x7c, 0xe8, 0x9c, 0x46, 0xed, 0x39, 0xff, 0x5c, 0x29, 0x45, 0xdb, 0x0e, 0x84, 0x22, 0xba,
		0x4a, 0x81, 0x54, 0xe3, 0xcd, 0x3b, 0x9f, 0xdc, 0x96, 0x03, 0x1a, 0x2e, 0x9b, 0x4b, 0x85, 0x68,
		0xba, 0xc3, 0xdc, 0x66, 0xf2, 0xc1, 0x2c, 0xd3, 0xd3, 0xe6, 0xa6, 0xed, 0x33, 0xff, 0xf2, 0x88,
		0x23, 0x29, 0xc6, 0x56, 0x22, 0x39, 0xb6, 0x65, 0x90, 0x5a, 0x4e, 0xe9, 0x65, 0xf8, 0x5e, 0x3c,
		0x22, 0xdd, 0x95, 0x23, 0x08, 0x9a, 0x51, 0x53, 0x88, 0x29, 0xb6, 0x34, 0xfc, 0xd0, 0xfe, 0xe4,
		0x94, 0x48, 0x0f, 0x7f, 0x93, 0x1f, 0x53, 0x9e, 0xbb, 0x5b, 0xc4, 0x1d, 0x05, 0x60, 0x46, 0x22
	]);
	signature = new Uint8Array([
		0x1f, 0xdb, 0x03, 0xe4, 0x4e, 0x04, 0xd5, 0x82, 0x37, 0x51, 0xc2, 0x9f, 0x44, 0x04, 0xde, 0x68,
		0x59, 0xed, 0x5a, 0xd1, 0xfd, 0x79, 0x42, 0xc6, 0x38, 0x74, 0x94, 0x32, 0x7b, 0x3f, 0xcc, 0xb9,
		0x8d, 0x66, 0x2b, 0xd6, 0x31, 0x1e, 0xdc, 0x0b, 0xf4, 0x9c, 0xb4, 0xd1, 0x01, 0x4c, 0x6f, 0x2f,
		0xed, 0x8b, 0x52, 0x38, 0x49, 0x3b, 0xb4, 0xdb, 0x23, 0x58, 0x0f, 0x10, 0x76, 0x37, 0x07, 0x41,
		0x4e, 0x3c, 0x87, 0xa6, 0x63, 0xd6, 0x64, 0xca, 0xe7, 0x1b, 0xb0, 0x0c, 0x25, 0x96, 0xb2, 0x51,
		0x5d, 0x71, 0x1f, 0x10, 0x87, 0x12, 0x56, 0x70, 0xe2, 0xc5, 0x8f, 0x7a, 0xe5, 0x76, 0x86, 0xf8,
		0x2d, 0xa4, 0x09, 0xc7, 0x97, 0x18, 0xd9, 0x42, 0xfa, 0x05, 0x54, 0x55, 0x18, 0x05, 0x5a, 0x25,
		0x6e, 0x00, 0x7e, 0xf7, 0x61, 0xd4, 0xac, 0xc3, 0x39, 0x84, 0xa6, 0x29, 0xed, 0x54, 0x80, 0x05,
		0xac, 0xfd, 0x79, 0xe0, 0xcf, 0x15, 0x13, 0x76, 0x79, 0x8e, 0xad, 0xcf, 0x97, 0x87, 0x29, 0xa3,
		0xe1, 0x8b, 0x96, 0x03, 0xb7, 0x69, 0x3e, 0x1c, 0x92, 0x3c, 0xb8, 0x6b, 0x52, 0x19, 0x9a, 0x36,
		0x0c, 0x88, 0xe9, 0xec, 0x53, 0x03, 0xaf, 0xa6, 0xe6, 0x0e, 0x47, 0xf4, 0x57, 0x19, 0xe9, 0x3c,
		0xf2, 0xe7, 0xa5, 0x35, 0x30, 0xb9, 0xc9, 0xa2, 0xab, 0x3b, 0x2c, 0x8b, 0x5d, 0x7d, 0x6d, 0x79,
		0x71, 0x44, 0x5c, 0x8a, 0x14, 0x94, 0xbc, 0x36, 0x36, 0x3a, 0xd5, 0x8a, 0x1c, 0x1f, 0x4b, 0xfb,
		0x86, 0x53, 0x4c, 0xd8, 0x4b, 0xe7, 0x78, 0xff, 0x4e, 0xf4, 0xa4, 0x10, 0xa7, 0x3c, 0x19d, 0x0e,
		0xa3, 0x27, 0xd3, 0x05, 0x48, 0x97, 0x7f, 0x23, 0x37, 0xa7, 0x46, 0x41, 0xac, 0xe9, 0x2c, 0x74,
		0x9e, 0xcd, 0x54, 0xaf, 0x20, 0x7c, 0x4b, 0xc2, 0x9d, 0x44, 0x6e, 0xdd, 0xc1, 0x73, 0x93, 0x4b,
		0xcd, 0x3e, 0x99, 0x8d, 0xa6, 0x43, 0x26, 0x12, 0x75, 0xb1, 0x55, 0x60, 0x63, 0xdd, 0x5c, 0x18,
		0x21, 0xc4, 0x3c, 0xf2, 0xbe, 0xf3, 0x6e, 0xef, 0x66, 0xe5, 0x14, 0xd7, 0x24, 0x62, 0x04, 0x3f,
		0xac, 0x5d, 0x56, 0x8d, 0x1b, 0xe6, 0xd5, 0x7e, 0x49, 0xf4, 0x0f, 0x30, 0xbe, 0x88, 0xc7, 0xb4,
		0x38, 0x9c, 0xec, 0x09, 0x0e, 0xd9, 0x54, 0xf4, 0x8f, 0xe4, 0x8a, 0xa2, 0x6b, 0xa3, 0x9d, 0xd7,
		0x39, 0xc2, 0xd0, 0x09, 0x7f, 0xd3, 0x13, 0x30, 0x34, 0x43, 0x51, 0xa3, 0xe9, 0x41, 0xbd, 0x63,
		0x39, 0x52, 0xce, 0x99, 0x03, 0x9e, 0x31, 0x05, 0x60, 0x97, 0xd0, 0x0a, 0xef, 0x49, 0x21, 0x8c,
		0x25, 0x89, 0x21, 0x2b, 0x44, 0xbd, 0xb1, 0x2b, 0x6e, 0xdb, 0x68, 0xc7, 0x84, 0xb8, 0xf7, 0x89,
		0xf3, 0x70, 0x99, 0x9f, 0x71, 0xee, 0xd9, 0xc0, 0x4d, 0x6d, 0xd2, 0xd4, 0xd0, 0x72, 0x3d, 0x2e
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xe59685n;
	message = new Uint8Array([
		0xf6, 0xf4, 0x7d, 0x4b, 0xd1, 0xda, 0x9f, 0x9f, 0xe5, 0xb0, 0x2b, 0x18, 0x67, 0xa3, 0x23, 0xfb,
		0x96, 0xc9, 0xd6, 0xb1, 0x4c, 0x65, 0x0f, 0x25, 0xd3, 0x66, 0x8c, 0x6e, 0xf9, 0x30, 0xb1, 0xae,
		0x67, 0x9f, 0x7e, 0x3a, 0x2e, 0x49, 0xbf, 0xfb, 0xa3, 0x04, 0x82, 0x14, 0x6d, 0xa9, 0xce, 0xc4,
		0xdc, 0x17, 0x92, 0x8e, 0x7d, 0x7a, 0xdc, 0x98, 0xeb, 0xcd, 0x4b, 0x52, 0xe7, 0x9d, 0xc7, 0x57,
		0xab, 0x10, 0x6f, 0x98, 0x7c, 0x27, 0xd3, 0xb7, 0x7f, 0x40, 0x64, 0xb1, 0xcd, 0xdf, 0x29, 0xc0,
		0xc9, 0xad, 0xb3, 0x80, 0xb2, 0xc1, 0x52, 0x50, 0x74, 0x1f, 0x89, 0xfb, 0xc4, 0x7e, 0xc0, 0x98,
		0x6b, 0x4f, 0x39, 0xae, 0xe2, 0xfa, 0x45, 0x9c, 0x20, 0x6b, 0xb8, 0x38, 0xb0, 0xcd, 0x9a, 0xb7,
		0x06, 0x95, 0x1f, 0xcd, 0x13, 0xc3, 0xd9, 0x14, 0x17, 0x64, 0x2d, 0xb2, 0xb7, 0x5c, 0x04, 0x37
	]);
	signature = new Uint8Array([
		0x55, 0x92, 0x79, 0x84, 0x37, 0xc8, 0xc3, 0xa7, 0xf2, 0xd0, 0x2b, 0x41, 0x89, 0x1b, 0x25, 0xd9,
		0xb8, 0x1c, 0x8b, 0xd6, 0x3a, 0x7e, 0x53, 0x94, 0x77, 0xa9, 0xa9, 0x95, 0xf1, 0x94, 0x38, 0xaf,
		0x7c, 0xad, 0x25, 0x64, 0x5e, 0xc9, 0x08, 0xd3, 0xfc, 0x00, 0xff, 0x47, 0xa7, 0xd2, 0x14, 0x22,
		0x41, 0x24, 0x1a, 0x90, 0xba, 0x74, 0x2e, 0xef, 0xf3, 0xb2, 0x88, 0x89, 0xb8, 0x02, 0x09, 0xd3,
		0x0e, 0x3a, 0x61, 0x00, 0x07, 0xe6, 0x46, 0x95, 0x4b, 0xc7, 0x8e, 0xc5, 0xc8, 0x01, 0x64, 0x21,
		0xeb, 0xe7, 0xbb, 0xab, 0xc7, 0xf6, 0x5a, 0xa0, 0x29, 0x10, 0x5c, 0x2c, 0x1f, 0x12, 0xfe, 0xdf,
		0xcc, 0x9d, 0x57, 0x86, 0x4c, 0x55, 0x26, 0x01, 0x85, 0x43, 0xc9, 0xde, 0x3f, 0xac, 0x3a, 0xb8,
		0x0f, 0xd9, 0xc7, 0xcf, 0xde, 0x71, 0x9c, 0x79, 0xa6, 0x3f, 0x94, 0xf8, 0x13, 0xf8, 0x69, 0x11,
		0xe2, 0x1b, 0x6d, 0xe2, 0x3a, 0xae, 0x07, 0xe7, 0x7f, 0x13, 0x90, 0x5a, 0xf8, 0xf1, 0x18, 0xb5,
		0x3b, 0xfb, 0x5c, 0x7c, 0x64, 0x22, 0x5f, 0x2f, 0x12, 0xd0, 0xf1, 0x6b, 0x82, 0xd6, 0xc1, 0x84,
		0x50, 0xdf, 0x65, 0x51, 0x76, 0xb1, 0xf4, 0xb8, 0x04, 0xaf, 0x1c, 0xf2, 0x66, 0x64, 0x0f, 0x7b,
		0x85, 0x5e, 0x2b, 0x63, 0xda, 0xd7, 0xee, 0x4e, 0xbc, 0xa6, 0x3c, 0x45, 0x0b, 0x66, 0x79, 0x0c,
		0x18, 0x45, 0xc4, 0x84, 0xfb, 0x2b, 0xcd, 0x73, 0xee, 0xde, 0x97, 0xb8, 0xb7, 0x22, 0xa9, 0x63,
		0x87, 0xcf, 0xe4, 0xf2, 0xfd, 0xcd, 0x50, 0xe3, 0x5b, 0x4e, 0x7d, 0xe2, 0x9b, 0xc2, 0x80, 0x94,
		0xd7, 0x91, 0x5f, 0x0a, 0x56, 0x67, 0x3d, 0x66, 0x88, 0x58, 0xef, 0x90, 0xa5, 0x8f, 0xa7, 0x69,
		0x93, 0xba, 0x38, 0x61, 0xd7, 0x3c, 0x10, 0xa8, 0xd3, 0x7a, 0x88, 0x19, 0x0a, 0xc4, 0xa9, 0x95,
		0x89, 0x27, 0x9b, 0x31, 0xd1, 0x56, 0x75, 0x0c, 0x27, 0x5b, 0x02, 0x5e, 0x78, 0x66, 0xe6, 0x9e,
		0x79, 0x6c, 0x03, 0x76, 0x29, 0xc4, 0xd1, 0x54, 0xb0, 0xf0, 0x43, 0x5a, 0x99, 0xaf, 0x88, 0x47,
		0xd6, 0xcb, 0xae, 0x07, 0x3b, 0x01, 0x96, 0x5e, 0x7a, 0xe3, 0xa0, 0xff, 0x31, 0x23, 0xd8, 0x1e,
		0x0e, 0xc0, 0x38, 0x58, 0x82, 0x4a, 0x3c, 0xac, 0x04, 0xa9, 0xc3, 0x4e, 0x95, 0x98, 0x9f, 0xd5,
		0xc8, 0x2d, 0x89, 0xff, 0x40, 0xaa, 0x3c, 0xae, 0x21, 0xe0, 0x4c, 0x68, 0xd3, 0x44, 0xee, 0xd7,
		0xbd, 0xd6, 0x1c, 0xa9, 0x2e, 0xf1, 0xc4, 0x2a, 0xe4, 0x0b, 0x92, 0xa6, 0x6c, 0x55, 0xe4, 0x1c,
		0x0d, 0x88, 0x02, 0xac, 0xc4, 0xd2, 0x26, 0xd0, 0xd6, 0x84, 0xfb, 0xb2, 0xf7, 0x37, 0x07, 0x51,
		0xba, 0xbb, 0x97, 0x4c, 0x3d, 0xd3, 0xdf, 0xcd, 0x6e, 0x34, 0x8a, 0x2c, 0x22, 0xe0, 0x06, 0xe8
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(true);

	e =
		0xe59685n;
	message = new Uint8Array([
		0x89, 0x00, 0x86, 0x23, 0xeb, 0x28, 0x64, 0xcc, 0x6d, 0x69, 0x8b, 0xd7, 0x07, 0xad, 0xce, 0x22,
		0x2f, 0x5e, 0x7f, 0x02, 0xf1, 0x28, 0x28, 0x2d, 0x42, 0x01, 0x7b, 0xd8, 0x92, 0x67, 0x8c, 0x1c,
		0xa0, 0xe9, 0x3e, 0x9e, 0x92, 0xe9, 0xfb, 0x6f, 0x45, 0xa0, 0xa9, 0x31, 0xe2, 0x63, 0xd9, 0x7c,
		0xb2, 0x24, 0x41, 0x80, 0x33, 0x3b, 0x6c, 0xeb, 0x6b, 0x67, 0xb0, 0x0d, 0x7c, 0x0f, 0x61, 0x39,
		0x79, 0xce, 0x44, 0x6f, 0x78, 0x2f, 0x46, 0x39, 0xe8, 0xb5, 0x6e, 0xd3, 0x25, 0x1f, 0x11, 0x8e,
		0x4a, 0xe9, 0x45, 0x76, 0x47, 0x16, 0x97, 0x33, 0x33, 0x2d, 0x01, 0x2d, 0xe3, 0x82, 0x16, 0xf4,
		0xbb, 0xb6, 0x80, 0xde, 0xc4, 0x81, 0xac, 0xf2, 0xff, 0xaf, 0xc4, 0x04, 0xf9, 0x69, 0xde, 0x22,
		0xa0, 0xb6, 0x73, 0x2f, 0x55, 0x42, 0x12, 0xce, 0x42, 0x5d, 0x55, 0x82, 0xee, 0x46, 0x15, 0x13
	]);
	signature = new Uint8Array([
		0x52, 0xc0, 0x68, 0xfd, 0x97, 0xc3, 0x71, 0xbf, 0x7a, 0xd0, 0x59, 0x31, 0x02, 0x86, 0xd0, 0x99,
		0xe9, 0xe1, 0x48, 0x6d, 0x6b, 0xdd, 0x9a, 0xa3, 0x24, 0xa5, 0x10, 0x19, 0xaf, 0xbc, 0x5b, 0x50,
		0x2f, 0x1b, 0x9f, 0x2f, 0xec, 0xb2, 0x35, 0x60, 0xb7, 0xa4, 0x14, 0xd0, 0xe9, 0xe6, 0xfc, 0xa6,
		0x9f, 0x4c, 0xac, 0xdb, 0x52, 0x28, 0x72, 0x8c, 0x77, 0xe7, 0x65, 0x91, 0x39, 0xba, 0x2d, 0xe3,
		0x8f, 0xd7, 0x4b, 0x98, 0xf7, 0xd7, 0x0a, 0xb4, 0xcf, 0x61, 0x65, 0x5b, 0x84, 0xbe, 0x14, 0x73,
		0xdb, 0x8b, 0x29, 0x56, 0x3f, 0x2a, 0xd0, 0x53, 0xa8, 0x93, 0x69, 0xbb, 0x58, 0x58, 0x88, 0x74,
		0xd8, 0xd4, 0x9d, 0xac, 0x78, 0xa4, 0x2c, 0x0a, 0xb7, 0x8d, 0x5d, 0xc7, 0x39, 0x90, 0x1b, 0x91,
		0x06, 0xdd, 0xa5, 0x3c, 0x67, 0x0c, 0x2e, 0x0e, 0xf4, 0x7a, 0x45, 0x52, 0x2a, 0xf0, 0xe3, 0xea,
		0x7d, 0x58, 0x4c, 0x6d, 0x1b, 0x78, 0x24, 0x69, 0xcb, 0x7e, 0x86, 0xb0, 0xdf, 0x2e, 0xa6, 0x7d,
		0x50, 0xac, 0x4d, 0xd4, 0x91, 0xe5, 0x24, 0x89, 0x74, 0xbb, 0xc3, 0xca, 0xa5, 0x52, 0x3d, 0xa1,
		0x80, 0x9f, 0x93, 0x65, 0x67, 0x06, 0xb7, 0x2f, 0x9d, 0x7d, 0x17, 0xca, 0x19, 0xd3, 0xee, 0x4c,
		0xa5, 0x94, 0x2f, 0x9f, 0x5d, 0xa1, 0x6d, 0xb8, 0xc2, 0x5a, 0xaf, 0x91, 0x1d, 0x85, 0xb6, 0xc3,
		0x00, 0x66, 0xd4, 0x2b, 0x7c, 0xc6, 0xbf, 0x33, 0x67, 0x23, 0x23, 0x17, 0x79, 0x94, 0xb9, 0x59,
		0x32, 0xc2, 0x24, 0xa8, 0x7a, 0x3b, 0x15, 0xc7, 0xa7, 0x4b, 0xea, 0xd0, 0x4c, 0xa4, 0x32, 0xe9,
		0x33, 0xca, 0x26, 0xaf, 0x16, 0x77, 0xe3, 0xfc, 0xd6, 0x7c, 0x3a, 0xd3, 0x19, 0x6a, 0xed, 0x83,
		0x19, 0xbf, 0xda, 0x46, 0x8b, 0x75, 0x3d, 0xb2, 0x89, 0xf6, 0x00, 0x99, 0x72, 0xfe, 0x0a, 0xc3,
		0x4e, 0x7c, 0xc2, 0xc0, 0xc9, 0x83, 0x35, 0x34, 0xa8, 0x8e, 0x79, 0xa6, 0xba, 0x71, 0x77, 0xcc,
		0xfe, 0xe0, 0x01, 0x2f, 0x17, 0x4e, 0x7e, 0x63, 0xe6, 0x3b, 0x8e, 0x9f, 0x6b, 0xd2, 0x41, 0x33,
		0xb2, 0x68, 0x58, 0x43, 0xac, 0x90, 0xaa, 0x83, 0xef, 0x81, 0xb4, 0x21, 0xa2, 0x02, 0x75, 0x8b,
		0xa4, 0x8c, 0xd9, 0x5c, 0x46, 0xb5, 0x21, 0x92, 0xbf, 0xa5, 0x22, 0x42, 0xbb, 0x65, 0xa0, 0x0a,
		0x21, 0xe7, 0x2f, 0x73, 0xa5, 0xa8, 0xf3, 0x10, 0x0c, 0x5f, 0x8d, 0x5f, 0xcb, 0xc4, 0xa5, 0xd3,
		0xab, 0x17, 0xa2, 0xbd, 0x7c, 0xef, 0xc2, 0x31, 0x26, 0xf9, 0x3c, 0xdd, 0xbf, 0x57, 0x5f, 0x22,
		0xe0, 0x3c, 0x7b, 0x7c, 0x2e, 0x50, 0x86, 0x99, 0x2f, 0x71, 0x2b, 0xdb, 0xfd, 0x15, 0x5b, 0x07,
		0xd0, 0x59, 0x70, 0xd8, 0xe5, 0x6c, 0x8d, 0xa3, 0x99, 0xde, 0xfe, 0x06, 0x1a, 0x56, 0x30, 0x36
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xfcbddn;
	message = new Uint8Array([
		0x6c, 0xff, 0xa1, 0x58, 0x53, 0x31, 0x94, 0x21, 0x4a, 0x91, 0xe7, 0x12, 0xfc, 0x2b, 0x45, 0xb5,
		0x18, 0x07, 0x66, 0x75, 0xaf, 0xfd, 0x91, 0x0e, 0xde, 0xca, 0x5f, 0x41, 0xac, 0x64, 0xc1, 0xcc,
		0x35, 0x8b, 0x44, 0x99, 0x09, 0xa1, 0x94, 0x36, 0xcf, 0xbb, 0x3f, 0x85, 0x2e, 0xf8, 0xbc, 0xb5,
		0xed, 0x12, 0xac, 0x70, 0x58, 0x32, 0x5f, 0x56, 0xe6, 0x09, 0x9a, 0xab, 0x1a, 0x1c, 0x98, 0x4c,
		0xa7, 0x5f, 0x4e, 0xe8, 0xd7, 0x06, 0xf4, 0x6c, 0x2d, 0x98, 0xc0, 0xbf, 0x4a, 0x45, 0xf5, 0xb0,
		0x0d, 0x79, 0x1c, 0x2d, 0xfe, 0xb1, 0x91, 0xb5, 0xed, 0x8e, 0x42, 0x0f, 0xd6, 0x27, 0xb4, 0x3d,
		0x08, 0xa4, 0x47, 0xac, 0x86, 0x09, 0xba, 0xad, 0xae, 0x4f, 0xf1, 0x29, 0x18, 0xb9, 0xf6, 0x8f,
		0xc1, 0x65, 0x3f, 0x12, 0x69, 0x22, 0x2f, 0x12, 0x39, 0x81, 0xde, 0xd7, 0xa9, 0x2f, 0x1d, 0x85
	]);
	signature = new Uint8Array([
		0x8f, 0xde, 0x6a, 0x6c, 0x31, 0x4b, 0x86, 0xef, 0x91, 0x8a, 0xe2, 0xd2, 0xad, 0xf6, 0x8f, 0x85,
		0xe3, 0x30, 0xa8, 0xa1, 0xe3, 0x48, 0x6b, 0xb3, 0x00, 0x3f, 0xab, 0x3a, 0x52, 0x01, 0x70, 0x96,
		0xeb, 0xe0, 0x00, 0xa4, 0xa7, 0xe8, 0xd0, 0x5d, 0xf6, 0xfa, 0xfc, 0xf4, 0xb0, 0x19, 0x40, 0xf5,
		0xe3, 0x22, 0xb7, 0xc6, 0x4a, 0x7f, 0xb5, 0x94, 0x9a, 0x6e, 0xb3, 0x56, 0xe9, 0x05, 0xc9, 0x6c,
		0x6a, 0xbd, 0x9e, 0xf1, 0x8b, 0x4e, 0xa9, 0xfc, 0xc3, 0x83, 0x6d, 0xbf, 0x6b, 0x24, 0x97, 0x9b,
		0x9e, 0x6f, 0xa6, 0x78, 0x5e, 0x09, 0xdb, 0x54, 0x0c, 0x07, 0x9a, 0x0e, 0x97, 0xd3, 0xad, 0xec,
		0xf6, 0x15, 0x8d, 0xe9, 0x75, 0x0d, 0xf9, 0x59, 0x8a, 0xe8, 0xe7, 0x08, 0x51, 0x40, 0x32, 0x8c,
		0x50, 0xbe, 0xb0, 0x9f, 0xf3, 0x7e, 0x10, 0xf7, 0xfb, 0x11, 0x69, 0x13, 0x16, 0xdb, 0x25, 0x5b,
		0x6e, 0x9b, 0xe0, 0x21, 0xbe, 0xc7, 0xb0, 0xa9, 0x67, 0x58, 0x9f, 0x63, 0xd6, 0xdd, 0x7a, 0x43,
		0xaa, 0x09, 0x01, 0xcc, 0x83, 0xb8, 0xa8, 0x95, 0x45, 0x42, 0xa4, 0x12, 0x84, 0xf2, 0xfc, 0x38,
		0x1c, 0xb5, 0xa6, 0xeb, 0x36, 0x25, 0x09, 0x9c, 0x91, 0x1b, 0xcb, 0xb4, 0x21, 0xb3, 0x5a, 0x70,
		0xef, 0x52, 0x75, 0xf2, 0x74, 0x4e, 0xad, 0x18, 0x13, 0x87, 0x3f, 0x1d, 0x03, 0x33, 0x06, 0x0d,
		0x9c, 0xf2, 0xff, 0xce, 0xe8, 0x88, 0x33, 0x5b, 0x0a, 0xed, 0x24, 0x28, 0x36, 0x23, 0x58, 0xf7,
		0xd1, 0xaa, 0xb3, 0x4f, 0xff, 0xc1, 0x1f, 0x27, 0xab, 0x3c, 0xfb, 0x8b, 0x53, 0x90, 0xe7, 0xdf,
		0xde, 0x1f, 0xdd, 0x33, 0xf2, 0xa8, 0xb8, 0x17, 0x1d, 0x86, 0x5b, 0xf4, 0x0a, 0x8d, 0xf7, 0x83,
		0xe2, 0x16, 0x11, 0x2b, 0x4d, 0x41, 0x6b, 0x31, 0xf3, 0x3c, 0xdd, 0x8c, 0x90, 0x51, 0x33, 0x55,
		0x7b, 0x07, 0x4c, 0xff, 0xaa, 0x14, 0xc7, 0x3c, 0x08, 0x7e, 0x69, 0x90, 0xc9, 0xbb, 0x7a, 0x36,
		0x99, 0x84, 0x59, 0xe4, 0x75, 0x8a, 0xb0, 0x7c, 0x85, 0xd2, 0x60, 0x84, 0x9c, 0x0b, 0xe3, 0x74,
		0xa9, 0x9f, 0x3b, 0x8b, 0x23, 0xb9, 0x7f, 0xa5, 0xc9, 0xdd, 0x62, 0x06, 0xed, 0x21, 0xe2, 0xbc,
		0x54, 0xfc, 0x25, 0x6e, 0x08, 0x08, 0x56, 0xc3, 0x59, 0x97, 0x72, 0xb0, 0x0c, 0x4c, 0x57, 0x99,
		0xda, 0xed, 0xb1, 0xa6, 0x67, 0x46, 0x25, 0x02, 0x9d, 0xa3, 0xe1, 0x7c, 0xe7, 0x33, 0x65, 0x67,
		0x5c, 0x5f, 0x3a, 0x71, 0x39, 0x8f, 0x4a, 0x0c, 0x4f, 0x60, 0x9d, 0x4f, 0x40, 0x16, 0xf5, 0x54,
		0xcb, 0x24, 0x24, 0xe1, 0x9c, 0x35, 0xca, 0x2b, 0x06, 0x49, 0xa2, 0x10, 0xed, 0xcb, 0x6e, 0xca,
		0x7a, 0xc2, 0xb3, 0x1f, 0xff, 0xf1, 0x75, 0xb2, 0x5d, 0x77, 0xb2, 0x69, 0x33, 0xe5, 0x27, 0x87
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xe59685n;
	message = new Uint8Array([
		0x46, 0x21, 0xb1, 0x7c, 0xd9, 0xf5, 0xb6, 0x23, 0xfe, 0x73, 0xb5, 0xfe, 0x28, 0x0c, 0xe9, 0xac,
		0x84, 0x08, 0x05, 0x60, 0x8a, 0xcd, 0x6e, 0x41, 0xd5, 0x5e, 0xa7, 0x11, 0x32, 0x22, 0x0c, 0x0d,
		0xf7, 0xe7, 0xc4, 0x15, 0x96, 0x26, 0xf1, 0x0d, 0x71, 0x88, 0x29, 0x83, 0xf0, 0xaa, 0x2a, 0x92,
		0xd1, 0x1d, 0xc9, 0x06, 0xc0, 0xb2, 0x2c, 0xc0, 0x28, 0xf4, 0x39, 0x5d, 0x48, 0xf5, 0x4e, 0x12,
		0x89, 0x4e, 0x33, 0xda, 0x0f, 0x61, 0x4d, 0xd4, 0x8e, 0xe1, 0x14, 0xe6, 0x5f, 0x95, 0xc7, 0xa7,
		0xd3, 0x58, 0x5e, 0x7c, 0xc7, 0x65, 0xc0, 0x01, 0x78, 0xd1, 0x36, 0xaa, 0x99, 0x59, 0x1f, 0xaa,
		0xa3, 0x5e, 0xe6, 0x13, 0x6d, 0x2e, 0x32, 0x3f, 0xfc, 0x85, 0x5c, 0x70, 0x9c, 0x54, 0x26, 0xb3,
		0x2f, 0xc0, 0xaa, 0x0a, 0xc6, 0x6e, 0x90, 0xc9, 0x6e, 0xfe, 0x84, 0x41, 0x4d, 0xd5, 0xe7, 0x9c
	]);
	signature = new Uint8Array([
		0x33, 0xbb, 0x9a, 0xff, 0xe1, 0x87, 0x23, 0x76, 0x7e, 0xe3, 0x4d, 0x8e, 0x40, 0x98, 0x2c, 0x73,
		0x50, 0x99, 0xef, 0x18, 0x06, 0xd8, 0x72, 0x0e, 0x71, 0xd1, 0x6f, 0xc2, 0xd6, 0x61, 0x7a, 0x8c,
		0xf3, 0x01, 0xe9, 0x92, 0xb6, 0xc5, 0xfc, 0x56, 0x7a, 0xa9, 0x71, 0x28, 0x5c, 0xdb, 0x37, 0x2c,
		0x19, 0x34, 0xec, 0xcb, 0x1e, 0x83, 0xa6, 0x59, 0x70, 0x11, 0xad, 0x09, 0x1a, 0xef, 0xc4, 0x0d,
		0xb5, 0x2a, 0x7c, 0xce, 0x97, 0x0e, 0x3e, 0x2e, 0xee, 0x81, 0x7a, 0x72, 0x7b, 0xeb, 0x9e, 0x5d,
		0x13, 0x7e, 0x64, 0x60, 0x62, 0x79, 0xc3, 0x63, 0x41, 0xc4, 0xa7, 0xe7, 0x48, 0x8c, 0xea, 0x8c,
		0x69, 0xaf, 0x8a, 0x3e, 0x84, 0x97, 0xfc, 0xbd, 0x76, 0x79, 0x46, 0x2a, 0x1a, 0xa1, 0x5a, 0xe4,
		0xb0, 0xd8, 0xea, 0x32, 0x1d, 0x4f, 0x7c, 0x54, 0xc7, 0x5d, 0xad, 0xc6, 0x43, 0x18, 0xcc, 0x99,
		0x53, 0x32, 0x97, 0xd9, 0xf5, 0xbd, 0xf4, 0x88, 0x2e, 0x64, 0xed, 0xe1, 0x75, 0xf3, 0x2c, 0xd2,
		0x00, 0x81, 0xf9, 0x96, 0xc5, 0x2f, 0x28, 0x8b, 0xd5, 0x6d, 0xbc, 0x63, 0xfd, 0xbb, 0xa1, 0x90,
		0xf1, 0x16, 0x70, 0x81, 0xc9, 0x5e, 0x37, 0xc0, 0xdb, 0xaa, 0xd3, 0x50, 0x60, 0x09, 0x66, 0x0a,
		0x3f, 0xd1, 0x0d, 0x99, 0x2a, 0x29, 0x68, 0xbf, 0xda, 0x88, 0x1c, 0xec, 0x2c, 0xad, 0x19, 0xdd,
		0xd8, 0x52, 0xab, 0x57, 0x9a, 0xba, 0xd0, 0xa9, 0xcf, 0x43, 0xc1, 0x0b, 0x17, 0x58, 0x86, 0x7d,
		0xc0, 0xf2, 0x53, 0x17, 0xd6, 0x30, 0xfd, 0x15, 0x4c, 0xaf, 0x9a, 0x4b, 0x05, 0x7d, 0x2a, 0xbc,
		0xd9, 0x33, 0x74, 0x8c, 0x7d, 0x87, 0x68, 0x6c, 0x76, 0x61, 0xda, 0xb7, 0xb5, 0x99, 0x0f, 0x32,
		0x70, 0x81, 0x83, 0xe4, 0x94, 0xb2, 0x43, 0xb8, 0x62, 0xf4, 0x25, 0x5a, 0xe0, 0x2e, 0x2d, 0x2b,
		0xfb, 0xf0, 0x0f, 0x13, 0xd7, 0xcc, 0x2b, 0xe7, 0xe1, 0xf1, 0x6c, 0x43, 0xc9, 0x4b, 0x50, 0x08,
		0x98, 0xde, 0x9a, 0xfc, 0x7d, 0x4a, 0xa8, 0xcb, 0xb5, 0x6a, 0x41, 0x28, 0xec, 0x01, 0x59, 0xa1,
		0x56, 0x8c, 0x0e, 0xbd, 0xb8, 0x19, 0xf4, 0x9c, 0xa0, 0x6b, 0x0f, 0x06, 0x86, 0xdf, 0xd9, 0x20,
		0xd6, 0xef, 0xf0, 0xa3, 0xa5, 0xe1, 0xd9, 0x13, 0xd4, 0xed, 0x44, 0xf9, 0xda, 0x20, 0x57, 0x2c,
		0x13, 0x29, 0x65, 0xa9, 0x58, 0xa1, 0x39, 0x20, 0x7e, 0x89, 0x00, 0xcb, 0xa4, 0xd6, 0xb1, 0x15,
		0x7a, 0x57, 0xa4, 0x41, 0x40, 0x11, 0xb4, 0x12, 0x88, 0x8c, 0xd1, 0x93, 0x5c, 0x01, 0xe6, 0x30,
		0x41, 0x06, 0x07, 0xdb, 0x78, 0x52, 0xc1, 0x74, 0xdc, 0x32, 0xb6, 0x31, 0x2d, 0x22, 0xf5, 0x41,
		0xc4, 0x53, 0xcc, 0xc0, 0x7f, 0x76, 0x89, 0x11, 0x30, 0x13, 0xc3, 0x67, 0xf4, 0x88, 0x9a, 0x7e
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	e =
		0xe59685n;
	message = new Uint8Array([
		0xaa, 0x4a, 0x6d, 0xa9, 0xf7, 0x3b, 0x58, 0xf5, 0x32, 0x6d, 0x58, 0x75, 0x72, 0xae, 0xd1, 0x8e,
		0xd9, 0xa7, 0x9f, 0x3d, 0xbc, 0x69, 0x59, 0x51, 0x03, 0x49, 0xd2, 0xd8, 0xd3, 0xee, 0xe6, 0xd7,
		0x6b, 0xa8, 0x73, 0x3e, 0x4c, 0x03, 0xa5, 0x1a, 0x9d, 0x9d, 0x77, 0x0d, 0xcd, 0x34, 0x76, 0xfb,
		0x7a, 0x03, 0xc8, 0x07, 0x92, 0x4f, 0x6e, 0xbe, 0xb8, 0x3d, 0xc6, 0x91, 0xe9, 0xe6, 0x54, 0x89,
		0x5f, 0xad, 0xc1, 0x36, 0xb5, 0xd1, 0x24, 0xe9, 0x4d, 0x3e, 0x81, 0x23, 0xef, 0xa9, 0x8f, 0x4c,
		0xb2, 0xdb, 0xbf, 0xa8, 0x20, 0x4d, 0x79, 0x88, 0x95, 0xf6, 0xa9, 0xbd, 0xe8, 0x61, 0x7a, 0x52,
		0x4d, 0x02, 0x61, 0x7b, 0x7a, 0xca, 0x5e, 0xc8, 0x09, 0xf9, 0x7f, 0x9e, 0x1e, 0x34, 0xa5, 0xe8,
		0x49, 0xd7, 0x8a, 0x0a, 0xae, 0x8c, 0x03, 0x16, 0x63, 0x1d, 0x83, 0x43, 0x19, 0x86, 0xe1, 0x9b
	]);
	signature = new Uint8Array([
		0x95, 0x0e, 0x49, 0x24, 0xb0, 0x41, 0x52, 0xa1, 0xbf, 0xe6, 0xf3, 0x63, 0x51, 0xd6, 0x37, 0xac,
		0x80, 0x2b, 0x08, 0x34, 0x4c, 0x25, 0x01, 0x18, 0xaa, 0xa7, 0xe8, 0xc4, 0x14, 0xf3, 0x9f, 0x55,
		0x97, 0x61, 0xd4, 0x58, 0xb7, 0x74, 0x4d, 0x95, 0x2e, 0xdf, 0x98, 0x51, 0x19, 0x7b, 0x24, 0x65,
		0xc4, 0x6a, 0xaf, 0xa8, 0x27, 0xea, 0x06, 0x10, 0xf8, 0x5f, 0xad, 0xd7, 0xb4, 0x14, 0x18, 0xb0,
		0x4c, 0x1e, 0x33, 0x5f, 0xa0, 0x84, 0xfd, 0xc8, 0x47, 0x82, 0xe1, 0xf5, 0x1f, 0x90, 0xdf, 0x0e,
		0xef, 0x30, 0x6d, 0x9b, 0x93, 0x61, 0xa1, 0xe6, 0x10, 0x24, 0x4f, 0xc5, 0xdc, 0x60, 0x9a, 0x9f,
		0x82, 0xf6, 0x70, 0x52, 0x1f, 0x63, 0xb3, 0xb3, 0xed, 0x8e, 0x1a, 0x48, 0xa6, 0x30, 0xc5, 0x5d,
		0xc9, 0xf7, 0x3f, 0x16, 0xbf, 0x49, 0x47, 0x8d, 0x84, 0x10, 0x43, 0x4d, 0xc0, 0xda, 0x78, 0xef,
		0x84, 0x0a, 0x4b, 0xfb, 0xa5, 0x6d, 0x57, 0x70, 0xd0, 0x84, 0xc9, 0x0d, 0x7f, 0xfd, 0x19, 0x8a,
		0x80, 0x2c, 0x8b, 0x90, 0xa8, 0x70, 0x0b, 0x96, 0xa0, 0xf2, 0xf5, 0x0c, 0x99, 0x4a, 0xf7, 0xd4,
		0x4b, 0x3e, 0x9e, 0xab, 0xf9, 0xc7, 0xb5, 0xd9, 0xd6, 0xb7, 0xda, 0x0d, 0x64, 0xb6, 0x23, 0x29,
		0x3b, 0x5b, 0x7e, 0x21, 0x08, 0xd7, 0x08, 0x5f, 0xe7, 0xf7, 0x0b, 0x29, 0xb9, 0x8c, 0x3b, 0xd5,
		0x75, 0xdf, 0x13, 0x1d, 0xa4, 0xb7, 0x8a, 0x50, 0xdf, 0xb6, 0x39, 0x2d, 0x0f, 0x37, 0x29, 0x59,
		0x08, 0x17, 0x0d, 0x44, 0x75, 0xd7, 0x70, 0x2e, 0xa3, 0xab, 0xce, 0x58, 0x4e, 0xfb, 0xd4, 0xb4,
		0xe3, 0x7a, 0xb7, 0x60, 0xc1, 0x64, 0x15, 0x48, 0xa7, 0x9e, 0xb7, 0xf2, 0x7c, 0x69, 0xeb, 0x4c,
		0x78, 0x11, 0x3b, 0xc0, 0xc2, 0x2e, 0xc2, 0xd2, 0xa9, 0xa2, 0x44, 0xee, 0x6f, 0xee, 0x9a, 0xaf,
		0x57, 0xf7, 0x1a, 0xa9, 0xdd, 0xa7, 0x26, 0xbc, 0x0d, 0xd5, 0x80, 0x67, 0x3f, 0xf2, 0xc6, 0x99,
		0x22, 0xdd, 0xe0, 0xb4, 0xeb, 0xb9, 0x26, 0x53, 0xfd, 0x32, 0x40, 0x77, 0x04, 0x0f, 0xa0, 0x0a,
		0x28, 0x04, 0x54, 0xea, 0x87, 0x91, 0x47, 0x93, 0x7e, 0xd1, 0xf5, 0x3c, 0xe2, 0x64, 0x22, 0xf4,
		0x67, 0x7e, 0x01, 0x25, 0xcd, 0x49, 0xc2, 0xbc, 0xb9, 0xa8, 0x87, 0x67, 0xe0, 0xe6, 0x7c, 0xa5,
		0x1f, 0x64, 0x72, 0xde, 0x6c, 0xf3, 0x2c, 0x7b, 0x0a, 0xb7, 0xbe, 0xa6, 0x32, 0x53, 0xd8, 0xfa,
		0x03, 0x1a, 0x93, 0x86, 0x21, 0xa0, 0x26, 0xa9, 0x23, 0x84, 0xba, 0xe7, 0x95, 0x94, 0xa8, 0xc9,
		0xbd, 0xdf, 0xb0, 0x6f, 0xa9, 0xc5, 0x8c, 0x5a, 0x4a, 0x57, 0x76, 0xcf, 0x65, 0xb1, 0xf5, 0xd3,
		0x46, 0xda, 0x7d, 0xea, 0xb2, 0x15, 0x4e, 0x45, 0x44, 0x0b, 0x04, 0x05, 0xd1, 0x05, 0x24, 0x05
	]);
	saltLength = 24;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA384, SHA384, saltLength, message, signature)
	).toBe(false);

	n =
		0xa3f2235ad2053b4c83fa38f8284ed805421621fe98845fb01b689f5b82b32511b6d16173e7b40a66a3a999c189beb9e06822150ac8be677186370c823b5277d909de07564e281cca2f13873d9d07b7bd85a2b9ac66f4ce4f5e38b8e9eebec04c8caf311e375d69e80851d559b8e90e85ba6b96476790f727c25aa8163062ec8543fcc7759be62c7768ecc37f340bb06102762bf0441ca1aa2c7a81bf37dc8b27439d3abba93812c9bb44fe4d6a94baae709379f5ce5d0c8f81d00086b9caa3026819588f491b525807899cdab33d8e992150d2b105d3aab615217c6a3d740831c7dc76faabd9c9b9817ead0b494566de1433fff5ba4604c6b8446f6fc35e746aff84ff8bd7500410d10e82bf4c9036489de47dee9a327a5c4510d8561321b91d55559a4cba85e0c361767084b25217e8a63c4e151a1e88689feecffd16fa0a65ae41d2babca99cf1b959c3c076c0f75974146f2cc494126fbecad4217b9aaa00f169fa512527ff5a0b50da46d6be870ecef2af7a1e6c4556f6f7a0a00b9f47cbn;
	e =
		0xb3f57fn;
	message = new Uint8Array([
		0x31, 0xe3, 0xe0, 0x5d, 0x7a, 0x98, 0x4d, 0xb4, 0xda, 0x86, 0x96, 0xdb, 0x9b, 0xde, 0xfb, 0xa7,
		0x91, 0x35, 0x8c, 0x70, 0xfd, 0xd8, 0x33, 0x0d, 0xb0, 0x60, 0xf4, 0xff, 0x74, 0x86, 0x74, 0xed,
		0xa7, 0x38, 0xb8, 0x51, 0x29, 0xec, 0x30, 0x70, 0x79, 0x34, 0xf4, 0x8f, 0x1a, 0x92, 0x4d, 0x64,
		0x3c, 0x8e, 0x77, 0xcb, 0x98, 0x07, 0xa5, 0xba, 0x9c, 0xc7, 0x46, 0x77, 0xc8, 0x5a, 0x87, 0x08,
		0x58, 0x1f, 0x19, 0xec, 0x23, 0x9f, 0x34, 0x08, 0xc3, 0x1e, 0xdc, 0xe4, 0xf6, 0x70, 0x63, 0x17,
		0x44, 0x0e, 0x2f, 0x00, 0xe2, 0x69, 0xbd, 0xb7, 0xd7, 0x7e, 0xe6, 0x43, 0x5d, 0xab, 0x61, 0x0e,
		0x8a, 0xc1, 0x8a, 0x96, 0x2f, 0x5a, 0x61, 0x64, 0x01, 0x6d, 0xd6, 0x42, 0xf6, 0x1f, 0x44, 0xa9,
		0xf2, 0xdc, 0x3b, 0x79, 0xa3, 0xa7, 0x82, 0xec, 0xa9, 0xae, 0x5c, 0xcd, 0xfb, 0x22, 0x0b, 0xe5
	]);
	signature = new Uint8Array([
		0x4f, 0xc3, 0x23, 0x2b, 0x03, 0x3b, 0x22, 0xa8, 0x40, 0x6a, 0xb9, 0x79, 0xcf, 0x0b, 0xb6, 0x61,
		0x75, 0xb5, 0x23, 0x28, 0x5e, 0xb8, 0x42, 0x5d, 0x2e, 0x80, 0x11, 0x3b, 0x2b, 0xd2, 0x8f, 0x8f,
		0x36, 0x4a, 0x64, 0x87, 0x30, 0x46, 0x50, 0x78, 0x9c, 0x3e, 0xc0, 0xf2, 0xe1, 0xec, 0xbd, 0x0c,
		0x91, 0x9a, 0xe8, 0xd4, 0x6c, 0x60, 0x45, 0x34, 0xae, 0xe5, 0x03, 0xdd, 0xa6, 0x53, 0xed, 0x94,
		0x58, 0x2c, 0x93, 0xab, 0xf6, 0x74, 0x17, 0x41, 0x20, 0x80, 0x87, 0x1e, 0x19, 0x3f, 0xac, 0xa2,
		0xab, 0x5b, 0xe8, 0x94, 0x46, 0x63, 0x41, 0x54, 0x75, 0xf3, 0xfc, 0xf6, 0x08, 0x65, 0x92, 0x41,
		0x8b, 0x6b, 0x84, 0x5d, 0x5f, 0x62, 0x81, 0x94, 0x3b, 0x19, 0xdd, 0x68, 0xc0, 0xa3, 0x52, 0x6b,
		0x39, 0xd8, 0xd2, 0x25, 0xa9, 0x7c, 0x57, 0x05, 0xb7, 0xb9, 0xd2, 0xaf, 0xff, 0xdc, 0x23, 0x51,
		0xdd, 0x95, 0xde, 0xe2, 0xea, 0xce, 0x1a, 0xaa, 0x8b, 0xd9, 0x64, 0x3f, 0xab, 0x8e, 0x76, 0x4d,
		0x6a, 0x7c, 0x66, 0x49, 0x9f, 0x74, 0xc9, 0x44, 0xf1, 0x0a, 0xfb, 0xfd, 0xbd, 0x90, 0x1b, 0x38,
		0x53, 0x88, 0x69, 0x6d, 0x53, 0x6f, 0xc9, 0xca, 0x5b, 0x68, 0xb9, 0x33, 0x78, 0x4f, 0x64, 0x67,
		0x73, 0xe9, 0x9e, 0xc2, 0xbf, 0x31, 0x28, 0x83, 0xfd, 0xeb, 0x9e, 0xcc, 0x3d, 0x6e, 0x46, 0x09,
		0x4d, 0x87, 0x80, 0x2c, 0xf1, 0x1d, 0xeb, 0x8e, 0x82, 0x93, 0xec, 0x1b, 0xa7, 0x67, 0x11, 0xa4,
		0xb4, 0x9d, 0xb5, 0xd2, 0xa4, 0x43, 0x32, 0x47, 0x83, 0xcd, 0x4f, 0xa0, 0x01, 0xb9, 0x2a, 0x46,
		0xf7, 0xaa, 0xe0, 0x84, 0xbd, 0xdb, 0x30, 0xaf, 0x4d, 0x23, 0xc6, 0xec, 0x6f, 0xaa, 0x90, 0x03,
		0xde, 0xf5, 0xdd, 0x59, 0xd0, 0x0c, 0x22, 0x5b, 0xa1, 0x21, 0x2a, 0xd0, 0xb5, 0x8f, 0xec, 0x5b,
		0x25, 0x12, 0x00, 0xae, 0x13, 0x53, 0x45, 0xef, 0x14, 0x11, 0x06, 0xd3, 0x26, 0x5d, 0x9e, 0x80,
		0x19, 0xa4, 0x26, 0xf6, 0x52, 0xb9, 0x1e, 0xc3, 0x2c, 0x86, 0x58, 0x86, 0x9a, 0xa1, 0x00, 0x44,
		0x99, 0x7f, 0x22, 0xf2, 0x4f, 0xa1, 0x01, 0xd0, 0x88, 0x37, 0x9d, 0x60, 0xd6, 0x48, 0x30, 0xf7,
		0x94, 0x8a, 0x0b, 0xfe, 0x1c, 0x34, 0x8b, 0x90, 0xb2, 0x8d, 0xee, 0x91, 0xbc, 0x50, 0x15, 0x56,
		0xcc, 0x1d, 0xac, 0x0d, 0x05, 0x0f, 0xbd, 0xd2, 0xef, 0xef, 0x25, 0x38, 0xfa, 0x4f, 0x18, 0x2d,
		0x79, 0x08, 0xff, 0x75, 0x4a, 0xb8, 0x4c, 0x23, 0x8d, 0x16, 0xa9, 0xb1, 0x0b, 0x01, 0x40, 0xe7,
		0x29, 0x8b, 0x02, 0x6b, 0x48, 0x30, 0xce, 0x14, 0xf3, 0xca, 0xf9, 0xe7, 0x2d, 0xaf, 0x32, 0xa6,
		0xa7, 0x85, 0x36, 0x08, 0x16, 0xc7, 0x09, 0x89, 0x83, 0x46, 0x91, 0x13, 0x3c, 0x7a, 0x91, 0x8a
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xb3f57fn;
	message = new Uint8Array([
		0x69, 0x1c, 0x26, 0x3b, 0x52, 0x3e, 0x54, 0x31, 0x2d, 0xad, 0x47, 0xdd, 0xdc, 0xce, 0x9b, 0xfb,
		0x72, 0x75, 0xa6, 0x1a, 0x9a, 0xb5, 0xfd, 0x07, 0x36, 0xf7, 0x3a, 0x89, 0x45, 0x4a, 0xfd, 0x4e,
		0x0a, 0xfa, 0x31, 0x26, 0x6b, 0x64, 0x91, 0x6f, 0x97, 0x08, 0x6a, 0xd0, 0xeb, 0xe0, 0xa2, 0x2b,
		0x17, 0xf1, 0xf9, 0xcc, 0x7c, 0x1f, 0x8f, 0xe7, 0xd9, 0x45, 0xa7, 0x41, 0x27, 0x85, 0xaa, 0x2d,
		0xc1, 0xdd, 0x6f, 0xba, 0xc8, 0xfb, 0xb9, 0x2b, 0xc6, 0x53, 0x01, 0xa7, 0x91, 0x6e, 0x76, 0x32,
		0x73, 0x85, 0x43, 0xdc, 0x87, 0x4e, 0x10, 0x38, 0x66, 0x16, 0xcb, 0x10, 0x03, 0x10, 0xa8, 0x57,
		0xd4, 0xed, 0x66, 0x5f, 0x33, 0xac, 0xd5, 0x4d, 0x03, 0xb4, 0x95, 0xc9, 0x96, 0x20, 0x20, 0xfa,
		0xce, 0x5a, 0x0a, 0xb1, 0x83, 0xeb, 0x88, 0xe4, 0x25, 0x91, 0x30, 0x5f, 0xa3, 0x92, 0xff, 0xb6
	]);
	signature = new Uint8Array([
		0x0c, 0x42, 0xf7, 0xdf, 0xb0, 0xa5, 0xb5, 0xd4, 0x39, 0xd5, 0x05, 0x31, 0x0f, 0x14, 0x8a, 0x07,
		0x21, 0x67, 0x0d, 0x81, 0xc8, 0x06, 0xbb, 0x50, 0xbe, 0xc2, 0x0d, 0x94, 0x1d, 0xbd, 0xfa, 0x12,
		0x98, 0x0b, 0x23, 0x26, 0x98, 0x41, 0x69, 0xca, 0x4a, 0x39, 0x43, 0xec, 0xec, 0xd9, 0xb1, 0x52,
		0x7d, 0xcc, 0xed, 0xca, 0xef, 0xeb, 0x5c, 0xf7, 0x39, 0xe0, 0x11, 0x2a, 0xb9, 0x41, 0x03, 0x96,
		0xe3, 0x69, 0x21, 0x63, 0xfe, 0x2a, 0x74, 0xfb, 0x8d, 0x53, 0x0c, 0x8d, 0x80, 0x55, 0x75, 0xe1,
		0x01, 0xb4, 0xdd, 0xfc, 0xfd, 0x7f, 0x14, 0xa8, 0xed, 0x95, 0x07, 0x4a, 0x51, 0x6a, 0x1c, 0xcb,
		0x01, 0x90, 0x34, 0x5a, 0x79, 0xae, 0x0e, 0x83, 0x93, 0x4c, 0xf0, 0x9c, 0xd1, 0x61, 0x7c, 0xa4,
		0x71, 0xe1, 0x0d, 0xe6, 0xbf, 0x51, 0x2c, 0xcb, 0x5c, 0xbf, 0x9a, 0x87, 0xff, 0xb6, 0x5f, 0x03,
		0x24, 0x22, 0xde, 0xce, 0x63, 0xdf, 0xc0, 0x24, 0x7f, 0x54, 0xc9, 0x75, 0x2b, 0x2e, 0x96, 0x6c,
		0x90, 0x4c, 0xc2, 0x03, 0x36, 0x2d, 0x3f, 0x68, 0x0f, 0xda, 0x66, 0xb1, 0x7f, 0x76, 0x15, 0x71,
		0xb2, 0x98, 0x4c, 0xec, 0xe2, 0xf4, 0x57, 0x50, 0x64, 0xb4, 0x7d, 0x78, 0xaf, 0xe8, 0xd6, 0x83,
		0x55, 0x4d, 0xa1, 0xf1, 0x32, 0xe8, 0xbf, 0x70, 0x7f, 0x85, 0x0f, 0x97, 0x31, 0x0c, 0xaf, 0xaf,
		0xdf, 0x37, 0x48, 0x35, 0x18, 0x89, 0x83, 0xbc, 0xdb, 0x34, 0x93, 0xec, 0x14, 0x79, 0xaa, 0x26,
		0xfe, 0x12, 0xb5, 0x04, 0xa3, 0x2a, 0x8e, 0x9b, 0x31, 0xa1, 0xfc, 0x82, 0x1f, 0xdc, 0xc8, 0xb7,
		0xa2, 0xc6, 0x40, 0x5d, 0x18, 0x9c, 0xf7, 0xf6, 0x44, 0xe5, 0xf4, 0x7b, 0xed, 0x54, 0xc0, 0xf1,
		0xb0, 0x3c, 0xea, 0xc1, 0x4b, 0x19, 0xf1, 0x3a, 0x25, 0xcc, 0xf4, 0xc7, 0x79, 0xa0, 0x52, 0x98,
		0x9a, 0x9e, 0x96, 0x6d, 0xca, 0xcf, 0x29, 0xee, 0x5e, 0xfe, 0x93, 0xe1, 0xdc, 0xd5, 0xfe, 0xe4,
		0x52, 0x1f, 0xaa, 0xc9, 0x68, 0x65, 0x23, 0x53, 0xe5, 0xad, 0x9e, 0x0f, 0xf2, 0xd4, 0x62, 0x2e,
		0x98, 0xcf, 0x7f, 0xde, 0x48, 0x00, 0xef, 0x00, 0x98, 0x1d, 0x76, 0xdf, 0xdb, 0x95, 0x3e, 0xa9,
		0xc5, 0x99, 0xa1, 0xc0, 0x76, 0x11, 0x87, 0x6d, 0x11, 0xce, 0x94, 0xe9, 0xa4, 0x21, 0xcf, 0xef,
		0x3a, 0xec, 0x08, 0x14, 0x57, 0x03, 0xc2, 0xe6, 0xa8, 0x78, 0x11, 0x29, 0x59, 0x69, 0x6e, 0xa5,
		0x4e, 0xff, 0xd9, 0xc3, 0x81, 0x9d, 0x0f, 0x6f, 0xc6, 0xd7, 0x22, 0xa2, 0x6b, 0xa0, 0x44, 0xd1,
		0x6c, 0xc9, 0x33, 0x59, 0xe4, 0xb6, 0xdf, 0x56, 0x5b, 0x43, 0xc3, 0x54, 0xab, 0xd1, 0x05, 0xa6,
		0x38, 0xaa, 0x1e, 0x1d, 0x6c, 0xc7, 0xfc, 0x93, 0x00, 0x16, 0x5c, 0x57, 0xb4, 0x1c, 0xdb, 0xe2
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xb3f57fn;
	message = new Uint8Array([
		0xbe, 0x2f, 0x3e, 0x1d, 0xc8, 0xa3, 0x71, 0x15, 0x70, 0x40, 0x1b, 0xd5, 0x35, 0x18, 0x54, 0x26,
		0x94, 0x4d, 0x09, 0x4e, 0x84, 0x81, 0xa1, 0x2a, 0x43, 0x8d, 0xe0, 0x7d, 0x54, 0x76, 0x0c, 0x88,
		0xc9, 0x9d, 0x4f, 0xdb, 0xbe, 0x35, 0x5d, 0x6a, 0x26, 0xfa, 0x56, 0xe3, 0xca, 0x20, 0xee, 0x3f,
		0x8e, 0x8a, 0xcb, 0x98, 0xf6, 0x3d, 0x2f, 0x3a, 0xea, 0x14, 0xd6, 0xfc, 0xb6, 0xb5, 0x22, 0xd1,
		0x55, 0xc3, 0x75, 0x9a, 0xef, 0x56, 0xde, 0x3e, 0xa0, 0xa8, 0xf9, 0xfd, 0x7b, 0x11, 0x10, 0x01,
		0xcf, 0x35, 0x86, 0x36, 0xa8, 0x7c, 0x76, 0x5c, 0x99, 0xc2, 0x97, 0x5b, 0xb9, 0x50, 0x63, 0xd6,
		0xec, 0x0b, 0x78, 0x02, 0x64, 0xec, 0x3e, 0xb9, 0x67, 0xb0, 0xca, 0xca, 0x52, 0xd1, 0x02, 0x94,
		0xde, 0xb4, 0x02, 0xd3, 0xa2, 0x24, 0xbf, 0xb9, 0xd9, 0xff, 0xea, 0x41, 0x66, 0x2f, 0x18, 0xc0
	]);
	signature = new Uint8Array([
		0x78, 0x7c, 0xdd, 0x6e, 0x1d, 0x4f, 0xdf, 0x9a, 0x0d, 0x9f, 0x96, 0x5e, 0xb8, 0x57, 0x25, 0x23,
		0x2a, 0x9e, 0xfc, 0xc1, 0x2a, 0xbf, 0xa1, 0xef, 0x25, 0xa8, 0x1e, 0x09, 0x83, 0x11, 0x1d, 0x90,
		0x00, 0xd4, 0x94, 0xfc, 0x7d, 0x32, 0x01, 0xeb, 0x3b, 0xba, 0x32, 0x73, 0x02, 0x72, 0x7f, 0x70,
		0x86, 0x14, 0x7a, 0x75, 0x5b, 0x48, 0x27, 0x03, 0x0c, 0x72, 0x76, 0x53, 0x6f, 0x42, 0x55, 0x93,
		0xab, 0x2e, 0x91, 0x27, 0xa1, 0x49, 0xe7, 0x54, 0xde, 0x7a, 0xd7, 0x7f, 0x8c, 0x20, 0x43, 0x26,
		0x7d, 0xb4, 0x9f, 0x8a, 0x35, 0x03, 0x1d, 0x83, 0xf1, 0x3d, 0x14, 0x0d, 0x5d, 0xf4, 0xd4, 0x24,
		0xb4, 0x74, 0x54, 0x04, 0x1a, 0x23, 0xb9, 0x2f, 0xf6, 0x81, 0x8e, 0x74, 0x9d, 0x65, 0xd0, 0x1f,
		0xc5, 0x0b, 0xeb, 0xf6, 0x91, 0x52, 0xf3, 0xf5, 0xfc, 0xb4, 0x87, 0x3b, 0x10, 0x36, 0x21, 0x9e,
		0x22, 0xb1, 0xe7, 0x4f, 0x83, 0x68, 0xc8, 0xc5, 0x01, 0xce, 0x65, 0xf2, 0xc9, 0x29, 0xd9, 0x0a,
		0x8e, 0xc8, 0x99, 0x63, 0x0e, 0x80, 0x25, 0x47, 0xa7, 0xca, 0x6e, 0xf1, 0x8a, 0xb3, 0xcb, 0x3e,
		0xb4, 0xa6, 0x91, 0xee, 0x68, 0xae, 0xbe, 0xaf, 0x1b, 0x9c, 0x05, 0x5a, 0xd1, 0x22, 0x18, 0x03,
		0x9c, 0xf4, 0x80, 0xcd, 0x8d, 0x29, 0x43, 0x32, 0xc5, 0xe1, 0x6e, 0xbb, 0xe6, 0xaf, 0x11, 0xf8,
		0xf4, 0xbf, 0x49, 0xf9, 0xb4, 0xed, 0x2f, 0x51, 0x11, 0x26, 0xae, 0x78, 0x0a, 0x3b, 0x78, 0x4b,
		0xe8, 0xf4, 0x42, 0x6a, 0xbd, 0x17, 0xf8, 0x60, 0x00, 0x74, 0x48, 0x3f, 0x2a, 0xf3, 0xb7, 0x1a,
		0x89, 0x64, 0xc6, 0xe0, 0xfa, 0x00, 0x04, 0x9a, 0x1d, 0x94, 0x0d, 0x34, 0xcc, 0x08, 0x83, 0x9e,
		0x0c, 0x59, 0x25, 0x3d, 0x99, 0xe9, 0x0d, 0x17, 0x87, 0x1d, 0x48, 0x96, 0x74, 0x69, 0x56, 0x63,
		0x62, 0x61, 0x66, 0xd3, 0x6f, 0xf9, 0x1d, 0x8c, 0x22, 0x99, 0xa2, 0xf0, 0x51, 0xea, 0xe2, 0xd6,
		0x0e, 0x8e, 0xd0, 0xbc, 0x3f, 0xac, 0x1e, 0x49, 0x0b, 0x47, 0x0c, 0x12, 0xf3, 0xd6, 0x97, 0xf6,
		0xfb, 0xfd, 0x88, 0x0d, 0xe2, 0xe9, 0x0e, 0x9f, 0xcb, 0xd4, 0x85, 0xfa, 0x33, 0x93, 0x19, 0x83,
		0x72, 0xfb, 0x01, 0xe4, 0xce, 0xc5, 0xc1, 0x59, 0x17, 0xec, 0xdd, 0x42, 0xe5, 0x7c, 0x43, 0xec,
		0xf5, 0x5a, 0x8c, 0x0e, 0xcb, 0xdc, 0xef, 0x1b, 0xce, 0x4e, 0x36, 0xd9, 0x6d, 0x46, 0xb1, 0x12,
		0x57, 0x0b, 0x53, 0xf8, 0x2f, 0x3d, 0x20, 0x64, 0xb0, 0x8a, 0xc7, 0x86, 0x13, 0x67, 0x0a, 0x28,
		0xea, 0x69, 0xd7, 0x9c, 0x71, 0x7e, 0xb1, 0xc2, 0x94, 0x09, 0x0d, 0xbd, 0x56, 0x1f, 0xa6, 0xe5,
		0x04, 0xd0, 0x9d, 0x26, 0x57, 0x24, 0xe3, 0x7a, 0x2d, 0xc6, 0xf4, 0x45, 0xf6, 0xf5, 0x28, 0xc9
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(true);

	e =
		0xb3f57fn;
	message = new Uint8Array([
		0xbe, 0x0f, 0x5c, 0x66, 0x6c, 0x1d, 0x2c, 0x48, 0x0a, 0xb9, 0x3a, 0xb8, 0x2e, 0x2c, 0x7d, 0x5d,
		0x34, 0x7a, 0xb8, 0x7e, 0x99, 0x37, 0xff, 0x72, 0xa5, 0x9b, 0x77, 0x57, 0x4d, 0xd9, 0x5d, 0x07,
		0x57, 0xad, 0x4a, 0x48, 0xbf, 0x34, 0xb5, 0x43, 0x5a, 0x01, 0xb9, 0x38, 0xb9, 0x6d, 0x18, 0x6f,
		0x50, 0x2e, 0x81, 0x72, 0xd7, 0x2c, 0x0e, 0x79, 0xf1, 0x90, 0x11, 0x26, 0x0c, 0x1d, 0x10, 0x72,
		0x88, 0xc3, 0x0e, 0xe8, 0x1b, 0x71, 0x0c, 0x11, 0x74, 0x2c, 0xd0, 0x2f, 0x1e, 0x5e, 0xe5, 0x2d,
		0xa8, 0x70, 0xe3, 0xd7, 0x03, 0x9a, 0xf1, 0x47, 0x2b, 0xfa, 0x87, 0x9f, 0x09, 0xe4, 0x79, 0xfe,
		0x99, 0x7a, 0x31, 0xac, 0x48, 0x7c, 0x3b, 0x98, 0xa0, 0x61, 0x08, 0x05, 0x26, 0xa6, 0xeb, 0x80,
		0x83, 0x66, 0x68, 0x15, 0xe3, 0x2b, 0xae, 0xc2, 0x9b, 0x04, 0x62, 0x2c, 0x0e, 0xd7, 0x9e, 0x91
	]);
	signature = new Uint8Array([
		0x64, 0xe7, 0x03, 0x37, 0x8e, 0x5e, 0x73, 0xcb, 0xe2, 0x6a, 0x01, 0xea, 0x4b, 0x21, 0xe9, 0x26,
		0x50, 0x12, 0x66, 0xd6, 0x34, 0xa8, 0x3b, 0x25, 0x42, 0x98, 0x5d, 0x34, 0x05, 0x20, 0x2f, 0x38,
		0x50, 0x49, 0x17, 0xcd, 0x42, 0x36, 0x39, 0x69, 0xd5, 0xf6, 0x5b, 0xc7, 0xa1, 0xdb, 0x79, 0xdd,
		0x1f, 0x91, 0xc4, 0x94, 0x07, 0xbe, 0x51, 0x8a, 0xa7, 0x78, 0x43, 0xd1, 0x4f, 0xbe, 0x7e, 0xe4,
		0x97, 0x15, 0xef, 0x44, 0x57, 0xc3, 0x2e, 0xec, 0x47, 0xf0, 0x30, 0x20, 0x20, 0x9b, 0x76, 0x1e,
		0xf1, 0xbe, 0x6a, 0x12, 0xf4, 0x89, 0x03, 0x0a, 0xe5, 0x85, 0x21, 0x4a, 0x7a, 0x94, 0x29, 0xe6,
		0x06, 0x18, 0xee, 0xdf, 0x82, 0xea, 0xb0, 0x1e, 0x3d, 0x7b, 0x39, 0xde, 0x7e, 0x22, 0x05, 0x40,
		0x81, 0x2e, 0x1b, 0x6d, 0x0b, 0x88, 0xd2, 0x00, 0x69, 0x9c, 0x17, 0x38, 0x7c, 0x1d, 0xeb, 0x89,
		0x3c, 0x30, 0x12, 0xf4, 0xa3, 0x40, 0xbb, 0x86, 0xfb, 0x35, 0x38, 0x25, 0xf7, 0x72, 0xef, 0xc4,
		0xaf, 0xa6, 0x25, 0x78, 0x4a, 0xeb, 0xa4, 0x37, 0xd2, 0xcf, 0x4a, 0x09, 0xe1, 0xdc, 0xcb, 0x7e,
		0x22, 0x43, 0x85, 0xb0, 0x3a, 0x40, 0xbe, 0x52, 0x55, 0x70, 0x05, 0xed, 0x90, 0x23, 0xc0, 0xae,
		0xc3, 0x90, 0xf5, 0x51, 0xde, 0x23, 0xd5, 0x90, 0xca, 0xcb, 0x7c, 0x3b, 0x5e, 0xfe, 0xb6, 0xc8,
		0x78, 0xb4, 0x45, 0x24, 0x61, 0x3b, 0xf5, 0x29, 0x3f, 0xd5, 0xcc, 0xe9, 0xe4, 0x86, 0xc2, 0x55,
		0x2b, 0xe6, 0x09, 0x99, 0x3d, 0xd1, 0x55, 0x82, 0xdf, 0x09, 0xaf, 0xf6, 0x77, 0x81, 0x3f, 0xf5,
		0xd2, 0xc2, 0xa8, 0xc5, 0x54, 0x60, 0x91, 0x21, 0x07, 0x81, 0x8b, 0x29, 0xed, 0x76, 0x60, 0x1a,
		0xd9, 0x99, 0x90, 0x2a, 0x46, 0x1b, 0x06, 0xc8, 0x5d, 0xa9, 0x13, 0x76, 0x89, 0x3b, 0x9d, 0xfb,
		0xcd, 0x8d, 0x50, 0xe1, 0x35, 0xba, 0x39, 0xa4, 0xc1, 0xda, 0xf2, 0xc6, 0x10, 0xf0, 0xef, 0xc8,
		0x71, 0x78, 0x42, 0xd4, 0x0c, 0xaf, 0x59, 0xbd, 0x2f, 0x51, 0xfe, 0xf7, 0x96, 0x2d, 0x1a, 0x93,
		0x6a, 0x3a, 0x31, 0x70, 0x5f, 0xeb, 0xaa, 0xed, 0xf9, 0x40, 0x83, 0x74, 0x8f, 0x2f, 0x3c, 0xf3,
		0xfd, 0x2e, 0xd4, 0x98, 0x49, 0x0b, 0x8e, 0x6b, 0x20, 0x82, 0x3f, 0x7a, 0xb7, 0x8c, 0x8f, 0xbf,
		0x51, 0x89, 0x45, 0xd4, 0x26, 0xcd, 0xca, 0x11, 0xe4, 0xb3, 0xe6, 0xa8, 0xe5, 0xc1, 0x5b, 0xb3,
		0xf9, 0x32, 0xd6, 0x0e, 0x0e, 0xce, 0xea, 0x2c, 0x3e, 0x6b, 0xc7, 0x22, 0x55, 0xa4, 0xff, 0x24,
		0x82, 0x03, 0xb0, 0x2e, 0x26, 0x87, 0x94, 0xb0, 0x9c, 0xbf, 0xe4, 0x89, 0x1b, 0x33, 0x83, 0xff,
		0x7e, 0x84, 0x5c, 0x26, 0xa0, 0x1f, 0xc9, 0xc4, 0xec, 0xac, 0xd2, 0x67, 0xab, 0x18, 0x6a, 0x4c
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xaadn;
	message = new Uint8Array([
		0xdd, 0x1a, 0xc9, 0x35, 0x78, 0x50, 0x54, 0x4f, 0x39, 0x1f, 0xeb, 0xbb, 0xa2, 0x14, 0xbc, 0x7b,
		0x03, 0x4f, 0x30, 0xe9, 0x9b, 0x22, 0x29, 0xee, 0x00, 0xdb, 0x89, 0x74, 0xc1, 0xdd, 0xf3, 0x1e,
		0x49, 0xf6, 0xd5, 0x36, 0x06, 0xec, 0xa6, 0xe7, 0xcb, 0x59, 0x6c, 0xac, 0x73, 0xb9, 0x82, 0x08,
		0xc8, 0xc2, 0x98, 0x78, 0xa3, 0xf4, 0xfb, 0xa6, 0x54, 0x70, 0x17, 0xdf, 0x43, 0x0d, 0x3a, 0xc7,
		0xd8, 0xa9, 0x9a, 0x4b, 0x99, 0xbd, 0x9a, 0xd8, 0x92, 0x34, 0x49, 0xca, 0xfa, 0x7e, 0x2b, 0x28,
		0x13, 0xe0, 0x3d, 0x8e, 0x52, 0x0e, 0x33, 0x6a, 0xc0, 0xfb, 0x04, 0x6b, 0xa0, 0xf0, 0xa8, 0x37,
		0x52, 0xdc, 0x20, 0x5d, 0x77, 0xeb, 0xb8, 0x8a, 0x56, 0x59, 0x89, 0xff, 0x7f, 0x89, 0x41, 0x42,
		0xad, 0x51, 0x27, 0x14, 0xf1, 0x98, 0x59, 0xa4, 0x0d, 0x24, 0x58, 0x02, 0x1e, 0xad, 0xc7, 0xd6
	]);
	signature = new Uint8Array([
		0x08, 0x72, 0x10, 0xce, 0x14, 0x93, 0x29, 0x79, 0x1f, 0x35, 0x09, 0xb6, 0x7d, 0xf8, 0xce, 0x6f,
		0xd0, 0xf7, 0x5b, 0x86, 0x50, 0x07, 0x80, 0xf9, 0xb1, 0x6f, 0x45, 0x1b, 0x81, 0x79, 0xd8, 0xaa,
		0x69, 0xbf, 0x64, 0x41, 0x6a, 0xc5, 0xc7, 0xcf, 0xc0, 0x69, 0x5a, 0x77, 0x5f, 0xa3, 0x0a, 0xa6,
		0x18, 0x3f, 0xac, 0x05, 0x16, 0x42, 0xe4, 0xe8, 0x38, 0x3e, 0x8a, 0x2d, 0xfd, 0x8a, 0x93, 0x52,
		0x3e, 0x1d, 0xe5, 0x44, 0x78, 0x48, 0x9c, 0xaf, 0x0b, 0x35, 0xef, 0xab, 0x45, 0x61, 0x23, 0xb7,
		0x71, 0xdb, 0x81, 0xc7, 0x34, 0xdd, 0xd3, 0x54, 0x5c, 0x97, 0x1b, 0x5a, 0x85, 0x66, 0x3c, 0x9d,
		0xae, 0x89, 0x70, 0xfc, 0x15, 0x75, 0x2b, 0x84, 0x3e, 0x3a, 0xb1, 0x1d, 0x1a, 0x66, 0x0c, 0xb8,
		0xd4, 0xf6, 0x3b, 0xa5, 0xa0, 0xc8, 0xad, 0x3e, 0x7e, 0x2f, 0x21, 0xf7, 0xd7, 0x0c, 0x5c, 0xf9,
		0x75, 0x36, 0x07, 0x69, 0x80, 0x22, 0xe7, 0xf3, 0x79, 0xdc, 0xd5, 0xfa, 0x5c, 0x4d, 0x7c, 0x66,
		0xa7, 0x1e, 0xfd, 0x3f, 0x84, 0x55, 0x67, 0xc3, 0x60, 0xf7, 0x04, 0xbd, 0x36, 0x79, 0x63, 0x33,
		0x10, 0x06, 0x6a, 0x20, 0x05, 0x0c, 0x05, 0x6c, 0x8a, 0xc0, 0x25, 0xf7, 0x72, 0x15, 0x73, 0xa9,
		0x4d, 0xc9, 0x1d, 0xab, 0x73, 0xc4, 0xf9, 0xb4, 0xd7, 0x4e, 0xc2, 0x41, 0x14, 0xd3, 0x5b, 0x80,
		0x65, 0x62, 0xcc, 0xab, 0x94, 0xd5, 0x98, 0xe4, 0x6d, 0x2e, 0x91, 0x52, 0x82, 0xa6, 0xb8, 0x4e,
		0xb9, 0xd5, 0x45, 0x30, 0x4d, 0xbc, 0x72, 0xf6, 0x79, 0x57, 0xb6, 0x39, 0x1a, 0x3b, 0x4e, 0x77,
		0x9a, 0x8d, 0xb7, 0x9d, 0x2f, 0x69, 0x31, 0x6b, 0x28, 0x04, 0x6b, 0x41, 0xc6, 0xf7, 0xa3, 0xfa,
		0x17, 0x56, 0xd8, 0x5e, 0x6c, 0x74, 0xf4, 0x5a, 0x86, 0xaa, 0x17, 0xb2, 0xba, 0x0d, 0x57, 0xd5,
		0x54, 0x8f, 0xde, 0xaf, 0xd3, 0x3c, 0x9b, 0x83, 0x08, 0xd1, 0x2c, 0x49, 0xba, 0x91, 0x3f, 0xa1,
		0xd0, 0x11, 0x78, 0xb8, 0x3b, 0x7c, 0x99, 0xab, 0xcb, 0xa3, 0x1b, 0x3b, 0x92, 0xa0, 0x14, 0x34,
		0x3e, 0xe6, 0x7d, 0xbb, 0xb1, 0x5d, 0x63, 0xf1, 0x65, 0x49, 0x59, 0x73, 0xfb, 0xd7, 0x76, 0x93,
		0x46, 0xf4, 0xb4, 0xa8, 0x2a, 0x57, 0x3a, 0x0a, 0xd3, 0x6a, 0x8b, 0xa5, 0x5d, 0xe2, 0x2b, 0xf5,
		0x95, 0xd3, 0x68, 0xc3, 0x80, 0x7d, 0x22, 0x82, 0x8b, 0xc5, 0xda, 0x05, 0x1a, 0x5a, 0xe4, 0x69,
		0x72, 0x9e, 0x0d, 0x3f, 0x1f, 0xc9, 0xce, 0x94, 0xd1, 0xd7, 0x54, 0x70, 0x3e, 0xe9, 0x0f, 0xc9,
		0xa7, 0x68, 0x3a, 0xd8, 0x8a, 0x23, 0x92, 0x24, 0x1c, 0xf5, 0x08, 0xfb, 0x6d, 0xc4, 0x85, 0x65,
		0x2b, 0x8d, 0x8b, 0xf6, 0xdb, 0xde, 0xa9, 0x87, 0xec, 0xdf, 0x71, 0x94, 0x83, 0x45, 0xd7, 0x71
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);

	e =
		0xb3f57fn;
	message = new Uint8Array([
		0xbf, 0x8c, 0xec, 0x24, 0x62, 0x24, 0xe0, 0x55, 0xe7, 0x94, 0xd2, 0xf3, 0xf3, 0xfb, 0x3b, 0x1f,
		0x77, 0x98, 0x2a, 0x3f, 0x8f, 0x25, 0x44, 0xf4, 0xaa, 0x66, 0x09, 0x4d, 0xec, 0x01, 0x59, 0x3a,
		0xd0, 0x90, 0x36, 0x43, 0x12, 0xf5, 0xcb, 0x79, 0xcc, 0xed, 0xad, 0xad, 0xdf, 0xe9, 0x62, 0xe1,
		0x94, 0x19, 0x20, 0xfc, 0x83, 0xc9, 0xd6, 0xc2, 0xb4, 0xf0, 0x71, 0x02, 0x05, 0x06, 0x58, 0x11,
		0xcb, 0x17, 0x38, 0x78, 0xbc, 0x16, 0x07, 0xea, 0x0d, 0x73, 0x43, 0x79, 0xd7, 0xef, 0x7b, 0x09,
		0xbf, 0xb0, 0x11, 0x04, 0xd6, 0x90, 0x3e, 0x4f, 0xbe, 0xbb, 0x56, 0x7d, 0x0f, 0x79, 0x4e, 0x43,
		0xf8, 0x48, 0x7b, 0x2c, 0x2a, 0x2e, 0x9c, 0x8e, 0xf1, 0x4d, 0x1b, 0xbd, 0xa4, 0xb8, 0x90, 0x7e,
		0x40, 0x85, 0x87, 0xbf, 0x50, 0x24, 0x83, 0x85, 0x10, 0xef, 0x43, 0x25, 0xd1, 0x01, 0x43, 0xb7
	]);
	signature = new Uint8Array([
		0x92, 0x57, 0x90, 0x93, 0xd5, 0x34, 0x03, 0xc9, 0x64, 0xf0, 0x45, 0xfb, 0x79, 0x40, 0x65, 0x96,
		0x4c, 0xf9, 0x8f, 0x2d, 0xc9, 0x23, 0x63, 0x47, 0xbf, 0x5a, 0x75, 0x73, 0x42, 0xa5, 0x46, 0x44,
		0x3e, 0xc4, 0xe7, 0xc8, 0x85, 0xf9, 0x30, 0xe1, 0xd4, 0x69, 0x10, 0x73, 0xa5, 0x0b, 0xfb, 0xfa,
		0xf7, 0xfb, 0x71, 0xee, 0x7c, 0x8f, 0x79, 0x81, 0xab, 0x00, 0x99, 0x24, 0xc1, 0x57, 0x3f, 0x6b,
		0x92, 0xbf, 0xd6, 0x6f, 0x36, 0xe2, 0x2d, 0x5d, 0xe5, 0xe7, 0x07, 0xd8, 0x72, 0x47, 0xef, 0x24,
		0x22, 0x27, 0x0b, 0x77, 0x24, 0x74, 0x69, 0x9a, 0xe7, 0x7d, 0x77, 0x1c, 0x4a, 0x94, 0xca, 0xac,
		0xa8, 0x1d, 0x12, 0x33, 0x80, 0xaa, 0x09, 0xe4, 0x47, 0xf1, 0x38, 0x4a, 0xf3, 0xd8, 0xee, 0x07,
		0x6b, 0xa0, 0x59, 0x2a, 0x9b, 0x0d, 0x5e, 0x55, 0x0a, 0x16, 0xa9, 0xa6, 0x34, 0x82, 0xa0, 0x9c,
		0xa9, 0x54, 0x25, 0xa0, 0x5e, 0xb7, 0xc0, 0x2d, 0x37, 0x27, 0xf2, 0xeb, 0x64, 0xe7, 0xf7, 0x4b,
		0x03, 0x66, 0x82, 0x09, 0xe1, 0xa3, 0x2b, 0x72, 0x2d, 0x36, 0xe8, 0xb4, 0x61, 0x44, 0x51, 0xb2,
		0x25, 0x76, 0xb4, 0x64, 0x5f, 0x23, 0xad, 0x95, 0x39, 0x2a, 0x01, 0xd3, 0x6f, 0x30, 0xe5, 0x59,
		0x58, 0x64, 0x8b, 0xc6, 0xf7, 0x24, 0x54, 0x79, 0xf9, 0x49, 0x82, 0x19, 0x85, 0xd6, 0x69, 0x36,
		0xc1, 0x73, 0xfa, 0x5a, 0x9f, 0x0d, 0x77, 0x2c, 0xcf, 0xff, 0xad, 0x16, 0x10, 0xf8, 0x24, 0x7a,
		0x2e, 0x59, 0x8f, 0x5f, 0x7c, 0xcc, 0x25, 0x85, 0x79, 0xae, 0x46, 0xbe, 0xad, 0xb9, 0x4e, 0x7b,
		0x8f, 0x55, 0x85, 0x94, 0xf2, 0xf5, 0x46, 0xaa, 0x31, 0x77, 0x24, 0x7e, 0xbe, 0xfc, 0xfc, 0x99,
		0xf3, 0x06, 0xfc, 0xe4, 0x00, 0x66, 0xb3, 0xd7, 0x29, 0x00, 0xcb, 0x31, 0x2b, 0xe0, 0xa5, 0x80,
		0x62, 0xc3, 0x6d, 0x1b, 0x2d, 0x6a, 0x47, 0x67, 0x3b, 0x85, 0x99, 0xb4, 0xfa, 0xe4, 0x69, 0x86,
		0x50, 0x59, 0xb6, 0xe3, 0x8e, 0x1d, 0x6f, 0x0c, 0x06, 0x9d, 0xf6, 0x12, 0x68, 0xd3, 0x8d, 0x88,
		0x5d, 0xfa, 0x42, 0xd0, 0xdf, 0xc9, 0x65, 0x9b, 0xad, 0x66, 0x37, 0xfe, 0x76, 0x86, 0x5f, 0x50,
		0x9c, 0xd3, 0xb2, 0xab, 0xab, 0x37, 0xd5, 0x71, 0xae, 0xdc, 0x50, 0x68, 0xbe, 0x59, 0xaf, 0x0f,
		0x76, 0x78, 0xff, 0xa1, 0x40, 0x6e, 0xe2, 0x63, 0xe7, 0x62, 0x65, 0x72, 0x3f, 0xd4, 0xdb, 0x14,
		0xac, 0xf7, 0xec, 0x1b, 0xef, 0x3b, 0xdc, 0xe0, 0xdb, 0x1a, 0x97, 0x6e, 0x30, 0xf5, 0xf4, 0xa3,
		0x6e, 0x65, 0xa2, 0xe8, 0xb3, 0xce, 0x8b, 0xc9, 0xe6, 0xdf, 0x97, 0x0a, 0xf5, 0xb1, 0x49, 0xa1,
		0xd3, 0x09, 0x58, 0xc7, 0xef, 0x79, 0x80, 0x2a, 0x67, 0x28, 0xef, 0x1b, 0x0a, 0xd4, 0x7d, 0x79
	]);
	saltLength = 0;
	expect(
		verifyRSASSAPSSSignature(new RSAPublicKey(n, e), SHA512, SHA512, saltLength, message, signature)
	).toBe(false);
});
